#!/usr/bin/env ruby
# frozen_string_literal: true

require "rubygems"
require "bundler/setup"
require "pathname"
require "ruby_lsp/documentation_visitor"

DOCS_BASE_PATH = "#{__dir__}/../docs"
IGNORED_FILES = [
  "rubocop_request.rb",
].freeze

outdated_docs = []
command = ARGV.shift

unless command == "check" || command == "generate"
  puts "Invalid command #{command}. Valid commands are: check, generate"
  exit(1)
end

requests = Dir["#{__dir__}/../lib/ruby_lsp/requests/*.rb"].map { |f| Pathname.new(f) }
requests.each do |file|
  next if IGNORED_FILES.include?(file.basename.to_s)

  # Visit the parsed request file to gather the class documentation
  tree = SyntaxTree.parse(file.read)
  visitor = RubyLsp::DocumentationVisitor.new
  visitor.visit(tree)

  # Read existing documentation
  documentation_path = Pathname.new("#{DOCS_BASE_PATH}/#{file.basename.to_s.gsub(".rb", ".md")}")
  existing_documentation = documentation_path.exist? ? documentation_path.read : nil

  # Save outdated documentation for prompting the user to update them
  outdated_docs << documentation_path if existing_documentation.nil? || visitor.content != existing_documentation

  # If generating documentation, write the files
  File.write(documentation_path.to_s, visitor.content) if command == "generate" && visitor.documentation.any?
end

exit(0) if command == "generate"

if outdated_docs.empty?
  puts "Documentation is up to date"
  exit(0)
else
  puts <<~MESSAGE
    The following documentation files are outdated:

      #{outdated_docs.map(&:basename).join("\n  ")}

    Run `bin/documentation generate` to update them
  MESSAGE

  exit(1)
end
