#!/usr/bin/env ruby
# frozen_string_literal: true

# This executable checks if all automatic LSP requests run successfully on every Ruby file under the current directory

require "sorbet-runtime"

begin
  T::Configuration.default_checked_level = :never
  T::Configuration.call_validation_error_handler = ->(*) {}
  T::Configuration.inline_type_error_handler = ->(*) {}
  T::Configuration.sig_validation_error_handler = ->(*) {}
rescue
  nil
end

$LOAD_PATH.unshift(File.expand_path("../lib", __dir__))
require "ruby_lsp/internal"

T::Utils.run_all_sig_blocks

files = Dir.glob("#{Dir.pwd}/**/*.rb")

puts "Verifying that all automatic LSP requests execute successfully. This may take a while..."

errors = {}
store = RubyLsp::Store.new
message_queue = Thread::Queue.new
RubyLsp::Addon.load_addons(message_queue)
executor = RubyLsp::Executor.new(store, message_queue)

files.each_with_index do |file, index|
  uri = URI("file://#{file}")
  store.set(uri: uri, source: File.read(file), version: 1)

  # Executing any of the automatic requests will execute all of them, so here we just pick one
  result = executor.execute({
    method: "textDocument/documentSymbol",
    params: { textDocument: { uri: uri.to_s } },
  })

  error = result.error
  errors[file] = error if error
ensure
  store.delete(uri)
  print("\033[M\033[0KCompleted #{index + 1}/#{files.length}") unless ENV["CI"]
end

puts "\n"
message_queue.close

# Indexing
puts "Verifying that indexing executes successfully. This may take a while..."

index = RubyIndexer::Index.new
indexables = RubyIndexer.configuration.indexables

indexables.each_with_index do |indexable, i|
  result = Prism.parse(File.read(indexable.full_path))
  collector = RubyIndexer::Collector.new(index, result, indexable.full_path)
  collector.collect(result.value)
rescue => e
  errors[indexable.full_path] = e
ensure
  print("\033[M\033[0KIndexed #{i + 1}/#{indexables.length}") unless ENV["CI"]
end
puts "\n"

if errors.empty?
  puts "All operations completed successfully!"
  exit
end

puts <<~ERRORS
  Errors while executing:

  #{errors.map { |file, error| "#{file}: #{error.message}" }.join("\n")}
ERRORS
exit!
