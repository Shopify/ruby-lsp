var search_data = {"index":{"searchIndex":["abstractcontroller","actionnotfound","base","caching","classmethods","configmethods","fragments","classmethods","callbacks","classmethods","collector","doublerendererror","helpers","classmethods","missinghelpererror","railties","routeshelpers","rendering","translation","urlfor","classmethods","actioncable","channel","base","broadcasting","classmethods","callbacks","classmethods","channelstub","connectionstub","naming","classmethods","noninferrablechannelerror","periodictimers","classmethods","streams","testcase","behavior","classmethods","connection","assertions","authorization","unauthorizederror","base","identification","classmethods","internalchannel","noninferrableconnectionerror","streameventloop","taggedloggerproxy","testcase","behavior","classmethods","testconnection","testcookiejar","testrequest","helpers","actioncablehelper","remoteconnections","remoteconnection","invalididentifierserror","server","base","broadcasting","broadcaster","configuration","worker","activerecordconnectionmanagement","subscriptionadapter","async","asyncsubscribermap","base","postgresql","listener","redis","listener","subscribermap","test","testcase","testhelper","version","actioncontroller","api","apirendering","base","caching","conditionalget","classmethods","contentsecuritypolicy","classmethods","cookies","datastreaming","defaultheaders","classmethods","etagwithflash","etagwithtemplatedigest","flash","classmethods","formbuilder","classmethods","head","helpers","classmethods","httpauthentication","basic","controllermethods","classmethods","digest","controllermethods","token","controllermethods","implicitrender","instrumentation","classmethods","live","classmethods","clientdisconnected","sse","livetestresponse","logsubscriber","logging","classmethods","metal","mimeresponds","collector","missingrenderer","parameterencoding","classmethods","parametermissing","parameters","paramswrapper","options","classmethods","permissionspolicy","classmethods","railties","helpers","redirecting","unsaferedirecterror","renderer","renderers","all","classmethods","rendering","classmethods","requestforgeryprotection","classmethods","protectionmethods","exception","nullsession","resetsession","rescue","respondtomismatcherror","streaming","strongparameters","testcase","behavior","classmethods","testing","unfilteredparameters","unpermittedparameters","urlfor","actiondispatch","assertionresponse","assertions","responseassertions","routingassertions","callbacks","contentsecuritypolicy","middleware","request","cookies","chainedcookiejars","debugexceptions","debuglocks","exceptionwrapper","executor","filehandler","flash","flashhash","requestmethods","hostauthorization","http","cache","request","response","filterparameters","filterredirect","headers","mimenegotiation","invalidtype","parameters","classmethods","parseerror","url","uploadedfile","integration","requesthelpers","runner","session","integrationtest","behavior","classmethods","urloptions","journey","format","formatter","missingroute","routewithparams","parser","route","verbmatchers","all","unknown","middlewarestack","instrumentationproxy","middleware","permissionspolicy","middleware","request","publicexceptions","railsentitystore","rack","cache","entitystore","railsmetastore","rack","cache","metastore","reloader","remoteip","getip","ipspoofattackerror","request","requestcookiemethods","requestencoder","identityencoder","requestid","response","rackbody","routing","consoleformatter","base","expanded","sheet","htmltableformatter","mapper","base","concerns","customurls","httphelpers","resources","scoping","pathredirect","polymorphicroutes","redirection","routeset","customurlhelper","dispatcher","generator","mountedhelpers","namedroutecollection","urlhelper","optimizedurlhelper","staticdispatcher","urlfor","ssl","servertiming","session","abstractsecurestore","abstractstore","cachestore","compatibility","cookiestore","sessionid","memcachestore","stalesessioncheck","showexceptions","static","systemtestcase","systemtesting","testhelpers","screenshothelper","testprocess","fixturefile","testrequest","testresponse","actionmailbox","base","basecontroller","callbacks","engine","inboundemail","incineratable","incineration","messageid","routable","inboundemails","incinerationjob","ingresses","mailgun","inboundemailscontroller","authenticator","mandrill","inboundemailscontroller","authenticator","postmark","inboundemailscontroller","relay","inboundemailscontroller","sendgrid","inboundemailscontroller","relayer","result","router","route","routingerror","routing","routingjob","testcase","testhelper","version","actionmailer","base","lateattachmentsproxy","collector","deliverymethods","classmethods","inlinepreviewinterceptor","logsubscriber","mailhelper","messagedelivery","noninferrablemailererror","parameterized","classmethods","preview","previews","classmethods","rescuable","testcase","behavior","classmethods","cleartestdeliveries","testhelper","version","actiontext","attachable","attachables","contentattachment","missingattachable","remoteimage","attachment","attachmentgallery","attachments","caching","minification","trixconversion","attribute","content","contenthelper","encryptedrichtext","encryption","engine","fixtureset","fragment","htmlconversion","plaintextconversion","richtext","serialization","systemtesthelper","taghelper","trixattachment","version","actionview","abstractrenderer","renderedcollection","emptycollection","base","cacheexpiry","executor","viewmodificationwatcher","context","digestor","injected","missing","node","nulllogger","partial","filesystemresolver","fixtureresolver","helpers","activemodelhelper","activemodelinstancetag","assettaghelper","asseturlhelper","atomfeedhelper","cachehelper","uncacheablefragmenterror","capturehelper","csphelper","csrfhelper","datehelper","debughelper","formbuilder","formhelper","formoptionshelper","formtaghelper","javascripthelper","numberhelper","invalidnumbererror","outputsafetyhelper","renderinghelper","sanitizehelper","taghelper","tags","actiontext","texthelper","translationhelper","urlhelper","classmethods","layouts","classmethods","logsubscriber","lookupcontext","detailscache","viewpaths","nullresolver","partialiteration","partialrenderer","recordidentifier","renderer","rendering","classmethods","resolver","routingurlfor","template","handlers","builder","erb","html","raw","sources","file","types","type","templatedetails","requested","templatepath","testcase","behavior","classmethods","locals","renderedviewscollection","testcontroller","unboundtemplate","version","viewpaths","classmethods","activejob","arguments","hash","base","callbacks","classmethods","core","classmethods","deserializationerror","enqueueerror","enqueuing","classmethods","exceptions","classmethods","execution","classmethods","queueadapter","classmethods","queueadapters","asyncadapter","backburneradapter","delayedjobadapter","inlineadapter","queadapter","queueclassicadapter","resqueadapter","sidekiqadapter","sneakersadapter","suckerpunchadapter","testadapter","queuename","classmethods","queuepriority","classmethods","serializationerror","serializers","objectserializer","rangeserializer","testcase","testhelper","testqueueadapter","classmethods","version","activemodel","api","attributeassignment","attributemethods","classmethods","attributes","classmethods","callbacks","conversion","dirty","eachvalidator","error","errors","forbiddenattributeserror","lint","tests","missingattributeerror","model","name","naming","nestederror","rangeerror","securepassword","classmethods","instancemethodsonactivation","serialization","serializers","json","strictvalidationfailed","translation","type","boolean","helpers","acceptsmultiparametertime","instancemethods","mutable","numeric","timevalue","timezone","value","unknownattributeerror","version","validationerror","validations","acceptancevalidator","lazilydefineattributes","callbacks","classmethods","classmethods","helpermethods","validator","activerecord","activejobrequirederror","activerecorderror","adapternotfound","adapternotspecified","adaptertimeout","aggregations","classmethods","associationtypemismatch","associations","classmethods","collectionproxy","preloader","association","loaderquery","loaderrecords","asynchronousqueryinsidetransactionerror","attributeassignment","attributeassignmenterror","attributemethods","beforetypecast","classmethods","dirty","classmethods","primarykey","classmethods","query","read","serialization","classmethods","columnnotserializableerror","timezoneconversion","write","attributes","classmethods","autosaveassociation","base","batches","batchenumerator","calculations","callbacks","classmethods","configurationerror","connectionadapters","abstractadapter","version","abstractmysqladapter","column","columnmethods","connectionhandler","connectionpool","queue","reaper","databaselimits","databasestatements","deduplicable","classmethods","mysql","columnmethods","databasestatements","table","tabledefinition","mysql2adapter","nullcolumn","postgresql","altertable","columnmethods","databasestatements","oid","bit","data","quoting","schemastatements","table","tabledefinition","typemetadata","postgresqladapter","querycache","connectionpoolconfiguration","quoting","realtransaction","sqlite3","databasestatements","tabledefinition","sqlite3adapter","savepointtransaction","savepoints","schemacache","schemastatements","sqltypemetadata","table","tabledefinition","transactionstate","connectionhandling","connectionnotestablished","connectiontimeouterror","core","classmethods","inspectionmask","countercache","classmethods","dangerousattributeerror","databasealreadyexists","databaseconfigurations","hashconfig","invalidconfigurationerror","urlconfig","databaseconnectionerror","deadlocked","delegatedtype","destroyassociationasyncerror","destroyassociationasyncjob","dynamicmatchers","findby","findbybang","method","eagerloadpolymorphicerror","encryption","cipher","aes256gcm","config","configurable","context","contexts","derivedsecretkeyprovider","deterministickeyprovider","encryptablerecord","encryptedattributetype","encryptedfixtures","encryptingonlyencryptor","encryptor","envelopeencryptionkeyprovider","errors","base","configuration","decryption","encoding","encryptedcontentintegrity","encryption","forbiddenclass","extendeddeterministicqueries","additionalvalue","corequeries","encryptedqueryargumentprocessor","extendedencryptabletype","inwithadditionalvalues","relationqueries","extendeddeterministicuniquenessvalidator","encrypteduniquenessvalidator","key","keygenerator","keyprovider","message","messageserializer","nullencryptor","properties","readonlynullencryptor","scheme","enum","environmentmismatcherror","exclusiveconnectiontimeouterror","explain","findermethods","fixtureset","classcache","futureresult","eventbuffer","immutablerelation","inheritance","classmethods","integration","classmethods","invalidforeignkey","irreversiblemigration","irreversibleordererror","lockwaittimeout","locking","optimistic","classmethods","pessimistic","logsubscriber","middleware","databaseselector","shardselector","migration","checkpending","commandrecorder","compatibility","v4_2","tabledefinition","v5_0","tabledefinition","v5_1","v5_2","commandrecorder","tabledefinition","v6_0","referencedefinition","tabledefinition","v6_1","postgresqlcompat","tabledefinition","migrationcontext","mismatchedforeignkey","modelschema","classmethods","multiparameterassignmenterrors","nestedattributes","classmethods","toomanyrecords","nodatabaseerror","notouching","classmethods","notnullviolation","persistence","classmethods","preparedstatementcacheexpired","preparedstatementinvalid","queryaborted","querycache","classmethods","querycanceled","querylogs","querymethods","wherechain","querying","rangeerror","readonlyerror","readonlyrecord","readonlyattributes","classmethods","recordinvalid","recordnotdestroyed","recordnotfound","recordnotsaved","recordnotunique","reflection","classmethods","macroreflection","relation","recordfetchwarning","result","rollback","sanitization","classmethods","schema","definition","classmethods","scoping","default","classmethods","named","classmethods","securetoken","classmethods","minimumlengtherror","serialization","serializationfailure","serializationtypemismatch","signedid","classmethods","solerecordexceeded","spawnmethods","staleobjecterror","statementcache","partialquerycollector","statementinvalid","statementtimeout","store","classmethods","strictloadingviolationerror","subclassnotfound","suppressor","classmethods","tablenotspecified","tasks","databasetasks","testfixtures","classmethods","timestamp","transactionisolationerror","transactionrollbackerror","transactions","classmethods","translation","type","biginteger","binary","boolean","date","datetime","decimal","float","immutablestring","integer","internal","timezone","json","string","time","value","unknownattributeerror","unknownattributereference","unknownprimarykey","version","validations","classmethods","valuetoolong","wrappeddatabaseexception","activestorage","analyzejob","analyzer","audioanalyzer","imageanalyzer","imagemagick","vips","videoanalyzer","attached","many","model","one","attachment","basecontroller","basejob","blob","analyzable","identifiable","representable","blobs","proxycontroller","redirectcontroller","directuploadscontroller","diskcontroller","error","filenotfounderror","filename","fixtureset","integrityerror","invariableerror","logsubscriber","mirrorjob","preview","unprocessederror","previewerror","previewer","mupdfpreviewer","popplerpdfpreviewer","videopreviewer","purgejob","reflection","activerecordextensions","classmethods","representations","proxycontroller","redirectcontroller","service","azurestorageservice","diskservice","gcsservice","metadataservererror","metadataservernotfounderror","mirrorservice","s3service","setcurrent","streaming","transformers","imageprocessingtransformer","unsupportedimageprocessingargument","unsupportedimageprocessingmethod","transformer","unpreviewableerror","unrepresentableerror","version","variant","variantrecord","variantwithrecord","variation","activesupport","actionableerror","classmethods","nonactionable","arrayinquirer","autoload","backtracecleaner","benchmarkable","cache","coders","loader","rails61coder","rails70coder","connectionpoollike","filestore","memcachestore","coders","loader","rails61coder","rails70coder","duplocalcache","duplocalstore","memorystore","nullstore","rediscachestore","store","strategy","localcache","localstore","cachingkeygenerator","callbacks","calltemplate","instanceexec0","instanceexec1","instanceexec2","methodcall","objectcall","proccall","classmethods","conditionals","value","filters","after","before","codegenerator","methodset","comparewithrange","concern","concurrency","loadinterlockawaremonitor","sharelock","configurable","classmethods","configuration","configurationfile","formaterror","currentattributes","dependencies","interlock","requiredependency","deprecation","behavior","deprecatedconstantaccessor","deprecatedconstantproxy","deprecatedinstancevariableproxy","deprecatedobjectproxy","disallowed","methodwrapper","reporting","deprecationexception","descendantstracker","duration","iso8601parser","parsingerror","encryptedconfiguration","encryptedfile","invalidkeylengtherror","missingcontenterror","missingkeyerror","enumerablecoreext","constants","errorreporter","eventedfileupdatechecker","core","executionwrapper","executor","fileupdatechecker","forktracker","coreext","coreextprivate","moderncoreext","gzip","stream","hashwithindifferentaccess","hashwithindifferentaccess","inflector","inflections","uncountables","inheritableoptions","json","keygenerator","lazyloadhooks","logsubscriber","testhelper","mocklogger","logger","simpleformatter","loggersilence","messageencryptor","invalidmessage","messageverifier","invalidsignature","messages","rotator","encryptor","verifier","multibyte","chars","unicode","notifications","event","fanout","subscribers","eventobject","matcher","allmessages","instrumentationsubscribererror","instrumenter","numberhelper","numericwithformat","orderedoptions","parameterfilter","perthreadregistry","proxyobject","rangewithformat","reloader","rescuable","classmethods","safebuffer","safeconcaterror","securecomparerotator","securityutils","stringinquirer","subscriber","taggedlogging","testcase","testing","assertions","constantlookup","declarative","deprecation","filefixtures","isolation","forking","subprocess","parallelization","server","worker","setupandteardown","classmethods","timehelpers","timewithzone","timezone","version","xmlconverter","disallowedtype","xmlmini","xmlmini_libxmlsax","hashbuilder","xmlmini_nokogirisax","hashbuilder","arel","nodes","array","benchmark","bigdecimal","class","date","dateandtime","calculations","compatibility","zones","datetime","delegator","digest","uuid","erb","util","enumerable","soleitemexpectederror","exception","falseclass","file","float","hash","io","integer","kernel","loaderror","mail","address","message","method","mime","alltype","mimes","nulltype","type","invalidmimetype","minitest","backtracefilterwithfallback","suppressedsummaryreporter","module","concerning","delegationerror","nameerror","nilclass","numeric","object","pathname","process","rails","api","edgetask","repotask","stabletask","task","appbuilder","application","bootstrap","configuration","defaultmiddlewarestack","finisher","interlockhook","mutexhook","routesreloader","backtracecleaner","command","actions","base","db","system","helpers","editor","conductor","configuration","middlewarestackproxy","console","backtracecleaner","consolemethods","dbconsole","engine","configuration","railties","updater","generators","actions","activemodel","appbase","gemfileentry","appgenerator","base","benchmarkgenerator","db","system","migration","namedbase","testcase","testing","assertions","behaviour","classmethods","setupandteardown","info","initializable","classmethods","collection","initializer","paths","path","root","pluginbuilder","rack","logger","rails","conductor","actionmailbox","inboundemails","sourcescontroller","inboundemailscontroller","incineratescontroller","reroutescontroller","railtie","configurable","classmethods","configuration","secrets","missingkeyerror","server","options","sourceannotationextractor","annotation","version","range","regexp","securerandom","singleton","string","symbol","time","trueclass","uri","unboundmethod","!~()","%()","%()","*()","*()","+()","+()","+()","+()","-()","-()","-()","-()","-@()","/()","<<()","<<()","<<()","<<()","<<()","<<()","<<()","<<()","<=>()","<=>()","<=>()","<=>()","<=>()","<=>()","<=>()","<=>()","<=>()","<=>()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","===()","===()","===()","===()","===()","=~()","=~()","=~()","get()","post()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","_current_page?()","_dump()","_fork()","_get()","_helpers()","_helpers()","_helpers_for_modification()","_insert_callbacks()","_layout_for()","_layout_for()","_normalize_args()","_normalize_callback_options()","_normalize_options()","_prepare_context()","_process_options()","_render_to_body_with_renderer()","_render_with_renderer_method_name()","_routes()","_routes()","_routes()","_routes()","_routes_context()","_run()","_set_detail()","_set_wrapper_options()","_test_case()","_to_partial_path()","_url_for_modules()","_view_paths()","_view_paths=()","_with_routes()","abort()","abstract!()","abstract_class?()","abstract_railtie?()","accept=()","accept?()","accept?()","accept?()","accept?()","accept?()","accept?()","accept?()","accept?()","accept?()","accept?()","accept_header()","accepts()","accepts_nested_attributes_for()","accessed_fields()","accessor()","acronym()","action()","action()","action=()","action_cable_meta_tag()","action_has_layout?()","action_methods()","action_methods()","action_methods()","action_methods()","action_name()","active?()","active?()","active?()","active?()","active_connection?()","active_connections?()","active_primary_key()","active_workers?()","acts_like?()","acts_like_date?()","acts_like_date?()","acts_like_string?()","acts_like_time?()","acts_like_time?()","acts_like_time?()","adapter()","adapter_name()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add_belongs_to()","add_bind()","add_binds()","add_channel()","add_channel()","add_channel()","add_check_constraint()","add_child()","add_column()","add_delivery_method()","add_event_subscriber()","add_filter()","add_flash_types()","add_foreign_key()","add_index()","add_length_validation_for_encrypted_columns()","add_reference()","add_renderer()","add_route()","add_routes()","add_shebang_option!()","add_silencer()","add_source()","add_subscriber()","add_subscriber()","add_tags()","add_timestamps()","add_transaction_record()","added?()","advance()","advance()","advance()","advance()","after()","after()","after()","after?()","after_action()","after_bundle()","after_class_unload()","after_commit()","after_create()","after_create_commit()","after_destroy()","after_destroy_commit()","after_enqueue()","after_find()","after_fork()","after_initialize()","after_initialize()","after_perform()","after_processing()","after_reset()","after_rollback()","after_save()","after_save_commit()","after_subscribe()","after_teardown()","after_touch()","after_unsubscribe()","after_update()","after_update_commit()","after_validation()","aggregated_results()","ago()","ago()","ago()","ago()","ago()","alert()","alert=()","alias_attribute()","alias_attribute()","all()","all()","all()","all()","all()","all()","all?()","all?()","all_connection_pools()","all_day()","all_foreign_keys_valid?()","all_helpers_from_path()","all_month()","all_paths()","all_quarter()","all_week()","all_year()","allocations()","allow()","analyze()","analyze_later()","analyze_later?()","analyzed?()","and()","annotate()","annotations()","announce()","anonymous?()","any()","any()","any?()","any?()","any?()","any?()","any_authenticity_token_valid?()","any_response?()","any_templates?()","any_waiting?()","api_dir()","api_main()","api_only!()","api_only=()","api_only?()","app()","app()","app()","app()","app()","app()","app=()","app_generators()","app_middleware()","append()","append_after_action()","append_around_action()","append_attachables()","append_before_action()","append_info_to_payload()","append_view_path()","append_view_path()","application()","application()","application_name()","application_trace()","apply()","arguments()","around_action()","around_create()","around_destroy()","around_enqueue()","around_perform()","around_processing()","around_save()","around_update()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","assert_broadcast_on()","assert_broadcast_on()","assert_broadcasts()","assert_broadcasts()","assert_changes()","assert_class_method()","assert_deprecated()","assert_difference()","assert_directory()","assert_emails()","assert_enqueued_email_with()","assert_enqueued_emails()","assert_enqueued_jobs()","assert_enqueued_with()","assert_field_default_value()","assert_field_type()","assert_file()","assert_generates()","assert_has_stream()","assert_has_stream_for()","assert_instance_method()","assert_method()","assert_migration()","assert_no_broadcasts()","assert_no_changes()","assert_no_difference()","assert_no_directory()","assert_no_emails()","assert_no_enqueued_emails()","assert_no_enqueued_jobs()","assert_no_file()","assert_no_migration()","assert_no_performed_jobs()","assert_no_streams()","assert_not()","assert_not_deprecated()","assert_nothing_raised()","assert_performed_jobs()","assert_performed_with()","assert_recognizes()","assert_redirected_to()","assert_reject_connection()","assert_response()","assert_routing()","assert_valid_keys()","assert_valid_value()","assert_valid_value()","asset_path()","asset_url()","assets_manifest()","assign_attributes()","assigns()","assoc()","assoc()","associated()","assume_migrated_upto_version()","at()","at()","at()","at_beginning_of_day()","at_beginning_of_day()","at_beginning_of_day()","at_beginning_of_hour()","at_beginning_of_hour()","at_beginning_of_minute()","at_beginning_of_minute()","at_beginning_of_month()","at_beginning_of_quarter()","at_beginning_of_week()","at_beginning_of_year()","at_end_of_day()","at_end_of_day()","at_end_of_day()","at_end_of_hour()","at_end_of_hour()","at_end_of_minute()","at_end_of_minute()","at_end_of_month()","at_end_of_quarter()","at_end_of_week()","at_end_of_year()","at_midday()","at_midday()","at_midday()","at_middle_of_day()","at_middle_of_day()","at_middle_of_day()","at_midnight()","at_midnight()","at_midnight()","at_noon()","at_noon()","at_noon()","at_with_coercion()","at_without_coercion()","atom_feed()","atomic_write()","attach()","attach()","attach()","attach_to()","attachable_content_type()","attachable_filename()","attachable_filesize()","attachable_metadata()","attachable_plain_text_representation()","attachable_plain_text_representation()","attachable_plain_text_representation()","attachable_sgid()","attachables()","attached?()","attached?()","attachment()","attachment()","attachment_galleries()","attachment_selector()","attachments()","attachments()","attachments()","attachments()","attachments()","attempt()","attr_internal()","attr_internal_accessor()","attr_internal_reader()","attr_internal_writer()","attr_readonly()","attribute()","attribute()","attribute()","attribute_alias()","attribute_alias?()","attribute_before_last_save()","attribute_change_to_be_saved()","attribute_for_inspect()","attribute_in_database()","attribute_method?()","attribute_method?()","attribute_method_affix()","attribute_method_prefix()","attribute_method_suffix()","attribute_missing()","attribute_names()","attribute_names()","attribute_names()","attribute_names()","attribute_present?()","attributes()","attributes()","attributes=()","attributes_before_type_cast()","attributes_for_database()","attributes_for_hash()","attributes_in_database()","attributes_names()","audio?()","audio_path()","audio_tag()","audio_url()","auth_param()","auth_scheme()","authenticate()","authenticate()","authenticate()","authenticate_or_request_with_http_basic()","authenticate_or_request_with_http_digest()","authenticate_or_request_with_http_token()","authenticate_with_http_basic()","authenticate_with_http_digest()","authenticate_with_http_token()","authenticated?()","authenticated?()","authentication_header()","authentication_request()","authentication_request()","authentication_request()","authorization()","auto_discovery_link_tag()","autoload()","autoload_at()","autoload_once()","autoload_once_paths()","autoload_paths()","autoload_paths()","autoload_under()","autoloaders()","autoloads()","autosave=()","available_action?()","average()","await_commit()","await_sent()","backend()","backend=()","backtrace_cleaner()","banner()","banner()","base()","base36()","base58()","base_class?()","base_name()","base_name()","base_root()","batch_size()","bcc_addresses()","beat()","becomes()","becomes!()","before()","before()","before()","before?()","before_action()","before_class_unload()","before_configuration()","before_create()","before_destroy()","before_eager_load()","before_enqueue()","before_initialize()","before_perform()","before_processing()","before_reset()","before_save()","before_subscribe()","before_unsubscribe()","before_update()","before_validation()","begin_db_transaction()","begin_isolated_db_transaction()","beginning_of_day()","beginning_of_day()","beginning_of_day()","beginning_of_hour()","beginning_of_hour()","beginning_of_minute()","beginning_of_minute()","beginning_of_month()","beginning_of_quarter()","beginning_of_week()","beginning_of_week()","beginning_of_week=()","beginning_of_year()","behavior()","behavior=()","belongs_to()","belongs_to()","belongs_to()","belongs_to()","belongs_to?()","benchmark()","between?()","bigserial()","bin()","bin()","bin_when_updating()","binary?()","bind()","bind_locals()","bit()","bit_varying()","blank?()","blank?()","blank?()","blank?()","blank?()","blank?()","blank?()","blank?()","blank?()","blob()","blob()","blobs()","block_all_mixed_content()","block_format()","body()","body()","body()","body()","body=()","body_parts()","bounce_with()","box()","broadcast()","broadcast()","broadcast()","broadcast()","broadcast()","broadcast_to()","broadcaster_for()","broadcasting_for()","broadcasts()","build()","build()","build()","build()","build()","build()","build()","build()","build()","build()","build()","build_instrumented()","build_queue()","build_response()","build_stack()","build_tag_values()","build_view_context_class()","button()","button_tag()","button_to()","byte()","bytes()","cache()","cache()","cache()","cache()","cache_dump_filename()","cache_fixtures()","cache_for_connection()","cache_fragment_name()","cache_if()","cache_key()","cache_key()","cache_key()","cache_key_with_version()","cache_key_with_version()","cache_message()","cache_store()","cache_store=()","cache_template_loading()","cache_template_loading=()","cache_unless()","cache_version()","cache_version()","cached_fixtures()","caching?()","calculate()","calculate()","calculate_ip()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call_app()","camelcase()","camelize()","camelize()","caption()","capture()","cast()","cast()","cast_value()","cast_value()","cattr_accessor()","cattr_reader()","cattr_writer()","cc_addresses()","cdata_block()","cdata_section()","ceil()","change()","change()","change()","change()","change()","change()","change_column()","change_column_comment()","change_column_default()","change_column_null()","change_default()","change_null()","change_table()","change_table_comment()","changed()","changed?()","changed?()","changed?()","changed_attribute_names_to_save()","changed_attributes()","changed_for_autosave?()","changed_in_place?()","changed_in_place?()","changed_in_place?()","changed_in_place?()","changes()","changes_applied()","changes_to_save()","channel_class()","channel_name()","characters()","charset()","charset()","charset()","charset=()","charset_current()","check_box()","check_box()","check_box_tag()","check_class_collision()","check_constraint()","check_constraint()","check_constraints()","check_constraints()","check_pending!()","check_protected_environments!()","check_schema_file()","check_target_version()","check_validity!()","checkin()","checkout()","checkout_timeout()","children()","cidr()","ciphertext_for()","circle()","citext()","civil_from_format()","class()","class_attribute()","class_eval()","class_methods()","class_name()","class_names()","class_path()","classify()","classify()","clean()","cleanup()","cleanup()","cleanup()","cleanup()","cleanup()","cleanup_view_runtime()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear!()","clear_action_methods!()","clear_action_methods!()","clear_active_connections!()","clear_all_connections!()","clear_attribute_changes()","clear_cache()","clear_cache()","clear_cache!()","clear_changes_information()","clear_data_source_cache!()","clear_helpers()","clear_messages()","clear_query_cache()","clear_query_caches_for_current_thread()","clear_reloadable_connections()","clear_reloadable_connections!()","clear_reloadable_connections!()","clear_schema_cache()","clear_validators!()","client_min_messages()","client_min_messages=()","clone()","clone_empty()","close()","close()","close()","close()","close()","close()","close()","code()","code_and_name()","collation()","collation()","collation()","collation_current()","collect_deprecations()","collection()","collection_check_boxes()","collection_check_boxes()","collection_radio_buttons()","collection_radio_buttons()","collection_select()","collection_select()","color()","color_field()","color_field()","color_field_tag()","colorize_logging()","colorize_logging=()","column()","column()","column()","column_defaults()","column_exists?()","column_exists?()","column_for_attribute()","column_name_matcher()","column_name_with_order_matcher()","column_names()","columns()","columns()","columns()","columns()","columns_hash()","columns_hash?()","combined_fragment_cache_key()","command_name()","command_type()","command_type()","commit()","commit()","commit!()","commit!()","commit_db_transaction()","commit_flash()","committed?()","committed?()","compact()","compact()","compact()","compact!()","compact_blank()","compact_blank()","compact_blank!()","compact_blank!()","comparable_time()","compare_with_coercion()","compare_with_coercion()","compare_with_global_token()","compare_with_real_token()","compare_without_coercion()","compare_without_coercion()","compile_methods!()","compile_methods!()","compiled_method_container()","complete()","complete()","complete()","complete()","complete!()","completed?()","component_root_dir()","compose()","compose()","compose()","compose()","compose()","compose()","compose()","compose()","composed_of()","compress()","compute_asset_extname()","compute_asset_host()","compute_asset_path()","compute_class()","compute_tags()","compute_type()","concat()","concat()","concat()","concat()","concern()","concern()","concern()","concerning()","concerns()","config()","config()","config()","config()","config()","config()","config()","config()","config_accessor()","config_for()","config_target_version()","config_when_updating()","configru()","configs_for()","configuration()","configurations()","configurations()","configurations=()","configure()","configure()","configure()","configure()","configure_rdoc_files()","configure_sdoc()","configure_sdoc()","confirmed?()","connect()","connected?()","connected?()","connected?()","connected_to()","connected_to?()","connected_to_many()","connecting_to()","connection()","connection()","connection()","connection_class()","connection_db_config()","connection_handler()","connection_handler()","connection_handler=()","connection_handlers()","connection_handlers=()","connection_identifier()","connection_identifier()","connection_identifiers()","connection_pool()","connection_pool_list()","connection_pools()","connection_specification_name()","connections()","connects_to()","console()","console()","const_missing()","constantize()","constantize()","constraints()","content_columns()","content_for()","content_for?()","content_length()","content_mime_type()","content_security_policy()","content_security_policy()","content_security_policy()","content_security_policy=()","content_security_policy_nonce()","content_security_policy_nonce_directives()","content_security_policy_nonce_directives=()","content_security_policy_nonce_generator()","content_security_policy_nonce_generator=()","content_security_policy_report_only()","content_security_policy_report_only()","content_security_policy_report_only=()","content_tag()","content_tag()","content_type()","content_type()","content_type()","content_type()","content_type=()","content_type=()","context()","context_class()","context_class()","controller()","controller()","controller_class()","controller_class()","controller_class=()","controller_class_for()","controller_class_name()","controller_name()","controller_name()","controller_name()","controller_path()","controller_path()","controller_path()","controller_path=()","converted_arrays()","cookie_jar()","cookies()","cookies()","cookies()","cookies()","cookies()","cookies()","copy()","count()","count()","count_by_sql()","country_zones()","cpu_time()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create!()","create!()","create!()","create_all()","create_and_extract_message_id!()","create_and_upload!()","create_and_upload_raw_email!()","create_before_direct_upload!()","create_current()","create_database()","create_database()","create_element()","create_enum()","create_fixtures()","create_generated_attribute()","create_inbound_email_from_fixture()","create_inbound_email_from_mail()","create_inbound_email_from_source()","create_join_table()","create_migration()","create_or_find_by()","create_or_find_by!()","create_savepoint()","create_schema()","create_session()","create_table()","create_unlogged_tables()","create_with()","credentials()","credentials()","csp_meta_tag()","csrf_meta_tag()","csrf_meta_tags()","csrf_token_hmac()","ctype()","current()","current()","current()","current_custom_context()","current_cycle()","current_database()","current_database()","current_hash()","current_hash()","current_page?()","current_preventing_writes()","current_role()","current_savepoint_name()","current_schema()","current_shard()","current_version()","custom()","custom()","custom_metadata()","custom_metadata=()","cycle()","dangerous_attribute_method?()","dangerous_class_method?()","dasherize()","dasherize()","data()","data_source_exists?()","data_source_exists?()","data_sources()","data_sources()","database()","database()","database_configuration()","database_exists?()","database_exists?()","database_exists?()","database_exists?()","database_yml()","date()","date=()","date?()","date_field()","date_field()","date_field_tag()","date_select()","date_select()","daterange()","datetime_field()","datetime_field()","datetime_field_tag()","datetime_local_field()","datetime_local_field()","datetime_local_field_tag()","datetime_select()","datetime_select()","datetime_type()","day()","days()","days_ago()","days_in_month()","days_in_year()","days_since()","days_to_week_start()","db()","db_config()","db_dir()","db_error()","db_when_updating()","debug()","debug()","debug_exception_response_format()","decode()","decode()","decode_credentials()","decode_credentials()","decode_credentials_header()","decompose()","decompose()","decompress()","deconstantize()","deconstantize()","decrement()","decrement()","decrement()","decrement()","decrement()","decrement()","decrement()","decrement!()","decrement_counter()","decrypt()","decrypt()","decrypt()","decrypt()","decrypt()","decrypt()","decrypt()","decrypt()","decrypt_and_verify()","decrypt_and_verify()","decryption_keys()","decryption_keys()","deduplicate()","deep_dup()","deep_dup()","deep_dup()","deep_dup()","deep_merge()","deep_merge!()","deep_stringify_keys()","deep_stringify_keys()","deep_stringify_keys()","deep_stringify_keys!()","deep_stringify_keys!()","deep_stringify_keys!()","deep_symbolize_keys()","deep_symbolize_keys()","deep_symbolize_keys()","deep_symbolize_keys!()","deep_transform_keys()","deep_transform_keys()","deep_transform_keys!()","deep_transform_keys!()","deep_transform_values()","deep_transform_values!()","default()","default()","default()","default_aliases_for_option()","default_command_root()","default_for_option()","default_form_builder()","default_form_builder()","default_generator_root()","default_i18n_subject()","default_inspect()","default_inspect()","default_log_file()","default_options()","default_options=()","default_schema_cache_path()","default_scope()","default_scoped()","default_scopes?()","default_sequence_name()","default_source_root()","default_timezone()","default_to()","default_url_options()","default_url_options()","default_url_options=()","default_url_options=()","default_value_for_option()","defaults()","defer_subscription_confirmation!()","defer_subscription_confirmation?()","define()","define()","define_attribute()","define_attribute_method()","define_attribute_methods()","define_cached_method()","define_callbacks()","define_model_callbacks()","define_on()","delegate()","delegate_missing_to()","delegate_to()","delegated_type()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete!()","delete_all()","delete_all()","delete_all()","delete_by()","delete_entry()","delete_header()","delete_if()","delete_if()","delete_matched()","delete_matched()","delete_matched()","delete_matched()","delete_matched()","delete_multi()","delete_prefixed()","delete_prefixed()","delete_prefixed()","delete_prefixed()","delete_prefixed()","delete_prefixed()","delete_session()","delete_session()","deliver()","deliver_later()","deliver_later!()","deliver_now()","deliver_now!()","demodulize()","demodulize()","dependency_digest()","deprecate()","deprecate()","deprecate_constant()","deprecate_methods()","deprecation_warning()","derive_from()","derive_key_from()","desc()","desc()","desc()","descendants()","descendants()","descendants()","descends_from_active_record?()","deserialize()","deserialize()","deserialize()","deserialize()","deserialize()","deserialize()","deserialize()","deserialize()","deserialize()","destination()","destroy()","destroy()","destroy()","destroy()","destroy!()","destroy_all()","destroy_all()","destroy_all()","destroy_by()","destroyed?()","destroyed_by_association()","destroyed_by_association=()","detach()","detach()","detach()","detach_from()","detail()","detail_args_for()","details()","details()","details_for_lookup()","determine_default_channel()","determine_default_connection()","determine_default_controller_class()","determine_default_helper_class()","determine_default_mailer()","deterministic?()","deterministic_encrypted_attributes()","dig()","dig()","dig()","digest()","digest()","digest()","digest()","digest()","direct()","direct_descendants()","direct_descendants()","directories()","dirties_query_cache()","disable_cache()","disable_ddl_transaction!()","disable_extension()","disable_extension()","disable_query_cache!()","disable_query_cache!()","disable_referential_integrity()","disable_test_adapter()","disallowed_behavior()","disallowed_behavior=()","disallowed_warnings()","discard()","discard!()","discard_on()","disconnect()","disconnect()","disconnect()","disconnect()","disconnect!()","disconnect!()","disconnect!()","disconnect!()","disconnect!()","dispatch()","display()","distance_of_time_in_words()","distance_of_time_in_words_to_now()","distinct()","distinct()","document_root_element()","dom_class()","dom_id()","domain()","done_running()","done_unloading()","down()","downcase?()","download()","download()","download()","download()","download()","download()","download()","download()","download_blob_to_tempfile()","download_blob_to_tempfile()","download_chunk()","download_chunk()","download_chunk()","download_chunk()","download_chunk()","download_chunk()","draw()","draw()","driven_by()","drop()","drop_all()","drop_current()","drop_join_table()","drop_schema()","drop_table()","drop_table()","dst?()","dump()","dump()","dump()","dump()","dump()","dump_compressed()","dump_compressed()","dump_compressed()","dump_schema_cache()","dump_to()","dup()","dup()","dup()","duplicable?()","duplicable?()","duplicable?()","duplicable?()","duration()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each_key()","each_nested_attribute()","each_pair()","each_record()","each_value()","eager_autoload()","eager_load()","eager_load()","eager_load!()","eager_load!()","eager_load!()","eager_load!()","eager_load_namespaces()","eager_load_paths()","eager_loading?()","edit_helper()","email_address_with_name()","email_address_with_name()","email_exists?()","email_field()","email_field()","email_field_tag()","emails()","empty()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty_insert_statement_value()","emulate_booleans()","enable_extension()","enable_extension()","enable_query_cache!()","enable_query_cache!()","enable_test_adapter()","enable_warnings()","encode()","encode()","encode!()","encode_credentials()","encode_credentials()","encode_credentials()","encode_params()","encode_with()","encode_with()","encode_with()","encode_with()","encoding()","encoding()","encoding=()","encrypt()","encrypt()","encrypt()","encrypt()","encrypt()","encrypt()","encrypt()","encrypt_and_sign()","encrypt_attribute()","encrypted()","encrypted()","encrypted()","encrypted?()","encrypted?()","encrypted?()","encrypted_attribute?()","encryption_aware_type_caster()","encryption_key()","encryption_key()","encrypts()","end_document()","end_element()","end_of_day()","end_of_day()","end_of_day()","end_of_hour()","end_of_hour()","end_of_minute()","end_of_minute()","end_of_month()","end_of_quarter()","end_of_week()","end_of_year()","endpoint()","endpoint()","engine?()","enlist_fixture_connections()","enqueue()","enqueued_jobs()","ensure_confirmation_sent()","enum()","enum()","enum_types()","enumerate()","env()","env()","env()","env=()","env_config()","env_config()","env_filter()","environment()","environment()","environment()","environment?()","eof?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql_with_coercion()","eql_without_coercion()","error()","error()","error()","error_message()","error_number()","error_reporter()","error_wrapping()","errors()","errors()","escape_bytea()","escape_javascript()","escape_once()","establish_connection()","establish_connection()","etag()","etag=()","etag?()","etag_matches?()","event_loop()","exabyte()","exabytes()","except()","except()","except()","except()","except()","except!()","exception_trace()","excerpt()","exclude?()","exclude?()","excluded_from_filter_parameters?()","excluding()","excluding()","excluding()","exclusive()","exec_delete()","exec_insert()","exec_migration()","exec_queries()","exec_query()","exec_rollback_to_savepoint()","exec_update()","executable()","execute()","execute()","execute()","execute()","execute()","execute_command()","execute_if_updated()","execute_if_updated()","exist?()","exist?()","exist?()","exist?()","exist?()","exist?()","exist?()","existence()","existent()","existent_directories()","exists?()","exists?()","exists?()","exists?()","expand()","expand()","expand()","expand()","expand()","expand()","expand_cache_key()","expanded()","expected_response()","expire()","expire_fragment()","expires_in()","expires_now()","explain()","explain()","explain()","explain()","extended()","extending()","extension()","extension_available?()","extension_enabled?()","extension_with_delimiter()","extension_without_delimiter()","extensions()","extensions()","extensions()","extify()","extract!()","extract!()","extract!()","extract_annotations_from()","extract_associated()","extract_domain()","extract_last_module()","extract_message_id()","extract_options!()","extract_session_id()","extract_subdomain()","extract_subdomains()","extractable_options?()","extractable_options?()","extractable_options?()","extractable_options?()","failure?()","fallbacks()","favicon_link_tag()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch_entry()","fetch_multi()","fetch_values()","fetch_values()","ffmpeg_exists?()","ffmpeg_path()","field_id()","field_id()","field_name()","field_name()","field_set_tag()","fields()","fields()","fields_for()","fields_for()","fifth()","fifth()","fifth()","fifth!()","file_field()","file_field()","file_field_tag()","file_fixture()","file_lookup_paths()","file_lookup_paths()","file_path()","filename()","filename()","fill_in_rich_text_area()","filter()","filter()","filter()","filter_attributes()","filter_attributes=()","filter_backtrace()","filter_param()","filter_proxies()","filtered_env()","filtered_parameters()","filtered_path()","filtered_query_string()","finalized?()","find()","find()","find()","find()","find()","find()","find()","find_all()","find_all()","find_all()","find_attachment_gallery_nodes()","find_beginning_of_week!()","find_by()","find_by()","find_by!()","find_by_sql()","find_cmd_and_exec()","find_db_config()","find_each()","find_in()","find_in_batches()","find_or_create_by()","find_or_create_by()","find_or_create_by!()","find_or_create_by!()","find_or_initialize_by()","find_root()","find_root()","find_session()","find_signed()","find_signed()","find_signed!()","find_signed!()","find_sole_by()","find_template()","find_templates()","find_tzinfo()","find_zone()","find_zone!()","finder()","finder()","finish()","finish()","finish()","finish()","finish()","finish!()","finish_with_state()","first()","first()","first()","first()","first!()","first?()","fixed?()","fixed_length_secure_compare()","fixture_file_name()","fixture_file_upload()","fixture_is_cached?()","fixtures()","fixtures_path()","flash()","flash()","flash=()","floats()","floor()","flush()","flush()","flush()","flush()","flush!()","flush_all!()","flush_idle_connections!()","follow_redirect!()","font_path()","font_url()","for()","for_each()","foreign_key()","foreign_key()","foreign_key()","foreign_key()","foreign_key_exists?()","foreign_key_exists?()","foreign_keys()","foreign_keys()","foreign_keys()","foreign_keys()","foreign_table_exists?()","foreign_tables()","forking_env?()","form_authenticity_param()","form_authenticity_token()","form_data?()","form_for()","form_tag()","form_with()","format()","format()","format=()","format_from_path_extension()","format_paragraph()","formats()","formats()","formats=()","formatted_offset()","formatted_offset()","formatted_offset()","formatted_offset()","fortnight()","fortnights()","forty_two()","forty_two()","forty_two()","forty_two!()","fourth()","fourth()","fourth()","fourth!()","fragment_by_canonicalizing_attachment_galleries()","fragment_by_canonicalizing_attachments()","fragment_by_canonicalizing_content()","fragment_by_converting_trix_attachments()","fragment_by_minifying_attachments()","fragment_by_replacing_attachment_gallery_nodes()","fragment_cache_key()","fragment_exist?()","fragment_for_html()","framework_trace()","freeze()","freeze()","freeze_time()","fresh?()","fresh_when()","from()","from()","from()","from_address()","from_attachable()","from_attachable_sgid()","from_attachable_sgid()","from_attachables()","from_attributes()","from_attributes()","from_hash()","from_html()","from_json()","from_node()","from_node()","from_node()","from_node()","from_node()","from_now()","from_rails_root()","from_response()","from_source()","from_trix_attachment()","from_trusted_xml()","from_xml()","frozen?()","full_attributes()","full_commit!()","full_message()","full_message()","full_messages()","full_messages_for()","full_rollback!()","full_rollback?()","full_trace()","full_url_for()","fullpath()","fully_committed?()","fully_completed?()","fully_rolledback?()","future?()","future?()","gallery_attachments()","gem()","gem_group()","gem_version()","gem_version()","gem_version()","gem_version()","gem_version()","gem_version()","gem_version()","gem_version()","gem_version()","gem_version()","gem_version()","gemfile()","gemfile()","gemfile_entry()","gemspec()","generate()","generate()","generate_key()","generate_key()","generate_key()","generate_layout()","generate_message()","generate_method_for_mime()","generate_missing_message_id()","generate_random_hex_key()","generate_random_key()","generate_sid()","generate_sid()","generate_test_dummy()","generate_unique_secure_token()","generate_unique_secure_token()","generated_path()","generator()","generator()","generator_name()","generators()","generators()","generators()","get()","get()","get()","get_header()","getgm()","getgm()","getlocal()","getlocal()","getutc()","getutc()","gigabyte()","gigabytes()","git()","gitattributes()","github()","github()","gitignore()","gitignore()","global_csrf_token()","global_previous_schemes_for()","gmt?()","gmt_offset()","gmtime()","gmtime()","gmtoff()","grapheme_length()","group()","group_by_attribute()","grouped_collection_select()","grouped_collection_select()","grouped_options_for_select()","groups()","h()","ha1()","halted_callback()","handle()","handle_unverified_request()","handle_unverified_request()","handle_unverified_request()","handle_unverified_request()","handles_encoding?()","has_and_belongs_to_many()","has_attribute?()","has_attribute?()","has_basic_credentials?()","has_changes_to_save?()","has_header?()","has_key?()","has_key?()","has_key?()","has_key?()","has_many()","has_many_attached()","has_named_route?()","has_one()","has_one_attached()","has_rich_text()","has_secure_password()","has_secure_token()","has_value?()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash_digest_class()","hash_digest_class=()","having()","head()","head()","head()","header()","header()","header()","headers()","headers()","headers_for_direct_upload()","headers_for_direct_upload()","headers_for_direct_upload()","headers_for_direct_upload()","headers_for_direct_upload()","health_check()","help()","help()","helper()","helper()","helper_attr()","helper_class()","helper_method()","helper_method()","helpers()","helpers()","helpers()","helpers_paths()","hex?()","hidden_field()","hidden_field()","hidden_field_tag()","hidden_namespaces()","hide!()","hide_command!()","hide_namespace()","hide_namespaces()","high_precision_current_timestamp()","high_precision_current_timestamp()","high_precision_current_timestamp()","high_precision_current_timestamp()","highlight()","hook_for()","host()","host()","host()","host=()","host_with_port()","hostname_error()","hour()","hours()","hstore()","html?()","html?()","html_document()","html_escape()","html_escape_once()","html_safe()","html_safe?()","html_safe?()","html_safe?()","http_auth_salt()","http_basic_authenticate_or_request_with()","http_basic_authenticate_with()","http_cache_forever()","httpdate()","https!()","https?()","human()","human()","human_attribute_name()","human_name()","humanize()","humanize()","i18n_scope()","i18n_scope()","id()","id()","id()","id=()","id?()","id_before_type_cast()","id_in_database()","id_was()","identified?()","identified_by()","identifier()","identify()","identify()","identify_without_saving()","idle_time()","idle_timeout()","ids()","if_modified_since()","if_modified_since=()","if_none_match()","if_none_match=()","if_none_match_etags()","ignore_case?()","ignored_columns()","ignored_columns=()","image()","image()","image()","image?()","image_path()","image_submit_tag()","image_tag()","image_url()","immutable_strings_by_default=()","implicit_order_column()","implicit_order_column=()","import()","in()","in()","in()","in()","in?()","in_batches()","in_days()","in_groups()","in_groups_of()","in_hours()","in_milliseconds()","in_minutes()","in_months()","in_order_of()","in_order_of()","in_rendering_context()","in_seconds()","in_time_zone()","in_time_zone()","in_time_zone()","in_weeks()","in_years()","incinerate()","incinerate_later()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","included()","included()","included()","includes()","includes_column?()","including()","including()","increment()","increment()","increment()","increment()","increment()","increment()","increment()","increment!()","increment_counter()","increment_load_index()","indent()","indent()","indent!()","indentation()","index()","index()","index()","index_algorithms()","index_algorithms()","index_algorithms()","index_by()","index_exists?()","index_exists?()","index_helper()","index_name_exists?()","index_name_exists?()","index_name_length()","index_with()","indexes()","indexes()","inet()","inflections()","inheritable_copy()","inherited()","inherited()","inherited()","inherited()","inherited()","inherited()","inherited()","inherited()","inherited()","inherited()","init_with()","init_with()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_dup()","initialize_dup()","initialize_load_schema_monitor()","initialize_sid()","initialized?()","initializer()","initializer()","initializer()","initializers()","initializers()","initializers_chain()","initializers_for()","inline()","inquiry()","inquiry()","insert()","insert()","insert()","insert()","insert()","insert!()","insert_after()","insert_after()","insert_all()","insert_all!()","insert_before()","insert_before()","insert_fixture()","insert_fixtures_set()","inside_template()","inside_template?()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","install_executor_hooks()","install_support()","install_support()","instance()","instance()","instance()","instance()","instance()","instance()","instance_method_already_implemented?()","instance_method_already_implemented?()","instance_or_fallback()","instance_values()","instance_variable_names()","instantiate()","instantiate_all_loaded_fixtures()","instantiate_fixtures()","instrument()","instrument()","instrument()","instrument()","instrument()","instrumenter()","int4range()","int8range()","integration_session()","internal_metadata_table_name()","internal_metadata_table_name=()","internal_methods()","interrupt()","interval()","invalid?()","invalidate!()","invalidated?()","inverse_of()","invert_where()","inverted_lambda()","inverted_lambda()","inverted_lambda()","inverted_lambda()","inverted_lambda()","inverted_lambda()","invoke()","invoke()","invoke_callback()","invoke_callback()","invoke_callback()","invoke_callback()","ip()","ips_from()","irregular()","is_a?()","is_missing?()","is_utc?()","is_utf8?()","isdst()","iso8601()","iso8601()","iso8601()","isolate_namespace()","isolate_namespace()","iterate_guarding_exceptions()","iv_length()","iv_length()","j()","javascript_include_tag()","javascript_path()","javascript_tag()","javascript_url()","job_or_instantiate()","joined_includes_values()","joins()","js_template()","json_escape()","jsonb()","keep()","keep_if()","key()","key()","key()","key()","key()","key?()","key?()","key?()","key?()","key?()","key?()","key?()","key_generator()","key_len()","key_length()","key_length()","key_matcher()","key_provider()","keys()","keys()","keys()","kilobyte()","kilobytes()","kind()","kind()","kind_of?()","klass()","klass()","l()","l()","label()","label()","label_tag()","last()","last()","last()","last()","last()","last()","last!()","last?()","last_modified()","last_modified=()","last_modified?()","last_month()","last_quarter()","last_week()","last_weekday()","last_year()","layout()","lazy_schema_cache_path()","lease()","left_joins()","left_outer_joins()","length()","length()","lib()","lib()","lib()","license()","limit()","limit()","line()","link_to()","link_to_if()","link_to_unless()","link_to_unless_current()","links()","listen()","listen()","listeners_for()","listening?()","load()","load()","load()","load()","load()","load_async()","load_config_initializer()","load_console()","load_defaults()","load_from()","load_generators()","load_generators()","load_interlock()","load_paths()","load_records()","load_records_for_keys()","load_records_in_batch()","load_runner()","load_schema!()","load_schema_current()","load_schema_if_pending!()","load_seed()","load_seed()","load_server()","load_session()","load_session()","load_target()","load_tasks()","load_tasks()","loaded()","loaded?()","loading()","local()","local?()","local_assigns()","local_to_utc()","localize()","localize()","locals_for()","localtime()","localtime()","lock()","lock!()","lock_thread=()","locking_column()","locking_column=()","locking_enabled?()","log()","log()","log()","log()","log_at()","log_subscribers()","logged()","logger()","logger()","logger()","logger()","logger()","logger()","logger()","logger()","logger()","logger()","logger()","logger_outputs_to?()","longblob()","longtext()","lookup()","lookup()","lookup_ancestors()","lookup_by_extension()","lookup_context()","lookup_paths()","lookup_paths()","lookup_store()","lseg()","ltree()","macaddr()","mail()","mail()","mail_to()","mailbox_class()","mailbox_for()","mailbox_for()","mailer()","mailer_class()","mailer_name()","mailer_name()","make_lambda()","make_lambda()","make_lambda()","make_lambda()","make_lambda()","make_lambda()","make_response!()","make_response!()","make_response!()","many?()","many?()","many?()","mark_for_destruction()","mark_for_same_origin_verification!()","marked_for_destruction?()","marked_for_same_origin_verification?()","marshal_dump()","marshal_dump()","marshal_load()","marshal_load()","mask_token()","master_key()","match()","match()","match()","match?()","match?()","match?()","match?()","match?()","matches?()","materialize!()","materialize!()","mattr_accessor()","mattr_reader()","mattr_writer()","max_identifier_length()","max_queue()","max_threads()","maximum()","maximum()","mb_chars()","media_type()","media_type()","mediumblob()","mediumtext()","megabyte()","megabytes()","member()","member?()","member?()","member?()","member?()","merge()","merge()","merge()","merge()","merge()","merge()","merge!()","merge!()","merge!()","merge!()","merge!()","merge_default_headers()","message()","message()","message()","message()","message_verifier()","messages()","messages_for()","metadata()","metadata()","metadata()","metadata()","method()","method_added()","method_added()","method_added()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_symbol()","midday()","midday()","midday()","middle_of_day()","middle_of_day()","middle_of_day()","middleware()","middleware()","middleware()","midnight()","midnight()","midnight()","migrate()","migrate()","migrate()","migrate()","migrate_status()","migration_template()","migrations_paths()","migrations_paths()","min_threads()","minimum()","minimum()","minus_with_coercion()","minus_without_coercion()","minus_without_duration()","minute()","minutes()","mirror()","missing()","missing_name()","missing_name?()","model_name()","model_resource_name()","module_namespacing()","module_parent()","module_parent_name()","module_parents()","modules_for_helpers()","modules_for_helpers()","mon_enter()","monday()","money()","monotonic_subscribe()","month()","month_field()","month_field()","month_field_tag()","months()","months_ago()","months_since()","mount()","mountable_engine?()","move()","move()","move_after()","move_after()","move_before()","move_before()","ms()","multiline?()","multipart=()","multiple_of?()","mute()","mutool_exists?()","mutool_path()","name()","name()","name()","namespace()","namespace()","namespace()","namespace()","namespace()","namespaced?()","namespaced_class_path()","namespaced_path()","native_database_types()","native_database_types()","negotiate_format()","negotiate_mime()","nested()","nested_attributes?()","nested_under_indifferent_access()","nested_under_indifferent_access()","nested_under_indifferent_access()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_client()","new_client()","new_helper()","new_record?()","new_session()","next_day()","next_day?()","next_day?()","next_migration_number()","next_month()","next_occurring()","next_quarter()","next_sequence_value()","next_week()","next_weekday()","next_year()","nil?()","no_routes()","no_routes()","no_store()","no_touching()","no_touching?()","node_to_html()","node_to_plain_text()","non_xhr_javascript_response?()","nonce()","none()","none?()","noon()","noon()","noon()","normalize_action_path()","normalize_name()","normalize_path()","not()","not_modified?()","notice()","notice=()","now()","now()","now_is_loaded?()","nsec()","nullify!()","num_waiting()","number_field()","number_field()","number_field_tag()","number_to_currency()","number_to_currency()","number_to_delimited()","number_to_human()","number_to_human()","number_to_human_size()","number_to_human_size()","number_to_percentage()","number_to_percentage()","number_to_phone()","number_to_phone()","number_to_rounded()","number_with_delimiter()","number_with_precision()","numrange()","object()","of_kind?()","offset()","oid()","on_cdata_block()","on_characters()","on_encrypted_attribute_declared()","on_end_document()","on_end_element()","on_load()","on_start_document()","on_start_element()","on_subscribe()","on_unsubscribe()","on_weekday?()","on_weekend?()","one?()","only()","opaque()","open()","open()","open()","open()","open_session()","opt_parser()","optimize_indentation()","optimize_routes_generation?()","optimizer_hints()","option_groups_from_collection_for_select()","optional_port()","options()","options()","options_for_select()","options_from_collection_for_select()","options_include_default?()","or()","order()","ordinal()","ordinal()","ordinalize()","ordinalize()","original_concat()","original_fullpath()","original_url()","overlaps?()","override_accessors_to_preserve_original()","parallelize()","parallelize_setup()","parallelize_teardown()","param_encoding()","param_key()","parameter_filter()","parameter_filter_for()","parameter_parsers=()","parameterize()","parameterize()","parameters()","params()","params()","params()","params=()","params=()","params_array_from()","params_readable?()","parent_of?()","parse()","parse()","parse()","parse()","parse!()","parse_data_with_trailing_star()","parse_error()","parse_trailing_star()","parsed_body()","partial_writes()","partial_writes=()","partial_writes?()","parts()","password_field()","password_field()","password_field_tag()","past?()","past?()","patch()","patch()","patch()","path()","path()","path()","path()","path=()","path_for()","path_parameters()","path_to_asset()","path_to_audio()","path_to_font()","path_to_image()","path_to_javascript()","path_to_stylesheet()","path_to_video()","paths()","paths()","paths()","pattern()","pdftoppm_exists?()","pdftoppm_path()","per_form_csrf_token()","perform()","perform()","perform()","perform()","perform()","perform()","perform()","perform()","perform_action()","perform_enqueued_jobs()","perform_job()","perform_later()","perform_now()","perform_now()","performed?()","performed?()","performed_jobs()","period()","period_for_local()","period_for_utc()","periodically()","permanent()","permanent_failure?()","permissions_policy()","permissions_policy()","permissions_policy()","permissions_policy=()","permit()","permit!()","permit_concurrent_loads()","permitted?()","persisted?()","persisted?()","petabyte()","petabytes()","phone_field()","phone_field()","phone_field_tag()","phone_to()","pick()","pick()","pluck()","pluck()","pluck()","plugin_rails_init()","plugin_rails_options()","plugin_types()","plural()","plural()","plural_file_name()","plural_name()","plural_route_name()","plural_table_name()","pluralize()","pluralize()","pluralize()","pluralize_table_names()","pluralize_table_names=()","pluralize_table_names?()","point()","poll()","polygon()","polymorphic_class_for()","polymorphic_name()","polymorphic_path()","polymorphic_url()","pool()","pop()","port()","port=()","port_string()","post()","post()","post()","post()","prefetch_primary_key?()","prefetch_primary_key?()","prefix()","prefix()","prefix()","preload()","preload_link_tag()","prepare()","prepare!()","prepare_all()","prepare_destination()","prepared_statements()","prepared_statements?()","prepend()","prepend_after_action()","prepend_around_action()","prepend_before_action()","prepend_view_path()","prepend_view_path()","prepended()","prepended()","presence()","presence_in()","present?()","preserve_original_encrypted()","pretty_print()","pretty_print()","pretty_print()","prev_day()","prev_day?()","prev_day?()","prev_month()","prev_occurring()","prev_quarter()","prev_week()","prev_weekday()","prev_year()","preventing_writes?()","preview()","preview()","preview()","preview()","preview()","preview_name()","previewable?()","previewable_attachable?()","previewable_attachable?()","previous=()","previous_changes()","previously_new_record?()","previously_persisted?()","primary_abstract_class()","primary_key()","primary_key()","primary_key()","primary_key()","primary_key=()","primary_key_prefix_type()","primary_key_prefix_type=()","primary_keys()","print_generators()","print_list()","printing_commands()","priority()","proc_for_binds()","process()","process()","process()","process()","process()","process()","process()","process()","process_action()","processed()","processed()","processed()","processed?()","processed?()","processed?()","prohibit_shard_swapping()","proper_table_name()","property()","protect_against_forgery?()","protect_against_forgery?()","protect_from_forgery()","protected_environments()","protected_environments=()","protecting_encrypted_data()","protocol()","provide()","proxy_class()","proxy_class=()","prune()","pruning?()","public?()","public_compute_asset_path()","public_directory()","public_namespaces()","public_path()","publish()","publish()","publish_event()","publish_event()","publish_event()","pubsub()","pubsub_adapter()","purge()","purge()","purge()","purge()","purge()","purge()","purge_all()","purge_current()","purge_later()","purge_later()","purge_later()","purge_later()","purge_later()","push()","push()","put()","put()","put()","query_attribute()","query_cache_enabled()","query_parameter_names()","query_parameters()","queue_adapter()","queue_adapter()","queue_adapter()","queue_adapter=()","queue_adapter_for_test()","queue_adapter_name()","queue_as()","queue_name()","queue_with_priority()","quote()","quote()","quote_bound_value()","quote_column_name()","quote_schema_name()","quote_string()","quote_string()","quote_table_name()","quote_table_name_for_assignment()","quote_table_name_for_assignment()","quoted_date()","quoted_false()","quoted_primary_key()","quoted_table_name()","quoted_true()","radio_button()","radio_button()","radio_button_tag()","rails_command()","rails_root()","rails_version()","rails_version()","railtie_name()","railties()","raise()","raise_for_multi_db()","raise_validation_error()","rake()","rake_tasks()","rake_tasks()","rakefile()","rakefile()","rakefile()","range_field()","range_field()","range_field_tag()","raw()","raw_connection()","raw_host_with_port()","raw_params()","raw_post()","raw_request_method()","read()","read()","read()","read()","read()","read()","read_attribute()","read_attribute_before_type_cast()","read_entry()","read_fragment()","read_multi()","read_multi()","read_multi_entries()","read_store_attribute()","readable_inspect()","readable_inspect()","readme()","readme()","readme()","readonly()","readonly!()","readonly?()","readonly_attributes()","real_csrf_token()","reap()","reaping_frequency()","receive()","receive_inbound_email_from_fixture()","receive_inbound_email_from_mail()","receive_inbound_email_from_source()","recipients()","recipients_addresses()","reconnect!()","reconnect!()","reconnect!()","reconnect!()","record()","record()","record()","record()","record_key_for_dom_id()","records()","records_for()","recreate_database()","redefine_method()","redefine_singleton_method()","redirect()","redirect_back()","redirect_back_or_to()","redirect_resource_name()","redirect_to()","redirect_to()","redirect_to()","redirect_to()","redirect_to_url()","redis()","ref()","ref()","ref()","references()","references()","references()","references()","reflect_on_aggregation()","reflect_on_all_aggregations()","reflect_on_all_associations()","reflect_on_all_attachments()","reflect_on_all_autosave_associations()","reflect_on_association()","reflect_on_attachment()","reflections()","register()","register()","register()","register_alias()","register_callback()","register_directories()","register_encoder()","register_extensions()","register_hook()","register_interceptor()","register_interceptor()","register_interceptors()","register_observer()","register_observers()","register_preview_interceptor()","register_preview_interceptors()","register_tags()","register_task()","registry()","regular_class_path()","regular_update()","regular_update()","regular_writer()","regular_writer()","reject()","reject()","reject()","reject()","reject!()","reject_unauthorized_connection()","rejected?()","relay()","release_connection()","release_savepoint()","release_unload_lock!()","reload()","reload()","reload()","reload()","reload()","reload!()","reload!()","reload!()","reload_routes!()","remote_addr=()","remote_connections()","remote_ip()","remote_ip=()","remove()","remove()","remove()","remove()","remove!()","remove_belongs_to()","remove_belongs_to()","remove_channel()","remove_channel()","remove_channel()","remove_check_constraint()","remove_check_constraint()","remove_column()","remove_column()","remove_columns()","remove_connection()","remove_connection_pool()","remove_event_subscriber()","remove_filters!()","remove_foreign_key()","remove_foreign_key()","remove_hook_for()","remove_index()","remove_index()","remove_possible_method()","remove_possible_singleton_method()","remove_reference()","remove_references()","remove_renderer()","remove_silencers!()","remove_subscriber()","remove_timestamps()","remove_timestamps()","rename()","rename_column()","rename_index()","rename_index()","rename_index()","rename_index()","rename_key()","rename_table()","rename_table()","rename_table()","rename_table()","render()","render()","render()","render()","render()","render()","render()","render()","render()","render()","render_action_text_attachments()","render_action_text_content()","render_attachment_galleries()","render_attachments()","render_body()","render_collection()","render_count()","render_layout()","render_partial()","render_template()","render_to_body()","render_to_body()","render_to_body()","render_to_body()","render_to_body()","render_to_string()","render_to_string()","render_to_string()","rendered_format()","rendered_views()","rendered_views()","reorder()","replace()","replace()","replace()","replace()","replace()","replay()","replica?()","replica?()","report()","report_uri()","representable?()","representation()","request()","request()","request_authenticity_tokens()","request_http_basic_authentication()","request_http_digest_authentication()","request_http_token_authentication()","request_id()","request_method()","request_method=()","request_method_symbol()","request_parameters()","request_parameters=()","request_uri=()","require()","require_application!()","require_application_and_environment!()","require_dependency()","require_engine()","require_environment!()","require_sri_for()","require_unload_lock!()","required()","requires_reloading?()","requires_reloading?()","rescue_from()","rescue_response?()","rescue_template()","rescue_with_handler()","rescue_with_handler()","reselect()","reset()","reset()","reset()","reset!()","reset!()","reset!()","reset!()","reset!()","reset_body!()","reset_cache()","reset_callbacks()","reset_column_information()","reset_counters()","reset_cycle()","reset_locking_column()","reset_runtime()","reset_sequence!()","reset_session()","reset_session()","resets()","resolve()","resolve()","resolve()","resource()","resources()","resources_path_names()","respond_to()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to_missing?()","respond_to_missing?()","respond_to_missing?()","respond_to_without_attributes?()","response()","response()","response_body()","response_body=()","response_body=()","response_code()","response_parser()","response_parser()","restart()","restore_attributes()","result()","result()","retrieve_connection()","retrieve_connection_pool()","retry_job()","retry_on()","reverse()","reverse_merge()","reverse_merge()","reverse_merge()","reverse_merge()","reverse_merge!()","reverse_merge!()","reverse_merge!()","reverse_merge!()","reverse_order()","reverse_update()","reversible()","revert()","revert()","reverting?()","rewhere()","rewind()","rewrite_param_values()","rfc2822()","rfc3339()","rfc3339()","rfc3339()","rfc822()","rich_text_area()","rich_text_area()","rich_text_area_tag()","rich_text_association_names()","role()","rollback()","rollback()","rollback!()","rollback_db_transaction()","rollback_to_savepoint()","rolledback?()","root()","root()","root()","root()","root=()","route()","route()","route()","route()","route_for()","route_key()","route_later()","route_url()","routes()","routing()","ruby2_keywords_hash()","ruby2_keywords_hash?()","ruby_version()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run!()","run_callbacks()","run_cleanup()","run_generator()","run_in_isolation()","run_in_isolation()","run_in_transaction?()","run_initializers()","run_interlock()","run_load_hooks()","runner()","runner()","running()","runtime()","runtime=()","safe_concat()","safe_concat()","safe_constantize()","safe_constantize()","safe_join()","safe_record()","sandbox()","sandbox?()","sanitize()","sanitize_action_text_content()","sanitize_css()","sanitize_limit()","sanitize_sql()","sanitize_sql_array()","sanitize_sql_for_assignment()","sanitize_sql_for_conditions()","sanitize_sql_for_order()","sanitize_sql_hash_for_assignment()","sanitize_sql_like()","sanitized()","save()","save()","save()","save!()","save!()","saved_change_to_attribute()","saved_change_to_attribute?()","saved_changes()","saved_changes?()","say()","say_with_time()","schedule()","scheduled?()","schema_cache()","schema_cache=()","schema_cache_path()","schema_dump()","schema_dump_path()","schema_exists?()","schema_file_type()","schema_migrations_table_name()","schema_migrations_table_name=()","schema_names()","schema_search_path()","schema_search_path=()","schema_up_to_date?()","schema_version()","scheme_for()","scope()","scope()","scope()","scope_for()","scope_for_create()","scoping()","search_field()","search_field()","search_field_tag()","sec_fraction()","second()","second()","second()","second()","second!()","second_to_last()","second_to_last()","second_to_last()","second_to_last!()","seconds()","seconds_since_midnight()","seconds_since_midnight()","seconds_to_utc_offset()","seconds_until_end_of_day()","seconds_until_end_of_day()","secret_key_base()","secret_token()","secrets()","section()","section()","section()","section()","section_title()","section_title()","section_title()","section_title()","secure_compare()","secure_compare!()","seed_loader()","select()","select()","select()","select()","select()","select()","select()","select!()","select_all()","select_all()","select_date()","select_datetime()","select_day()","select_hour()","select_minute()","select_month()","select_one()","select_rows()","select_second()","select_tag()","select_time()","select_value()","select_values()","select_year()","selector()","send_async()","send_blob_stream()","send_data()","send_data()","send_data()","send_early_hints()","send_file()","send_file()","send_file()","send_file()","send_stream()","sending!()","sending?()","sending_file=()","sent!()","sent?()","sequence_name()","sequence_name=()","serial()","serial_sequence()","serializable?()","serializable?()","serializable_hash()","serializable_hash()","serialize()","serialize()","serialize()","serialize()","serialize()","serialize()","serialize()","serialize()","serialize()","serialize()","serialize()","serialize?()","served_url()","server()","server()","server_port()","server_software()","service()","service_delete()","service_delete_prefixed()","service_download()","service_exist()","service_headers_for_direct_upload()","service_mirror()","service_streaming_download()","service_upload()","service_url()","service_url_for_direct_upload()","session()","session_auth=()","session_options=()","session_store()","set()","set()","set_application_directory!()","set_callback()","set_content_type()","set_context()","set_environment()","set_environment!()","set_fixture_class()","set_header()","set_logger()","set_member_mappings_for_resource()","set_migration_assigns!()","set_standard_conforming_strings()","setup()","setup_controller_request_and_response()","setup_fixture_accessors()","setup_fixtures()","setup_horo_variables()","setup_initial_database_yaml()","setup_with_controller()","shallow()","shallow?()","shard()","shard_swapping_prohibited?()","sharing()","short_identifier()","should_apply_vary_header?()","show()","show()","show()","show()","show()","show()","show_detailed_exceptions?()","show_helper()","show_variable()","shutdown()","shutdown()","shutdown()","shutdown()","signed()","signed()","signed_id()","signed_id()","signed_id_verifier()","signed_id_verifier=()","signed_or_encrypted()","silence()","silence()","silence!()","silence_redefinition_of_method()","silence_warnings()","silenced()","simple_format()","since()","since()","since()","since()","since()","singular()","singular()","singular_name()","singular_route_key()","singular_route_name()","singular_table_name()","singularize()","singularize()","size()","size()","size()","size()","size()","size()","size()","skip_after_action()","skip_around_action()","skip_before_action()","skip_callback()","skip_forgery_protection()","skip_parameter_encoding()","slice()","slice()","slice()","slice()","slice!()","slice!()","slice!()","slice!()","slice!()","sms_to()","sole()","sole()","sorted_groups()","source()","source()","source_attribute_from_preserved_attribute()","source_extracts()","source_root()","source_to_show_id()","split()","split()","sql()","sql()","squish()","squish!()","stale?()","stale_session_check!()","standard_port()","standard_port?()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start!()","start_document()","start_element()","start_exclusive()","start_periodic_timers()","start_processing()","start_running()","start_sharing()","start_unloading()","start_worker()","started_request_message()","stat()","statistics()","stats()","stats()","status=()","status_code()","status_code_for_exception()","status_message()","sti_class_for()","sti_name()","stop()","stop_all_streams()","stop_all_streams()","stop_exclusive()","stop_periodic_timers()","stop_sharing()","stop_stream_for()","stop_stream_from()","stop_worker()","storage()","store()","store()","store()","store_accessor()","store_inherited()","stored_attributes()","stream_for()","stream_from()","stream_from()","stream_or_reject_for()","streams()","strftime()","strict_loading()","strict_loading!()","strict_loading?()","strict_loading_n_plus_one_only?()","strict_loading_violation()","strict_match?()","strict_mode?()","stringify_array()","stringify_keys()","stringify_keys()","stringify_keys()","stringify_keys!()","stringify_keys!()","stringify_keys!()","strip_heredoc()","strip_links()","strip_tags()","strong_etag=()","strong_etag?()","strptime()","structurally_compatible?()","structure_dump()","structure_dump_flags()","structure_load()","structure_load_flags()","stub_connection()","stylesheet_link_tag()","stylesheet_path()","stylesheet_url()","stylesheets()","subclasses()","subclasses()","subclasses()","subclasses()","subdomain()","subdomains()","submit()","submit_tag()","subscribe()","subscribe()","subscribe()","subscribe()","subscribe()","subscribe_to_channel()","subscribed()","subscribed()","subscribers()","subscription_confirmation_sent?()","subscription_rejected?()","subsec()","success?()","successfully_enqueued?()","suffix()","suffix()","sum()","sum()","sunday()","supports_advisory_locks?()","supports_advisory_locks?()","supports_advisory_locks?()","supports_bulk_alter?()","supports_bulk_alter?()","supports_bulk_alter?()","supports_cache_versioning?()","supports_cache_versioning?()","supports_cache_versioning?()","supports_cache_versioning?()","supports_cache_versioning?()","supports_check_constraints?()","supports_check_constraints?()","supports_check_constraints?()","supports_check_constraints?()","supports_comments?()","supports_comments?()","supports_comments?()","supports_comments_in_create?()","supports_comments_in_create?()","supports_common_table_expressions?()","supports_common_table_expressions?()","supports_common_table_expressions?()","supports_common_table_expressions?()","supports_concurrent_connections?()","supports_concurrent_connections?()","supports_datetime_with_precision?()","supports_datetime_with_precision?()","supports_datetime_with_precision?()","supports_datetime_with_precision?()","supports_ddl_transactions?()","supports_ddl_transactions?()","supports_ddl_transactions?()","supports_deferrable_constraints?()","supports_deferrable_constraints?()","supports_explain?()","supports_explain?()","supports_explain?()","supports_explain?()","supports_expression_index?()","supports_expression_index?()","supports_expression_index?()","supports_expression_index?()","supports_extensions?()","supports_extensions?()","supports_foreign_keys?()","supports_foreign_keys?()","supports_foreign_keys?()","supports_foreign_keys?()","supports_foreign_tables?()","supports_foreign_tables?()","supports_index_sort_order?()","supports_index_sort_order?()","supports_index_sort_order?()","supports_index_sort_order?()","supports_indexes_in_create?()","supports_indexes_in_create?()","supports_insert_conflict_target?()","supports_insert_conflict_target?()","supports_insert_conflict_target?()","supports_insert_on_conflict?()","supports_insert_on_conflict?()","supports_insert_on_duplicate_skip?()","supports_insert_on_duplicate_skip?()","supports_insert_on_duplicate_skip?()","supports_insert_on_duplicate_skip?()","supports_insert_on_duplicate_update?()","supports_insert_on_duplicate_update?()","supports_insert_on_duplicate_update?()","supports_insert_on_duplicate_update?()","supports_insert_returning?()","supports_insert_returning?()","supports_json?()","supports_json?()","supports_json?()","supports_json?()","supports_lazy_transactions?()","supports_lazy_transactions?()","supports_lazy_transactions?()","supports_lazy_transactions?()","supports_materialized_views?()","supports_materialized_views?()","supports_optimizer_hints?()","supports_optimizer_hints?()","supports_optimizer_hints?()","supports_partial_index?()","supports_partial_index?()","supports_partial_index?()","supports_partitioned_indexes?()","supports_partitioned_indexes?()","supports_path?()","supports_path?()","supports_pgcrypto_uuid?()","supports_savepoints?()","supports_savepoints?()","supports_savepoints?()","supports_savepoints?()","supports_streaming?()","supports_streaming?()","supports_transaction_isolation?()","supports_transaction_isolation?()","supports_transaction_isolation?()","supports_transaction_isolation?()","supports_validate_constraints?()","supports_validate_constraints?()","supports_views?()","supports_views?()","supports_views?()","supports_views?()","supports_virtual_columns?()","supports_virtual_columns?()","supports_virtual_columns?()","suppress()","suppress()","suppress_messages()","swap()","swap()","symbolize_keys()","symbolize_keys()","symbolize_keys()","symbolize_keys!()","symbols()","synchronize()","system_test()","t()","t()","table_alias_for()","table_alias_length()","table_comment()","table_exists?()","table_exists?()","table_name()","table_name()","table_name=()","table_name_prefix()","table_name_prefix=()","table_name_suffix()","table_name_suffix=()","table_options()","table_rows()","tableize()","tableize()","tables()","tag()","tag()","tag()","tagged()","tags()","take()","take()","take!()","take_failed_screenshot()","take_screenshot()","target()","target_version()","teardown()","teardown_fixtures()","telephone_field()","telephone_field()","telephone_field_tag()","template()","template_exists?()","terabyte()","terabytes()","test()","test()","test()","test_dummy_clean()","test_dummy_config()","test_dummy_sprocket_assets()","test_errors_aref()","test_model_naming()","test_order()","test_order=()","test_persisted?()","test_to_key()","test_to_param()","test_to_partial_path()","tests()","tests()","tests()","tests()","tests()","tests()","text?()","text_area()","text_area()","text_area_tag()","text_field()","text_field()","text_field_tag()","third()","third()","third()","third!()","third_to_last()","third_to_last()","third_to_last()","third_to_last!()","thread_cattr_accessor()","thread_mattr_accessor()","throw_away!()","tidy_bytes()","tidy_bytes()","time()","time_ago_in_words()","time_field()","time_field()","time_field_tag()","time_select()","time_select()","time_tag()","time_zone_options_for_select()","time_zone_select()","time_zone_select()","timer()","timestamps()","timestamps()","timestamptz()","tinyblob()","tinytext()","titlecase()","titlecase()","titleize()","titleize()","titleize()","tmp()","tmpdir()","tmpdir()","to()","to()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_addresses()","to_ary()","to_ary()","to_ary()","to_ary()","to_attachable_partial_path()","to_complete()","to_date()","to_datetime()","to_datetime()","to_dep_map()","to_f()","to_f()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_fs()","to_fs()","to_fs()","to_fs()","to_fs()","to_fs()","to_fs()","to_h()","to_h()","to_h()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_html()","to_html()","to_html()","to_html()","to_html()","to_i()","to_i()","to_i()","to_io()","to_json()","to_key()","to_key()","to_model()","to_model()","to_options()","to_options()","to_options()","to_options!()","to_options!()","to_options!()","to_param()","to_param()","to_param()","to_param()","to_param()","to_param()","to_param()","to_param()","to_param()","to_param()","to_param()","to_partial_path()","to_partial_path()","to_partial_path()","to_partial_path()","to_partial_path()","to_partial_path()","to_path()","to_path()","to_path()","to_plain_text()","to_plain_text()","to_plain_text()","to_plain_text()","to_prepare()","to_prepare()","to_prepare_blocks()","to_query()","to_query()","to_query()","to_query()","to_r()","to_rendered_html_with_layout()","to_rich_text_attributes()","to_run()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_sentence()","to_sentence()","to_sql()","to_sql()","to_str()","to_str()","to_str()","to_sym()","to_sym()","to_tag()","to_time()","to_time()","to_time()","to_time()","to_time()","to_trix_attachment()","to_trix_content_attachment_partial_path()","to_trix_content_attachment_partial_path()","to_trix_content_attachment_partial_path()","to_trix_html()","to_trix_html()","to_unsafe_h()","to_unsafe_hash()","to_xml()","to_xml()","today()","today?()","today?()","toggle()","toggle!()","token_and_options()","token_list()","token_params_from()","tomorrow()","tomorrow()","tomorrow()","tomorrow?()","tomorrow?()","touch()","touch_all()","trace_to_show()","traces()","transaction()","transaction()","transaction_isolation_levels()","transaction_open?()","transform()","transform()","transform_keys()","transform_keys()","transform_keys()","transform_keys!()","transform_keys!()","transform_keys!()","transform_values()","transform_values()","transform_values()","transform_values!()","transient_failure?()","translate()","translate()","transliterate()","transmissions()","transmit()","transmit()","travel()","travel_back()","travel_to()","tree()","truncate()","truncate()","truncate()","truncate_all()","truncate_bytes()","truncate_words()","try()","try()","try()","try!()","try!()","try!()","tsort_each_child()","tsrange()","tstzrange()","tsvector()","tv_sec()","type()","type()","type_cast()","type_cast_config_to_boolean()","type_cast_config_to_integer()","type_for_attribute()","uncacheable!()","uncached()","uncached()","uncountable()","uncountable?()","uncountable?()","uncountable?()","uncountable?()","undefine_attribute_methods()","underscore()","underscore()","unescape_bytea()","unfreeze_time()","uniq!()","unload_interlock()","unloading()","unmask_token()","unpermitted_parameters()","unprepared_statement()","unquoted_false()","unquoted_true()","unregister()","unregister_interceptor()","unregister_interceptors()","unregister_observer()","unregister_observers()","unregister_preview_interceptor()","unregister_preview_interceptors()","unscope()","unscoped()","unshift()","unshift()","unshift()","unsigned_bigint()","unsigned_decimal()","unsigned_float()","unsigned_integer()","unsubscribe()","unsubscribe()","unsubscribe()","unsubscribe()","unsubscribe!()","unsubscribed()","until()","unwrapped_exception()","up()","up_only()","upcase_first()","upcase_first()","update()","update()","update()","update()","update()","update()","update()","update()","update!()","update!()","update_all()","update_all()","update_attribute()","update_column()","update_columns()","update_counters()","update_counters()","update_counters()","update_metadata()","update_metadata()","updated?()","upgrade_insecure_requests()","upload()","upload()","upload()","upload()","upload()","upload()","upload()","upsert()","upsert_all()","url()","url()","url()","url()","url()","url_field()","url_field()","url_field_tag()","url_for()","url_for()","url_for()","url_for()","url_for_direct_upload()","url_for_direct_upload()","url_for_direct_upload()","url_for_direct_upload()","url_for_direct_upload()","url_from()","url_helper_prefix()","url_options()","url_options()","url_options()","url_options()","url_to_asset()","url_to_audio()","url_to_font()","url_to_image()","url_to_javascript()","url_to_stylesheet()","url_to_video()","us_zones()","usage_path()","usage_path()","use()","use()","use()","use_accept_header()","use_insert_returning?()","use_metadata_table?()","use_renderer()","use_renderers()","use_zone()","usec()","user_agent=()","user_name_and_password()","username_error()","uses_transaction()","uses_transaction?()","utc()","utc()","utc?()","utc?()","utc_offset()","utc_offset()","utc_offset()","utc_to_local()","utf8_enforcer_tag()","uuid()","uuid()","uuid_from_hash()","uuid_v3()","uuid_v4()","uuid_v5()","valid?()","valid?()","valid?()","valid_accept_header()","valid_authenticity_token?()","valid_message?()","valid_per_form_csrf_token?()","valid_request_origin?()","validate()","validate()","validate()","validate()","validate()","validate!()","validate_check_constraint()","validate_column_size()","validate_constraint()","validate_constraint()","validate_digest_response()","validate_each()","validate_each()","validate_foreign_key()","validate_nonce()","validate_secret_key_base()","validate_service_configuration()","validate_value_type()","validates()","validates!()","validates_absence_of()","validates_absence_of()","validates_acceptance_of()","validates_associated()","validates_comparison_of()","validates_confirmation_of()","validates_each()","validates_exclusion_of()","validates_format_of()","validates_inclusion_of()","validates_length_of()","validates_length_of()","validates_numericality_of()","validates_numericality_of()","validates_presence_of()","validates_presence_of()","validates_size_of()","validates_size_of()","validates_uniqueness_of()","validates_with()","validates_with()","validators()","validators_on()","value()","value?()","values()","values()","values()","values_at()","values_at()","values_at()","values_at()","values_at()","variable?()","variant()","variant()","variant()","variant=()","vendor()","vendor()","verified()","verified()","verified_request?()","verify()","verify!()","verify_authenticity_token()","verify_same_origin_request()","version()","version()","version()","version()","version()","version()","version()","version()","version()","version()","version()","version()","version_control()","version_control()","video?()","video_path()","video_tag()","video_url()","view_assigns()","view_cache_dependencies()","view_cache_dependency()","view_context()","view_context_class()","view_context_class()","view_exists?()","view_paths()","view_paths=()","view_rendered?()","views()","virtual()","wait()","wait()","warn()","watchable_dirs()","watchable_files()","weak_etag=()","weak_etag?()","week()","week_field()","week_field()","week_field_tag()","weekday_options_for_select()","weekday_select()","weekday_select()","weeks()","weeks_ago()","weeks_since()","where()","where()","where()","where()","while_preventing_writes()","while_preventing_writes()","will_save_change_to_attribute?()","with()","with()","with()","with_all_rich_text()","with_backend()","with_connection()","with_context()","with_database_connections()","with_default_scope()","with_defaults()","with_defaults()","with_defaults()","with_defaults()","with_defaults()","with_defaults!()","with_defaults!()","with_defaults!()","with_defaults!()","with_encryption_context()","with_full_attributes()","with_indentation()","with_indifferent_access()","with_indifferent_access()","with_indifferent_access()","with_local_cache()","with_lock()","with_options()","with_routing()","with_scope_level()","with_warnings()","without()","without()","without()","without()","without()","without_encryption()","without_modules()","without_modules()","word_wrap()","work_from_queue()","worker_pool()","wrap()","wrap()","wrap()","wrap()","wrap()","wrap()","wrap()","wrap_parameters()","wrap_with_namespace()","write()","write()","write()","write()","write()","write()","write()","write()","write_attribute()","write_entry()","write_entry()","write_fragment()","write_multi()","write_query?()","write_session()","write_store_attribute()","writes_pending()","x_original_to_addresses()","xhr?()","xml()","xml_http_request?()","xml_name_escape()","xmlschema()","xmlschema()","xor_byte_strings()","year()","years()","years_ago()","years_since()","yesterday()","yesterday()","yesterday()","yesterday?()","yesterday?()","yield_shares()","zone()","zone()","zone=()","readme","readme","readme","readme","readme","readme","readme","readme","readme","readme","readme","rdoc_main","readme"],"longSearchIndex":["abstractcontroller","abstractcontroller::actionnotfound","abstractcontroller::base","abstractcontroller::caching","abstractcontroller::caching::classmethods","abstractcontroller::caching::configmethods","abstractcontroller::caching::fragments","abstractcontroller::caching::fragments::classmethods","abstractcontroller::callbacks","abstractcontroller::callbacks::classmethods","abstractcontroller::collector","abstractcontroller::doublerendererror","abstractcontroller::helpers","abstractcontroller::helpers::classmethods","abstractcontroller::helpers::missinghelpererror","abstractcontroller::railties","abstractcontroller::railties::routeshelpers","abstractcontroller::rendering","abstractcontroller::translation","abstractcontroller::urlfor","abstractcontroller::urlfor::classmethods","actioncable","actioncable::channel","actioncable::channel::base","actioncable::channel::broadcasting","actioncable::channel::broadcasting::classmethods","actioncable::channel::callbacks","actioncable::channel::callbacks::classmethods","actioncable::channel::channelstub","actioncable::channel::connectionstub","actioncable::channel::naming","actioncable::channel::naming::classmethods","actioncable::channel::noninferrablechannelerror","actioncable::channel::periodictimers","actioncable::channel::periodictimers::classmethods","actioncable::channel::streams","actioncable::channel::testcase","actioncable::channel::testcase::behavior","actioncable::channel::testcase::behavior::classmethods","actioncable::connection","actioncable::connection::assertions","actioncable::connection::authorization","actioncable::connection::authorization::unauthorizederror","actioncable::connection::base","actioncable::connection::identification","actioncable::connection::identification::classmethods","actioncable::connection::internalchannel","actioncable::connection::noninferrableconnectionerror","actioncable::connection::streameventloop","actioncable::connection::taggedloggerproxy","actioncable::connection::testcase","actioncable::connection::testcase::behavior","actioncable::connection::testcase::behavior::classmethods","actioncable::connection::testconnection","actioncable::connection::testcookiejar","actioncable::connection::testrequest","actioncable::helpers","actioncable::helpers::actioncablehelper","actioncable::remoteconnections","actioncable::remoteconnections::remoteconnection","actioncable::remoteconnections::remoteconnection::invalididentifierserror","actioncable::server","actioncable::server::base","actioncable::server::broadcasting","actioncable::server::broadcasting::broadcaster","actioncable::server::configuration","actioncable::server::worker","actioncable::server::worker::activerecordconnectionmanagement","actioncable::subscriptionadapter","actioncable::subscriptionadapter::async","actioncable::subscriptionadapter::async::asyncsubscribermap","actioncable::subscriptionadapter::base","actioncable::subscriptionadapter::postgresql","actioncable::subscriptionadapter::postgresql::listener","actioncable::subscriptionadapter::redis","actioncable::subscriptionadapter::redis::listener","actioncable::subscriptionadapter::subscribermap","actioncable::subscriptionadapter::test","actioncable::testcase","actioncable::testhelper","actioncable::version","actioncontroller","actioncontroller::api","actioncontroller::apirendering","actioncontroller::base","actioncontroller::caching","actioncontroller::conditionalget","actioncontroller::conditionalget::classmethods","actioncontroller::contentsecuritypolicy","actioncontroller::contentsecuritypolicy::classmethods","actioncontroller::cookies","actioncontroller::datastreaming","actioncontroller::defaultheaders","actioncontroller::defaultheaders::classmethods","actioncontroller::etagwithflash","actioncontroller::etagwithtemplatedigest","actioncontroller::flash","actioncontroller::flash::classmethods","actioncontroller::formbuilder","actioncontroller::formbuilder::classmethods","actioncontroller::head","actioncontroller::helpers","actioncontroller::helpers::classmethods","actioncontroller::httpauthentication","actioncontroller::httpauthentication::basic","actioncontroller::httpauthentication::basic::controllermethods","actioncontroller::httpauthentication::basic::controllermethods::classmethods","actioncontroller::httpauthentication::digest","actioncontroller::httpauthentication::digest::controllermethods","actioncontroller::httpauthentication::token","actioncontroller::httpauthentication::token::controllermethods","actioncontroller::implicitrender","actioncontroller::instrumentation","actioncontroller::instrumentation::classmethods","actioncontroller::live","actioncontroller::live::classmethods","actioncontroller::live::clientdisconnected","actioncontroller::live::sse","actioncontroller::livetestresponse","actioncontroller::logsubscriber","actioncontroller::logging","actioncontroller::logging::classmethods","actioncontroller::metal","actioncontroller::mimeresponds","actioncontroller::mimeresponds::collector","actioncontroller::missingrenderer","actioncontroller::parameterencoding","actioncontroller::parameterencoding::classmethods","actioncontroller::parametermissing","actioncontroller::parameters","actioncontroller::paramswrapper","actioncontroller::paramswrapper::options","actioncontroller::paramswrapper::options::classmethods","actioncontroller::permissionspolicy","actioncontroller::permissionspolicy::classmethods","actioncontroller::railties","actioncontroller::railties::helpers","actioncontroller::redirecting","actioncontroller::redirecting::unsaferedirecterror","actioncontroller::renderer","actioncontroller::renderers","actioncontroller::renderers::all","actioncontroller::renderers::classmethods","actioncontroller::rendering","actioncontroller::rendering::classmethods","actioncontroller::requestforgeryprotection","actioncontroller::requestforgeryprotection::classmethods","actioncontroller::requestforgeryprotection::protectionmethods","actioncontroller::requestforgeryprotection::protectionmethods::exception","actioncontroller::requestforgeryprotection::protectionmethods::nullsession","actioncontroller::requestforgeryprotection::protectionmethods::resetsession","actioncontroller::rescue","actioncontroller::respondtomismatcherror","actioncontroller::streaming","actioncontroller::strongparameters","actioncontroller::testcase","actioncontroller::testcase::behavior","actioncontroller::testcase::behavior::classmethods","actioncontroller::testing","actioncontroller::unfilteredparameters","actioncontroller::unpermittedparameters","actioncontroller::urlfor","actiondispatch","actiondispatch::assertionresponse","actiondispatch::assertions","actiondispatch::assertions::responseassertions","actiondispatch::assertions::routingassertions","actiondispatch::callbacks","actiondispatch::contentsecuritypolicy","actiondispatch::contentsecuritypolicy::middleware","actiondispatch::contentsecuritypolicy::request","actiondispatch::cookies","actiondispatch::cookies::chainedcookiejars","actiondispatch::debugexceptions","actiondispatch::debuglocks","actiondispatch::exceptionwrapper","actiondispatch::executor","actiondispatch::filehandler","actiondispatch::flash","actiondispatch::flash::flashhash","actiondispatch::flash::requestmethods","actiondispatch::hostauthorization","actiondispatch::http","actiondispatch::http::cache","actiondispatch::http::cache::request","actiondispatch::http::cache::response","actiondispatch::http::filterparameters","actiondispatch::http::filterredirect","actiondispatch::http::headers","actiondispatch::http::mimenegotiation","actiondispatch::http::mimenegotiation::invalidtype","actiondispatch::http::parameters","actiondispatch::http::parameters::classmethods","actiondispatch::http::parameters::parseerror","actiondispatch::http::url","actiondispatch::http::uploadedfile","actiondispatch::integration","actiondispatch::integration::requesthelpers","actiondispatch::integration::runner","actiondispatch::integration::session","actiondispatch::integrationtest","actiondispatch::integrationtest::behavior","actiondispatch::integrationtest::behavior::classmethods","actiondispatch::integrationtest::urloptions","actiondispatch::journey","actiondispatch::journey::format","actiondispatch::journey::formatter","actiondispatch::journey::formatter::missingroute","actiondispatch::journey::formatter::routewithparams","actiondispatch::journey::parser","actiondispatch::journey::route","actiondispatch::journey::route::verbmatchers","actiondispatch::journey::route::verbmatchers::all","actiondispatch::journey::route::verbmatchers::unknown","actiondispatch::middlewarestack","actiondispatch::middlewarestack::instrumentationproxy","actiondispatch::middlewarestack::middleware","actiondispatch::permissionspolicy","actiondispatch::permissionspolicy::middleware","actiondispatch::permissionspolicy::request","actiondispatch::publicexceptions","actiondispatch::railsentitystore","actiondispatch::railsentitystore::rack","actiondispatch::railsentitystore::rack::cache","actiondispatch::railsentitystore::rack::cache::entitystore","actiondispatch::railsmetastore","actiondispatch::railsmetastore::rack","actiondispatch::railsmetastore::rack::cache","actiondispatch::railsmetastore::rack::cache::metastore","actiondispatch::reloader","actiondispatch::remoteip","actiondispatch::remoteip::getip","actiondispatch::remoteip::ipspoofattackerror","actiondispatch::request","actiondispatch::requestcookiemethods","actiondispatch::requestencoder","actiondispatch::requestencoder::identityencoder","actiondispatch::requestid","actiondispatch::response","actiondispatch::response::rackbody","actiondispatch::routing","actiondispatch::routing::consoleformatter","actiondispatch::routing::consoleformatter::base","actiondispatch::routing::consoleformatter::expanded","actiondispatch::routing::consoleformatter::sheet","actiondispatch::routing::htmltableformatter","actiondispatch::routing::mapper","actiondispatch::routing::mapper::base","actiondispatch::routing::mapper::concerns","actiondispatch::routing::mapper::customurls","actiondispatch::routing::mapper::httphelpers","actiondispatch::routing::mapper::resources","actiondispatch::routing::mapper::scoping","actiondispatch::routing::pathredirect","actiondispatch::routing::polymorphicroutes","actiondispatch::routing::redirection","actiondispatch::routing::routeset","actiondispatch::routing::routeset::customurlhelper","actiondispatch::routing::routeset::dispatcher","actiondispatch::routing::routeset::generator","actiondispatch::routing::routeset::mountedhelpers","actiondispatch::routing::routeset::namedroutecollection","actiondispatch::routing::routeset::namedroutecollection::urlhelper","actiondispatch::routing::routeset::namedroutecollection::urlhelper::optimizedurlhelper","actiondispatch::routing::routeset::staticdispatcher","actiondispatch::routing::urlfor","actiondispatch::ssl","actiondispatch::servertiming","actiondispatch::session","actiondispatch::session::abstractsecurestore","actiondispatch::session::abstractstore","actiondispatch::session::cachestore","actiondispatch::session::compatibility","actiondispatch::session::cookiestore","actiondispatch::session::cookiestore::sessionid","actiondispatch::session::memcachestore","actiondispatch::session::stalesessioncheck","actiondispatch::showexceptions","actiondispatch::static","actiondispatch::systemtestcase","actiondispatch::systemtesting","actiondispatch::systemtesting::testhelpers","actiondispatch::systemtesting::testhelpers::screenshothelper","actiondispatch::testprocess","actiondispatch::testprocess::fixturefile","actiondispatch::testrequest","actiondispatch::testresponse","actionmailbox","actionmailbox::base","actionmailbox::basecontroller","actionmailbox::callbacks","actionmailbox::engine","actionmailbox::inboundemail","actionmailbox::inboundemail::incineratable","actionmailbox::inboundemail::incineratable::incineration","actionmailbox::inboundemail::messageid","actionmailbox::inboundemail::routable","actionmailbox::inboundemails","actionmailbox::incinerationjob","actionmailbox::ingresses","actionmailbox::ingresses::mailgun","actionmailbox::ingresses::mailgun::inboundemailscontroller","actionmailbox::ingresses::mailgun::inboundemailscontroller::authenticator","actionmailbox::ingresses::mandrill","actionmailbox::ingresses::mandrill::inboundemailscontroller","actionmailbox::ingresses::mandrill::inboundemailscontroller::authenticator","actionmailbox::ingresses::postmark","actionmailbox::ingresses::postmark::inboundemailscontroller","actionmailbox::ingresses::relay","actionmailbox::ingresses::relay::inboundemailscontroller","actionmailbox::ingresses::sendgrid","actionmailbox::ingresses::sendgrid::inboundemailscontroller","actionmailbox::relayer","actionmailbox::relayer::result","actionmailbox::router","actionmailbox::router::route","actionmailbox::router::routingerror","actionmailbox::routing","actionmailbox::routingjob","actionmailbox::testcase","actionmailbox::testhelper","actionmailbox::version","actionmailer","actionmailer::base","actionmailer::base::lateattachmentsproxy","actionmailer::collector","actionmailer::deliverymethods","actionmailer::deliverymethods::classmethods","actionmailer::inlinepreviewinterceptor","actionmailer::logsubscriber","actionmailer::mailhelper","actionmailer::messagedelivery","actionmailer::noninferrablemailererror","actionmailer::parameterized","actionmailer::parameterized::classmethods","actionmailer::preview","actionmailer::previews","actionmailer::previews::classmethods","actionmailer::rescuable","actionmailer::testcase","actionmailer::testcase::behavior","actionmailer::testcase::behavior::classmethods","actionmailer::testcase::cleartestdeliveries","actionmailer::testhelper","actionmailer::version","actiontext","actiontext::attachable","actiontext::attachables","actiontext::attachables::contentattachment","actiontext::attachables::missingattachable","actiontext::attachables::remoteimage","actiontext::attachment","actiontext::attachmentgallery","actiontext::attachments","actiontext::attachments::caching","actiontext::attachments::minification","actiontext::attachments::trixconversion","actiontext::attribute","actiontext::content","actiontext::contenthelper","actiontext::encryptedrichtext","actiontext::encryption","actiontext::engine","actiontext::fixtureset","actiontext::fragment","actiontext::htmlconversion","actiontext::plaintextconversion","actiontext::richtext","actiontext::serialization","actiontext::systemtesthelper","actiontext::taghelper","actiontext::trixattachment","actiontext::version","actionview","actionview::abstractrenderer","actionview::abstractrenderer::renderedcollection","actionview::abstractrenderer::renderedcollection::emptycollection","actionview::base","actionview::cacheexpiry","actionview::cacheexpiry::executor","actionview::cacheexpiry::viewmodificationwatcher","actionview::context","actionview::digestor","actionview::digestor::injected","actionview::digestor::missing","actionview::digestor::node","actionview::digestor::nulllogger","actionview::digestor::partial","actionview::filesystemresolver","actionview::fixtureresolver","actionview::helpers","actionview::helpers::activemodelhelper","actionview::helpers::activemodelinstancetag","actionview::helpers::assettaghelper","actionview::helpers::asseturlhelper","actionview::helpers::atomfeedhelper","actionview::helpers::cachehelper","actionview::helpers::cachehelper::uncacheablefragmenterror","actionview::helpers::capturehelper","actionview::helpers::csphelper","actionview::helpers::csrfhelper","actionview::helpers::datehelper","actionview::helpers::debughelper","actionview::helpers::formbuilder","actionview::helpers::formhelper","actionview::helpers::formoptionshelper","actionview::helpers::formtaghelper","actionview::helpers::javascripthelper","actionview::helpers::numberhelper","actionview::helpers::numberhelper::invalidnumbererror","actionview::helpers::outputsafetyhelper","actionview::helpers::renderinghelper","actionview::helpers::sanitizehelper","actionview::helpers::taghelper","actionview::helpers::tags","actionview::helpers::tags::actiontext","actionview::helpers::texthelper","actionview::helpers::translationhelper","actionview::helpers::urlhelper","actionview::helpers::urlhelper::classmethods","actionview::layouts","actionview::layouts::classmethods","actionview::logsubscriber","actionview::lookupcontext","actionview::lookupcontext::detailscache","actionview::lookupcontext::viewpaths","actionview::nullresolver","actionview::partialiteration","actionview::partialrenderer","actionview::recordidentifier","actionview::renderer","actionview::rendering","actionview::rendering::classmethods","actionview::resolver","actionview::routingurlfor","actionview::template","actionview::template::handlers","actionview::template::handlers::builder","actionview::template::handlers::erb","actionview::template::handlers::html","actionview::template::handlers::raw","actionview::template::sources","actionview::template::sources::file","actionview::template::types","actionview::template::types::type","actionview::templatedetails","actionview::templatedetails::requested","actionview::templatepath","actionview::testcase","actionview::testcase::behavior","actionview::testcase::behavior::classmethods","actionview::testcase::behavior::locals","actionview::testcase::behavior::renderedviewscollection","actionview::testcase::testcontroller","actionview::unboundtemplate","actionview::version","actionview::viewpaths","actionview::viewpaths::classmethods","activejob","activejob::arguments","activejob::arguments::hash","activejob::base","activejob::callbacks","activejob::callbacks::classmethods","activejob::core","activejob::core::classmethods","activejob::deserializationerror","activejob::enqueueerror","activejob::enqueuing","activejob::enqueuing::classmethods","activejob::exceptions","activejob::exceptions::classmethods","activejob::execution","activejob::execution::classmethods","activejob::queueadapter","activejob::queueadapter::classmethods","activejob::queueadapters","activejob::queueadapters::asyncadapter","activejob::queueadapters::backburneradapter","activejob::queueadapters::delayedjobadapter","activejob::queueadapters::inlineadapter","activejob::queueadapters::queadapter","activejob::queueadapters::queueclassicadapter","activejob::queueadapters::resqueadapter","activejob::queueadapters::sidekiqadapter","activejob::queueadapters::sneakersadapter","activejob::queueadapters::suckerpunchadapter","activejob::queueadapters::testadapter","activejob::queuename","activejob::queuename::classmethods","activejob::queuepriority","activejob::queuepriority::classmethods","activejob::serializationerror","activejob::serializers","activejob::serializers::objectserializer","activejob::serializers::rangeserializer","activejob::testcase","activejob::testhelper","activejob::testhelper::testqueueadapter","activejob::testhelper::testqueueadapter::classmethods","activejob::version","activemodel","activemodel::api","activemodel::attributeassignment","activemodel::attributemethods","activemodel::attributemethods::classmethods","activemodel::attributes","activemodel::attributes::classmethods","activemodel::callbacks","activemodel::conversion","activemodel::dirty","activemodel::eachvalidator","activemodel::error","activemodel::errors","activemodel::forbiddenattributeserror","activemodel::lint","activemodel::lint::tests","activemodel::missingattributeerror","activemodel::model","activemodel::name","activemodel::naming","activemodel::nestederror","activemodel::rangeerror","activemodel::securepassword","activemodel::securepassword::classmethods","activemodel::securepassword::instancemethodsonactivation","activemodel::serialization","activemodel::serializers","activemodel::serializers::json","activemodel::strictvalidationfailed","activemodel::translation","activemodel::type","activemodel::type::boolean","activemodel::type::helpers","activemodel::type::helpers::acceptsmultiparametertime","activemodel::type::helpers::acceptsmultiparametertime::instancemethods","activemodel::type::helpers::mutable","activemodel::type::helpers::numeric","activemodel::type::helpers::timevalue","activemodel::type::helpers::timezone","activemodel::type::value","activemodel::unknownattributeerror","activemodel::version","activemodel::validationerror","activemodel::validations","activemodel::validations::acceptancevalidator","activemodel::validations::acceptancevalidator::lazilydefineattributes","activemodel::validations::callbacks","activemodel::validations::callbacks::classmethods","activemodel::validations::classmethods","activemodel::validations::helpermethods","activemodel::validator","activerecord","activerecord::activejobrequirederror","activerecord::activerecorderror","activerecord::adapternotfound","activerecord::adapternotspecified","activerecord::adaptertimeout","activerecord::aggregations","activerecord::aggregations::classmethods","activerecord::associationtypemismatch","activerecord::associations","activerecord::associations::classmethods","activerecord::associations::collectionproxy","activerecord::associations::preloader","activerecord::associations::preloader::association","activerecord::associations::preloader::association::loaderquery","activerecord::associations::preloader::association::loaderrecords","activerecord::asynchronousqueryinsidetransactionerror","activerecord::attributeassignment","activerecord::attributeassignmenterror","activerecord::attributemethods","activerecord::attributemethods::beforetypecast","activerecord::attributemethods::classmethods","activerecord::attributemethods::dirty","activerecord::attributemethods::dirty::classmethods","activerecord::attributemethods::primarykey","activerecord::attributemethods::primarykey::classmethods","activerecord::attributemethods::query","activerecord::attributemethods::read","activerecord::attributemethods::serialization","activerecord::attributemethods::serialization::classmethods","activerecord::attributemethods::serialization::columnnotserializableerror","activerecord::attributemethods::timezoneconversion","activerecord::attributemethods::write","activerecord::attributes","activerecord::attributes::classmethods","activerecord::autosaveassociation","activerecord::base","activerecord::batches","activerecord::batches::batchenumerator","activerecord::calculations","activerecord::callbacks","activerecord::callbacks::classmethods","activerecord::configurationerror","activerecord::connectionadapters","activerecord::connectionadapters::abstractadapter","activerecord::connectionadapters::abstractadapter::version","activerecord::connectionadapters::abstractmysqladapter","activerecord::connectionadapters::column","activerecord::connectionadapters::columnmethods","activerecord::connectionadapters::connectionhandler","activerecord::connectionadapters::connectionpool","activerecord::connectionadapters::connectionpool::queue","activerecord::connectionadapters::connectionpool::reaper","activerecord::connectionadapters::databaselimits","activerecord::connectionadapters::databasestatements","activerecord::connectionadapters::deduplicable","activerecord::connectionadapters::deduplicable::classmethods","activerecord::connectionadapters::mysql","activerecord::connectionadapters::mysql::columnmethods","activerecord::connectionadapters::mysql::databasestatements","activerecord::connectionadapters::mysql::table","activerecord::connectionadapters::mysql::tabledefinition","activerecord::connectionadapters::mysql2adapter","activerecord::connectionadapters::nullcolumn","activerecord::connectionadapters::postgresql","activerecord::connectionadapters::postgresql::altertable","activerecord::connectionadapters::postgresql::columnmethods","activerecord::connectionadapters::postgresql::databasestatements","activerecord::connectionadapters::postgresql::oid","activerecord::connectionadapters::postgresql::oid::bit","activerecord::connectionadapters::postgresql::oid::bit::data","activerecord::connectionadapters::postgresql::quoting","activerecord::connectionadapters::postgresql::schemastatements","activerecord::connectionadapters::postgresql::table","activerecord::connectionadapters::postgresql::tabledefinition","activerecord::connectionadapters::postgresql::typemetadata","activerecord::connectionadapters::postgresqladapter","activerecord::connectionadapters::querycache","activerecord::connectionadapters::querycache::connectionpoolconfiguration","activerecord::connectionadapters::quoting","activerecord::connectionadapters::realtransaction","activerecord::connectionadapters::sqlite3","activerecord::connectionadapters::sqlite3::databasestatements","activerecord::connectionadapters::sqlite3::tabledefinition","activerecord::connectionadapters::sqlite3adapter","activerecord::connectionadapters::savepointtransaction","activerecord::connectionadapters::savepoints","activerecord::connectionadapters::schemacache","activerecord::connectionadapters::schemastatements","activerecord::connectionadapters::sqltypemetadata","activerecord::connectionadapters::table","activerecord::connectionadapters::tabledefinition","activerecord::connectionadapters::transactionstate","activerecord::connectionhandling","activerecord::connectionnotestablished","activerecord::connectiontimeouterror","activerecord::core","activerecord::core::classmethods","activerecord::core::inspectionmask","activerecord::countercache","activerecord::countercache::classmethods","activerecord::dangerousattributeerror","activerecord::databasealreadyexists","activerecord::databaseconfigurations","activerecord::databaseconfigurations::hashconfig","activerecord::databaseconfigurations::invalidconfigurationerror","activerecord::databaseconfigurations::urlconfig","activerecord::databaseconnectionerror","activerecord::deadlocked","activerecord::delegatedtype","activerecord::destroyassociationasyncerror","activerecord::destroyassociationasyncjob","activerecord::dynamicmatchers","activerecord::dynamicmatchers::findby","activerecord::dynamicmatchers::findbybang","activerecord::dynamicmatchers::method","activerecord::eagerloadpolymorphicerror","activerecord::encryption","activerecord::encryption::cipher","activerecord::encryption::cipher::aes256gcm","activerecord::encryption::config","activerecord::encryption::configurable","activerecord::encryption::context","activerecord::encryption::contexts","activerecord::encryption::derivedsecretkeyprovider","activerecord::encryption::deterministickeyprovider","activerecord::encryption::encryptablerecord","activerecord::encryption::encryptedattributetype","activerecord::encryption::encryptedfixtures","activerecord::encryption::encryptingonlyencryptor","activerecord::encryption::encryptor","activerecord::encryption::envelopeencryptionkeyprovider","activerecord::encryption::errors","activerecord::encryption::errors::base","activerecord::encryption::errors::configuration","activerecord::encryption::errors::decryption","activerecord::encryption::errors::encoding","activerecord::encryption::errors::encryptedcontentintegrity","activerecord::encryption::errors::encryption","activerecord::encryption::errors::forbiddenclass","activerecord::encryption::extendeddeterministicqueries","activerecord::encryption::extendeddeterministicqueries::additionalvalue","activerecord::encryption::extendeddeterministicqueries::corequeries","activerecord::encryption::extendeddeterministicqueries::encryptedqueryargumentprocessor","activerecord::encryption::extendeddeterministicqueries::extendedencryptabletype","activerecord::encryption::extendeddeterministicqueries::inwithadditionalvalues","activerecord::encryption::extendeddeterministicqueries::relationqueries","activerecord::encryption::extendeddeterministicuniquenessvalidator","activerecord::encryption::extendeddeterministicuniquenessvalidator::encrypteduniquenessvalidator","activerecord::encryption::key","activerecord::encryption::keygenerator","activerecord::encryption::keyprovider","activerecord::encryption::message","activerecord::encryption::messageserializer","activerecord::encryption::nullencryptor","activerecord::encryption::properties","activerecord::encryption::readonlynullencryptor","activerecord::encryption::scheme","activerecord::enum","activerecord::environmentmismatcherror","activerecord::exclusiveconnectiontimeouterror","activerecord::explain","activerecord::findermethods","activerecord::fixtureset","activerecord::fixtureset::classcache","activerecord::futureresult","activerecord::futureresult::eventbuffer","activerecord::immutablerelation","activerecord::inheritance","activerecord::inheritance::classmethods","activerecord::integration","activerecord::integration::classmethods","activerecord::invalidforeignkey","activerecord::irreversiblemigration","activerecord::irreversibleordererror","activerecord::lockwaittimeout","activerecord::locking","activerecord::locking::optimistic","activerecord::locking::optimistic::classmethods","activerecord::locking::pessimistic","activerecord::logsubscriber","activerecord::middleware","activerecord::middleware::databaseselector","activerecord::middleware::shardselector","activerecord::migration","activerecord::migration::checkpending","activerecord::migration::commandrecorder","activerecord::migration::compatibility","activerecord::migration::compatibility::v4_2","activerecord::migration::compatibility::v4_2::tabledefinition","activerecord::migration::compatibility::v5_0","activerecord::migration::compatibility::v5_0::tabledefinition","activerecord::migration::compatibility::v5_1","activerecord::migration::compatibility::v5_2","activerecord::migration::compatibility::v5_2::commandrecorder","activerecord::migration::compatibility::v5_2::tabledefinition","activerecord::migration::compatibility::v6_0","activerecord::migration::compatibility::v6_0::referencedefinition","activerecord::migration::compatibility::v6_0::tabledefinition","activerecord::migration::compatibility::v6_1","activerecord::migration::compatibility::v6_1::postgresqlcompat","activerecord::migration::compatibility::v6_1::tabledefinition","activerecord::migrationcontext","activerecord::mismatchedforeignkey","activerecord::modelschema","activerecord::modelschema::classmethods","activerecord::multiparameterassignmenterrors","activerecord::nestedattributes","activerecord::nestedattributes::classmethods","activerecord::nestedattributes::toomanyrecords","activerecord::nodatabaseerror","activerecord::notouching","activerecord::notouching::classmethods","activerecord::notnullviolation","activerecord::persistence","activerecord::persistence::classmethods","activerecord::preparedstatementcacheexpired","activerecord::preparedstatementinvalid","activerecord::queryaborted","activerecord::querycache","activerecord::querycache::classmethods","activerecord::querycanceled","activerecord::querylogs","activerecord::querymethods","activerecord::querymethods::wherechain","activerecord::querying","activerecord::rangeerror","activerecord::readonlyerror","activerecord::readonlyrecord","activerecord::readonlyattributes","activerecord::readonlyattributes::classmethods","activerecord::recordinvalid","activerecord::recordnotdestroyed","activerecord::recordnotfound","activerecord::recordnotsaved","activerecord::recordnotunique","activerecord::reflection","activerecord::reflection::classmethods","activerecord::reflection::macroreflection","activerecord::relation","activerecord::relation::recordfetchwarning","activerecord::result","activerecord::rollback","activerecord::sanitization","activerecord::sanitization::classmethods","activerecord::schema","activerecord::schema::definition","activerecord::schema::definition::classmethods","activerecord::scoping","activerecord::scoping::default","activerecord::scoping::default::classmethods","activerecord::scoping::named","activerecord::scoping::named::classmethods","activerecord::securetoken","activerecord::securetoken::classmethods","activerecord::securetoken::minimumlengtherror","activerecord::serialization","activerecord::serializationfailure","activerecord::serializationtypemismatch","activerecord::signedid","activerecord::signedid::classmethods","activerecord::solerecordexceeded","activerecord::spawnmethods","activerecord::staleobjecterror","activerecord::statementcache","activerecord::statementcache::partialquerycollector","activerecord::statementinvalid","activerecord::statementtimeout","activerecord::store","activerecord::store::classmethods","activerecord::strictloadingviolationerror","activerecord::subclassnotfound","activerecord::suppressor","activerecord::suppressor::classmethods","activerecord::tablenotspecified","activerecord::tasks","activerecord::tasks::databasetasks","activerecord::testfixtures","activerecord::testfixtures::classmethods","activerecord::timestamp","activerecord::transactionisolationerror","activerecord::transactionrollbackerror","activerecord::transactions","activerecord::transactions::classmethods","activerecord::translation","activerecord::type","activerecord::type::biginteger","activerecord::type::binary","activerecord::type::boolean","activerecord::type::date","activerecord::type::datetime","activerecord::type::decimal","activerecord::type::float","activerecord::type::immutablestring","activerecord::type::integer","activerecord::type::internal","activerecord::type::internal::timezone","activerecord::type::json","activerecord::type::string","activerecord::type::time","activerecord::type::value","activerecord::unknownattributeerror","activerecord::unknownattributereference","activerecord::unknownprimarykey","activerecord::version","activerecord::validations","activerecord::validations::classmethods","activerecord::valuetoolong","activerecord::wrappeddatabaseexception","activestorage","activestorage::analyzejob","activestorage::analyzer","activestorage::analyzer::audioanalyzer","activestorage::analyzer::imageanalyzer","activestorage::analyzer::imageanalyzer::imagemagick","activestorage::analyzer::imageanalyzer::vips","activestorage::analyzer::videoanalyzer","activestorage::attached","activestorage::attached::many","activestorage::attached::model","activestorage::attached::one","activestorage::attachment","activestorage::basecontroller","activestorage::basejob","activestorage::blob","activestorage::blob::analyzable","activestorage::blob::identifiable","activestorage::blob::representable","activestorage::blobs","activestorage::blobs::proxycontroller","activestorage::blobs::redirectcontroller","activestorage::directuploadscontroller","activestorage::diskcontroller","activestorage::error","activestorage::filenotfounderror","activestorage::filename","activestorage::fixtureset","activestorage::integrityerror","activestorage::invariableerror","activestorage::logsubscriber","activestorage::mirrorjob","activestorage::preview","activestorage::preview::unprocessederror","activestorage::previewerror","activestorage::previewer","activestorage::previewer::mupdfpreviewer","activestorage::previewer::popplerpdfpreviewer","activestorage::previewer::videopreviewer","activestorage::purgejob","activestorage::reflection","activestorage::reflection::activerecordextensions","activestorage::reflection::activerecordextensions::classmethods","activestorage::representations","activestorage::representations::proxycontroller","activestorage::representations::redirectcontroller","activestorage::service","activestorage::service::azurestorageservice","activestorage::service::diskservice","activestorage::service::gcsservice","activestorage::service::gcsservice::metadataservererror","activestorage::service::gcsservice::metadataservernotfounderror","activestorage::service::mirrorservice","activestorage::service::s3service","activestorage::setcurrent","activestorage::streaming","activestorage::transformers","activestorage::transformers::imageprocessingtransformer","activestorage::transformers::imageprocessingtransformer::unsupportedimageprocessingargument","activestorage::transformers::imageprocessingtransformer::unsupportedimageprocessingmethod","activestorage::transformers::transformer","activestorage::unpreviewableerror","activestorage::unrepresentableerror","activestorage::version","activestorage::variant","activestorage::variantrecord","activestorage::variantwithrecord","activestorage::variation","activesupport","activesupport::actionableerror","activesupport::actionableerror::classmethods","activesupport::actionableerror::nonactionable","activesupport::arrayinquirer","activesupport::autoload","activesupport::backtracecleaner","activesupport::benchmarkable","activesupport::cache","activesupport::cache::coders","activesupport::cache::coders::loader","activesupport::cache::coders::rails61coder","activesupport::cache::coders::rails70coder","activesupport::cache::connectionpoollike","activesupport::cache::filestore","activesupport::cache::memcachestore","activesupport::cache::memcachestore::coders","activesupport::cache::memcachestore::coders::loader","activesupport::cache::memcachestore::coders::rails61coder","activesupport::cache::memcachestore::coders::rails70coder","activesupport::cache::memcachestore::duplocalcache","activesupport::cache::memcachestore::duplocalcache::duplocalstore","activesupport::cache::memorystore","activesupport::cache::nullstore","activesupport::cache::rediscachestore","activesupport::cache::store","activesupport::cache::strategy","activesupport::cache::strategy::localcache","activesupport::cache::strategy::localcache::localstore","activesupport::cachingkeygenerator","activesupport::callbacks","activesupport::callbacks::calltemplate","activesupport::callbacks::calltemplate::instanceexec0","activesupport::callbacks::calltemplate::instanceexec1","activesupport::callbacks::calltemplate::instanceexec2","activesupport::callbacks::calltemplate::methodcall","activesupport::callbacks::calltemplate::objectcall","activesupport::callbacks::calltemplate::proccall","activesupport::callbacks::classmethods","activesupport::callbacks::conditionals","activesupport::callbacks::conditionals::value","activesupport::callbacks::filters","activesupport::callbacks::filters::after","activesupport::callbacks::filters::before","activesupport::codegenerator","activesupport::codegenerator::methodset","activesupport::comparewithrange","activesupport::concern","activesupport::concurrency","activesupport::concurrency::loadinterlockawaremonitor","activesupport::concurrency::sharelock","activesupport::configurable","activesupport::configurable::classmethods","activesupport::configurable::configuration","activesupport::configurationfile","activesupport::configurationfile::formaterror","activesupport::currentattributes","activesupport::dependencies","activesupport::dependencies::interlock","activesupport::dependencies::requiredependency","activesupport::deprecation","activesupport::deprecation::behavior","activesupport::deprecation::deprecatedconstantaccessor","activesupport::deprecation::deprecatedconstantproxy","activesupport::deprecation::deprecatedinstancevariableproxy","activesupport::deprecation::deprecatedobjectproxy","activesupport::deprecation::disallowed","activesupport::deprecation::methodwrapper","activesupport::deprecation::reporting","activesupport::deprecationexception","activesupport::descendantstracker","activesupport::duration","activesupport::duration::iso8601parser","activesupport::duration::iso8601parser::parsingerror","activesupport::encryptedconfiguration","activesupport::encryptedfile","activesupport::encryptedfile::invalidkeylengtherror","activesupport::encryptedfile::missingcontenterror","activesupport::encryptedfile::missingkeyerror","activesupport::enumerablecoreext","activesupport::enumerablecoreext::constants","activesupport::errorreporter","activesupport::eventedfileupdatechecker","activesupport::eventedfileupdatechecker::core","activesupport::executionwrapper","activesupport::executor","activesupport::fileupdatechecker","activesupport::forktracker","activesupport::forktracker::coreext","activesupport::forktracker::coreextprivate","activesupport::forktracker::moderncoreext","activesupport::gzip","activesupport::gzip::stream","activesupport::hashwithindifferentaccess","activesupport::hashwithindifferentaccess","activesupport::inflector","activesupport::inflector::inflections","activesupport::inflector::inflections::uncountables","activesupport::inheritableoptions","activesupport::json","activesupport::keygenerator","activesupport::lazyloadhooks","activesupport::logsubscriber","activesupport::logsubscriber::testhelper","activesupport::logsubscriber::testhelper::mocklogger","activesupport::logger","activesupport::logger::simpleformatter","activesupport::loggersilence","activesupport::messageencryptor","activesupport::messageencryptor::invalidmessage","activesupport::messageverifier","activesupport::messageverifier::invalidsignature","activesupport::messages","activesupport::messages::rotator","activesupport::messages::rotator::encryptor","activesupport::messages::rotator::verifier","activesupport::multibyte","activesupport::multibyte::chars","activesupport::multibyte::unicode","activesupport::notifications","activesupport::notifications::event","activesupport::notifications::fanout","activesupport::notifications::fanout::subscribers","activesupport::notifications::fanout::subscribers::eventobject","activesupport::notifications::fanout::subscribers::matcher","activesupport::notifications::fanout::subscribers::matcher::allmessages","activesupport::notifications::instrumentationsubscribererror","activesupport::notifications::instrumenter","activesupport::numberhelper","activesupport::numericwithformat","activesupport::orderedoptions","activesupport::parameterfilter","activesupport::perthreadregistry","activesupport::proxyobject","activesupport::rangewithformat","activesupport::reloader","activesupport::rescuable","activesupport::rescuable::classmethods","activesupport::safebuffer","activesupport::safebuffer::safeconcaterror","activesupport::securecomparerotator","activesupport::securityutils","activesupport::stringinquirer","activesupport::subscriber","activesupport::taggedlogging","activesupport::testcase","activesupport::testing","activesupport::testing::assertions","activesupport::testing::constantlookup","activesupport::testing::declarative","activesupport::testing::deprecation","activesupport::testing::filefixtures","activesupport::testing::isolation","activesupport::testing::isolation::forking","activesupport::testing::isolation::subprocess","activesupport::testing::parallelization","activesupport::testing::parallelization::server","activesupport::testing::parallelization::worker","activesupport::testing::setupandteardown","activesupport::testing::setupandteardown::classmethods","activesupport::testing::timehelpers","activesupport::timewithzone","activesupport::timezone","activesupport::version","activesupport::xmlconverter","activesupport::xmlconverter::disallowedtype","activesupport::xmlmini","activesupport::xmlmini_libxmlsax","activesupport::xmlmini_libxmlsax::hashbuilder","activesupport::xmlmini_nokogirisax","activesupport::xmlmini_nokogirisax::hashbuilder","arel","arel::nodes","array","benchmark","bigdecimal","class","date","dateandtime","dateandtime::calculations","dateandtime::compatibility","dateandtime::zones","datetime","delegator","digest","digest::uuid","erb","erb::util","enumerable","enumerable::soleitemexpectederror","exception","falseclass","file","float","hash","io","integer","kernel","loaderror","mail","mail::address","mail::message","method","mime","mime::alltype","mime::mimes","mime::nulltype","mime::type","mime::type::invalidmimetype","minitest","minitest::backtracefilterwithfallback","minitest::suppressedsummaryreporter","module","module::concerning","module::delegationerror","nameerror","nilclass","numeric","object","pathname","process","rails","rails::api","rails::api::edgetask","rails::api::repotask","rails::api::stabletask","rails::api::task","rails::appbuilder","rails::application","rails::application::bootstrap","rails::application::configuration","rails::application::defaultmiddlewarestack","rails::application::finisher","rails::application::finisher::interlockhook","rails::application::finisher::mutexhook","rails::application::routesreloader","rails::backtracecleaner","rails::command","rails::command::actions","rails::command::base","rails::command::db","rails::command::db::system","rails::command::helpers","rails::command::helpers::editor","rails::conductor","rails::configuration","rails::configuration::middlewarestackproxy","rails::console","rails::console::backtracecleaner","rails::consolemethods","rails::dbconsole","rails::engine","rails::engine::configuration","rails::engine::railties","rails::engine::updater","rails::generators","rails::generators::actions","rails::generators::activemodel","rails::generators::appbase","rails::generators::appbase::gemfileentry","rails::generators::appgenerator","rails::generators::base","rails::generators::benchmarkgenerator","rails::generators::db","rails::generators::db::system","rails::generators::migration","rails::generators::namedbase","rails::generators::testcase","rails::generators::testing","rails::generators::testing::assertions","rails::generators::testing::behaviour","rails::generators::testing::behaviour::classmethods","rails::generators::testing::setupandteardown","rails::info","rails::initializable","rails::initializable::classmethods","rails::initializable::collection","rails::initializable::initializer","rails::paths","rails::paths::path","rails::paths::root","rails::pluginbuilder","rails::rack","rails::rack::logger","rails::rails","rails::rails::conductor","rails::rails::conductor::actionmailbox","rails::rails::conductor::actionmailbox::inboundemails","rails::rails::conductor::actionmailbox::inboundemails::sourcescontroller","rails::rails::conductor::actionmailbox::inboundemailscontroller","rails::rails::conductor::actionmailbox::incineratescontroller","rails::rails::conductor::actionmailbox::reroutescontroller","rails::railtie","rails::railtie::configurable","rails::railtie::configurable::classmethods","rails::railtie::configuration","rails::secrets","rails::secrets::missingkeyerror","rails::server","rails::server::options","rails::sourceannotationextractor","rails::sourceannotationextractor::annotation","rails::version","range","regexp","securerandom","singleton","string","symbol","time","trueclass","uri","unboundmethod","activemodel::name#!~()","activesupport::duration#%()","activesupport::safebuffer#%()","activesupport::duration#*()","activesupport::safebuffer#*()","activesupport::duration#+()","activesupport::safebuffer#+()","activesupport::timewithzone#+()","rails::initializable::collection#+()","activesupport::duration#-()","activesupport::timewithzone#-()","rails::engine::railties#-()","time#-()","activerecord::connectionadapters::deduplicable#-@()","activesupport::duration#/()","activerecord::associations::collectionproxy#<<()","activerecord::statementcache::partialquerycollector#<<()","activesupport::inflector::inflections::uncountables#<<()","activesupport::notifications::event#<<()","activesupport::safebuffer#<<()","activesupport::testing::parallelization::server#<<()","mime::mimes#<<()","rails::paths::path#<<()","activemodel::name#<=>()","activerecord::connectionadapters::abstractadapter::version#<=>()","activerecord::core#<=>()","activestorage::filename#<=>()","activesupport::duration#<=>()","activesupport::timewithzone#<=>()","activesupport::timezone#<=>()","date#<=>()","datetime#<=>()","time#<=>()","actioncontroller::parameters#==()","actiondispatch::middlewarestack::middleware#==()","actiontext::content#==()","actionview::filesystemresolver#==()","actionview::template::types::type#==()","activemodel::name#==()","activemodel::type::value#==()","activemodel::type::value#==()","activemodel::validations::acceptancevalidator::lazilydefineattributes#==()","activerecord::associations::collectionproxy#==()","activerecord::core#==()","activerecord::encryption::message#==()","activerecord::reflection::macroreflection#==()","activerecord::relation#==()","activesupport::duration#==()","mail::address#==()","mime::type#==()","activemodel::name#===()","activesupport::comparewithrange#===()","activesupport::notifications::fanout::subscribers::matcher::allmessages#===()","mime::type#===()","time::===()","activemodel::name#=~()","activesupport::timezone#=~()","mime::type#=~()","actiondispatch::request#get()","actiondispatch::request#post()","actioncontroller::parameters#[]()","actiondispatch::flash::flashhash#[]()","actiondispatch::http::headers#[]()","actiondispatch::middlewarestack#[]()","actionview::template::types::[]()","actionview::template::types::type::[]()","activemodel::errors#[]()","activerecord::attributemethods#[]()","activerecord::connectionadapters::tabledefinition#[]()","activerecord::fixtureset#[]()","activerecord::fixtureset::classcache#[]()","activerecord::migration::[]()","activerecord::result#[]()","activerecord::schema::[]()","activesupport::hashwithindifferentaccess::[]()","activesupport::hashwithindifferentaccess#[]()","activesupport::hashwithindifferentaccess::[]()","activesupport::hashwithindifferentaccess#[]()","activesupport::orderedoptions#[]()","activesupport::safebuffer#[]()","activesupport::timezone::[]()","mime::[]()","rails::paths::root#[]()","actioncontroller::parameters#[]=()","actiondispatch::flash::flashhash#[]=()","actiondispatch::http::headers#[]=()","actionmailer::base::lateattachmentsproxy#[]=()","activerecord::attributemethods#[]=()","activerecord::encryption::properties#[]=()","activerecord::fixtureset#[]=()","activesupport::hashwithindifferentaccess#[]=()","activesupport::hashwithindifferentaccess#[]=()","activesupport::orderedoptions#[]=()","activesupport::safebuffer#[]=()","rails::paths::root#[]=()","actionview::helpers::urlhelper#_current_page?()","actiontext::serialization#_dump()","activesupport::forktracker::moderncoreext#_fork()","activesupport::orderedoptions#_get()","abstractcontroller::helpers#_helpers()","actionview::rendering::classmethods#_helpers()","abstractcontroller::helpers::classmethods#_helpers_for_modification()","abstractcontroller::callbacks::classmethods#_insert_callbacks()","actionview::context#_layout_for()","actionview::helpers::renderinghelper#_layout_for()","abstractcontroller::rendering#_normalize_args()","abstractcontroller::callbacks::classmethods#_normalize_callback_options()","abstractcontroller::rendering#_normalize_options()","actionview::context#_prepare_context()","abstractcontroller::rendering#_process_options()","actioncontroller::renderers#_render_to_body_with_renderer()","actioncontroller::renderers::_render_with_renderer_method_name()","abstractcontroller::urlfor#_routes()","abstractcontroller::urlfor::classmethods#_routes()","actionview::rendering::classmethods#_routes()","actionview::testcase::behavior#_routes()","actiondispatch::routing::urlfor#_routes_context()","actionview::base#_run()","actionview::lookupcontext::detailscache#_set_detail()","actioncontroller::paramswrapper::options::classmethods#_set_wrapper_options()","actionview::testcase::behavior#_test_case()","actionview::helpers::formbuilder::_to_partial_path()","actionview::helpers::urlhelper::classmethods#_url_for_modules()","actionview::viewpaths::classmethods#_view_paths()","actionview::viewpaths::classmethods#_view_paths=()","actiondispatch::routing::urlfor#_with_routes()","actiondispatch::response#abort()","abstractcontroller::base::abstract!()","activerecord::inheritance::classmethods#abstract_class?()","rails::railtie::abstract_railtie?()","actiondispatch::testrequest#accept=()","activestorage::analyzer::accept?()","activestorage::analyzer::audioanalyzer::accept?()","activestorage::analyzer::imageanalyzer::accept?()","activestorage::analyzer::imageanalyzer::imagemagick::accept?()","activestorage::analyzer::imageanalyzer::vips::accept?()","activestorage::analyzer::videoanalyzer::accept?()","activestorage::previewer::accept?()","activestorage::previewer::mupdfpreviewer::accept?()","activestorage::previewer::popplerpdfpreviewer::accept?()","activestorage::previewer::videopreviewer::accept?()","actiondispatch::requestencoder::identityencoder#accept_header()","actiondispatch::http::mimenegotiation#accepts()","activerecord::nestedattributes::classmethods#accepts_nested_attributes_for()","activerecord::attributemethods#accessed_fields()","activerecord::type::json#accessor()","activesupport::inflector::inflections#acronym()","actioncontroller::metal::action()","activesupport::actionableerror::classmethods#action()","actiondispatch::testrequest#action=()","actioncable::helpers::actioncablehelper#action_cable_meta_tag()","actionview::layouts#action_has_layout?()","abstractcontroller::base::action_methods()","abstractcontroller::base#action_methods()","abstractcontroller::urlfor::classmethods#action_methods()","actioncable::channel::base::action_methods()","abstractcontroller::base#action_name()","activerecord::connectionadapters::abstractadapter#active?()","activerecord::connectionadapters::mysql2adapter#active?()","activerecord::connectionadapters::postgresqladapter#active?()","activerecord::connectionadapters::sqlite3adapter#active?()","activerecord::connectionadapters::connectionpool#active_connection?()","activerecord::connectionadapters::connectionhandler#active_connections?()","activerecord::encryption::envelopeencryptionkeyprovider#active_primary_key()","activesupport::testing::parallelization::server#active_workers?()","object#acts_like?()","date#acts_like_date?()","datetime#acts_like_date?()","string#acts_like_string?()","activesupport::timewithzone#acts_like_time?()","datetime#acts_like_time?()","time#acts_like_time?()","activerecord::databaseconfigurations::hashconfig#adapter()","activerecord::connectionadapters::abstractadapter#adapter_name()","actioncontroller::renderers::add()","actiondispatch::http::headers#add()","actionview::testcase::behavior::renderedviewscollection#add()","activemodel::errors#add()","activerecord::connectionadapters::connectionpool::queue#add()","activerecord::connectionadapters::schemacache#add()","activerecord::encryption::properties#add()","activesupport::inflector::inflections::uncountables#add()","rails::paths::root#add()","activerecord::connectionadapters::schemastatements#add_belongs_to()","activerecord::statementcache::partialquerycollector#add_bind()","activerecord::statementcache::partialquerycollector#add_binds()","actioncable::subscriptionadapter::postgresql::listener#add_channel()","actioncable::subscriptionadapter::redis::listener#add_channel()","actioncable::subscriptionadapter::subscribermap#add_channel()","activerecord::connectionadapters::schemastatements#add_check_constraint()","activerecord::connectionadapters::transactionstate#add_child()","activerecord::connectionadapters::schemastatements#add_column()","actionmailer::deliverymethods::classmethods#add_delivery_method()","activesupport::subscriber::add_event_subscriber()","activesupport::backtracecleaner#add_filter()","actioncontroller::flash::classmethods#add_flash_types()","activerecord::connectionadapters::schemastatements#add_foreign_key()","activerecord::connectionadapters::schemastatements#add_index()","activerecord::encryption::encryptablerecord#add_length_validation_for_encrypted_columns()","activerecord::connectionadapters::schemastatements#add_reference()","actioncontroller::add_renderer()","actionmailbox::router#add_route()","actionmailbox::router#add_routes()","rails::generators::base::add_shebang_option!()","activesupport::backtracecleaner#add_silencer()","rails::generators::actions#add_source()","actioncable::subscriptionadapter::async::asyncsubscribermap#add_subscriber()","actioncable::subscriptionadapter::subscribermap#add_subscriber()","actioncable::connection::taggedloggerproxy#add_tags()","activerecord::connectionadapters::schemastatements#add_timestamps()","activerecord::connectionadapters::databasestatements#add_transaction_record()","activemodel::errors#added?()","activesupport::timewithzone#advance()","date#advance()","datetime#advance()","time#advance()","actiondispatch::callbacks::after()","activesupport::duration#after()","rails::initializable::initializer#after()","dateandtime::calculations#after?()","abstractcontroller::callbacks::classmethods#after_action()","rails::generators::appgenerator#after_bundle()","activesupport::reloader::after_class_unload()","activerecord::transactions::classmethods#after_commit()","activerecord::callbacks::classmethods#after_create()","activerecord::transactions::classmethods#after_create_commit()","activerecord::callbacks::classmethods#after_destroy()","activerecord::transactions::classmethods#after_destroy_commit()","activejob::callbacks::classmethods#after_enqueue()","activerecord::callbacks::classmethods#after_find()","activesupport::testing::parallelization::worker#after_fork()","activerecord::callbacks::classmethods#after_initialize()","rails::railtie::configuration#after_initialize()","activejob::callbacks::classmethods#after_perform()","actionmailbox::callbacks#after_processing()","activesupport::currentattributes::after_reset()","activerecord::transactions::classmethods#after_rollback()","activerecord::callbacks::classmethods#after_save()","activerecord::transactions::classmethods#after_save_commit()","actioncable::channel::callbacks::classmethods#after_subscribe()","activesupport::testing::timehelpers#after_teardown()","activerecord::callbacks::classmethods#after_touch()","actioncable::channel::callbacks::classmethods#after_unsubscribe()","activerecord::callbacks::classmethods#after_update()","activerecord::transactions::classmethods#after_update_commit()","activemodel::validations::callbacks::classmethods#after_validation()","minitest::suppressedsummaryreporter#aggregated_results()","activesupport::duration#ago()","activesupport::timewithzone#ago()","date#ago()","datetime#ago()","time#ago()","actiondispatch::flash::flashhash#alert()","actiondispatch::flash::flashhash#alert=()","activemodel::attributemethods::classmethods#alias_attribute()","module#alias_attribute()","actioncontroller::mimeresponds::collector#all()","actionmailer::collector#all()","actionmailer::preview::all()","activerecord::scoping::named::classmethods#all()","activesupport::timezone::all()","rails::generators::activemodel::all()","mime::alltype#all?()","mime::type#all?()","activerecord::connectionadapters::connectionhandler#all_connection_pools()","dateandtime::calculations#all_day()","activerecord::connectionadapters::abstractadapter#all_foreign_keys_valid?()","actioncontroller::helpers::classmethods#all_helpers_from_path()","dateandtime::calculations#all_month()","rails::paths::root#all_paths()","dateandtime::calculations#all_quarter()","dateandtime::calculations#all_week()","dateandtime::calculations#all_year()","activesupport::notifications::event#allocations()","activesupport::deprecation::reporting#allow()","activestorage::blob::analyzable#analyze()","activestorage::blob::analyzable#analyze_later()","activestorage::analyzer::analyze_later?()","activestorage::blob::analyzable#analyzed?()","activerecord::querymethods#and()","activerecord::querymethods#annotate()","rails::application::configuration#annotations()","activerecord::migration#announce()","module#anonymous?()","actioncontroller::mimeresponds::collector#any()","actionmailer::collector#any()","actionview::lookupcontext::viewpaths#any?()","activerecord::associations::collectionproxy#any?()","activerecord::relation#any?()","activesupport::arrayinquirer#any?()","actioncontroller::requestforgeryprotection#any_authenticity_token_valid?()","actioncontroller::mimeresponds::collector#any_response?()","actionview::lookupcontext::viewpaths#any_templates?()","activerecord::connectionadapters::connectionpool::queue#any_waiting?()","rails::api::repotask#api_dir()","rails::api::task#api_main()","rails::generators::api_only!()","rails::application::configuration#api_only=()","actiondispatch::routing::mapper::resources#api_only?()","actiondispatch::integrationtest::behavior#app()","actiondispatch::integrationtest::behavior::classmethods#app()","rails::appbuilder#app()","rails::consolemethods#app()","rails::engine#app()","rails::pluginbuilder#app()","actiondispatch::integrationtest::behavior::classmethods#app=()","rails::railtie::configuration#app_generators()","rails::railtie::configuration#app_middleware()","activerecord::associations::collectionproxy#append()","abstractcontroller::callbacks::classmethods#append_after_action()","abstractcontroller::callbacks::classmethods#append_around_action()","actiontext::content#append_attachables()","abstractcontroller::callbacks::classmethods#append_before_action()","actioncontroller::instrumentation#append_info_to_payload()","actionview::viewpaths#append_view_path()","actionview::viewpaths::classmethods#append_view_path()","rails::application()","rails::generators::actions#application()","rails::generators::namedbase#application_name()","actiondispatch::exceptionwrapper#application_trace()","activesupport::codegenerator::methodset#apply()","rails::generators::testing::behaviour::classmethods#arguments()","abstractcontroller::callbacks::classmethods#around_action()","activerecord::callbacks::classmethods#around_create()","activerecord::callbacks::classmethods#around_destroy()","activejob::callbacks::classmethods#around_enqueue()","activejob::callbacks::classmethods#around_perform()","actionmailbox::callbacks#around_processing()","activerecord::callbacks::classmethods#around_save()","activerecord::callbacks::classmethods#around_update()","actioncontroller::parameters#as_json()","actiontext::attachable#as_json()","actiontext::content#as_json()","activemodel::errors#as_json()","activemodel::serializers::json#as_json()","activestorage::filename#as_json()","activesupport::timewithzone#as_json()","exception#as_json()","actioncable::channel::testcase::behavior#assert_broadcast_on()","actioncable::testhelper#assert_broadcast_on()","actioncable::channel::testcase::behavior#assert_broadcasts()","actioncable::testhelper#assert_broadcasts()","activesupport::testing::assertions#assert_changes()","rails::generators::testing::assertions#assert_class_method()","activesupport::testing::deprecation#assert_deprecated()","activesupport::testing::assertions#assert_difference()","rails::generators::testing::assertions#assert_directory()","actionmailer::testhelper#assert_emails()","actionmailer::testhelper#assert_enqueued_email_with()","actionmailer::testhelper#assert_enqueued_emails()","activejob::testhelper#assert_enqueued_jobs()","activejob::testhelper#assert_enqueued_with()","rails::generators::testing::assertions#assert_field_default_value()","rails::generators::testing::assertions#assert_field_type()","rails::generators::testing::assertions#assert_file()","actiondispatch::assertions::routingassertions#assert_generates()","actioncable::channel::testcase::behavior#assert_has_stream()","actioncable::channel::testcase::behavior#assert_has_stream_for()","rails::generators::testing::assertions#assert_instance_method()","rails::generators::testing::assertions#assert_method()","rails::generators::testing::assertions#assert_migration()","actioncable::testhelper#assert_no_broadcasts()","activesupport::testing::assertions#assert_no_changes()","activesupport::testing::assertions#assert_no_difference()","rails::generators::testing::assertions#assert_no_directory()","actionmailer::testhelper#assert_no_emails()","actionmailer::testhelper#assert_no_enqueued_emails()","activejob::testhelper#assert_no_enqueued_jobs()","rails::generators::testing::assertions#assert_no_file()","rails::generators::testing::assertions#assert_no_migration()","activejob::testhelper#assert_no_performed_jobs()","actioncable::channel::testcase::behavior#assert_no_streams()","activesupport::testing::assertions#assert_not()","activesupport::testing::deprecation#assert_not_deprecated()","activesupport::testing::assertions#assert_nothing_raised()","activejob::testhelper#assert_performed_jobs()","activejob::testhelper#assert_performed_with()","actiondispatch::assertions::routingassertions#assert_recognizes()","actiondispatch::assertions::responseassertions#assert_redirected_to()","actioncable::connection::assertions#assert_reject_connection()","actiondispatch::assertions::responseassertions#assert_response()","actiondispatch::assertions::routingassertions#assert_routing()","hash#assert_valid_keys()","activemodel::type::value#assert_valid_value()","activemodel::type::value#assert_valid_value()","actionview::helpers::asseturlhelper#asset_path()","actionview::helpers::asseturlhelper#asset_url()","rails::pluginbuilder#assets_manifest()","activemodel::attributeassignment#assign_attributes()","actiondispatch::testprocess#assigns()","activesupport::hashwithindifferentaccess#assoc()","activesupport::hashwithindifferentaccess#assoc()","activerecord::querymethods::wherechain#associated()","activerecord::connectionadapters::schemastatements#assume_migrated_upto_version()","activesupport::timezone#at()","string#at()","time::at()","date#at_beginning_of_day()","datetime#at_beginning_of_day()","time#at_beginning_of_day()","datetime#at_beginning_of_hour()","time#at_beginning_of_hour()","datetime#at_beginning_of_minute()","time#at_beginning_of_minute()","dateandtime::calculations#at_beginning_of_month()","dateandtime::calculations#at_beginning_of_quarter()","dateandtime::calculations#at_beginning_of_week()","dateandtime::calculations#at_beginning_of_year()","date#at_end_of_day()","datetime#at_end_of_day()","time#at_end_of_day()","datetime#at_end_of_hour()","time#at_end_of_hour()","datetime#at_end_of_minute()","time#at_end_of_minute()","dateandtime::calculations#at_end_of_month()","dateandtime::calculations#at_end_of_quarter()","dateandtime::calculations#at_end_of_week()","dateandtime::calculations#at_end_of_year()","date#at_midday()","datetime#at_midday()","time#at_midday()","date#at_middle_of_day()","datetime#at_middle_of_day()","time#at_middle_of_day()","date#at_midnight()","datetime#at_midnight()","time#at_midnight()","date#at_noon()","datetime#at_noon()","time#at_noon()","time::at_with_coercion()","time::at_without_coercion()","actionview::helpers::atomfeedhelper#atom_feed()","file::atomic_write()","actioncable::connection::streameventloop#attach()","activestorage::attached::many#attach()","activestorage::attached::one#attach()","activesupport::subscriber::attach_to()","actiontext::attachable#attachable_content_type()","actiontext::attachable#attachable_filename()","actiontext::attachable#attachable_filesize()","actiontext::attachable#attachable_metadata()","actiontext::attachables::contentattachment#attachable_plain_text_representation()","actiontext::attachables::remoteimage#attachable_plain_text_representation()","actiontext::engine#attachable_plain_text_representation()","actiontext::attachable#attachable_sgid()","actiontext::content#attachables()","activestorage::attached::many#attached?()","activestorage::attached::one#attached?()","actiontext::fixtureset::attachment()","activestorage::attached::one#attachment()","actiontext::content#attachment_galleries()","actiontext::attachmentgallery::attachment_selector()","actionmailer::base#attachments()","actionmailer::mailhelper#attachments()","actiontext::attachmentgallery#attachments()","actiontext::content#attachments()","activestorage::attached::many#attachments()","actiondispatch::filehandler#attempt()","module#attr_internal()","module#attr_internal_accessor()","module#attr_internal_reader()","module#attr_internal_writer()","activerecord::readonlyattributes::classmethods#attr_readonly()","activemodel::attributes::classmethods#attribute()","activerecord::attributes::classmethods#attribute()","activesupport::currentattributes::attribute()","activemodel::attributemethods::classmethods#attribute_alias()","activemodel::attributemethods::classmethods#attribute_alias?()","activerecord::attributemethods::dirty#attribute_before_last_save()","activerecord::attributemethods::dirty#attribute_change_to_be_saved()","activerecord::attributemethods#attribute_for_inspect()","activerecord::attributemethods::dirty#attribute_in_database()","activemodel::validations::classmethods#attribute_method?()","activerecord::attributemethods::classmethods#attribute_method?()","activemodel::attributemethods::classmethods#attribute_method_affix()","activemodel::attributemethods::classmethods#attribute_method_prefix()","activemodel::attributemethods::classmethods#attribute_method_suffix()","activemodel::attributemethods#attribute_missing()","activemodel::attributes::classmethods#attribute_names()","activemodel::errors#attribute_names()","activerecord::attributemethods#attribute_names()","activerecord::attributemethods::classmethods#attribute_names()","activerecord::attributemethods#attribute_present?()","actiontext::trixattachment#attributes()","activerecord::attributemethods#attributes()","activemodel::attributeassignment#attributes=()","activerecord::attributemethods::beforetypecast#attributes_before_type_cast()","activerecord::attributemethods::beforetypecast#attributes_for_database()","activemodel::error#attributes_for_hash()","activerecord::attributemethods::dirty#attributes_in_database()","rails::generators::namedbase#attributes_names()","activestorage::blob#audio?()","actionview::helpers::asseturlhelper#audio_path()","actionview::helpers::assettaghelper#audio_tag()","actionview::helpers::asseturlhelper#audio_url()","actioncontroller::httpauthentication::basic#auth_param()","actioncontroller::httpauthentication::basic#auth_scheme()","actioncontroller::httpauthentication::basic#authenticate()","actioncontroller::httpauthentication::digest#authenticate()","actioncontroller::httpauthentication::token#authenticate()","actioncontroller::httpauthentication::basic::controllermethods#authenticate_or_request_with_http_basic()","actioncontroller::httpauthentication::digest::controllermethods#authenticate_or_request_with_http_digest()","actioncontroller::httpauthentication::token::controllermethods#authenticate_or_request_with_http_token()","actioncontroller::httpauthentication::basic::controllermethods#authenticate_with_http_basic()","actioncontroller::httpauthentication::digest::controllermethods#authenticate_with_http_digest()","actioncontroller::httpauthentication::token::controllermethods#authenticate_with_http_token()","actionmailbox::ingresses::mailgun::inboundemailscontroller::authenticator#authenticated?()","actionmailbox::ingresses::mandrill::inboundemailscontroller::authenticator#authenticated?()","actioncontroller::httpauthentication::digest#authentication_header()","actioncontroller::httpauthentication::basic#authentication_request()","actioncontroller::httpauthentication::digest#authentication_request()","actioncontroller::httpauthentication::token#authentication_request()","actiondispatch::request#authorization()","actionview::helpers::assettaghelper#auto_discovery_link_tag()","activesupport::autoload#autoload()","activesupport::autoload#autoload_at()","rails::paths::root#autoload_once()","rails::engine::configuration#autoload_once_paths()","rails::engine::configuration#autoload_paths()","rails::paths::root#autoload_paths()","activesupport::autoload#autoload_under()","rails::autoloaders()","activesupport::autoload#autoloads()","activerecord::reflection::macroreflection#autosave=()","abstractcontroller::base#available_action?()","activerecord::calculations#average()","actiondispatch::response#await_commit()","actiondispatch::response#await_sent()","activesupport::xmlmini#backend()","activesupport::xmlmini#backend=()","rails::backtrace_cleaner()","rails::command::base::banner()","rails::generators::base::banner()","activestorage::filename#base()","securerandom::base36()","securerandom::base58()","activerecord::inheritance::classmethods#base_class?()","rails::command::base::base_name()","rails::generators::base::base_name()","rails::generators::base::base_root()","activerecord::batches::batchenumerator#batch_size()","mail::message#bcc_addresses()","actioncable::connection::base#beat()","activerecord::persistence#becomes()","activerecord::persistence#becomes!()","actiondispatch::callbacks::before()","activesupport::duration#before()","rails::initializable::initializer#before()","dateandtime::calculations#before?()","abstractcontroller::callbacks::classmethods#before_action()","activesupport::reloader::before_class_unload()","rails::railtie::configuration#before_configuration()","activerecord::callbacks::classmethods#before_create()","activerecord::callbacks::classmethods#before_destroy()","rails::railtie::configuration#before_eager_load()","activejob::callbacks::classmethods#before_enqueue()","rails::railtie::configuration#before_initialize()","activejob::callbacks::classmethods#before_perform()","actionmailbox::callbacks#before_processing()","activesupport::currentattributes::before_reset()","activerecord::callbacks::classmethods#before_save()","actioncable::channel::callbacks::classmethods#before_subscribe()","actioncable::channel::callbacks::classmethods#before_unsubscribe()","activerecord::callbacks::classmethods#before_update()","activemodel::validations::callbacks::classmethods#before_validation()","activerecord::connectionadapters::databasestatements#begin_db_transaction()","activerecord::connectionadapters::databasestatements#begin_isolated_db_transaction()","date#beginning_of_day()","datetime#beginning_of_day()","time#beginning_of_day()","datetime#beginning_of_hour()","time#beginning_of_hour()","datetime#beginning_of_minute()","time#beginning_of_minute()","dateandtime::calculations#beginning_of_month()","dateandtime::calculations#beginning_of_quarter()","date::beginning_of_week()","dateandtime::calculations#beginning_of_week()","date::beginning_of_week=()","dateandtime::calculations#beginning_of_year()","activesupport::deprecation::behavior#behavior()","activesupport::deprecation::behavior#behavior=()","activerecord::associations::classmethods#belongs_to()","activerecord::connectionadapters::sqlite3::tabledefinition#belongs_to()","activerecord::connectionadapters::table#belongs_to()","activerecord::connectionadapters::tabledefinition#belongs_to()","rails::initializable::initializer#belongs_to?()","activesupport::benchmarkable#benchmark()","activesupport::timewithzone#between?()","activerecord::connectionadapters::postgresql::columnmethods#bigserial()","rails::appbuilder#bin()","rails::pluginbuilder#bin()","rails::appbuilder#bin_when_updating()","activerecord::connectionadapters::postgresql::oid::bit::data#binary?()","rails::initializable::initializer#bind()","actionview::unboundtemplate#bind_locals()","activerecord::connectionadapters::postgresql::columnmethods#bit()","activerecord::connectionadapters::postgresql::columnmethods#bit_varying()","activerecord::databaseconfigurations#blank?()","activerecord::relation#blank?()","activestorage::attached::one#blank?()","activesupport::timewithzone#blank?()","falseclass#blank?()","nilclass#blank?()","object#blank?()","string#blank?()","trueclass#blank?()","activerecord::connectionadapters::mysql::columnmethods#blob()","activestorage::fixtureset::blob()","activestorage::attached::many#blobs()","actiondispatch::contentsecuritypolicy#block_all_mixed_content()","actionmailer::mailhelper#block_format()","actiondispatch::request#body()","actiondispatch::response#body()","actiondispatch::response::rackbody#body()","actionview::abstractrenderer::renderedcollection::emptycollection#body()","actiondispatch::response#body=()","actiondispatch::response#body_parts()","actionmailbox::base#bounce_with()","activerecord::connectionadapters::postgresql::columnmethods#box()","actioncable::server::broadcasting#broadcast()","actioncable::server::broadcasting::broadcaster#broadcast()","actioncable::subscriptionadapter::base#broadcast()","actioncable::subscriptionadapter::subscribermap#broadcast()","actioncable::subscriptionadapter::test#broadcast()","actioncable::channel::broadcasting::classmethods#broadcast_to()","actioncable::server::broadcasting#broadcaster_for()","actioncable::channel::broadcasting::classmethods#broadcasting_for()","actioncable::subscriptionadapter::test#broadcasts()","actiondispatch::contentsecuritypolicy#build()","actiondispatch::middlewarestack#build()","actiondispatch::middlewarestack::middleware#build()","actiondispatch::permissionspolicy#build()","actionview::templatepath::build()","activerecord::associations::collectionproxy#build()","activerecord::relation#build()","activesupport::callbacks::filters::after::build()","activesupport::callbacks::filters::before::build()","activesupport::duration::build()","rails::generators::activemodel::build()","actiondispatch::middlewarestack::middleware#build_instrumented()","activejob::queueadapters::queueclassicadapter#build_queue()","actioncontroller::testcase::behavior#build_response()","rails::application::defaultmiddlewarestack#build_stack()","actionview::helpers::taghelper::build_tag_values()","actionview::rendering::classmethods#build_view_context_class()","actionview::helpers::formbuilder#button()","actionview::helpers::formtaghelper#button_tag()","actionview::helpers::urlhelper#button_to()","numeric#byte()","numeric#bytes()","abstractcontroller::caching#cache()","actionview::helpers::cachehelper#cache()","activerecord::connectionadapters::querycache#cache()","activerecord::querycache::classmethods#cache()","activerecord::tasks::databasetasks#cache_dump_filename()","activerecord::fixtureset::cache_fixtures()","activerecord::fixtureset::cache_for_connection()","actionview::helpers::cachehelper#cache_fragment_name()","actionview::helpers::cachehelper#cache_if()","actiontext::attachments::caching#cache_key()","activerecord::integration#cache_key()","activerecord::relation#cache_key()","activerecord::integration#cache_key_with_version()","activerecord::relation#cache_key_with_version()","actionview::logsubscriber#cache_message()","abstractcontroller::caching::configmethods#cache_store()","abstractcontroller::caching::configmethods#cache_store=()","actionview::base::cache_template_loading()","actionview::base::cache_template_loading=()","actionview::helpers::cachehelper#cache_unless()","activerecord::integration#cache_version()","activerecord::relation#cache_version()","activerecord::fixtureset::cached_fixtures()","actionview::helpers::cachehelper#caching?()","activerecord::associations::collectionproxy#calculate()","activerecord::calculations#calculate()","actiondispatch::remoteip::getip#calculate_ip()","actioncable::server::base#call()","actiondispatch::callbacks#call()","actiondispatch::contentsecuritypolicy::middleware#call()","actiondispatch::cookies#call()","actiondispatch::debugexceptions#call()","actiondispatch::debuglocks#call()","actiondispatch::executor#call()","actiondispatch::filehandler#call()","actiondispatch::hostauthorization#call()","actiondispatch::middlewarestack::instrumentationproxy#call()","actiondispatch::permissionspolicy::middleware#call()","actiondispatch::publicexceptions#call()","actiondispatch::remoteip#call()","actiondispatch::requestid#call()","actiondispatch::servertiming#call()","actiondispatch::showexceptions#call()","actiondispatch::static#call()","actionmailer::preview::call()","actionview::template::handlers::builder#call()","actionview::template::handlers::erb::call()","actionview::template::handlers::erb#call()","actionview::template::handlers::html#call()","actionview::template::handlers::raw#call()","activerecord::middleware::databaseselector#call()","activerecord::middleware::shardselector#call()","activerecord::migration::checkpending#call()","activesupport::callbacks::conditionals::value#call()","activesupport::logger::simpleformatter#call()","rails::engine#call()","rails::rack::logger#call()","rails::rack::logger#call_app()","string#camelcase()","activesupport::inflector#camelize()","string#camelize()","actiontext::attachment#caption()","actionview::helpers::capturehelper#capture()","activemodel::type::value#cast()","activemodel::type::value#cast()","activemodel::type::value#cast_value()","activemodel::type::value#cast_value()","module#cattr_accessor()","module#cattr_reader()","module#cattr_writer()","mail::message#cc_addresses()","activesupport::xmlmini_nokogirisax::hashbuilder#cdata_block()","actionview::helpers::taghelper#cdata_section()","time#ceil()","activerecord::connectionadapters::table#change()","activesupport::encryptedfile#change()","activesupport::timewithzone#change()","date#change()","datetime#change()","time#change()","activerecord::connectionadapters::schemastatements#change_column()","activerecord::connectionadapters::schemastatements#change_column_comment()","activerecord::connectionadapters::schemastatements#change_column_default()","activerecord::connectionadapters::schemastatements#change_column_null()","activerecord::connectionadapters::table#change_default()","activerecord::connectionadapters::table#change_null()","activerecord::connectionadapters::schemastatements#change_table()","activerecord::connectionadapters::schemastatements#change_table_comment()","activemodel::dirty#changed()","activemodel::dirty#changed?()","activemodel::type::value#changed?()","activemodel::type::value#changed?()","activerecord::attributemethods::dirty#changed_attribute_names_to_save()","activemodel::dirty#changed_attributes()","activerecord::autosaveassociation#changed_for_autosave?()","activemodel::type::value#changed_in_place?()","activemodel::type::value#changed_in_place?()","activerecord::encryption::encryptedattributetype#changed_in_place?()","activerecord::type::json#changed_in_place?()","activemodel::dirty#changes()","activemodel::dirty#changes_applied()","activerecord::attributemethods::dirty#changes_to_save()","actioncable::channel::testcase::behavior::classmethods#channel_class()","actioncable::channel::naming::classmethods#channel_name()","activesupport::xmlmini_nokogirisax::hashbuilder#characters()","actiondispatch::response#charset()","activerecord::connectionadapters::abstractmysqladapter#charset()","activerecord::tasks::databasetasks#charset()","actiondispatch::response#charset=()","activerecord::tasks::databasetasks#charset_current()","actionview::helpers::formbuilder#check_box()","actionview::helpers::formhelper#check_box()","actionview::helpers::formtaghelper#check_box_tag()","rails::generators::namedbase::check_class_collision()","activerecord::connectionadapters::table#check_constraint()","activerecord::connectionadapters::tabledefinition#check_constraint()","activerecord::connectionadapters::abstractmysqladapter#check_constraints()","activerecord::connectionadapters::schemastatements#check_constraints()","activerecord::migration::check_pending!()","activerecord::tasks::databasetasks#check_protected_environments!()","activerecord::tasks::databasetasks#check_schema_file()","activerecord::tasks::databasetasks#check_target_version()","activemodel::eachvalidator#check_validity!()","activerecord::connectionadapters::connectionpool#checkin()","activerecord::connectionadapters::connectionpool#checkout()","activerecord::databaseconfigurations::hashconfig#checkout_timeout()","rails::paths::path#children()","activerecord::connectionadapters::postgresql::columnmethods#cidr()","activerecord::encryption::encryptablerecord#ciphertext_for()","activerecord::connectionadapters::postgresql::columnmethods#circle()","activerecord::connectionadapters::postgresql::columnmethods#citext()","datetime::civil_from_format()","activesupport::deprecation::deprecatedconstantproxy#class()","class#class_attribute()","kernel#class_eval()","activesupport::concern#class_methods()","rails::generators::namedbase#class_name()","actionview::helpers::taghelper#class_names()","rails::generators::namedbase#class_path()","activesupport::inflector#classify()","string#classify()","activesupport::backtracecleaner#clean()","activesupport::cache::filestore#cleanup()","activesupport::cache::memorystore#cleanup()","activesupport::cache::nullstore#cleanup()","activesupport::cache::rediscachestore#cleanup()","activesupport::cache::store#cleanup()","actioncontroller::instrumentation#cleanup_view_runtime()","actioncable::subscriptionadapter::test#clear()","actiondispatch::flash::flashhash#clear()","activerecord::associations::collectionproxy#clear()","activerecord::connectionadapters::connectionpool::queue#clear()","activesupport::cache::filestore#clear()","activesupport::cache::memcachestore#clear()","activesupport::cache::memorystore#clear()","activesupport::cache::nullstore#clear()","activesupport::cache::rediscachestore#clear()","activesupport::cache::store#clear()","activesupport::cache::strategy::localcache::localstore#clear()","activesupport::inflector::inflections#clear()","activerecord::connectionadapters::schemacache#clear!()","abstractcontroller::base::clear_action_methods!()","actioncable::channel::base::clear_action_methods!()","activerecord::connectionadapters::connectionhandler#clear_active_connections!()","activerecord::connectionadapters::connectionhandler#clear_all_connections!()","activemodel::dirty#clear_attribute_changes()","actionview::filesystemresolver#clear_cache()","actionview::resolver#clear_cache()","activerecord::connectionadapters::abstractadapter#clear_cache!()","activemodel::dirty#clear_changes_information()","activerecord::connectionadapters::schemacache#clear_data_source_cache!()","abstractcontroller::helpers::classmethods#clear_helpers()","actioncable::subscriptionadapter::test#clear_messages()","activerecord::connectionadapters::querycache#clear_query_cache()","activerecord::connectionhandling#clear_query_caches_for_current_thread()","activerecord::connectionadapters::connectionpool#clear_reloadable_connections()","activerecord::connectionadapters::connectionhandler#clear_reloadable_connections!()","activerecord::connectionadapters::connectionpool#clear_reloadable_connections!()","activerecord::tasks::databasetasks#clear_schema_cache()","activemodel::validations::classmethods#clear_validators!()","activerecord::connectionadapters::postgresql::schemastatements#client_min_messages()","activerecord::connectionadapters::postgresql::schemastatements#client_min_messages=()","activerecord::core#clone()","activesupport::safebuffer#clone_empty()","actioncable::connection::base#close()","actioncontroller::live::sse#close()","actiondispatch::http::uploadedfile#close()","actiondispatch::response#close()","actiondispatch::response::rackbody#close()","activerecord::connectionadapters::abstractadapter#close()","activesupport::gzip::stream#close()","actiondispatch::response#code()","actiondispatch::assertionresponse#code_and_name()","activerecord::connectionadapters::abstractmysqladapter#collation()","activerecord::connectionadapters::postgresql::schemastatements#collation()","activerecord::tasks::databasetasks#collation()","activerecord::tasks::databasetasks#collation_current()","activesupport::testing::deprecation#collect_deprecations()","actiondispatch::routing::mapper::resources#collection()","actionview::helpers::formbuilder#collection_check_boxes()","actionview::helpers::formoptionshelper#collection_check_boxes()","actionview::helpers::formbuilder#collection_radio_buttons()","actionview::helpers::formoptionshelper#collection_radio_buttons()","actionview::helpers::formbuilder#collection_select()","actionview::helpers::formoptionshelper#collection_select()","activesupport::logsubscriber#color()","actionview::helpers::formbuilder#color_field()","actionview::helpers::formhelper#color_field()","actionview::helpers::formtaghelper#color_field_tag()","rails::application::configuration#colorize_logging()","rails::application::configuration#colorize_logging=()","activerecord::connectionadapters::columnmethods#column()","activerecord::connectionadapters::table#column()","activerecord::connectionadapters::tabledefinition#column()","activerecord::modelschema::classmethods#column_defaults()","activerecord::connectionadapters::schemastatements#column_exists?()","activerecord::connectionadapters::table#column_exists?()","activerecord::modelschema::classmethods#column_for_attribute()","activerecord::connectionadapters::postgresql::quoting#column_name_matcher()","activerecord::connectionadapters::postgresql::quoting#column_name_with_order_matcher()","activerecord::modelschema::classmethods#column_names()","activerecord::connectionadapters::schemacache#columns()","activerecord::connectionadapters::schemastatements#columns()","activerecord::connectionadapters::tabledefinition#columns()","activerecord::modelschema::classmethods#columns()","activerecord::connectionadapters::schemacache#columns_hash()","activerecord::connectionadapters::schemacache#columns_hash?()","abstractcontroller::caching::fragments#combined_fragment_cache_key()","rails::command::base::command_name()","rails::command::command_type()","rails::generators::command_type()","activerecord::connectionadapters::realtransaction#commit()","activerecord::connectionadapters::savepointtransaction#commit()","actiondispatch::response#commit!()","activerecord::connectionadapters::transactionstate#commit!()","activerecord::connectionadapters::databasestatements#commit_db_transaction()","actiondispatch::request#commit_flash()","actiondispatch::response#committed?()","activerecord::connectionadapters::transactionstate#committed?()","actioncontroller::parameters#compact()","activesupport::hashwithindifferentaccess#compact()","activesupport::hashwithindifferentaccess#compact()","actioncontroller::parameters#compact!()","actioncontroller::parameters#compact_blank()","enumerable#compact_blank()","actioncontroller::parameters#compact_blank!()","hash#compact_blank!()","activesupport::timewithzone#comparable_time()","date#compare_with_coercion()","time#compare_with_coercion()","actioncontroller::requestforgeryprotection#compare_with_global_token()","actioncontroller::requestforgeryprotection#compare_with_real_token()","date#compare_without_coercion()","time#compare_without_coercion()","activesupport::configurable::configuration#compile_methods!()","activesupport::configurable::configuration::compile_methods!()","actionview::base#compiled_method_container()","actionview::cacheexpiry::executor#complete()","activerecord::querycache::complete()","rails::application::finisher::interlockhook::complete()","rails::application::finisher::mutexhook#complete()","activesupport::executionwrapper#complete!()","activerecord::connectionadapters::transactionstate#completed?()","rails::api::repotask#component_root_dir()","activestorage::blob::compose()","activestorage::service#compose()","activestorage::service::azurestorageservice#compose()","activestorage::service::diskservice#compose()","activestorage::service::gcsservice#compose()","activestorage::service::s3service#compose()","activesupport::multibyte::chars#compose()","activesupport::multibyte::unicode#compose()","activerecord::aggregations::classmethods#composed_of()","activesupport::gzip::compress()","actionview::helpers::asseturlhelper#compute_asset_extname()","actionview::helpers::asseturlhelper#compute_asset_host()","actionview::helpers::asseturlhelper#compute_asset_path()","activerecord::reflection::macroreflection#compute_class()","rails::rack::logger#compute_tags()","activerecord::inheritance::classmethods#compute_type()","actionview::helpers::texthelper#concat()","activerecord::associations::collectionproxy#concat()","activesupport::safebuffer#concat()","rails::paths::path#concat()","actiondispatch::routing::mapper::concerns#concern()","kernel#concern()","module::concerning#concern()","module::concerning#concerning()","actiondispatch::routing::mapper::concerns#concerns()","actionview::testcase::behavior#config()","activesupport::configurable#config()","activesupport::configurable::classmethods#config()","activesupport::encryptedconfiguration#config()","rails::appbuilder#config()","rails::engine#config()","rails::pluginbuilder#config()","rails::railtie#config()","activesupport::configurable::classmethods#config_accessor()","rails::application#config_for()","rails::appbuilder#config_target_version()","rails::appbuilder#config_when_updating()","rails::appbuilder#configru()","activerecord::databaseconfigurations#configs_for()","rails::configuration()","activerecord::core::configurations()","rails::dbconsole#configurations()","activerecord::core::configurations=()","activestorage::service::configure()","activesupport::configurable::classmethods#configure()","rails::railtie::configure()","rails::railtie::configurable::classmethods#configure()","rails::api::task#configure_rdoc_files()","rails::api::repotask#configure_sdoc()","rails::api::task#configure_sdoc()","actioncable::channel::channelstub#confirmed?()","actioncable::connection::testcase::behavior#connect()","activerecord::connectionadapters::connectionhandler#connected?()","activerecord::connectionadapters::connectionpool#connected?()","activerecord::connectionhandling#connected?()","activerecord::connectionhandling#connected_to()","activerecord::connectionhandling#connected_to?()","activerecord::connectionhandling#connected_to_many()","activerecord::connectionhandling#connecting_to()","activerecord::connectionadapters::connectionpool#connection()","activerecord::connectionhandling#connection()","activerecord::migration#connection()","actioncable::connection::testcase::behavior::classmethods#connection_class()","activerecord::connectionhandling#connection_db_config()","activerecord::core::connection_handler()","activerecord::core#connection_handler()","activerecord::core::connection_handler=()","activerecord::core::connection_handlers()","activerecord::core::connection_handlers=()","actioncable::channel::connectionstub#connection_identifier()","actioncable::connection::identification#connection_identifier()","actioncable::server::base#connection_identifiers()","activerecord::connectionhandling#connection_pool()","activerecord::connectionadapters::connectionhandler#connection_pool_list()","activerecord::connectionadapters::connectionhandler#connection_pools()","activerecord::connectionhandling#connection_specification_name()","activerecord::connectionadapters::connectionpool#connections()","activerecord::connectionhandling#connects_to()","rails::application#console()","rails::railtie::console()","activesupport::deprecation::deprecatedconstantaccessor#const_missing()","activesupport::inflector#constantize()","string#constantize()","actiondispatch::routing::mapper::scoping#constraints()","activerecord::modelschema::classmethods#content_columns()","actionview::helpers::capturehelper#content_for()","actionview::helpers::capturehelper#content_for?()","actiondispatch::request#content_length()","actiondispatch::http::mimenegotiation#content_mime_type()","actioncontroller::contentsecuritypolicy::classmethods#content_security_policy()","actiondispatch::contentsecuritypolicy::request#content_security_policy()","rails::application::configuration#content_security_policy()","actiondispatch::contentsecuritypolicy::request#content_security_policy=()","actiondispatch::contentsecuritypolicy::request#content_security_policy_nonce()","actiondispatch::contentsecuritypolicy::request#content_security_policy_nonce_directives()","actiondispatch::contentsecuritypolicy::request#content_security_policy_nonce_directives=()","actiondispatch::contentsecuritypolicy::request#content_security_policy_nonce_generator()","actiondispatch::contentsecuritypolicy::request#content_security_policy_nonce_generator=()","actioncontroller::contentsecuritypolicy::classmethods#content_security_policy_report_only()","actiondispatch::contentsecuritypolicy::request#content_security_policy_report_only()","actiondispatch::contentsecuritypolicy::request#content_security_policy_report_only=()","actionview::helpers::activemodelinstancetag#content_tag()","actionview::helpers::taghelper#content_tag()","actiondispatch::http::mimenegotiation#content_type()","actiondispatch::requestencoder::identityencoder#content_type()","actiondispatch::response#content_type()","activestorage::variation#content_type()","actiondispatch::response#content_type=()","activestorage::blob#content_type=()","activerecord::encryption::contexts#context()","activerecord::fixtureset::context_class()","rails::initializable::initializer#context_class()","actiondispatch::routing::mapper::scoping#controller()","rails::consolemethods#controller()","actioncontroller::testcase::behavior::classmethods#controller_class()","actiondispatch::request#controller_class()","actioncontroller::testcase::behavior::classmethods#controller_class=()","actiondispatch::request#controller_class_for()","actioncontroller::testcase::behavior#controller_class_name()","actioncontroller::metal::controller_name()","actioncontroller::metal#controller_name()","actionview::testcase::testcontroller::controller_name()","abstractcontroller::base::controller_path()","abstractcontroller::base#controller_path()","actionmailer::base::controller_path()","actionview::testcase::testcontroller#controller_path=()","actioncontroller::parameters#converted_arrays()","actiondispatch::requestcookiemethods#cookie_jar()","actioncable::connection::base#cookies()","actioncable::connection::testcase::behavior#cookies()","actioncontroller::cookies#cookies()","actiondispatch::integration::session#cookies()","actiondispatch::response#cookies()","actiondispatch::testprocess#cookies()","activerecord::migration#copy()","activerecord::associations::collectionproxy#count()","activerecord::calculations#count()","activerecord::querying#count_by_sql()","activesupport::timezone::country_zones()","activesupport::notifications::event#cpu_time()","actiondispatch::response::create()","actiondispatch::testrequest::create()","actionmailbox::ingresses::mailgun::inboundemailscontroller#create()","actionmailbox::ingresses::mandrill::inboundemailscontroller#create()","actionmailbox::ingresses::postmark::inboundemailscontroller#create()","actionmailbox::ingresses::relay::inboundemailscontroller#create()","actionmailbox::ingresses::sendgrid::inboundemailscontroller#create()","actionview::digestor::node::create()","activerecord::associations::collectionproxy#create()","activerecord::connectionadapters::databasestatements#create()","activerecord::persistence::classmethods#create()","activerecord::relation#create()","activerecord::tasks::databasetasks#create()","activestorage::directuploadscontroller#create()","activesupport::timezone::create()","rails::application::create()","rails::rails::conductor::actionmailbox::inboundemails::sourcescontroller#create()","rails::rails::conductor::actionmailbox::inboundemailscontroller#create()","rails::rails::conductor::actionmailbox::incineratescontroller#create()","rails::rails::conductor::actionmailbox::reroutescontroller#create()","activerecord::associations::collectionproxy#create!()","activerecord::persistence::classmethods#create!()","activerecord::relation#create!()","activerecord::tasks::databasetasks#create_all()","actionmailbox::inboundemail::messageid#create_and_extract_message_id!()","activestorage::blob::create_and_upload!()","actionmailbox::inboundemail::messageid#create_and_upload_raw_email!()","activestorage::blob::create_before_direct_upload!()","activerecord::tasks::databasetasks#create_current()","activerecord::connectionadapters::abstractmysqladapter#create_database()","activerecord::connectionadapters::postgresql::schemastatements#create_database()","actiontext::htmlconversion#create_element()","activerecord::connectionadapters::postgresqladapter#create_enum()","activerecord::fixtureset::create_fixtures()","rails::generators::testing::behaviour#create_generated_attribute()","actionmailbox::testhelper#create_inbound_email_from_fixture()","actionmailbox::testhelper#create_inbound_email_from_mail()","actionmailbox::testhelper#create_inbound_email_from_source()","activerecord::connectionadapters::schemastatements#create_join_table()","rails::generators::migration#create_migration()","activerecord::relation#create_or_find_by()","activerecord::relation#create_or_find_by!()","activerecord::connectionadapters::savepoints#create_savepoint()","activerecord::connectionadapters::postgresql::schemastatements#create_schema()","actiondispatch::integration::runner#create_session()","activerecord::connectionadapters::schemastatements#create_table()","activerecord::connectionadapters::postgresqladapter::create_unlogged_tables()","activerecord::querymethods#create_with()","rails::appbuilder#credentials()","rails::application#credentials()","actionview::helpers::csphelper#csp_meta_tag()","actionview::helpers::csrfhelper#csrf_meta_tag()","actionview::helpers::csrfhelper#csrf_meta_tags()","actioncontroller::requestforgeryprotection#csrf_token_hmac()","activerecord::connectionadapters::postgresql::schemastatements#ctype()","date::current()","datetime::current()","time::current()","activerecord::encryption::contexts#current_custom_context()","actionview::helpers::texthelper#current_cycle()","activerecord::connectionadapters::abstractmysqladapter#current_database()","activerecord::connectionadapters::postgresql::schemastatements#current_database()","activesupport::xmlmini_libxmlsax::hashbuilder#current_hash()","activesupport::xmlmini_nokogirisax::hashbuilder#current_hash()","actionview::helpers::urlhelper#current_page?()","activerecord::core::current_preventing_writes()","activerecord::core::current_role()","activerecord::connectionadapters::savepoints#current_savepoint_name()","activerecord::connectionadapters::postgresql::schemastatements#current_schema()","activerecord::core::current_shard()","activerecord::migration::current_version()","actioncontroller::mimeresponds::collector#custom()","actionmailer::collector#custom()","activestorage::blob#custom_metadata()","activestorage::blob#custom_metadata=()","actionview::helpers::texthelper#cycle()","activerecord::attributemethods::primarykey::classmethods#dangerous_attribute_method?()","activerecord::attributemethods::classmethods#dangerous_class_method?()","activesupport::inflector#dasherize()","string#dasherize()","actionview::fixtureresolver#data()","activerecord::connectionadapters::schemacache#data_source_exists?()","activerecord::connectionadapters::schemastatements#data_source_exists?()","activerecord::connectionadapters::schemacache#data_sources()","activerecord::connectionadapters::schemastatements#data_sources()","activerecord::databaseconfigurations::hashconfig#database()","rails::dbconsole#database()","rails::application::configuration#database_configuration()","activerecord::connectionadapters::abstractadapter::database_exists?()","activerecord::connectionadapters::mysql2adapter::database_exists?()","activerecord::connectionadapters::postgresqladapter::database_exists?()","activerecord::connectionadapters::sqlite3adapter::database_exists?()","rails::appbuilder#database_yml()","actiondispatch::http::cache::response#date()","actiondispatch::http::cache::response#date=()","actiondispatch::http::cache::response#date?()","actionview::helpers::formbuilder#date_field()","actionview::helpers::formhelper#date_field()","actionview::helpers::formtaghelper#date_field_tag()","actionview::helpers::datehelper#date_select()","actionview::helpers::formbuilder#date_select()","activerecord::connectionadapters::postgresql::columnmethods#daterange()","actionview::helpers::formbuilder#datetime_field()","actionview::helpers::formhelper#datetime_field()","actionview::helpers::formtaghelper#datetime_field_tag()","actionview::helpers::formbuilder#datetime_local_field()","actionview::helpers::formhelper#datetime_local_field()","actionview::helpers::formtaghelper#datetime_local_field_tag()","actionview::helpers::datehelper#datetime_select()","actionview::helpers::formbuilder#datetime_select()","activerecord::connectionadapters::postgresqladapter::datetime_type()","numeric#day()","numeric#days()","dateandtime::calculations#days_ago()","time::days_in_month()","time::days_in_year()","dateandtime::calculations#days_since()","dateandtime::calculations#days_to_week_start()","rails::appbuilder#db()","rails::dbconsole#db_config()","activerecord::tasks::databasetasks#db_dir()","activerecord::nodatabaseerror::db_error()","rails::appbuilder#db_when_updating()","actionview::digestor::nulllogger::debug()","actionview::helpers::debughelper#debug()","rails::application::configuration#debug_exception_response_format()","activestorage::variation::decode()","activesupport::json::decode()","actioncontroller::httpauthentication::basic#decode_credentials()","actioncontroller::httpauthentication::digest#decode_credentials()","actioncontroller::httpauthentication::digest#decode_credentials_header()","activesupport::multibyte::chars#decompose()","activesupport::multibyte::unicode#decompose()","activesupport::gzip::decompress()","activesupport::inflector#deconstantize()","string#deconstantize()","activerecord::persistence#decrement()","activesupport::cache::filestore#decrement()","activesupport::cache::memcachestore#decrement()","activesupport::cache::memorystore#decrement()","activesupport::cache::nullstore#decrement()","activesupport::cache::rediscachestore#decrement()","activesupport::cache::store#decrement()","activerecord::persistence#decrement!()","activerecord::countercache::classmethods#decrement_counter()","actiontext::encryption#decrypt()","activerecord::encryption::cipher#decrypt()","activerecord::encryption::cipher::aes256gcm#decrypt()","activerecord::encryption::encryptablerecord#decrypt()","activerecord::encryption::encryptingonlyencryptor#decrypt()","activerecord::encryption::encryptor#decrypt()","activerecord::encryption::nullencryptor#decrypt()","activerecord::encryption::readonlynullencryptor#decrypt()","activesupport::messageencryptor#decrypt_and_verify()","activesupport::messages::rotator::encryptor#decrypt_and_verify()","activerecord::encryption::envelopeencryptionkeyprovider#decryption_keys()","activerecord::encryption::keyprovider#decryption_keys()","activerecord::connectionadapters::deduplicable#deduplicate()","actioncontroller::parameters#deep_dup()","array#deep_dup()","hash#deep_dup()","object#deep_dup()","hash#deep_merge()","hash#deep_merge!()","activesupport::hashwithindifferentaccess#deep_stringify_keys()","activesupport::hashwithindifferentaccess#deep_stringify_keys()","hash#deep_stringify_keys()","activesupport::hashwithindifferentaccess#deep_stringify_keys!()","activesupport::hashwithindifferentaccess#deep_stringify_keys!()","hash#deep_stringify_keys!()","activesupport::hashwithindifferentaccess#deep_symbolize_keys()","activesupport::hashwithindifferentaccess#deep_symbolize_keys()","hash#deep_symbolize_keys()","hash#deep_symbolize_keys!()","actioncontroller::parameters#deep_transform_keys()","hash#deep_transform_keys()","actioncontroller::parameters#deep_transform_keys!()","hash#deep_transform_keys!()","hash#deep_transform_values()","hash#deep_transform_values!()","actionmailer::base::default()","activesupport::hashwithindifferentaccess#default()","activesupport::hashwithindifferentaccess#default()","rails::generators::base::default_aliases_for_option()","rails::command::base::default_command_root()","rails::generators::base::default_for_option()","actioncontroller::formbuilder#default_form_builder()","actioncontroller::formbuilder::classmethods#default_form_builder()","rails::generators::base::default_generator_root()","actionmailer::base#default_i18n_subject()","date#default_inspect()","datetime#default_inspect()","rails::application::configuration#default_log_file()","rails::server#default_options()","actionmailer::base::default_options=()","activerecord::databaseconfigurations::hashconfig#default_schema_cache_path()","activerecord::scoping::default::classmethods#default_scope()","activerecord::scoping::named::classmethods#default_scoped()","activerecord::scoping::default::classmethods#default_scopes?()","activerecord::connectionadapters::databasestatements#default_sequence_name()","rails::generators::base::default_source_root()","activerecord::type::internal::timezone#default_timezone()","activestorage::variation#default_to()","actiondispatch::integration::runner#default_url_options()","actiondispatch::routing::mapper::base#default_url_options()","actiondispatch::integration::runner#default_url_options=()","actiondispatch::routing::mapper::base#default_url_options=()","rails::generators::base::default_value_for_option()","actiondispatch::routing::mapper::scoping#defaults()","actioncable::channel::base#defer_subscription_confirmation!()","actioncable::channel::base#defer_subscription_confirmation?()","activerecord::dynamicmatchers::method#define()","activerecord::schema::definition::classmethods#define()","activerecord::attributes::classmethods#define_attribute()","activemodel::attributemethods::classmethods#define_attribute_method()","activemodel::attributemethods::classmethods#define_attribute_methods()","activesupport::codegenerator::methodset#define_cached_method()","activesupport::callbacks::classmethods#define_callbacks()","activemodel::callbacks#define_model_callbacks()","activemodel::validations::acceptancevalidator::lazilydefineattributes#define_on()","module#delegate()","module#delegate_missing_to()","actionview::template::types::delegate_to()","activerecord::delegatedtype#delegated_type()","actioncontroller::parameters#delete()","actioncontroller::testcase::behavior#delete()","actiondispatch::flash::flashhash#delete()","actiondispatch::integration::requesthelpers#delete()","actiondispatch::middlewarestack#delete()","actiondispatch::routing::mapper::httphelpers#delete()","activemodel::errors#delete()","activerecord::associations::collectionproxy#delete()","activerecord::connectionadapters::connectionpool::queue#delete()","activerecord::connectionadapters::databasestatements#delete()","activerecord::persistence#delete()","activerecord::persistence::classmethods#delete()","activestorage::blob#delete()","activestorage::service#delete()","activestorage::service::azurestorageservice#delete()","activestorage::service::diskservice#delete()","activestorage::service::gcsservice#delete()","activestorage::service::mirrorservice#delete()","activestorage::service::s3service#delete()","activesupport::cache::store#delete()","activesupport::hashwithindifferentaccess#delete()","activesupport::hashwithindifferentaccess#delete()","activesupport::inflector::inflections::uncountables#delete()","rails::configuration::middlewarestackproxy#delete()","actiondispatch::middlewarestack#delete!()","activerecord::associations::collectionproxy#delete_all()","activerecord::batches::batchenumerator#delete_all()","activerecord::relation#delete_all()","activerecord::relation#delete_by()","activesupport::cache::strategy::localcache::localstore#delete_entry()","actiondispatch::response#delete_header()","actioncontroller::parameters#delete_if()","mime::mimes#delete_if()","activesupport::cache::filestore#delete_matched()","activesupport::cache::memorystore#delete_matched()","activesupport::cache::nullstore#delete_matched()","activesupport::cache::rediscachestore#delete_matched()","activesupport::cache::store#delete_matched()","activesupport::cache::store#delete_multi()","activestorage::service#delete_prefixed()","activestorage::service::azurestorageservice#delete_prefixed()","activestorage::service::diskservice#delete_prefixed()","activestorage::service::gcsservice#delete_prefixed()","activestorage::service::mirrorservice#delete_prefixed()","activestorage::service::s3service#delete_prefixed()","actiondispatch::session::cachestore#delete_session()","actiondispatch::session::cookiestore#delete_session()","actionmailer::logsubscriber#deliver()","actionmailer::messagedelivery#deliver_later()","actionmailer::messagedelivery#deliver_later!()","actionmailer::messagedelivery#deliver_now()","actionmailer::messagedelivery#deliver_now!()","activesupport::inflector#demodulize()","string#demodulize()","actionview::digestor::node#dependency_digest()","activestorage::attached::model#deprecate()","module#deprecate()","activesupport::deprecation::deprecatedconstantaccessor#deprecate_constant()","activesupport::deprecation::methodwrapper#deprecate_methods()","activesupport::deprecation::reporting#deprecation_warning()","activerecord::encryption::key::derive_from()","activerecord::encryption::keygenerator#derive_key_from()","rails::api::task#desc()","rails::command::base::desc()","rails::generators::base::desc()","activesupport::descendantstracker::descendants()","activesupport::descendantstracker#descendants()","class#descendants()","activerecord::inheritance::classmethods#descends_from_active_record?()","activejob::arguments#deserialize()","activejob::core#deserialize()","activejob::core::classmethods#deserialize()","activejob::serializers::objectserializer#deserialize()","activejob::serializers::rangeserializer#deserialize()","activemodel::type::value#deserialize()","activemodel::type::value#deserialize()","activerecord::encryption::encryptedattributetype#deserialize()","activerecord::type::json#deserialize()","rails::generators::testing::behaviour::classmethods#destination()","activerecord::associations::collectionproxy#destroy()","activerecord::persistence#destroy()","activerecord::persistence::classmethods#destroy()","rails::generators::activemodel#destroy()","activerecord::persistence#destroy!()","activerecord::associations::collectionproxy#destroy_all()","activerecord::batches::batchenumerator#destroy_all()","activerecord::relation#destroy_all()","activerecord::relation#destroy_by()","activerecord::persistence#destroyed?()","activerecord::autosaveassociation#destroyed_by_association()","activerecord::autosaveassociation#destroyed_by_association=()","actioncable::connection::streameventloop#detach()","activestorage::attached::many#detach()","activestorage::attached::one#detach()","activesupport::subscriber::detach_from()","activemodel::error#detail()","actionview::lookupcontext::viewpaths#detail_args_for()","activemodel::error#details()","activemodel::errors#details()","actionview::viewpaths#details_for_lookup()","actioncable::channel::testcase::behavior::classmethods#determine_default_channel()","actioncable::connection::testcase::behavior::classmethods#determine_default_connection()","actioncontroller::testcase::behavior::classmethods#determine_default_controller_class()","actionview::testcase::behavior::classmethods#determine_default_helper_class()","actionmailer::testcase::behavior::classmethods#determine_default_mailer()","activerecord::encryption::scheme#deterministic?()","activerecord::encryption::encryptablerecord#deterministic_encrypted_attributes()","actioncontroller::parameters#dig()","activesupport::hashwithindifferentaccess#dig()","activesupport::hashwithindifferentaccess#dig()","actionview::digestor::digest()","actionview::digestor::injected#digest()","actionview::digestor::missing#digest()","actionview::digestor::node#digest()","activestorage::variation#digest()","actiondispatch::routing::mapper::customurls#direct()","activesupport::descendantstracker::direct_descendants()","activesupport::descendantstracker#direct_descendants()","rails::sourceannotationextractor::annotation::directories()","activerecord::connectionadapters::querycache::dirties_query_cache()","actionview::lookupcontext::detailscache#disable_cache()","activerecord::migration::disable_ddl_transaction!()","activerecord::connectionadapters::abstractadapter#disable_extension()","activerecord::connectionadapters::postgresqladapter#disable_extension()","activerecord::connectionadapters::querycache#disable_query_cache!()","activerecord::connectionadapters::querycache::connectionpoolconfiguration#disable_query_cache!()","activerecord::connectionadapters::abstractadapter#disable_referential_integrity()","activejob::testhelper::testqueueadapter::classmethods#disable_test_adapter()","activesupport::deprecation::behavior#disallowed_behavior()","activesupport::deprecation::behavior#disallowed_behavior=()","activesupport::deprecation::disallowed#disallowed_warnings()","actiondispatch::flash::flashhash#discard()","activerecord::connectionadapters::abstractadapter#discard!()","activejob::exceptions::classmethods#discard_on()","actioncable::connection::testcase::behavior#disconnect()","actioncable::remoteconnections::remoteconnection#disconnect()","actioncable::server::base#disconnect()","activerecord::connectionadapters::connectionpool#disconnect()","activerecord::connectionadapters::abstractadapter#disconnect!()","activerecord::connectionadapters::connectionpool#disconnect!()","activerecord::connectionadapters::mysql2adapter#disconnect!()","activerecord::connectionadapters::postgresqladapter#disconnect!()","activerecord::connectionadapters::sqlite3adapter#disconnect!()","actioncontroller::metal::dispatch()","rails::sourceannotationextractor#display()","actionview::helpers::datehelper#distance_of_time_in_words()","actionview::helpers::datehelper#distance_of_time_in_words_to_now()","activerecord::associations::collectionproxy#distinct()","activerecord::querymethods#distinct()","actiondispatch::integrationtest::behavior#document_root_element()","actionview::recordidentifier#dom_class()","actionview::recordidentifier#dom_id()","actiondispatch::http::url#domain()","activesupport::dependencies::interlock#done_running()","activesupport::dependencies::interlock#done_unloading()","activerecord::migration#down()","activerecord::encryption::scheme#downcase?()","activestorage::blob#download()","activestorage::preview#download()","activestorage::service#download()","activestorage::service::azurestorageservice#download()","activestorage::service::diskservice#download()","activestorage::service::gcsservice#download()","activestorage::service::s3service#download()","activestorage::variant#download()","activestorage::analyzer#download_blob_to_tempfile()","activestorage::previewer#download_blob_to_tempfile()","activestorage::blob#download_chunk()","activestorage::service#download_chunk()","activestorage::service::azurestorageservice#download_chunk()","activestorage::service::diskservice#download_chunk()","activestorage::service::gcsservice#download_chunk()","activestorage::service::s3service#download_chunk()","actiondispatch::routing::mapper::resources#draw()","activestorage::previewer#draw()","actiondispatch::systemtestcase::driven_by()","activerecord::tasks::databasetasks#drop()","activerecord::tasks::databasetasks#drop_all()","activerecord::tasks::databasetasks#drop_current()","activerecord::connectionadapters::schemastatements#drop_join_table()","activerecord::connectionadapters::postgresql::schemastatements#drop_schema()","activerecord::connectionadapters::abstractmysqladapter#drop_table()","activerecord::connectionadapters::schemastatements#drop_table()","activesupport::timewithzone#dst?()","actiontext::serialization#dump()","activerecord::encryption::messageserializer#dump()","activesupport::cache::coders::rails61coder#dump()","activesupport::cache::coders::rails70coder#dump()","activesupport::cache::memcachestore::coders::rails61coder#dump()","activesupport::cache::coders::rails61coder#dump_compressed()","activesupport::cache::coders::rails70coder#dump_compressed()","activesupport::cache::memcachestore::coders::rails61coder#dump_compressed()","activerecord::tasks::databasetasks#dump_schema_cache()","activerecord::connectionadapters::schemacache#dump_to()","activerecord::core#dup()","activesupport::hashwithindifferentaccess#dup()","activesupport::hashwithindifferentaccess#dup()","method#duplicable?()","object#duplicable?()","singleton#duplicable?()","unboundmethod#duplicable?()","activesupport::notifications::event#duration()","actioncontroller::parameters#each()","actiondispatch::flash::flashhash#each()","actiondispatch::http::headers#each()","actiondispatch::middlewarestack#each()","actiondispatch::response#each()","actiondispatch::response::rackbody#each()","activerecord::batches::batchenumerator#each()","activerecord::fixtureset#each()","activerecord::result#each()","mime::mimes#each()","rails::engine::railties#each()","rails::paths::path#each()","actioncontroller::parameters#each_key()","actioncontroller::parameters#each_nested_attribute()","actioncontroller::parameters#each_pair()","activerecord::batches::batchenumerator#each_record()","actioncontroller::parameters#each_value()","activesupport::autoload#eager_autoload()","activerecord::querymethods#eager_load()","rails::paths::root#eager_load()","activerecord::encryption::eager_load!()","activesupport::autoload#eager_load!()","rails::application#eager_load!()","rails::engine#eager_load!()","rails::railtie::configuration#eager_load_namespaces()","rails::engine::configuration#eager_load_paths()","activerecord::relation#eager_loading?()","rails::generators::namedbase#edit_helper()","actionmailer::base::email_address_with_name()","actionmailer::base#email_address_with_name()","actionmailer::preview::email_exists?()","actionview::helpers::formbuilder#email_field()","actionview::helpers::formhelper#email_field()","actionview::helpers::formtaghelper#email_field_tag()","actionmailer::preview::emails()","actiondispatch::request::empty()","actioncontroller::parameters#empty?()","actiondispatch::flash::flashhash#empty?()","activerecord::associations::collectionproxy#empty?()","activerecord::databaseconfigurations#empty?()","activerecord::relation#empty?()","activerecord::result#empty?()","activerecord::connectionadapters::databasestatements#empty_insert_statement_value()","activerecord::connectionadapters::abstractmysqladapter::emulate_booleans()","activerecord::connectionadapters::abstractadapter#enable_extension()","activerecord::connectionadapters::postgresqladapter#enable_extension()","activerecord::connectionadapters::querycache#enable_query_cache!()","activerecord::connectionadapters::querycache::connectionpoolconfiguration#enable_query_cache!()","activejob::testhelper::testqueueadapter::classmethods#enable_test_adapter()","kernel#enable_warnings()","activestorage::variation::encode()","activesupport::json::encode()","actionview::template#encode!()","actioncontroller::httpauthentication::basic#encode_credentials()","actioncontroller::httpauthentication::digest#encode_credentials()","actioncontroller::httpauthentication::token#encode_credentials()","actiondispatch::requestencoder::identityencoder#encode_params()","activerecord::connectionadapters::schemacache#encode_with()","activerecord::core#encode_with()","activerecord::relation#encode_with()","activesupport::safebuffer#encode_with()","activerecord::connectionadapters::postgresql::schemastatements#encoding()","activerecord::connectionadapters::sqlite3adapter#encoding()","rails::application::configuration#encoding=()","actiontext::encryption#encrypt()","activerecord::encryption::cipher#encrypt()","activerecord::encryption::cipher::aes256gcm#encrypt()","activerecord::encryption::encryptablerecord#encrypt()","activerecord::encryption::encryptor#encrypt()","activerecord::encryption::nullencryptor#encrypt()","activerecord::encryption::readonlynullencryptor#encrypt()","activesupport::messageencryptor#encrypt_and_sign()","activerecord::encryption::encryptablerecord#encrypt_attribute()","actioncable::connection::testcookiejar#encrypted()","actiondispatch::cookies::chainedcookiejars#encrypted()","rails::application#encrypted()","activerecord::encryption::encryptor#encrypted?()","activerecord::encryption::nullencryptor#encrypted?()","activerecord::encryption::readonlynullencryptor#encrypted?()","activerecord::encryption::encryptablerecord#encrypted_attribute?()","activerecord::encryption::extendeddeterministicqueries::inwithadditionalvalues#encryption_aware_type_caster()","activerecord::encryption::envelopeencryptionkeyprovider#encryption_key()","activerecord::encryption::keyprovider#encryption_key()","activerecord::encryption::encryptablerecord#encrypts()","activesupport::xmlmini_nokogirisax::hashbuilder#end_document()","activesupport::xmlmini_nokogirisax::hashbuilder#end_element()","date#end_of_day()","datetime#end_of_day()","time#end_of_day()","datetime#end_of_hour()","time#end_of_hour()","datetime#end_of_minute()","time#end_of_minute()","dateandtime::calculations#end_of_month()","dateandtime::calculations#end_of_quarter()","dateandtime::calculations#end_of_week()","dateandtime::calculations#end_of_year()","rails::engine::endpoint()","rails::engine#endpoint()","rails::command::base::engine?()","activerecord::testfixtures#enlist_fixture_connections()","activejob::enqueuing#enqueue()","activejob::queueadapters::testadapter#enqueued_jobs()","actioncable::channel::base#ensure_confirmation_sent()","activerecord::connectionadapters::postgresql::columnmethods#enum()","activerecord::enum#enum()","activerecord::connectionadapters::postgresqladapter#enum_types()","rails::sourceannotationextractor::enumerate()","actiondispatch::http::headers#env()","activerecord::tasks::databasetasks#env()","rails::env()","rails::env=()","rails::application#env_config()","rails::engine#env_config()","actiondispatch::http::filterparameters#env_filter()","rails::console#environment()","rails::dbconsole#environment()","rails::generators::actions#environment()","rails::console#environment?()","actiondispatch::http::uploadedfile#eof?()","actioncontroller::parameters#eql?()","actionview::filesystemresolver#eql?()","activemodel::name#eql?()","activemodel::type::value#eql?()","activemodel::type::value#eql?()","activerecord::associations::preloader::association::loaderquery#eql?()","activerecord::core#eql?()","activesupport::duration#eql?()","activesupport::timewithzone#eql?()","mime::type#eql?()","time#eql?()","time#eql_with_coercion()","time#eql_without_coercion()","actionview::digestor::nulllogger::error()","activesupport::xmlmini_nokogirisax::hashbuilder#error()","rails::error()","actionview::helpers::activemodelinstancetag#error_message()","activerecord::connectionadapters::mysql2adapter#error_number()","activesupport::executionwrapper::error_reporter()","actionview::helpers::activemodelinstancetag#error_wrapping()","activemodel::validations#errors()","rails::generators::activemodel#errors()","activerecord::connectionadapters::postgresql::quoting#escape_bytea()","actionview::helpers::javascripthelper#escape_javascript()","actionview::helpers::taghelper#escape_once()","activerecord::connectionadapters::connectionhandler#establish_connection()","activerecord::connectionhandling#establish_connection()","actioncontroller::conditionalget::classmethods#etag()","actiondispatch::http::cache::response#etag=()","actiondispatch::http::cache::response#etag?()","actiondispatch::http::cache::request#etag_matches?()","actioncable::server::base#event_loop()","numeric#exabyte()","numeric#exabytes()","actioncontroller::parameters#except()","activerecord::spawnmethods#except()","activesupport::hashwithindifferentaccess#except()","activesupport::hashwithindifferentaccess#except()","hash#except()","hash#except!()","actiondispatch::exceptionwrapper#exception_trace()","actionview::helpers::texthelper#excerpt()","enumerable#exclude?()","string#exclude?()","activerecord::encryption::configurable#excluded_from_filter_parameters?()","activerecord::querymethods#excluding()","array#excluding()","enumerable#excluding()","activesupport::concurrency::sharelock#exclusive()","activerecord::connectionadapters::databasestatements#exec_delete()","activerecord::connectionadapters::databasestatements#exec_insert()","activerecord::migration#exec_migration()","activerecord::relation::recordfetchwarning#exec_queries()","activerecord::connectionadapters::databasestatements#exec_query()","activerecord::connectionadapters::savepoints#exec_rollback_to_savepoint()","activerecord::connectionadapters::databasestatements#exec_update()","rails::command::base::executable()","activerecord::connectionadapters::abstractmysqladapter#execute()","activerecord::connectionadapters::databasestatements#execute()","activerecord::connectionadapters::mysql::databasestatements#execute()","activerecord::connectionadapters::postgresql::databasestatements#execute()","activesupport::fileupdatechecker#execute()","rails::generators::actions#execute_command()","actionview::cacheexpiry::viewmodificationwatcher#execute_if_updated()","activesupport::fileupdatechecker#execute_if_updated()","actiondispatch::railsentitystore#exist?()","activestorage::service#exist?()","activestorage::service::azurestorageservice#exist?()","activestorage::service::diskservice#exist?()","activestorage::service::gcsservice#exist?()","activestorage::service::s3service#exist?()","activesupport::cache::store#exist?()","pathname#existence()","rails::paths::path#existent()","rails::paths::path#existent_directories()","actionmailer::preview::exists?()","actionview::lookupcontext::viewpaths#exists?()","activerecord::encryption::extendeddeterministicqueries::relationqueries#exists?()","activerecord::findermethods#exists?()","activesupport::callbacks::calltemplate::instanceexec0#expand()","activesupport::callbacks::calltemplate::instanceexec1#expand()","activesupport::callbacks::calltemplate::instanceexec2#expand()","activesupport::callbacks::calltemplate::methodcall#expand()","activesupport::callbacks::calltemplate::objectcall#expand()","activesupport::callbacks::calltemplate::proccall#expand()","activesupport::cache::expand_cache_key()","rails::paths::path#expanded()","actioncontroller::httpauthentication::digest#expected_response()","activerecord::connectionadapters::abstractadapter#expire()","abstractcontroller::caching::fragments#expire_fragment()","actioncontroller::conditionalget#expires_in()","actioncontroller::conditionalget#expires_now()","activerecord::connectionadapters::mysql::databasestatements#explain()","activerecord::connectionadapters::postgresql::databasestatements#explain()","activerecord::connectionadapters::sqlite3::databasestatements#explain()","activerecord::relation#explain()","activesupport::perthreadregistry::extended()","activerecord::querymethods#extending()","activestorage::filename#extension()","activerecord::connectionadapters::postgresqladapter#extension_available?()","activerecord::connectionadapters::postgresqladapter#extension_enabled?()","activestorage::filename#extension_with_delimiter()","activestorage::filename#extension_without_delimiter()","activerecord::connectionadapters::abstractadapter#extensions()","activerecord::connectionadapters::postgresqladapter#extensions()","rails::sourceannotationextractor::annotation::extensions()","rails::generators::actions#extify()","actioncontroller::parameters#extract!()","array#extract!()","hash#extract!()","rails::sourceannotationextractor#extract_annotations_from()","activerecord::querymethods#extract_associated()","actiondispatch::http::url::extract_domain()","rails::generators::base#extract_last_module()","actionmailbox::inboundemail::messageid#extract_message_id()","array#extract_options!()","actiondispatch::session::stalesessioncheck#extract_session_id()","actiondispatch::http::url::extract_subdomain()","actiondispatch::http::url::extract_subdomains()","activesupport::hashwithindifferentaccess#extractable_options?()","activesupport::hashwithindifferentaccess#extractable_options?()","activesupport::orderedoptions#extractable_options?()","hash#extractable_options?()","actionmailbox::relayer::result#failure?()","rails::generators::fallbacks()","actionview::helpers::assettaghelper#favicon_link_tag()","actioncontroller::parameters#fetch()","actiondispatch::http::headers#fetch()","activesupport::cache::store#fetch()","activesupport::hashwithindifferentaccess#fetch()","activesupport::hashwithindifferentaccess#fetch()","mime::fetch()","activesupport::cache::memcachestore::duplocalcache::duplocalstore#fetch_entry()","activesupport::cache::store#fetch_multi()","activesupport::hashwithindifferentaccess#fetch_values()","activesupport::hashwithindifferentaccess#fetch_values()","activestorage::previewer::videopreviewer::ffmpeg_exists?()","activestorage::previewer::videopreviewer::ffmpeg_path()","actionview::helpers::formbuilder#field_id()","actionview::helpers::formtaghelper#field_id()","actionview::helpers::formbuilder#field_name()","actionview::helpers::formtaghelper#field_name()","actionview::helpers::formtaghelper#field_set_tag()","actionview::helpers::formbuilder#fields()","actionview::helpers::formhelper#fields()","actionview::helpers::formbuilder#fields_for()","actionview::helpers::formhelper#fields_for()","activerecord::associations::collectionproxy#fifth()","activerecord::findermethods#fifth()","array#fifth()","activerecord::findermethods#fifth!()","actionview::helpers::formbuilder#file_field()","actionview::helpers::formhelper#file_field()","actionview::helpers::formtaghelper#file_field_tag()","activesupport::testing::filefixtures#file_fixture()","rails::command::file_lookup_paths()","rails::generators::file_lookup_paths()","rails::generators::namedbase#file_path()","activestorage::blob#filename()","activestorage::variant#filename()","actiontext::systemtesthelper#fill_in_rich_text_area()","activesupport::backtracecleaner#filter()","activesupport::parameterfilter#filter()","minitest::backtracefilterwithfallback#filter()","activerecord::core::classmethods#filter_attributes()","activerecord::core::classmethods#filter_attributes=()","rails::console::backtracecleaner#filter_backtrace()","activesupport::parameterfilter#filter_param()","actiondispatch::remoteip::getip#filter_proxies()","actiondispatch::http::filterparameters#filtered_env()","actiondispatch::http::filterparameters#filtered_parameters()","actiondispatch::http::filterparameters#filtered_path()","actiondispatch::http::filterparameters#filtered_query_string()","activerecord::connectionadapters::transactionstate#finalized?()","actionmailer::preview::find()","actionview::lookupcontext::viewpaths#find()","activerecord::associations::collectionproxy#find()","activerecord::findermethods#find()","rails::engine::find()","rails::generators::activemodel::find()","rails::sourceannotationextractor#find()","actiontext::fragment#find_all()","actionview::lookupcontext::viewpaths#find_all()","actionview::resolver#find_all()","actiontext::attachmentgallery::find_attachment_gallery_nodes()","date::find_beginning_of_week!()","activerecord::encryption::extendeddeterministicqueries::corequeries#find_by()","activerecord::findermethods#find_by()","activerecord::findermethods#find_by!()","activerecord::querying#find_by_sql()","rails::dbconsole#find_cmd_and_exec()","activerecord::databaseconfigurations#find_db_config()","activerecord::batches#find_each()","rails::sourceannotationextractor#find_in()","activerecord::batches#find_in_batches()","activerecord::encryption::extendeddeterministicqueries::relationqueries#find_or_create_by()","activerecord::relation#find_or_create_by()","activerecord::encryption::extendeddeterministicqueries::relationqueries#find_or_create_by!()","activerecord::relation#find_or_create_by!()","activerecord::relation#find_or_initialize_by()","rails::application::find_root()","rails::engine::find_root()","actiondispatch::session::cachestore#find_session()","activerecord::signedid::classmethods#find_signed()","activestorage::blob::find_signed()","activerecord::signedid::classmethods#find_signed!()","activestorage::blob::find_signed!()","activerecord::findermethods#find_sole_by()","actionview::lookupcontext::viewpaths#find_template()","actionview::nullresolver#find_templates()","activesupport::timezone::find_tzinfo()","time::find_zone()","time::find_zone!()","activerecord::dynamicmatchers::findby#finder()","activerecord::dynamicmatchers::findbybang#finder()","activesupport::logsubscriber#finish()","activesupport::notifications::fanout#finish()","activesupport::notifications::fanout::subscribers::eventobject#finish()","activesupport::notifications::instrumenter#finish()","activesupport::subscriber#finish()","activesupport::notifications::event#finish!()","activesupport::notifications::instrumenter#finish_with_state()","activerecord::associations::collectionproxy#first()","activerecord::findermethods#first()","rails::paths::path#first()","string#first()","activerecord::findermethods#first!()","actionview::partialiteration#first?()","activerecord::encryption::scheme#fixed?()","activesupport::securityutils::fixed_length_secure_compare()","rails::generators::namedbase#fixture_file_name()","actiondispatch::testprocess::fixturefile#fixture_file_upload()","activerecord::fixtureset::fixture_is_cached?()","activerecord::testfixtures::classmethods#fixtures()","activerecord::tasks::databasetasks#fixtures_path()","actiondispatch::flash::requestmethods#flash()","actiondispatch::testprocess#flash()","actiondispatch::flash::requestmethods#flash=()","rails::generators::appbase::gemfileentry::floats()","time#floor()","activerecord::connectionadapters::connectionpool#flush()","activerecord::futureresult::eventbuffer#flush()","activesupport::logsubscriber::testhelper::mocklogger#flush()","activesupport::taggedlogging#flush()","activerecord::connectionadapters::connectionpool#flush!()","activesupport::logsubscriber::flush_all!()","activerecord::connectionadapters::connectionhandler#flush_idle_connections!()","actiondispatch::integration::requesthelpers#follow_redirect!()","actionview::helpers::asseturlhelper#font_path()","actionview::helpers::asseturlhelper#font_url()","actioncontroller::renderer::for()","activerecord::tasks::databasetasks#for_each()","activerecord::connectionadapters::table#foreign_key()","activerecord::connectionadapters::tabledefinition#foreign_key()","activesupport::inflector#foreign_key()","string#foreign_key()","activerecord::connectionadapters::schemastatements#foreign_key_exists?()","activerecord::connectionadapters::table#foreign_key_exists?()","activerecord::connectionadapters::abstractmysqladapter#foreign_keys()","activerecord::connectionadapters::postgresql::schemastatements#foreign_keys()","activerecord::connectionadapters::sqlite3adapter#foreign_keys()","activerecord::connectionadapters::schemastatements#foreign_keys()","activerecord::connectionadapters::postgresql::schemastatements#foreign_table_exists?()","activerecord::connectionadapters::postgresql::schemastatements#foreign_tables()","activesupport::testing::isolation::forking_env?()","actioncontroller::requestforgeryprotection#form_authenticity_param()","actioncontroller::requestforgeryprotection#form_authenticity_token()","actiondispatch::request#form_data?()","actionview::helpers::formhelper#form_for()","actionview::helpers::formtaghelper#form_tag()","actionview::helpers::formhelper#form_with()","actiondispatch::http::mimenegotiation#format()","activestorage::variation#format()","actiondispatch::http::mimenegotiation#format=()","actiondispatch::http::mimenegotiation#format_from_path_extension()","actionmailer::mailhelper#format_paragraph()","abstractcontroller::base#formats()","actiondispatch::http::mimenegotiation#formats()","actiondispatch::http::mimenegotiation#formats=()","activesupport::timewithzone#formatted_offset()","activesupport::timezone#formatted_offset()","datetime#formatted_offset()","time#formatted_offset()","numeric#fortnight()","numeric#fortnights()","activerecord::associations::collectionproxy#forty_two()","activerecord::findermethods#forty_two()","array#forty_two()","activerecord::findermethods#forty_two!()","activerecord::associations::collectionproxy#fourth()","activerecord::findermethods#fourth()","array#fourth()","activerecord::findermethods#fourth!()","actiontext::attachmentgallery::fragment_by_canonicalizing_attachment_galleries()","actiontext::attachment::fragment_by_canonicalizing_attachments()","actiontext::content::fragment_by_canonicalizing_content()","actiontext::attachments::trixconversion#fragment_by_converting_trix_attachments()","actiontext::attachments::minification#fragment_by_minifying_attachments()","actiontext::attachmentgallery::fragment_by_replacing_attachment_gallery_nodes()","abstractcontroller::caching::fragments::classmethods#fragment_cache_key()","abstractcontroller::caching::fragments#fragment_exist?()","actiontext::htmlconversion#fragment_for_html()","actiondispatch::exceptionwrapper#framework_trace()","activerecord::core#freeze()","activesupport::timewithzone#freeze()","activesupport::testing::timehelpers#freeze_time()","actiondispatch::http::cache::request#fresh?()","actioncontroller::conditionalget#fresh_when()","activerecord::querymethods#from()","array#from()","string#from()","mail::message#from_address()","actiontext::attachment::from_attachable()","actiontext::attachable::from_attachable_sgid()","actiontext::attachable#from_attachable_sgid()","actiontext::attachment::from_attachables()","actiontext::attachment::from_attributes()","actiontext::trixattachment::from_attributes()","actiondispatch::http::headers::from_hash()","actiontext::fragment::from_html()","activemodel::serializers::json#from_json()","actiontext::attachable::from_node()","actiontext::attachables::contentattachment::from_node()","actiontext::attachables::remoteimage::from_node()","actiontext::attachment::from_node()","actiontext::attachmentgallery::from_node()","activesupport::duration#from_now()","actionview::logsubscriber#from_rails_root()","actiondispatch::testresponse::from_response()","mail::from_source()","actiontext::attachments::trixconversion#from_trix_attachment()","hash::from_trusted_xml()","hash::from_xml()","activerecord::core#frozen?()","actiontext::attachment#full_attributes()","activerecord::connectionadapters::transactionstate#full_commit!()","activemodel::error#full_message()","activemodel::errors#full_message()","activemodel::errors#full_messages()","activemodel::errors#full_messages_for()","activerecord::connectionadapters::transactionstate#full_rollback!()","activerecord::connectionadapters::savepointtransaction#full_rollback?()","actiondispatch::exceptionwrapper#full_trace()","actiondispatch::http::url::full_url_for()","actiondispatch::request#fullpath()","activerecord::connectionadapters::transactionstate#fully_committed?()","activerecord::connectionadapters::transactionstate#fully_completed?()","activerecord::connectionadapters::transactionstate#fully_rolledback?()","activesupport::timewithzone#future?()","dateandtime::calculations#future?()","actiontext::content#gallery_attachments()","rails::generators::actions#gem()","rails::generators::actions#gem_group()","actioncable::gem_version()","actionmailbox::gem_version()","actionmailer::gem_version()","actiontext::gem_version()","actionview::gem_version()","activejob::gem_version()","activemodel::gem_version()","activerecord::gem_version()","activestorage::gem_version()","activesupport::gem_version()","rails::gem_version()","rails::appbuilder#gemfile()","rails::pluginbuilder#gemfile()","rails::pluginbuilder#gemfile_entry()","rails::pluginbuilder#gemspec()","activesupport::messageverifier#generate()","rails::generators::actions#generate()","activesupport::cachingkeygenerator#generate_key()","activesupport::encryptedfile::generate_key()","activesupport::keygenerator#generate_key()","rails::generators::benchmarkgenerator#generate_layout()","activemodel::errors#generate_message()","abstractcontroller::collector::generate_method_for_mime()","actionmailbox::inboundemail::messageid#generate_missing_message_id()","activerecord::encryption::keygenerator#generate_random_hex_key()","activerecord::encryption::keygenerator#generate_random_key()","actiondispatch::session::abstractsecurestore#generate_sid()","actiondispatch::session::compatibility#generate_sid()","rails::pluginbuilder#generate_test_dummy()","activerecord::securetoken::classmethods#generate_unique_secure_token()","activestorage::blob::generate_unique_secure_token()","actioncontroller::testcase::behavior#generated_path()","rails::engine::updater::generator()","rails::generators::testing::behaviour#generator()","rails::generators::base::generator_name()","rails::application#generators()","rails::engine::configuration#generators()","rails::railtie::generators()","actioncontroller::testcase::behavior#get()","actiondispatch::integration::requesthelpers#get()","actiondispatch::routing::mapper::httphelpers#get()","actiondispatch::response#get_header()","activesupport::timewithzone#getgm()","datetime#getgm()","activesupport::timewithzone#getlocal()","datetime#getlocal()","activesupport::timewithzone#getutc()","datetime#getutc()","numeric#gigabyte()","numeric#gigabytes()","rails::generators::actions#git()","rails::appbuilder#gitattributes()","rails::generators::actions#github()","rails::generators::appbase::gemfileentry::github()","rails::appbuilder#gitignore()","rails::pluginbuilder#gitignore()","actioncontroller::requestforgeryprotection#global_csrf_token()","activerecord::encryption::encryptablerecord#global_previous_schemes_for()","activesupport::timewithzone#gmt?()","activesupport::timewithzone#gmt_offset()","activesupport::timewithzone#gmtime()","datetime#gmtime()","activesupport::timewithzone#gmtoff()","activesupport::multibyte::chars#grapheme_length()","activerecord::querymethods#group()","activemodel::errors#group_by_attribute()","actionview::helpers::formbuilder#grouped_collection_select()","actionview::helpers::formoptionshelper#grouped_collection_select()","actionview::helpers::formoptionshelper#grouped_options_for_select()","rails::groups()","erb::util::h()","actioncontroller::httpauthentication::digest#ha1()","actioncontroller::logsubscriber#halted_callback()","activesupport::errorreporter#handle()","actioncontroller::requestforgeryprotection#handle_unverified_request()","actioncontroller::requestforgeryprotection::protectionmethods::exception#handle_unverified_request()","actioncontroller::requestforgeryprotection::protectionmethods::nullsession#handle_unverified_request()","actioncontroller::requestforgeryprotection::protectionmethods::resetsession#handle_unverified_request()","actionview::template::handlers::erb#handles_encoding?()","activerecord::associations::classmethods#has_and_belongs_to_many()","activerecord::attributemethods#has_attribute?()","activerecord::attributemethods::classmethods#has_attribute?()","actioncontroller::httpauthentication::basic#has_basic_credentials?()","activerecord::attributemethods::dirty#has_changes_to_save?()","actiondispatch::response#has_header?()","actioncontroller::parameters#has_key?()","activemodel::errors#has_key?()","activesupport::hashwithindifferentaccess#has_key?()","activesupport::hashwithindifferentaccess#has_key?()","activerecord::associations::classmethods#has_many()","activestorage::attached::model#has_many_attached()","actiondispatch::routing::mapper::base#has_named_route?()","activerecord::associations::classmethods#has_one()","activestorage::attached::model#has_one_attached()","actiontext::attribute#has_rich_text()","activemodel::securepassword::classmethods#has_secure_password()","activerecord::securetoken::classmethods#has_secure_token()","actioncontroller::parameters#has_value?()","actioncontroller::parameters#hash()","activemodel::type::value#hash()","activemodel::type::value#hash()","activerecord::associations::preloader::association::loaderquery#hash()","activerecord::core#hash()","activesupport::duration#hash()","activesupport::timewithzone#hash()","activesupport::keygenerator::hash_digest_class()","activesupport::keygenerator::hash_digest_class=()","activerecord::querymethods#having()","actioncontroller::head#head()","actioncontroller::testcase::behavior#head()","actiondispatch::integration::requesthelpers#head()","actiondispatch::routing::consoleformatter::base#header()","actiondispatch::routing::consoleformatter::sheet#header()","actiondispatch::routing::htmltableformatter#header()","actiondispatch::request#headers()","actionmailer::base#headers()","activestorage::service#headers_for_direct_upload()","activestorage::service::azurestorageservice#headers_for_direct_upload()","activestorage::service::diskservice#headers_for_direct_upload()","activestorage::service::gcsservice#headers_for_direct_upload()","activestorage::service::s3service#headers_for_direct_upload()","actionmailbox::ingresses::mandrill::inboundemailscontroller#health_check()","rails::command::base#help()","rails::generators::help()","abstractcontroller::helpers::classmethods#helper()","rails::consolemethods#helper()","actioncontroller::helpers::classmethods#helper_attr()","actionview::testcase::behavior::classmethods#helper_class()","abstractcontroller::helpers::classmethods#helper_method()","actionview::testcase::behavior::classmethods#helper_method()","actioncontroller::helpers#helpers()","actioncontroller::helpers::classmethods#helpers()","rails::engine#helpers()","rails::engine#helpers_paths()","activerecord::connectionadapters::postgresql::oid::bit::data#hex?()","actionview::helpers::formbuilder#hidden_field()","actionview::helpers::formhelper#hidden_field()","actionview::helpers::formtaghelper#hidden_field_tag()","rails::generators::hidden_namespaces()","rails::generators::base::hide!()","rails::command::base::hide_command!()","rails::generators::hide_namespace()","rails::generators::hide_namespaces()","activerecord::connectionadapters::databasestatements#high_precision_current_timestamp()","activerecord::connectionadapters::mysql::databasestatements#high_precision_current_timestamp()","activerecord::connectionadapters::postgresql::databasestatements#high_precision_current_timestamp()","activerecord::connectionadapters::sqlite3::databasestatements#high_precision_current_timestamp()","actionview::helpers::texthelper#highlight()","rails::generators::base::hook_for()","actiondispatch::http::url#host()","actiondispatch::integration::session#host()","activerecord::databaseconfigurations::hashconfig#host()","actiondispatch::testrequest#host=()","actiondispatch::http::url#host_with_port()","activerecord::databaseconnectionerror::hostname_error()","numeric#hour()","numeric#hours()","activerecord::connectionadapters::postgresql::columnmethods#hstore()","mime::alltype#html?()","mime::type#html?()","actiondispatch::assertions#html_document()","erb::util::html_escape()","erb::util::html_escape_once()","string#html_safe()","activesupport::safebuffer#html_safe?()","numeric#html_safe?()","object#html_safe?()","actiondispatch::request#http_auth_salt()","actioncontroller::httpauthentication::basic::controllermethods#http_basic_authenticate_or_request_with()","actioncontroller::httpauthentication::basic::controllermethods::classmethods#http_basic_authenticate_with()","actioncontroller::conditionalget#http_cache_forever()","activesupport::timewithzone#httpdate()","actiondispatch::integration::session#https!()","actiondispatch::integration::session#https?()","activemodel::name#human()","activesupport::inflector::inflections#human()","activemodel::translation#human_attribute_name()","rails::generators::namedbase#human_name()","activesupport::inflector#humanize()","string#humanize()","activemodel::translation#i18n_scope()","rails::generators::namedbase#i18n_scope()","actionview::helpers::formbuilder#id()","activerecord::attributemethods::primarykey#id()","activerecord::encryption::key#id()","activerecord::attributemethods::primarykey#id=()","activerecord::attributemethods::primarykey#id?()","activerecord::attributemethods::primarykey#id_before_type_cast()","activerecord::attributemethods::primarykey#id_in_database()","activerecord::attributemethods::primarykey#id_was()","activestorage::blob::identifiable#identified?()","actioncable::connection::identification::classmethods#identified_by()","actioncable::subscriptionadapter::base#identifier()","activerecord::fixtureset::identify()","activestorage::blob::identifiable#identify()","activestorage::blob::identifiable#identify_without_saving()","activesupport::notifications::event#idle_time()","activerecord::databaseconfigurations::hashconfig#idle_timeout()","activerecord::calculations#ids()","actiondispatch::http::cache::request#if_modified_since()","actiondispatch::testrequest#if_modified_since=()","actiondispatch::http::cache::request#if_none_match()","actiondispatch::testrequest#if_none_match=()","actiondispatch::http::cache::request#if_none_match_etags()","activerecord::encryption::scheme#ignore_case?()","activerecord::modelschema::classmethods#ignored_columns()","activerecord::modelschema::classmethods#ignored_columns=()","activestorage::preview#image()","activestorage::variant#image()","activestorage::variantwithrecord#image()","activestorage::blob#image?()","actionview::helpers::asseturlhelper#image_path()","actionview::helpers::formtaghelper#image_submit_tag()","actionview::helpers::assettaghelper#image_tag()","actionview::helpers::asseturlhelper#image_url()","activerecord::modelschema::immutable_strings_by_default=()","activerecord::modelschema::implicit_order_column()","activerecord::modelschema::implicit_order_column=()","activemodel::errors#import()","activesupport::timewithzone#in()","date#in()","datetime#in()","time#in()","object#in?()","activerecord::batches#in_batches()","activesupport::duration#in_days()","array#in_groups()","array#in_groups_of()","activesupport::duration#in_hours()","numeric#in_milliseconds()","activesupport::duration#in_minutes()","activesupport::duration#in_months()","activerecord::querymethods#in_order_of()","enumerable#in_order_of()","actionview::base#in_rendering_context()","activesupport::duration#in_seconds()","activesupport::timewithzone#in_time_zone()","dateandtime::zones#in_time_zone()","string#in_time_zone()","activesupport::duration#in_weeks()","activesupport::duration#in_years()","actionmailbox::inboundemail::incineratable#incinerate()","actionmailbox::inboundemail::incineratable#incinerate_later()","actioncontroller::parameters#include?()","actiondispatch::http::headers#include?()","activemodel::errors#include?()","activerecord::associations::collectionproxy#include?()","activerecord::findermethods#include?()","activesupport::comparewithrange#include?()","activesupport::hashwithindifferentaccess#include?()","activesupport::hashwithindifferentaccess#include?()","activemodel::validations::acceptancevalidator::lazilydefineattributes#included()","activesupport::concern#included()","activesupport::deprecation::deprecatedconstantaccessor::included()","activerecord::querymethods#includes()","activerecord::result#includes_column?()","array#including()","enumerable#including()","activerecord::persistence#increment()","activesupport::cache::filestore#increment()","activesupport::cache::memcachestore#increment()","activesupport::cache::memorystore#increment()","activesupport::cache::nullstore#increment()","activesupport::cache::rediscachestore#increment()","activesupport::cache::store#increment()","activerecord::persistence#increment!()","activerecord::countercache::classmethods#increment_counter()","rails::railtie::increment_load_index()","rails::generators::base#indent()","string#indent()","string#indent!()","rails::generators::actions#indentation()","activerecord::connectionadapters::table#index()","activerecord::connectionadapters::tabledefinition#index()","rails::rails::conductor::actionmailbox::inboundemailscontroller#index()","activerecord::connectionadapters::abstractadapter#index_algorithms()","activerecord::connectionadapters::abstractmysqladapter#index_algorithms()","activerecord::connectionadapters::postgresqladapter#index_algorithms()","enumerable#index_by()","activerecord::connectionadapters::schemastatements#index_exists?()","activerecord::connectionadapters::table#index_exists?()","rails::generators::namedbase#index_helper()","activerecord::connectionadapters::postgresql::schemastatements#index_name_exists?()","activerecord::connectionadapters::schemastatements#index_name_exists?()","activerecord::connectionadapters::databaselimits#index_name_length()","enumerable#index_with()","activerecord::connectionadapters::schemacache#indexes()","activerecord::connectionadapters::schemastatements#indexes()","activerecord::connectionadapters::postgresql::columnmethods#inet()","activesupport::inflector#inflections()","activesupport::inheritableoptions#inheritable_copy()","abstractcontroller::helpers::classmethods#inherited()","actioncontroller::paramswrapper::options::classmethods#inherited()","actioncontroller::railties::helpers#inherited()","actioncontroller::rendering::classmethods#inherited()","activerecord::inheritance::classmethods#inherited()","activesupport::descendantstracker#inherited()","rails::application::inherited()","rails::engine::inherited()","rails::railtie::inherited()","rails::railtie::configurable::classmethods#inherited()","activerecord::connectionadapters::schemacache#init_with()","activerecord::core#init_with()","actiondispatch::contentsecuritypolicy#initialize_copy()","actiondispatch::flash::flashhash#initialize_copy()","actiondispatch::middlewarestack#initialize_copy()","actiondispatch::permissionspolicy#initialize_copy()","activerecord::relation#initialize_copy()","activerecord::result#initialize_copy()","activesupport::safebuffer#initialize_copy()","activerecord::connectionadapters::schemacache#initialize_dup()","activerecord::inheritance#initialize_dup()","activerecord::modelschema::classmethods#initialize_load_schema_monitor()","actiondispatch::session::compatibility#initialize_sid()","rails::application#initialized?()","rails::application#initializer()","rails::generators::actions#initializer()","rails::initializable::classmethods#initializer()","rails::initializable#initializers()","rails::initializable::classmethods#initializers()","rails::initializable::classmethods#initializers_chain()","rails::initializable::classmethods#initializers_for()","actionmailer::base::lateattachmentsproxy#inline()","array#inquiry()","string#inquiry()","actiondispatch::middlewarestack#insert()","activerecord::connectionadapters::databasestatements#insert()","activerecord::persistence::classmethods#insert()","activesupport::safebuffer#insert()","rails::configuration::middlewarestackproxy#insert()","activerecord::persistence::classmethods#insert!()","actiondispatch::middlewarestack#insert_after()","rails::configuration::middlewarestackproxy#insert_after()","activerecord::persistence::classmethods#insert_all()","activerecord::persistence::classmethods#insert_all!()","actiondispatch::middlewarestack#insert_before()","rails::configuration::middlewarestackproxy#insert_before()","activerecord::connectionadapters::databasestatements#insert_fixture()","activerecord::connectionadapters::databasestatements#insert_fixtures_set()","rails::generators::namedbase#inside_template()","rails::generators::namedbase#inside_template?()","actioncontroller::parameters#inspect()","actiondispatch::middlewarestack::middleware#inspect()","actiondispatch::routing::pathredirect#inspect()","actiontext::attachment#inspect()","actiontext::attachmentgallery#inspect()","actiontext::content#inspect()","actionview::base::inspect()","actionview::template#inspect()","activerecord::core#inspect()","activerecord::relation#inspect()","activesupport::cache::rediscachestore#inspect()","activesupport::deprecation::deprecatedconstantproxy#inspect()","activesupport::orderedoptions#inspect()","activesupport::timewithzone#inspect()","date#inspect()","datetime#inspect()","rails::info::inspect()","activerecord::querycache::install_executor_hooks()","activerecord::encryption::extendeddeterministicqueries::install_support()","activerecord::encryption::extendeddeterministicuniquenessvalidator::install_support()","activesupport::currentattributes::instance()","activesupport::inflector::inflections::instance()","activesupport::perthreadregistry#instance()","rails::application::instance()","rails::railtie::instance()","rails::railtie::configurable::classmethods#instance()","activerecord::attributemethods::classmethods#instance_method_already_implemented?()","activerecord::attributemethods::primarykey::classmethods#instance_method_already_implemented?()","activesupport::inflector::inflections::instance_or_fallback()","object#instance_values()","object#instance_variable_names()","activerecord::persistence::classmethods#instantiate()","activerecord::fixtureset::instantiate_all_loaded_fixtures()","activerecord::fixtureset::instantiate_fixtures()","actionview::template#instrument()","activerecord::futureresult::eventbuffer#instrument()","activestorage::analyzer#instrument()","activesupport::notifications::instrument()","activesupport::notifications::instrumenter#instrument()","activesupport::notifications::instrumenter()","activerecord::connectionadapters::postgresql::columnmethods#int4range()","activerecord::connectionadapters::postgresql::columnmethods#int8range()","actiondispatch::integration::runner#integration_session()","activerecord::modelschema::internal_metadata_table_name()","activerecord::modelschema::internal_metadata_table_name=()","abstractcontroller::base::internal_methods()","activesupport::testing::parallelization::server#interrupt()","activerecord::connectionadapters::postgresql::columnmethods#interval()","activemodel::validations#invalid?()","activerecord::connectionadapters::transactionstate#invalidate!()","activerecord::connectionadapters::transactionstate#invalidated?()","activerecord::migration::commandrecorder#inverse_of()","activerecord::querymethods#invert_where()","activesupport::callbacks::calltemplate::instanceexec0#inverted_lambda()","activesupport::callbacks::calltemplate::instanceexec1#inverted_lambda()","activesupport::callbacks::calltemplate::instanceexec2#inverted_lambda()","activesupport::callbacks::calltemplate::methodcall#inverted_lambda()","activesupport::callbacks::calltemplate::objectcall#inverted_lambda()","activesupport::callbacks::calltemplate::proccall#inverted_lambda()","rails::command::invoke()","rails::generators::invoke()","actioncable::subscriptionadapter::async::asyncsubscribermap#invoke_callback()","actioncable::subscriptionadapter::postgresql::listener#invoke_callback()","actioncable::subscriptionadapter::redis::listener#invoke_callback()","actioncable::subscriptionadapter::subscribermap#invoke_callback()","actiondispatch::request#ip()","actiondispatch::remoteip::getip#ips_from()","activesupport::inflector::inflections#irregular()","activesupport::timewithzone#is_a?()","loaderror#is_missing?()","activerecord::type::internal::timezone#is_utc?()","string#is_utf8?()","activesupport::timewithzone#isdst()","activesupport::duration#iso8601()","activesupport::timewithzone#iso8601()","activesupport::timezone#iso8601()","rails::application#isolate_namespace()","rails::engine::isolate_namespace()","activesupport::notifications::fanout#iterate_guarding_exceptions()","activerecord::encryption::cipher#iv_length()","activerecord::encryption::cipher::aes256gcm::iv_length()","actionview::helpers::javascripthelper#j()","actionview::helpers::assettaghelper#javascript_include_tag()","actionview::helpers::asseturlhelper#javascript_path()","actionview::helpers::javascripthelper#javascript_tag()","actionview::helpers::asseturlhelper#javascript_url()","activejob::enqueuing::classmethods#job_or_instantiate()","activerecord::relation#joined_includes_values()","activerecord::querymethods#joins()","rails::generators::namedbase#js_template()","erb::util::json_escape()","activerecord::connectionadapters::postgresql::columnmethods#jsonb()","actiondispatch::flash::flashhash#keep()","actioncontroller::parameters#keep_if()","activestorage::blob#key()","activestorage::preview#key()","activestorage::variant#key()","activestorage::variation#key()","activesupport::encryptedfile#key()","actioncontroller::parameters#key?()","actiondispatch::flash::flashhash#key?()","actiondispatch::http::headers#key?()","actiondispatch::request#key?()","activemodel::errors#key?()","activesupport::hashwithindifferentaccess#key?()","activesupport::hashwithindifferentaccess#key?()","rails::application#key_generator()","activesupport::messageencryptor::key_len()","activerecord::encryption::cipher#key_length()","activerecord::encryption::cipher::aes256gcm::key_length()","activesupport::cache::store#key_matcher()","activerecord::encryption::scheme#key_provider()","actioncontroller::parameters#keys()","actiondispatch::flash::flashhash#keys()","rails::paths::root#keys()","numeric#kilobyte()","numeric#kilobytes()","activemodel::validator::kind()","activemodel::validator#kind()","activesupport::timewithzone#kind_of?()","activejob::serializers::objectserializer#klass()","activerecord::reflection::macroreflection#klass()","abstractcontroller::translation#l()","actionview::helpers::translationhelper#l()","actionview::helpers::formbuilder#label()","actionview::helpers::formhelper#label()","actionview::helpers::formtaghelper#label_tag()","actiondispatch::middlewarestack#last()","activerecord::associations::collectionproxy#last()","activerecord::findermethods#last()","activerecord::result#last()","rails::paths::path#last()","string#last()","activerecord::findermethods#last!()","actionview::partialiteration#last?()","actiondispatch::http::cache::response#last_modified()","actiondispatch::http::cache::response#last_modified=()","actiondispatch::http::cache::response#last_modified?()","dateandtime::calculations#last_month()","dateandtime::calculations#last_quarter()","dateandtime::calculations#last_week()","dateandtime::calculations#last_weekday()","dateandtime::calculations#last_year()","actionview::layouts::classmethods#layout()","activerecord::databaseconfigurations::hashconfig#lazy_schema_cache_path()","activerecord::connectionadapters::abstractadapter#lease()","activerecord::querymethods#left_joins()","activerecord::querymethods#left_outer_joins()","activerecord::associations::collectionproxy#length()","activerecord::result#length()","rails::appbuilder#lib()","rails::generators::actions#lib()","rails::pluginbuilder#lib()","rails::pluginbuilder#license()","activerecord::querymethods#limit()","activesupport::multibyte::chars#limit()","activerecord::connectionadapters::postgresql::columnmethods#line()","actionview::helpers::urlhelper#link_to()","actionview::helpers::urlhelper#link_to_if()","actionview::helpers::urlhelper#link_to_unless()","actionview::helpers::urlhelper#link_to_unless_current()","actiontext::content#links()","actioncable::subscriptionadapter::postgresql::listener#listen()","actioncable::subscriptionadapter::redis::listener#listen()","activesupport::notifications::fanout#listeners_for()","activesupport::notifications::fanout#listening?()","actiontext::serialization#load()","activerecord::encryption::messageserializer#load()","activerecord::relation#load()","activesupport::cache::coders::loader#load()","activesupport::cache::memcachestore::coders::loader#load()","activerecord::relation#load_async()","rails::engine#load_config_initializer()","rails::engine#load_console()","rails::application::configuration#load_defaults()","activerecord::connectionadapters::schemacache::load_from()","rails::command::actions#load_generators()","rails::engine#load_generators()","activesupport::dependencies::load_interlock()","rails::paths::root#load_paths()","activerecord::relation#load_records()","activerecord::associations::preloader::association::loaderquery#load_records_for_keys()","activerecord::associations::preloader::association::loaderquery#load_records_in_batch()","rails::engine#load_runner()","activerecord::encryption::encryptablerecord#load_schema!()","activerecord::tasks::databasetasks#load_schema_current()","activerecord::migration::load_schema_if_pending!()","activerecord::tasks::databasetasks#load_seed()","rails::engine#load_seed()","rails::engine#load_server()","actiondispatch::session::cookiestore#load_session()","actiondispatch::session::stalesessioncheck#load_session()","activerecord::associations::collectionproxy#load_target()","rails::command::actions#load_tasks()","rails::engine#load_tasks()","activerecord::associations::collectionproxy#loaded()","activerecord::associations::collectionproxy#loaded?()","activesupport::dependencies::interlock#loading()","activesupport::timezone#local()","actiondispatch::request#local?()","actionview::template#local_assigns()","activesupport::timezone#local_to_utc()","abstractcontroller::translation#localize()","actionview::helpers::translationhelper#localize()","actionview::testcase::behavior::renderedviewscollection#locals_for()","activesupport::timewithzone#localtime()","datetime#localtime()","activerecord::querymethods#lock()","activerecord::locking::pessimistic#lock!()","activerecord::connectionadapters::connectionpool#lock_thread=()","activerecord::locking::optimistic::classmethods#locking_column()","activerecord::locking::optimistic::classmethods#locking_column=()","activerecord::locking::optimistic::classmethods#locking_enabled?()","actioncable::connection::taggedloggerproxy#log()","activerecord::connectionadapters::abstractadapter#log()","rails::appbuilder#log()","rails::generators::actions#log()","actioncontroller::logging::classmethods#log_at()","activesupport::logsubscriber::log_subscribers()","activesupport::logsubscriber::testhelper::mocklogger#logged()","actioncable::server::base::logger()","actioncontroller::logsubscriber#logger()","actiondispatch::request#logger()","actionmailer::logsubscriber#logger()","actionview::digestor::logger()","actionview::logsubscriber#logger()","activestorage::analyzer#logger()","activestorage::logsubscriber#logger()","activestorage::previewer#logger()","activesupport::logsubscriber::logger()","activesupport::logsubscriber#logger()","activesupport::logger::logger_outputs_to?()","activerecord::connectionadapters::mysql::columnmethods#longblob()","activerecord::connectionadapters::mysql::columnmethods#longtext()","activejob::queueadapters::lookup()","mime::type::lookup()","activemodel::translation#lookup_ancestors()","mime::type::lookup_by_extension()","actionview::viewpaths#lookup_context()","rails::command::lookup_paths()","rails::generators::lookup_paths()","activesupport::cache::lookup_store()","activerecord::connectionadapters::postgresql::columnmethods#lseg()","activerecord::connectionadapters::postgresql::columnmethods#ltree()","activerecord::connectionadapters::postgresql::columnmethods#macaddr()","actionmailbox::inboundemail#mail()","actionmailer::base#mail()","actionview::helpers::urlhelper#mail_to()","actionmailbox::router::route#mailbox_class()","actionmailbox::router#mailbox_for()","actionmailbox::routing#mailbox_for()","actionmailer::mailhelper#mailer()","actionmailer::testcase::behavior::classmethods#mailer_class()","actionmailer::base::mailer_name()","actionmailer::base#mailer_name()","activesupport::callbacks::calltemplate::instanceexec0#make_lambda()","activesupport::callbacks::calltemplate::instanceexec1#make_lambda()","activesupport::callbacks::calltemplate::instanceexec2#make_lambda()","activesupport::callbacks::calltemplate::methodcall#make_lambda()","activesupport::callbacks::calltemplate::objectcall#make_lambda()","activesupport::callbacks::calltemplate::proccall#make_lambda()","actioncontroller::defaultheaders::classmethods#make_response!()","actioncontroller::live::classmethods#make_response!()","actioncontroller::metal::make_response!()","activerecord::associations::collectionproxy#many?()","activerecord::relation#many?()","enumerable#many?()","activerecord::autosaveassociation#mark_for_destruction()","actioncontroller::requestforgeryprotection#mark_for_same_origin_verification!()","activerecord::autosaveassociation#marked_for_destruction?()","actioncontroller::requestforgeryprotection#marked_for_same_origin_verification?()","activerecord::connectionadapters::schemacache#marshal_dump()","activesupport::timewithzone#marshal_dump()","activerecord::connectionadapters::schemacache#marshal_load()","activesupport::timewithzone#marshal_load()","actioncontroller::requestforgeryprotection#mask_token()","rails::appbuilder#master_key()","actiondispatch::routing::mapper::base#match()","actiondispatch::routing::mapper::resources#match()","activerecord::dynamicmatchers::method::match()","actionmailbox::router::route#match?()","activemodel::error#match?()","activemodel::name#match?()","activesupport::timezone#match?()","mime::type#match?()","activemodel::validations::acceptancevalidator::lazilydefineattributes#matches?()","activerecord::connectionadapters::realtransaction#materialize!()","activerecord::connectionadapters::savepointtransaction#materialize!()","module#mattr_accessor()","module#mattr_reader()","module#mattr_writer()","activerecord::connectionadapters::postgresqladapter#max_identifier_length()","activerecord::databaseconfigurations::hashconfig#max_queue()","activerecord::databaseconfigurations::hashconfig#max_threads()","activerecord::calculations#maximum()","enumerable#maximum()","string#mb_chars()","actiondispatch::request#media_type()","actiondispatch::response#media_type()","activerecord::connectionadapters::mysql::columnmethods#mediumblob()","activerecord::connectionadapters::mysql::columnmethods#mediumtext()","numeric#megabyte()","numeric#megabytes()","actiondispatch::routing::mapper::resources#member()","actioncontroller::parameters#member?()","activerecord::findermethods#member?()","activesupport::hashwithindifferentaccess#member?()","activesupport::hashwithindifferentaccess#member?()","actioncontroller::parameters#merge()","actiondispatch::http::headers#merge()","activerecord::encryption::scheme#merge()","activerecord::spawnmethods#merge()","activesupport::hashwithindifferentaccess#merge()","activesupport::hashwithindifferentaccess#merge()","actioncontroller::parameters#merge!()","actiondispatch::http::headers#merge!()","activemodel::errors#merge!()","activesupport::hashwithindifferentaccess#merge!()","activesupport::hashwithindifferentaccess#merge!()","actiondispatch::response::merge_default_headers()","actiondispatch::response#message()","actionmailer::mailhelper#message()","actionmailer::messagedelivery#message()","activemodel::error#message()","rails::application#message_verifier()","activemodel::errors#messages()","activemodel::errors#messages_for()","activestorage::analyzer#metadata()","activestorage::analyzer::audioanalyzer#metadata()","activestorage::analyzer::imageanalyzer#metadata()","activestorage::analyzer::videoanalyzer#metadata()","actiondispatch::request#method()","abstractcontroller::base::method_added()","actioncable::channel::base::method_added()","activesupport::subscriber::method_added()","actiondispatch::assertions::routingassertions#method_missing()","activemodel::attributemethods#method_missing()","activerecord::migration#method_missing()","activesupport::logsubscriber::testhelper::mocklogger#method_missing()","activesupport::multibyte::chars#method_missing()","activesupport::orderedoptions#method_missing()","activesupport::timewithzone#method_missing()","actiondispatch::request#method_symbol()","date#midday()","datetime#midday()","time#midday()","date#middle_of_day()","datetime#middle_of_day()","time#middle_of_day()","actioncontroller::metal::middleware()","activesupport::cache::strategy::localcache#middleware()","rails::server#middleware()","date#midnight()","datetime#midnight()","time#midnight()","activerecord::migration::migrate()","activerecord::migration#migrate()","activerecord::migrationcontext#migrate()","activerecord::tasks::databasetasks#migrate()","activerecord::tasks::databasetasks#migrate_status()","rails::generators::migration#migration_template()","activerecord::databaseconfigurations::hashconfig#migrations_paths()","activerecord::tasks::databasetasks#migrations_paths()","activerecord::databaseconfigurations::hashconfig#min_threads()","activerecord::calculations#minimum()","enumerable#minimum()","time#minus_with_coercion()","time#minus_without_coercion()","time#minus_without_duration()","numeric#minute()","numeric#minutes()","activestorage::service::mirrorservice#mirror()","activerecord::querymethods::wherechain#missing()","nameerror#missing_name()","nameerror#missing_name?()","activemodel::naming#model_name()","rails::generators::namedbase#model_resource_name()","rails::generators::base#module_namespacing()","module#module_parent()","module#module_parent_name()","module#module_parents()","abstractcontroller::helpers::classmethods#modules_for_helpers()","actioncontroller::helpers::classmethods#modules_for_helpers()","activesupport::concurrency::loadinterlockawaremonitor#mon_enter()","dateandtime::calculations#monday()","activerecord::connectionadapters::postgresql::columnmethods#money()","activesupport::notifications::monotonic_subscribe()","integer#month()","actionview::helpers::formbuilder#month_field()","actionview::helpers::formhelper#month_field()","actionview::helpers::formtaghelper#month_field_tag()","integer#months()","dateandtime::calculations#months_ago()","dateandtime::calculations#months_since()","actiondispatch::routing::mapper::base#mount()","rails::generators::namedbase#mountable_engine?()","actiondispatch::middlewarestack#move()","rails::configuration::middlewarestackproxy#move()","actiondispatch::middlewarestack#move_after()","rails::configuration::middlewarestackproxy#move_after()","actiondispatch::middlewarestack#move_before()","rails::configuration::middlewarestackproxy#move_before()","benchmark::ms()","regexp#multiline?()","actionview::helpers::formbuilder#multipart=()","integer#multiple_of?()","activesupport::cache::store#mute()","activestorage::previewer::mupdfpreviewer::mutool_exists?()","activestorage::previewer::mupdfpreviewer::mutool_path()","actiondispatch::middlewarestack::middleware#name()","activerecord::tasks::databasetasks#name()","activesupport::timewithzone::name()","actiondispatch::routing::mapper::resources#namespace()","actiondispatch::routing::mapper::scoping#namespace()","rails::command::base::namespace()","rails::generators::base::namespace()","rails::generators::base#namespace()","rails::generators::base#namespaced?()","rails::generators::namedbase#namespaced_class_path()","rails::generators::base#namespaced_path()","activerecord::connectionadapters::abstractmysqladapter#native_database_types()","activerecord::connectionadapters::schemastatements#native_database_types()","actioncontroller::mimeresponds::collector#negotiate_format()","actiondispatch::http::mimenegotiation#negotiate_mime()","actiondispatch::routing::mapper::resources#nested()","actioncontroller::parameters#nested_attributes?()","activesupport::hashwithindifferentaccess#nested_under_indifferent_access()","activesupport::hashwithindifferentaccess#nested_under_indifferent_access()","hash#nested_under_indifferent_access()","abstractcontroller::doublerendererror::new()","abstractcontroller::helpers::missinghelpererror::new()","actioncable::channel::base::new()","actioncable::channel::connectionstub::new()","actioncable::channel::noninferrablechannelerror::new()","actioncable::connection::base::new()","actioncable::connection::noninferrableconnectionerror::new()","actioncable::connection::streameventloop::new()","actioncable::connection::taggedloggerproxy::new()","actioncable::connection::testconnection::new()","actioncable::remoteconnections::new()","actioncable::remoteconnections::remoteconnection::new()","actioncable::server::base::new()","actioncable::server::broadcasting::broadcaster::new()","actioncable::server::configuration::new()","actioncable::subscriptionadapter::async::asyncsubscribermap::new()","actioncable::subscriptionadapter::base::new()","actioncable::subscriptionadapter::postgresql::listener::new()","actioncable::subscriptionadapter::redis::listener::new()","actioncable::subscriptionadapter::subscribermap::new()","actioncontroller::live::sse::new()","actioncontroller::metal::new()","actioncontroller::mimeresponds::collector::new()","actioncontroller::missingrenderer::new()","actioncontroller::parameters::new()","actioncontroller::renderer#new()","actioncontroller::renderer::new()","actioncontroller::requestforgeryprotection::protectionmethods::exception::new()","actioncontroller::requestforgeryprotection::protectionmethods::nullsession::new()","actioncontroller::requestforgeryprotection::protectionmethods::resetsession::new()","actioncontroller::respondtomismatcherror::new()","actiondispatch::assertionresponse::new()","actiondispatch::callbacks::new()","actiondispatch::contentsecuritypolicy::new()","actiondispatch::contentsecuritypolicy::middleware::new()","actiondispatch::cookies::new()","actiondispatch::debugexceptions::new()","actiondispatch::debuglocks::new()","actiondispatch::exceptionwrapper::new()","actiondispatch::executor::new()","actiondispatch::filehandler::new()","actiondispatch::flash::new()","actiondispatch::hostauthorization::new()","actiondispatch::http::filterparameters::new()","actiondispatch::http::parameters::parseerror::new()","actiondispatch::http::url::new()","actiondispatch::integration::runner::new()","actiondispatch::integration::session::new()","actiondispatch::middlewarestack::new()","actiondispatch::middlewarestack::instrumentationproxy::new()","actiondispatch::middlewarestack::middleware::new()","actiondispatch::permissionspolicy::new()","actiondispatch::permissionspolicy::middleware::new()","actiondispatch::publicexceptions::new()","actiondispatch::railsentitystore::new()","actiondispatch::railsmetastore::new()","actiondispatch::remoteip::new()","actiondispatch::remoteip::getip::new()","actiondispatch::request::new()","actiondispatch::requestid::new()","actiondispatch::response::new()","actiondispatch::response::rackbody::new()","actiondispatch::routing::consoleformatter::base::new()","actiondispatch::routing::consoleformatter::expanded::new()","actiondispatch::routing::htmltableformatter::new()","actiondispatch::routing::mapper::resources#new()","actiondispatch::routing::urlfor::new()","actiondispatch::servertiming::new()","actiondispatch::session::cachestore::new()","actiondispatch::session::compatibility::new()","actiondispatch::session::cookiestore::new()","actiondispatch::session::cookiestore::sessionid::new()","actiondispatch::session::memcachestore::new()","actiondispatch::showexceptions::new()","actiondispatch::static::new()","actionmailbox::base::new()","actionmailbox::inboundemail::incineratable::incineration::new()","actionmailbox::ingresses::mailgun::inboundemailscontroller::authenticator::new()","actionmailbox::ingresses::mandrill::inboundemailscontroller::authenticator::new()","actionmailbox::relayer::new()","actionmailbox::router::new()","actionmailbox::router::route::new()","actionmailer::base::new()","actionmailer::collector::new()","actionmailer::noninferrablemailererror::new()","actionmailer::preview::new()","actiontext::attachables::remoteimage::new()","actiontext::attachment::new()","actiontext::attachmentgallery::new()","actiontext::content::new()","actiontext::fragment::new()","actiontext::trixattachment::new()","actionview::abstractrenderer::renderedcollection::emptycollection::new()","actionview::cacheexpiry::executor::new()","actionview::cacheexpiry::viewmodificationwatcher::new()","actionview::digestor::node::new()","actionview::filesystemresolver::new()","actionview::fixtureresolver::new()","actionview::helpers::formbuilder::new()","actionview::helpers::numberhelper::invalidnumbererror::new()","actionview::logsubscriber::new()","actionview::partialiteration::new()","actionview::partialrenderer::new()","actionview::renderer::new()","actionview::rendering::new()","actionview::template::new()","actionview::template::sources::file::new()","actionview::template::types::type::new()","actionview::templatedetails::requested::new()","actionview::templatepath::new()","actionview::testcase::behavior::classmethods#new()","actionview::testcase::behavior::renderedviewscollection::new()","actionview::testcase::testcontroller::new()","actionview::unboundtemplate::new()","activejob::core::new()","activejob::queueadapters::asyncadapter::new()","activejob::queueadapters::sneakersadapter::new()","activemodel::api::new()","activemodel::eachvalidator::new()","activemodel::error::new()","activemodel::errors::new()","activemodel::name::new()","activemodel::nestederror::new()","activemodel::securepassword::instancemethodsonactivation::new()","activemodel::type::value::new()","activemodel::type::value::new()","activemodel::unknownattributeerror::new()","activemodel::unknownattributeerror::new()","activemodel::validationerror::new()","activemodel::validations::acceptancevalidator::lazilydefineattributes::new()","activemodel::validator::new()","activerecord::associations::collectionproxy#new()","activerecord::associations::preloader::association::loaderquery::new()","activerecord::associations::preloader::association::loaderrecords::new()","activerecord::attributeassignmenterror::new()","activerecord::attributemethods::serialization::columnnotserializableerror::new()","activerecord::connectionadapters::abstractadapter::version::new()","activerecord::connectionadapters::abstractmysqladapter::new()","activerecord::connectionadapters::connectionhandler::new()","activerecord::connectionadapters::connectionpool::new()","activerecord::connectionadapters::connectionpool::queue::new()","activerecord::connectionadapters::connectionpool::reaper::new()","activerecord::connectionadapters::databasestatements::new()","activerecord::connectionadapters::deduplicable::classmethods#new()","activerecord::connectionadapters::mysql::tabledefinition::new()","activerecord::connectionadapters::mysql2adapter::new()","activerecord::connectionadapters::postgresql::altertable::new()","activerecord::connectionadapters::postgresql::oid::bit::data::new()","activerecord::connectionadapters::postgresql::tabledefinition::new()","activerecord::connectionadapters::postgresqladapter::new()","activerecord::connectionadapters::querycache::new()","activerecord::connectionadapters::querycache::connectionpoolconfiguration::new()","activerecord::connectionadapters::sqlite3adapter::new()","activerecord::connectionadapters::savepointtransaction::new()","activerecord::connectionadapters::schemacache::new()","activerecord::connectionadapters::table::new()","activerecord::connectionadapters::tabledefinition::new()","activerecord::connectionadapters::transactionstate::new()","activerecord::core::new()","activerecord::databaseconfigurations::new()","activerecord::databaseconfigurations::hashconfig::new()","activerecord::databaseconfigurations::urlconfig::new()","activerecord::databaseconnectionerror::new()","activerecord::dynamicmatchers::method::new()","activerecord::eagerloadpolymorphicerror::new()","activerecord::encryption::cipher::aes256gcm::new()","activerecord::encryption::config::new()","activerecord::encryption::context::new()","activerecord::encryption::derivedsecretkeyprovider::new()","activerecord::encryption::deterministickeyprovider::new()","activerecord::encryption::encryptedattributetype::new()","activerecord::encryption::encryptedfixtures::new()","activerecord::encryption::extendeddeterministicqueries::additionalvalue::new()","activerecord::encryption::key::new()","activerecord::encryption::keyprovider::new()","activerecord::encryption::message::new()","activerecord::encryption::properties::new()","activerecord::encryption::scheme::new()","activerecord::environmentmismatcherror::new()","activerecord::fixtureset::new()","activerecord::fixtureset::classcache::new()","activerecord::futureresult::eventbuffer::new()","activerecord::inheritance::classmethods#new()","activerecord::middleware::databaseselector::new()","activerecord::middleware::shardselector::new()","activerecord::migration::new()","activerecord::migration::checkpending::new()","activerecord::migration::commandrecorder::new()","activerecord::migrationcontext::new()","activerecord::mismatchedforeignkey::new()","activerecord::multiparameterassignmenterrors::new()","activerecord::nodatabaseerror::new()","activerecord::querymethods::wherechain::new()","activerecord::recordinvalid::new()","activerecord::recordnotdestroyed::new()","activerecord::recordnotfound::new()","activerecord::recordnotsaved::new()","activerecord::reflection::macroreflection::new()","activerecord::relation::new()","activerecord::relation#new()","activerecord::result::new()","activerecord::solerecordexceeded::new()","activerecord::staleobjecterror::new()","activerecord::statementcache::partialquerycollector::new()","activerecord::statementinvalid::new()","activerecord::unknownprimarykey::new()","activestorage::analyzer::new()","activestorage::attached::new()","activestorage::filename::new()","activestorage::preview::new()","activestorage::previewer::new()","activestorage::service::azurestorageservice::new()","activestorage::service::diskservice::new()","activestorage::service::gcsservice::new()","activestorage::service::mirrorservice::new()","activestorage::service::s3service::new()","activestorage::transformers::transformer::new()","activestorage::variant::new()","activestorage::variantwithrecord::new()","activestorage::variation::new()","activesupport::backtracecleaner::new()","activesupport::cache::filestore::new()","activesupport::cache::memcachestore::new()","activesupport::cache::memorystore::new()","activesupport::cache::rediscachestore::new()","activesupport::cache::store::new()","activesupport::cache::strategy::localcache::localstore::new()","activesupport::cachingkeygenerator::new()","activesupport::callbacks::calltemplate::instanceexec0::new()","activesupport::callbacks::calltemplate::instanceexec1::new()","activesupport::callbacks::calltemplate::instanceexec2::new()","activesupport::callbacks::calltemplate::methodcall::new()","activesupport::callbacks::calltemplate::objectcall::new()","activesupport::callbacks::calltemplate::proccall::new()","activesupport::callbacks::conditionals::value::new()","activesupport::codegenerator::methodset::new()","activesupport::concurrency::sharelock::new()","activesupport::currentattributes::new()","activesupport::deprecation::new()","activesupport::deprecation::deprecatedconstantproxy::new()","activesupport::deprecation::deprecatedconstantproxy::new()","activesupport::deprecation::deprecatedinstancevariableproxy::new()","activesupport::deprecation::deprecatedobjectproxy::new()","activesupport::encryptedconfiguration::new()","activesupport::encryptedfile::new()","activesupport::encryptedfile::invalidkeylengtherror::new()","activesupport::encryptedfile::missingcontenterror::new()","activesupport::encryptedfile::missingkeyerror::new()","activesupport::errorreporter::new()","activesupport::fileupdatechecker::new()","activesupport::gzip::stream::new()","activesupport::hashwithindifferentaccess::new()","activesupport::hashwithindifferentaccess::new()","activesupport::inflector::inflections::new()","activesupport::inflector::inflections::uncountables::new()","activesupport::inheritableoptions::new()","activesupport::keygenerator::new()","activesupport::logsubscriber::testhelper::mocklogger::new()","activesupport::logger::new()","activesupport::messageencryptor::new()","activesupport::messageverifier::new()","activesupport::multibyte::chars::new()","activesupport::notifications::event::new()","activesupport::notifications::fanout::new()","activesupport::notifications::instrumentationsubscribererror::new()","activesupport::notifications::instrumenter::new()","activesupport::parameterfilter::new()","activesupport::reloader::new()","activesupport::safebuffer::new()","activesupport::safebuffer::safeconcaterror::new()","activesupport::securecomparerotator::new()","activesupport::subscriber::new()","activesupport::taggedlogging::new()","activesupport::testing::parallelization::server::new()","activesupport::testing::parallelization::worker::new()","activesupport::timewithzone::new()","activesupport::timezone::new()","activesupport::timezone::new()","activesupport::xmlconverter::disallowedtype::new()","mime::alltype::new()","mime::mimes::new()","mime::type::new()","minitest::backtracefilterwithfallback::new()","rails::api::task::new()","rails::application::new()","rails::application::configuration::new()","rails::application::defaultmiddlewarestack::new()","rails::application::finisher::mutexhook::new()","rails::application::routesreloader::new()","rails::backtracecleaner::new()","rails::configuration::middlewarestackproxy::new()","rails::console::new()","rails::dbconsole::new()","rails::engine::new()","rails::engine::configuration::new()","rails::engine::railties::new()","rails::generators::activemodel::new()","rails::generators::appbase::gemfileentry::new()","rails::initializable::initializer::new()","rails::paths::path::new()","rails::paths::root::new()","rails::rack::logger::new()","rails::rails::conductor::actionmailbox::inboundemails::sourcescontroller#new()","rails::rails::conductor::actionmailbox::inboundemailscontroller#new()","rails::railtie::configuration::new()","rails::secrets::missingkeyerror::new()","rails::server::new()","rails::sourceannotationextractor::new()","activerecord::connectionadapters::mysql2adapter::new_client()","activerecord::connectionadapters::postgresqladapter::new_client()","rails::generators::namedbase#new_helper()","activerecord::persistence#new_record?()","rails::consolemethods#new_session()","time#next_day()","activesupport::timewithzone#next_day?()","dateandtime::calculations#next_day?()","activerecord::migration#next_migration_number()","time#next_month()","dateandtime::calculations#next_occurring()","dateandtime::calculations#next_quarter()","activerecord::modelschema::classmethods#next_sequence_value()","dateandtime::calculations#next_week()","dateandtime::calculations#next_weekday()","time#next_year()","mime::nulltype#nil?()","actiondispatch::routing::consoleformatter::base#no_routes()","actiondispatch::routing::htmltableformatter#no_routes()","actioncontroller::conditionalget#no_store()","activerecord::notouching::classmethods#no_touching()","activerecord::notouching#no_touching?()","actiontext::htmlconversion#node_to_html()","actiontext::plaintextconversion#node_to_plain_text()","actioncontroller::requestforgeryprotection#non_xhr_javascript_response?()","actioncontroller::httpauthentication::digest#nonce()","activerecord::querymethods#none()","activerecord::relation#none?()","date#noon()","datetime#noon()","time#noon()","actioncontroller::requestforgeryprotection#normalize_action_path()","actiondispatch::routing::mapper::normalize_name()","actiondispatch::routing::mapper::normalize_path()","activerecord::querymethods::wherechain#not()","actiondispatch::http::cache::request#not_modified?()","actiondispatch::flash::flashhash#notice()","actiondispatch::flash::flashhash#notice=()","actiondispatch::flash::flashhash#now()","activesupport::timezone#now()","actiondispatch::flash::flashhash#now_is_loaded?()","datetime#nsec()","activerecord::connectionadapters::transactionstate#nullify!()","activerecord::connectionadapters::connectionpool::queue#num_waiting()","actionview::helpers::formbuilder#number_field()","actionview::helpers::formhelper#number_field()","actionview::helpers::formtaghelper#number_field_tag()","actionview::helpers::numberhelper#number_to_currency()","activesupport::numberhelper#number_to_currency()","activesupport::numberhelper#number_to_delimited()","actionview::helpers::numberhelper#number_to_human()","activesupport::numberhelper#number_to_human()","actionview::helpers::numberhelper#number_to_human_size()","activesupport::numberhelper#number_to_human_size()","actionview::helpers::numberhelper#number_to_percentage()","activesupport::numberhelper#number_to_percentage()","actionview::helpers::numberhelper#number_to_phone()","activesupport::numberhelper#number_to_phone()","activesupport::numberhelper#number_to_rounded()","actionview::helpers::numberhelper#number_with_delimiter()","actionview::helpers::numberhelper#number_with_precision()","activerecord::connectionadapters::postgresql::columnmethods#numrange()","actionview::helpers::activemodelinstancetag#object()","activemodel::errors#of_kind?()","activerecord::querymethods#offset()","activerecord::connectionadapters::postgresql::columnmethods#oid()","activesupport::xmlmini_libxmlsax::hashbuilder#on_cdata_block()","activesupport::xmlmini_libxmlsax::hashbuilder#on_characters()","activerecord::encryption::configurable#on_encrypted_attribute_declared()","activesupport::xmlmini_libxmlsax::hashbuilder#on_end_document()","activesupport::xmlmini_libxmlsax::hashbuilder#on_end_element()","activesupport::lazyloadhooks#on_load()","activesupport::xmlmini_libxmlsax::hashbuilder#on_start_document()","activesupport::xmlmini_libxmlsax::hashbuilder#on_start_element()","actioncable::channel::callbacks::classmethods#on_subscribe()","actioncable::channel::callbacks::classmethods#on_unsubscribe()","dateandtime::calculations#on_weekday?()","dateandtime::calculations#on_weekend?()","activerecord::relation#one?()","activerecord::spawnmethods#only()","actioncontroller::httpauthentication::digest#opaque()","actiondispatch::http::uploadedfile#open()","actiondispatch::railsentitystore#open()","activestorage::blob#open()","activestorage::service#open()","actiondispatch::integration::runner#open_session()","rails::server#opt_parser()","rails::generators::actions#optimize_indentation()","actiondispatch::routing::urlfor#optimize_routes_generation?()","activerecord::querymethods#optimizer_hints()","actionview::helpers::formoptionshelper#option_groups_from_collection_for_select()","actiondispatch::http::url#optional_port()","actiondispatch::integration::requesthelpers#options()","actiondispatch::routing::mapper::httphelpers#options()","actionview::helpers::formoptionshelper#options_for_select()","actionview::helpers::formoptionshelper#options_from_collection_for_select()","activerecord::connectionadapters::schemastatements#options_include_default?()","activerecord::querymethods#or()","activerecord::querymethods#order()","activesupport::inflector#ordinal()","integer#ordinal()","activesupport::inflector#ordinalize()","integer#ordinalize()","activesupport::safebuffer#original_concat()","actiondispatch::request#original_fullpath()","actiondispatch::request#original_url()","range#overlaps?()","activerecord::encryption::encryptablerecord#override_accessors_to_preserve_original()","activesupport::testcase::parallelize()","activesupport::testcase::parallelize_setup()","activesupport::testcase::parallelize_teardown()","actioncontroller::parameterencoding::classmethods#param_encoding()","activemodel::naming::param_key()","actiondispatch::http::filterparameters#parameter_filter()","actiondispatch::http::filterparameters#parameter_filter_for()","actiondispatch::http::parameters::classmethods#parameter_parsers=()","activesupport::inflector#parameterize()","string#parameterize()","actiondispatch::http::parameters#parameters()","actioncontroller::metal#params()","actioncontroller::strongparameters#params()","actiondispatch::http::parameters#params()","actioncontroller::metal#params=()","actioncontroller::strongparameters#params=()","actioncontroller::httpauthentication::token#params_array_from()","actiondispatch::http::mimenegotiation#params_readable?()","activesupport::notifications::event#parent_of?()","actionview::templatepath::parse()","activesupport::duration::parse()","activesupport::timezone#parse()","mime::type::parse()","rails::server::options#parse!()","mime::type::parse_data_with_trailing_star()","activesupport::json::parse_error()","mime::type::parse_trailing_star()","actiondispatch::testresponse#parsed_body()","activerecord::attributemethods::dirty::classmethods#partial_writes()","activerecord::attributemethods::dirty::classmethods#partial_writes=()","activerecord::attributemethods::dirty::classmethods#partial_writes?()","activesupport::duration#parts()","actionview::helpers::formbuilder#password_field()","actionview::helpers::formhelper#password_field()","actionview::helpers::formtaghelper#password_field_tag()","activesupport::timewithzone#past?()","dateandtime::calculations#past?()","actioncontroller::testcase::behavior#patch()","actiondispatch::integration::requesthelpers#patch()","actiondispatch::routing::mapper::httphelpers#patch()","actiondispatch::http::uploadedfile#path()","actiondispatch::routing::pathredirect#path()","activerecord::connectionadapters::postgresql::columnmethods#path()","rails::generators::appbase::gemfileentry::path()","actiondispatch::testrequest#path=()","actiondispatch::http::url::path_for()","actiondispatch::http::parameters#path_parameters()","actionview::helpers::asseturlhelper#path_to_asset()","actionview::helpers::asseturlhelper#path_to_audio()","actionview::helpers::asseturlhelper#path_to_font()","actionview::helpers::asseturlhelper#path_to_image()","actionview::helpers::asseturlhelper#path_to_javascript()","actionview::helpers::asseturlhelper#path_to_stylesheet()","actionview::helpers::asseturlhelper#path_to_video()","rails::application::configuration#paths()","rails::engine::configuration#paths()","rails::paths::path#paths()","activerecord::dynamicmatchers::method::pattern()","activestorage::previewer::popplerpdfpreviewer::pdftoppm_exists?()","activestorage::previewer::popplerpdfpreviewer::pdftoppm_path()","actioncontroller::requestforgeryprotection#per_form_csrf_token()","actioncable::channel::testcase::behavior#perform()","actionmailbox::incinerationjob#perform()","actionmailbox::routingjob#perform()","activejob::execution#perform()","activerecord::destroyassociationasyncjob#perform()","activestorage::analyzejob#perform()","activestorage::mirrorjob#perform()","activestorage::purgejob#perform()","actioncable::channel::base#perform_action()","activejob::testhelper#perform_enqueued_jobs()","activesupport::testing::parallelization::worker#perform_job()","activejob::enqueuing::classmethods#perform_later()","activejob::execution#perform_now()","activejob::execution::classmethods#perform_now()","abstractcontroller::base#performed?()","actioncontroller::metal#performed?()","activejob::queueadapters::testadapter#performed_jobs()","activesupport::timewithzone#period()","activesupport::timezone#period_for_local()","activesupport::timezone#period_for_utc()","actioncable::channel::periodictimers::classmethods#periodically()","actiondispatch::cookies::chainedcookiejars#permanent()","actionmailbox::relayer::result#permanent_failure?()","actioncontroller::permissionspolicy::classmethods#permissions_policy()","actiondispatch::permissionspolicy::request#permissions_policy()","rails::application::configuration#permissions_policy()","actiondispatch::permissionspolicy::request#permissions_policy=()","actioncontroller::parameters#permit()","actioncontroller::parameters#permit!()","activesupport::dependencies::interlock#permit_concurrent_loads()","actioncontroller::parameters#permitted?()","activemodel::api#persisted?()","activerecord::persistence#persisted?()","numeric#petabyte()","numeric#petabytes()","actionview::helpers::formbuilder#phone_field()","actionview::helpers::formhelper#phone_field()","actionview::helpers::formtaghelper#phone_field_tag()","actionview::helpers::urlhelper#phone_to()","activerecord::calculations#pick()","enumerable#pick()","activerecord::associations::collectionproxy#pluck()","activerecord::calculations#pluck()","enumerable#pluck()","minitest::plugin_rails_init()","minitest::plugin_rails_options()","actiondispatch::contentsecuritypolicy#plugin_types()","activemodel::naming::plural()","activesupport::inflector::inflections#plural()","rails::generators::namedbase#plural_file_name()","rails::generators::namedbase#plural_name()","rails::generators::namedbase#plural_route_name()","rails::generators::namedbase#plural_table_name()","actionview::helpers::texthelper#pluralize()","activesupport::inflector#pluralize()","string#pluralize()","activerecord::modelschema::pluralize_table_names()","activerecord::modelschema::pluralize_table_names=()","rails::generators::namedbase#pluralize_table_names?()","activerecord::connectionadapters::postgresql::columnmethods#point()","activerecord::connectionadapters::connectionpool::queue#poll()","activerecord::connectionadapters::postgresql::columnmethods#polygon()","activerecord::inheritance::classmethods#polymorphic_class_for()","activerecord::inheritance::classmethods#polymorphic_name()","actiondispatch::routing::polymorphicroutes#polymorphic_path()","actiondispatch::routing::polymorphicroutes#polymorphic_url()","activerecord::databaseconfigurations::hashconfig#pool()","activesupport::testing::parallelization::server#pop()","actiondispatch::http::url#port()","actiondispatch::testrequest#port=()","actiondispatch::http::url#port_string()","actioncable::connection::streameventloop#post()","actioncontroller::testcase::behavior#post()","actiondispatch::integration::requesthelpers#post()","actiondispatch::routing::mapper::httphelpers#post()","activerecord::connectionadapters::abstractadapter#prefetch_primary_key?()","activerecord::modelschema::classmethods#prefetch_primary_key?()","activerecord::dynamicmatchers::findby::prefix()","activerecord::dynamicmatchers::findbybang::prefix()","activerecord::dynamicmatchers::method::prefix()","activerecord::querymethods#preload()","actionview::helpers::assettaghelper#preload_link_tag()","activestorage::fixtureset#prepare()","actiondispatch::response#prepare!()","activerecord::tasks::databasetasks#prepare_all()","rails::generators::testing::behaviour#prepare_destination()","activerecord::connectionadapters::abstractadapter#prepared_statements()","activerecord::connectionadapters::abstractadapter#prepared_statements?()","activesupport::safebuffer#prepend()","abstractcontroller::callbacks::classmethods#prepend_after_action()","abstractcontroller::callbacks::classmethods#prepend_around_action()","abstractcontroller::callbacks::classmethods#prepend_before_action()","actionview::viewpaths#prepend_view_path()","actionview::viewpaths::classmethods#prepend_view_path()","activesupport::concern#prepended()","activesupport::testing::setupandteardown::prepended()","object#presence()","object#presence_in()","object#present?()","activerecord::encryption::encryptablerecord#preserve_original_encrypted()","activerecord::core#pretty_print()","activerecord::core::inspectionmask#pretty_print()","activerecord::relation#pretty_print()","time#prev_day()","activesupport::timewithzone#prev_day?()","dateandtime::calculations#prev_day?()","time#prev_month()","dateandtime::calculations#prev_occurring()","dateandtime::calculations#prev_quarter()","dateandtime::calculations#prev_week()","dateandtime::calculations#prev_weekday()","time#prev_year()","activerecord::connectionadapters::abstractadapter#preventing_writes?()","activestorage::blob::representable#preview()","activestorage::previewer#preview()","activestorage::previewer::mupdfpreviewer#preview()","activestorage::previewer::popplerpdfpreviewer#preview()","activestorage::previewer::videopreviewer#preview()","actionmailer::preview::preview_name()","activestorage::blob::representable#previewable?()","actiontext::attachable#previewable_attachable?()","actiontext::engine#previewable_attachable?()","activerecord::encryption::config#previous=()","activemodel::dirty#previous_changes()","activerecord::persistence#previously_new_record?()","activerecord::persistence#previously_persisted?()","activerecord::inheritance::classmethods#primary_abstract_class()","activerecord::attributemethods::primarykey::classmethods#primary_key()","activerecord::connectionadapters::columnmethods#primary_key()","activerecord::connectionadapters::postgresql::columnmethods#primary_key()","activerecord::connectionadapters::schemastatements#primary_key()","activerecord::attributemethods::primarykey::classmethods#primary_key=()","activerecord::modelschema::primary_key_prefix_type()","activerecord::modelschema::primary_key_prefix_type=()","activerecord::connectionadapters::schemacache#primary_keys()","rails::generators::print_generators()","rails::generators::print_list()","rails::command::base::printing_commands()","activejob::queuepriority#priority()","activerecord::encryption::extendeddeterministicqueries::inwithadditionalvalues#proc_for_binds()","abstractcontroller::base#process()","actioncontroller::live#process()","actioncontroller::testcase::behavior#process()","actiondispatch::integration::session#process()","actionmailbox::base#process()","actionmailer::logsubscriber#process()","activestorage::transformers::transformer#process()","activestorage::variantwithrecord#process()","actioncontroller::logsubscriber#process_action()","activestorage::preview#processed()","activestorage::variant#processed()","activestorage::variantwithrecord#processed()","actionmailbox::inboundemail#processed?()","actionmailer::messagedelivery#processed?()","activestorage::variantwithrecord#processed?()","activerecord::connectionhandling#prohibit_shard_swapping()","activerecord::migration#proper_table_name()","rails::info::property()","actioncontroller::requestforgeryprotection#protect_against_forgery?()","actionview::testcase::behavior#protect_against_forgery?()","actioncontroller::requestforgeryprotection::classmethods#protect_from_forgery()","activerecord::modelschema::classmethods#protected_environments()","activerecord::modelschema::classmethods#protected_environments=()","activerecord::encryption::contexts#protecting_encrypted_data()","actiondispatch::http::url#protocol()","actionview::helpers::capturehelper#provide()","activesupport::multibyte::proxy_class()","activesupport::multibyte::proxy_class=()","activesupport::cache::memorystore#prune()","activesupport::cache::memorystore#pruning?()","activestorage::service#public?()","actionview::helpers::asseturlhelper#public_compute_asset_path()","rails::appbuilder#public_directory()","rails::generators::public_namespaces()","rails::public_path()","activesupport::notifications::publish()","activesupport::notifications::fanout#publish()","activesupport::logsubscriber#publish_event()","activesupport::notifications::fanout#publish_event()","activesupport::notifications::fanout::subscribers::eventobject#publish_event()","actioncable::server::base#pubsub()","actioncable::server::configuration#pubsub_adapter()","activerecord::tasks::databasetasks#purge()","activestorage::attached::many#purge()","activestorage::attached::model#purge()","activestorage::attached::one#purge()","activestorage::attachment#purge()","activestorage::blob#purge()","activerecord::tasks::databasetasks#purge_all()","activerecord::tasks::databasetasks#purge_current()","activestorage::attached::many#purge_later()","activestorage::attached::model#purge_later()","activestorage::attached::one#purge_later()","activestorage::attachment#purge_later()","activestorage::blob#purge_later()","activerecord::associations::collectionproxy#push()","rails::paths::path#push()","actioncontroller::testcase::behavior#put()","actiondispatch::integration::requesthelpers#put()","actiondispatch::routing::mapper::httphelpers#put()","activerecord::attributemethods::query#query_attribute()","activerecord::connectionadapters::querycache::connectionpoolconfiguration#query_cache_enabled()","actioncontroller::testcase::behavior#query_parameter_names()","actiondispatch::request#query_parameters()","activejob::queueadapter::classmethods#queue_adapter()","activejob::testhelper#queue_adapter()","activejob::testhelper::testqueueadapter::classmethods#queue_adapter()","activejob::queueadapter::classmethods#queue_adapter=()","activejob::testhelper#queue_adapter_for_test()","activejob::queueadapter::classmethods#queue_adapter_name()","activejob::queuename::classmethods#queue_as()","activejob::queuename#queue_name()","activejob::queuepriority::classmethods#queue_with_priority()","activerecord::connectionadapters::quoting#quote()","rails::generators::actions#quote()","activerecord::connectionadapters::quoting#quote_bound_value()","activerecord::connectionadapters::quoting#quote_column_name()","activerecord::connectionadapters::postgresql::quoting#quote_schema_name()","activerecord::connectionadapters::mysql2adapter#quote_string()","activerecord::connectionadapters::quoting#quote_string()","activerecord::connectionadapters::quoting#quote_table_name()","activerecord::connectionadapters::postgresql::quoting#quote_table_name_for_assignment()","activerecord::connectionadapters::quoting#quote_table_name_for_assignment()","activerecord::connectionadapters::quoting#quoted_date()","activerecord::connectionadapters::quoting#quoted_false()","activerecord::attributemethods::primarykey::classmethods#quoted_primary_key()","activerecord::modelschema::classmethods#quoted_table_name()","activerecord::connectionadapters::quoting#quoted_true()","actionview::helpers::formbuilder#radio_button()","actionview::helpers::formhelper#radio_button()","actionview::helpers::formtaghelper#radio_button_tag()","rails::generators::actions#rails_command()","actionview::logsubscriber#rails_root()","rails::api::edgetask#rails_version()","rails::api::stabletask#rails_version()","rails::railtie::railtie_name()","rails::engine#railties()","activesupport::proxyobject#raise()","activerecord::tasks::databasetasks#raise_for_multi_db()","activemodel::validations#raise_validation_error()","rails::generators::actions#rake()","rails::application#rake_tasks()","rails::railtie::rake_tasks()","rails::appbuilder#rakefile()","rails::generators::actions#rakefile()","rails::pluginbuilder#rakefile()","actionview::helpers::formbuilder#range_field()","actionview::helpers::formhelper#range_field()","actionview::helpers::formtaghelper#range_field_tag()","actionview::helpers::outputsafetyhelper#raw()","activerecord::connectionadapters::abstractadapter#raw_connection()","actiondispatch::http::url#raw_host_with_port()","actioncontroller::httpauthentication::token#raw_params()","actiondispatch::request#raw_post()","actiondispatch::request#raw_request_method()","actiondispatch::http::uploadedfile#read()","actiondispatch::railsentitystore#read()","actiondispatch::railsmetastore#read()","activesupport::cache::store#read()","activesupport::encryptedconfiguration#read()","activesupport::encryptedfile#read()","activerecord::attributemethods::read#read_attribute()","activerecord::attributemethods::beforetypecast#read_attribute_before_type_cast()","activesupport::cache::strategy::localcache::localstore#read_entry()","abstractcontroller::caching::fragments#read_fragment()","activesupport::cache::rediscachestore#read_multi()","activesupport::cache::store#read_multi()","activesupport::cache::strategy::localcache::localstore#read_multi_entries()","activerecord::store#read_store_attribute()","date#readable_inspect()","datetime#readable_inspect()","rails::appbuilder#readme()","rails::generators::actions#readme()","rails::pluginbuilder#readme()","activerecord::querymethods#readonly()","activerecord::core#readonly!()","activerecord::core#readonly?()","activerecord::readonlyattributes::classmethods#readonly_attributes()","actioncontroller::requestforgeryprotection#real_csrf_token()","activerecord::connectionadapters::connectionpool#reap()","activerecord::databaseconfigurations::hashconfig#reaping_frequency()","actionmailbox::base::receive()","actionmailbox::testhelper#receive_inbound_email_from_fixture()","actionmailbox::testhelper#receive_inbound_email_from_mail()","actionmailbox::testhelper#receive_inbound_email_from_source()","mail::message#recipients()","mail::message#recipients_addresses()","activerecord::connectionadapters::abstractadapter#reconnect!()","activerecord::connectionadapters::mysql2adapter#reconnect!()","activerecord::connectionadapters::postgresqladapter#reconnect!()","activerecord::connectionadapters::sqlite3adapter#reconnect!()","activerecord::migration::commandrecorder#record()","activesupport::errorreporter#record()","activesupport::notifications::event#record()","activesupport::testing::parallelization::server#record()","actionview::recordidentifier#record_key_for_dom_id()","activerecord::associations::preloader::association::loaderrecords#records()","activerecord::associations::preloader::association::loaderquery#records_for()","activerecord::connectionadapters::abstractmysqladapter#recreate_database()","module#redefine_method()","module#redefine_singleton_method()","actiondispatch::routing::redirection#redirect()","actioncontroller::redirecting#redirect_back()","actioncontroller::redirecting#redirect_back_or_to()","rails::generators::namedbase#redirect_resource_name()","actioncontroller::flash#redirect_to()","actioncontroller::instrumentation#redirect_to()","actioncontroller::logsubscriber#redirect_to()","actioncontroller::redirecting#redirect_to()","actiondispatch::testprocess#redirect_to_url()","activesupport::cache::rediscachestore#redis()","actionview::template::types::type#ref()","mime::nulltype#ref()","mime::type#ref()","activerecord::connectionadapters::sqlite3::tabledefinition#references()","activerecord::connectionadapters::table#references()","activerecord::connectionadapters::tabledefinition#references()","activerecord::querymethods#references()","activerecord::reflection::classmethods#reflect_on_aggregation()","activerecord::reflection::classmethods#reflect_on_all_aggregations()","activerecord::reflection::classmethods#reflect_on_all_associations()","activestorage::reflection::activerecordextensions::classmethods#reflect_on_all_attachments()","activerecord::reflection::classmethods#reflect_on_all_autosave_associations()","activerecord::reflection::classmethods#reflect_on_association()","activestorage::reflection::activerecordextensions::classmethods#reflect_on_attachment()","activerecord::reflection::classmethods#reflections()","activemodel::type::register()","activerecord::type::register()","mime::type::register()","mime::type::register_alias()","mime::type::register_callback()","rails::sourceannotationextractor::annotation::register_directories()","actiondispatch::integrationtest::behavior::classmethods#register_encoder()","rails::sourceannotationextractor::annotation::register_extensions()","activesupport::executionwrapper::register_hook()","actiondispatch::debugexceptions::register_interceptor()","actionmailer::base::register_interceptor()","actionmailer::base::register_interceptors()","actionmailer::base::register_observer()","actionmailer::base::register_observers()","actionmailer::previews::classmethods#register_preview_interceptor()","actionmailer::previews::classmethods#register_preview_interceptors()","rails::sourceannotationextractor::annotation::register_tags()","activerecord::tasks::databasetasks#register_task()","activerecord::connectionadapters::deduplicable::classmethods#registry()","rails::generators::namedbase#regular_class_path()","activesupport::hashwithindifferentaccess#regular_update()","activesupport::hashwithindifferentaccess#regular_update()","activesupport::hashwithindifferentaccess#regular_writer()","activesupport::hashwithindifferentaccess#regular_writer()","actioncable::channel::base#reject()","actioncontroller::parameters#reject()","activesupport::hashwithindifferentaccess#reject()","activesupport::hashwithindifferentaccess#reject()","actioncontroller::parameters#reject!()","actioncable::connection::authorization#reject_unauthorized_connection()","actioncable::channel::channelstub#rejected?()","actionmailbox::relayer#relay()","activerecord::connectionadapters::connectionpool#release_connection()","activerecord::connectionadapters::savepoints#release_savepoint()","activesupport::reloader#release_unload_lock!()","activerecord::associations::collectionproxy#reload()","activerecord::attributemethods::dirty#reload()","activerecord::autosaveassociation#reload()","activerecord::persistence#reload()","activerecord::relation#reload()","activesupport::reloader::reload!()","rails::application::routesreloader#reload!()","rails::consolemethods#reload!()","rails::application#reload_routes!()","actiondispatch::testrequest#remote_addr=()","actioncable::server::base#remote_connections()","actiondispatch::request#remote_ip()","actiondispatch::request#remote_ip=()","actioncontroller::renderers::remove()","activerecord::connectionadapters::connectionpool#remove()","activerecord::connectionadapters::table#remove()","string#remove()","string#remove!()","activerecord::connectionadapters::schemastatements#remove_belongs_to()","activerecord::connectionadapters::table#remove_belongs_to()","actioncable::subscriptionadapter::postgresql::listener#remove_channel()","actioncable::subscriptionadapter::redis::listener#remove_channel()","actioncable::subscriptionadapter::subscribermap#remove_channel()","activerecord::connectionadapters::schemastatements#remove_check_constraint()","activerecord::connectionadapters::table#remove_check_constraint()","activerecord::connectionadapters::schemastatements#remove_column()","activerecord::connectionadapters::tabledefinition#remove_column()","activerecord::connectionadapters::schemastatements#remove_columns()","activerecord::connectionhandling#remove_connection()","activerecord::connectionadapters::connectionhandler#remove_connection_pool()","activesupport::subscriber::remove_event_subscriber()","activesupport::backtracecleaner#remove_filters!()","activerecord::connectionadapters::schemastatements#remove_foreign_key()","activerecord::connectionadapters::table#remove_foreign_key()","rails::generators::base::remove_hook_for()","activerecord::connectionadapters::schemastatements#remove_index()","activerecord::connectionadapters::table#remove_index()","module#remove_possible_method()","module#remove_possible_singleton_method()","activerecord::connectionadapters::schemastatements#remove_reference()","activerecord::connectionadapters::table#remove_references()","actioncontroller::remove_renderer()","activesupport::backtracecleaner#remove_silencers!()","actioncable::subscriptionadapter::subscribermap#remove_subscriber()","activerecord::connectionadapters::schemastatements#remove_timestamps()","activerecord::connectionadapters::table#remove_timestamps()","activerecord::connectionadapters::table#rename()","activerecord::connectionadapters::schemastatements#rename_column()","activerecord::connectionadapters::abstractmysqladapter#rename_index()","activerecord::connectionadapters::postgresql::schemastatements#rename_index()","activerecord::connectionadapters::schemastatements#rename_index()","activerecord::connectionadapters::table#rename_index()","activesupport::xmlmini#rename_key()","activerecord::connectionadapters::abstractmysqladapter#rename_table()","activerecord::connectionadapters::postgresql::schemastatements#rename_table()","activerecord::connectionadapters::sqlite3adapter#rename_table()","activerecord::connectionadapters::schemastatements#rename_table()","abstractcontroller::rendering#render()","actioncontroller::instrumentation#render()","actioncontroller::renderer#render()","actionview::helpers::renderinghelper#render()","actionview::helpers::tags::actiontext#render()","actionview::partialrenderer#render()","actionview::renderer#render()","actionview::template#render()","actionview::testcase::behavior#render()","actionview::testcase::behavior::locals#render()","actiontext::contenthelper#render_action_text_attachments()","actiontext::contenthelper#render_action_text_content()","actiontext::content#render_attachment_galleries()","actiontext::content#render_attachments()","actionview::renderer#render_body()","actionview::logsubscriber#render_collection()","actionview::logsubscriber#render_count()","actionview::logsubscriber#render_layout()","actionview::logsubscriber#render_partial()","actionview::logsubscriber#render_template()","abstractcontroller::rendering#render_to_body()","actioncontroller::apirendering#render_to_body()","actioncontroller::renderers#render_to_body()","actioncontroller::rendering#render_to_body()","actionview::rendering#render_to_body()","abstractcontroller::rendering#render_to_string()","actioncontroller::renderer#render_to_string()","actioncontroller::rendering#render_to_string()","abstractcontroller::rendering#rendered_format()","actionview::testcase::behavior#rendered_views()","actionview::testcase::behavior::renderedviewscollection#rendered_views()","activerecord::querymethods#reorder()","actiontext::fragment#replace()","activerecord::associations::collectionproxy#replace()","activesupport::hashwithindifferentaccess#replace()","activesupport::hashwithindifferentaccess#replace()","activesupport::safebuffer#replace()","activerecord::migration::commandrecorder#replay()","activerecord::connectionadapters::abstractadapter#replica?()","activerecord::databaseconfigurations::hashconfig#replica?()","activesupport::errorreporter#report()","actiondispatch::contentsecuritypolicy#report_uri()","activestorage::blob::representable#representable?()","activestorage::blob::representable#representation()","actioncable::connection::base#request()","actioncontroller::base#request()","actioncontroller::requestforgeryprotection#request_authenticity_tokens()","actioncontroller::httpauthentication::basic::controllermethods#request_http_basic_authentication()","actioncontroller::httpauthentication::digest::controllermethods#request_http_digest_authentication()","actioncontroller::httpauthentication::token::controllermethods#request_http_token_authentication()","actiondispatch::request#request_id()","actiondispatch::request#request_method()","actiondispatch::testrequest#request_method=()","actiondispatch::request#request_method_symbol()","actiondispatch::request#request_parameters()","actiondispatch::request#request_parameters=()","actiondispatch::testrequest#request_uri=()","actioncontroller::parameters#require()","rails::command::actions#require_application!()","rails::command::actions#require_application_and_environment!()","activesupport::dependencies::requiredependency#require_dependency()","actionview::template::handlers::builder#require_engine()","rails::command::actions#require_environment!()","actiondispatch::contentsecuritypolicy#require_sri_for()","activesupport::reloader#require_unload_lock!()","actioncontroller::parameters#required()","activerecord::connectionadapters::abstractadapter#requires_reloading?()","activerecord::connectionadapters::sqlite3adapter#requires_reloading?()","activesupport::rescuable::classmethods#rescue_from()","actiondispatch::exceptionwrapper#rescue_response?()","actiondispatch::exceptionwrapper#rescue_template()","activesupport::rescuable#rescue_with_handler()","activesupport::rescuable::classmethods#rescue_with_handler()","activerecord::querymethods#reselect()","activerecord::associations::collectionproxy#reset()","activerecord::relation#reset()","activesupport::currentattributes#reset()","actiondispatch::integration::runner#reset!()","actiondispatch::integration::session#reset!()","activerecord::connectionadapters::abstractadapter#reset!()","activerecord::connectionadapters::mysql2adapter#reset!()","activerecord::connectionadapters::postgresqladapter#reset!()","actiondispatch::response#reset_body!()","activerecord::fixtureset::reset_cache()","activesupport::callbacks::classmethods#reset_callbacks()","activerecord::modelschema::classmethods#reset_column_information()","activerecord::countercache::classmethods#reset_counters()","actionview::helpers::texthelper#reset_cycle()","activerecord::locking::optimistic::classmethods#reset_locking_column()","activerecord::logsubscriber::reset_runtime()","activerecord::connectionadapters::databasestatements#reset_sequence!()","actioncontroller::metal#reset_session()","actiondispatch::request#reset_session()","activesupport::currentattributes::resets()","actiondispatch::railsentitystore::resolve()","actiondispatch::railsmetastore::resolve()","actiondispatch::routing::mapper::customurls#resolve()","actiondispatch::routing::mapper::resources#resource()","actiondispatch::routing::mapper::resources#resources()","actiondispatch::routing::mapper::resources#resources_path_names()","actioncontroller::mimeresponds#respond_to()","actiondispatch::response::rackbody#respond_to?()","activemodel::attributemethods#respond_to?()","activerecord::attributemethods#respond_to?()","activesupport::timewithzone#respond_to?()","rails::railtie::configurable::classmethods#respond_to?()","rails::railtie::configuration#respond_to?()","activesupport::multibyte::chars#respond_to_missing?()","activesupport::orderedoptions#respond_to_missing?()","activesupport::timewithzone#respond_to_missing?()","activemodel::attributemethods#respond_to_without_attributes?()","actioncontroller::base#response()","actioncontroller::mimeresponds::collector#response()","abstractcontroller::base#response_body()","actioncontroller::live#response_body=()","actioncontroller::metal#response_body=()","actiondispatch::response#response_code()","actiondispatch::requestencoder::identityencoder#response_parser()","actiondispatch::testresponse#response_parser()","actioncable::server::base#restart()","activemodel::dirty#restore_attributes()","actiondispatch::routing::consoleformatter::base#result()","actiondispatch::routing::htmltableformatter#result()","activerecord::connectionhandling#retrieve_connection()","activerecord::connectionadapters::connectionhandler#retrieve_connection_pool()","activejob::exceptions#retry_job()","activejob::exceptions::classmethods#retry_on()","activesupport::multibyte::chars#reverse()","actioncontroller::parameters#reverse_merge()","activesupport::hashwithindifferentaccess#reverse_merge()","activesupport::hashwithindifferentaccess#reverse_merge()","hash#reverse_merge()","actioncontroller::parameters#reverse_merge!()","activesupport::hashwithindifferentaccess#reverse_merge!()","activesupport::hashwithindifferentaccess#reverse_merge!()","hash#reverse_merge!()","activerecord::querymethods#reverse_order()","hash#reverse_update()","activerecord::migration#reversible()","activerecord::migration#revert()","activerecord::migration::commandrecorder#revert()","activerecord::migration#reverting?()","activerecord::querymethods#rewhere()","actiondispatch::http::uploadedfile#rewind()","actioncontroller::httpauthentication::token#rewrite_param_values()","activesupport::timewithzone#rfc2822()","activesupport::timewithzone#rfc3339()","activesupport::timezone#rfc3339()","time::rfc3339()","activesupport::timewithzone#rfc822()","actionview::helpers::formbuilder#rich_text_area()","actionview::helpers::formhelper#rich_text_area()","actiontext::taghelper#rich_text_area_tag()","actiontext::attribute#rich_text_association_names()","activerecord::connectionadapters::abstractadapter#role()","activerecord::connectionadapters::realtransaction#rollback()","activerecord::connectionadapters::savepointtransaction#rollback()","activerecord::connectionadapters::transactionstate#rollback!()","activerecord::connectionadapters::databasestatements#rollback_db_transaction()","activerecord::connectionadapters::databasestatements#rollback_to_savepoint()","activerecord::connectionadapters::transactionstate#rolledback?()","actiondispatch::routing::mapper::resources#root()","activerecord::tasks::databasetasks#root()","rails::root()","rails::command::root()","rails::engine::configuration#root=()","actionmailbox::inboundemail::routable#route()","actionmailbox::router#route()","actionmailbox::routing#route()","rails::generators::actions#route()","actiondispatch::routing::urlfor#route_for()","activemodel::naming::route_key()","actionmailbox::inboundemail::routable#route_later()","rails::generators::namedbase#route_url()","rails::engine#routes()","actionmailbox::routing#routing()","activejob::arguments::hash::ruby2_keywords_hash()","activejob::arguments::hash::ruby2_keywords_hash?()","rails::appbuilder#ruby_version()","actionmailbox::inboundemail::incineratable::incineration#run()","actionview::cacheexpiry::executor#run()","activerecord::connectionadapters::connectionpool::reaper#run()","activerecord::migration#run()","activerecord::querycache::run()","activesupport::testing::isolation#run()","rails::application::finisher::interlockhook::run()","rails::application::finisher::mutexhook#run()","rails::engine::updater::run()","rails::initializable::initializer#run()","activesupport::executionwrapper::run!()","activesupport::callbacks#run_callbacks()","activesupport::testing::parallelization::worker#run_cleanup()","rails::generators::testing::behaviour#run_generator()","activesupport::testing::isolation::forking#run_in_isolation()","activesupport::testing::isolation::subprocess#run_in_isolation()","activerecord::testfixtures#run_in_transaction?()","rails::initializable#run_initializers()","activesupport::dependencies::run_interlock()","activesupport::lazyloadhooks#run_load_hooks()","rails::application#runner()","rails::railtie::runner()","activesupport::dependencies::interlock#running()","activerecord::logsubscriber::runtime()","activerecord::logsubscriber::runtime=()","actionview::helpers::texthelper#safe_concat()","activesupport::safebuffer#safe_concat()","activesupport::inflector#safe_constantize()","string#safe_constantize()","actionview::helpers::outputsafetyhelper#safe_join()","activesupport::testing::parallelization::worker#safe_record()","actiondispatch::contentsecuritypolicy#sandbox()","rails::console#sandbox?()","actionview::helpers::sanitizehelper#sanitize()","actiontext::contenthelper#sanitize_action_text_content()","actionview::helpers::sanitizehelper#sanitize_css()","activerecord::connectionadapters::databasestatements#sanitize_limit()","activerecord::sanitization::classmethods#sanitize_sql()","activerecord::sanitization::classmethods#sanitize_sql_array()","activerecord::sanitization::classmethods#sanitize_sql_for_assignment()","activerecord::sanitization::classmethods#sanitize_sql_for_conditions()","activerecord::sanitization::classmethods#sanitize_sql_for_order()","activerecord::sanitization::classmethods#sanitize_sql_hash_for_assignment()","activerecord::sanitization::classmethods#sanitize_sql_like()","activestorage::filename#sanitized()","activerecord::persistence#save()","activerecord::validations#save()","rails::generators::activemodel#save()","activerecord::persistence#save!()","activerecord::validations#save!()","activerecord::attributemethods::dirty#saved_change_to_attribute()","activerecord::attributemethods::dirty#saved_change_to_attribute?()","activerecord::attributemethods::dirty#saved_changes()","activerecord::attributemethods::dirty#saved_changes?()","activerecord::migration#say()","activerecord::migration#say_with_time()","actionmailbox::incinerationjob::schedule()","activerecord::relation#scheduled?()","activerecord::connectionadapters::abstractadapter#schema_cache()","activerecord::connectionadapters::abstractadapter#schema_cache=()","activerecord::databaseconfigurations::hashconfig#schema_cache_path()","activerecord::databaseconfigurations::hashconfig#schema_dump()","activerecord::tasks::databasetasks#schema_dump_path()","activerecord::connectionadapters::postgresql::schemastatements#schema_exists?()","activerecord::tasks::databasetasks#schema_file_type()","activerecord::modelschema::schema_migrations_table_name()","activerecord::modelschema::schema_migrations_table_name=()","activerecord::connectionadapters::postgresql::schemastatements#schema_names()","activerecord::connectionadapters::postgresql::schemastatements#schema_search_path()","activerecord::connectionadapters::postgresql::schemastatements#schema_search_path=()","activerecord::tasks::databasetasks#schema_up_to_date?()","activerecord::connectionadapters::abstractadapter#schema_version()","activerecord::encryption::encryptablerecord#scheme_for()","actiondispatch::routing::mapper::scoping#scope()","activerecord::associations::collectionproxy#scope()","activerecord::scoping::named::classmethods#scope()","activerecord::reflection::macroreflection#scope_for()","activerecord::relation#scope_for_create()","activerecord::relation#scoping()","actionview::helpers::formbuilder#search_field()","actionview::helpers::formhelper#search_field()","actionview::helpers::formtaghelper#search_field_tag()","time#sec_fraction()","activerecord::associations::collectionproxy#second()","activerecord::findermethods#second()","array#second()","numeric#second()","activerecord::findermethods#second!()","activerecord::associations::collectionproxy#second_to_last()","activerecord::findermethods#second_to_last()","array#second_to_last()","activerecord::findermethods#second_to_last!()","numeric#seconds()","datetime#seconds_since_midnight()","time#seconds_since_midnight()","activesupport::timezone::seconds_to_utc_offset()","datetime#seconds_until_end_of_day()","time#seconds_until_end_of_day()","rails::application#secret_key_base()","actioncontroller::httpauthentication::digest#secret_token()","rails::application#secrets()","actiondispatch::routing::consoleformatter::base#section()","actiondispatch::routing::consoleformatter::expanded#section()","actiondispatch::routing::consoleformatter::sheet#section()","actiondispatch::routing::htmltableformatter#section()","actiondispatch::routing::consoleformatter::base#section_title()","actiondispatch::routing::consoleformatter::expanded#section_title()","actiondispatch::routing::consoleformatter::sheet#section_title()","actiondispatch::routing::htmltableformatter#section_title()","activesupport::securityutils::secure_compare()","activesupport::securecomparerotator#secure_compare!()","activerecord::tasks::databasetasks#seed_loader()","actioncontroller::parameters#select()","actionview::helpers::formbuilder#select()","actionview::helpers::formoptionshelper#select()","activerecord::associations::collectionproxy#select()","activerecord::querymethods#select()","activesupport::hashwithindifferentaccess#select()","activesupport::hashwithindifferentaccess#select()","actioncontroller::parameters#select!()","activerecord::connectionadapters::databasestatements#select_all()","activerecord::connectionadapters::querycache#select_all()","actionview::helpers::datehelper#select_date()","actionview::helpers::datehelper#select_datetime()","actionview::helpers::datehelper#select_day()","actionview::helpers::datehelper#select_hour()","actionview::helpers::datehelper#select_minute()","actionview::helpers::datehelper#select_month()","activerecord::connectionadapters::databasestatements#select_one()","activerecord::connectionadapters::databasestatements#select_rows()","actionview::helpers::datehelper#select_second()","actionview::helpers::formtaghelper#select_tag()","actionview::helpers::datehelper#select_time()","activerecord::connectionadapters::databasestatements#select_value()","activerecord::connectionadapters::databasestatements#select_values()","actionview::helpers::datehelper#select_year()","actiontext::attachmentgallery::selector()","actioncable::connection::base#send_async()","activestorage::streaming#send_blob_stream()","actioncontroller::datastreaming#send_data()","actioncontroller::instrumentation#send_data()","actioncontroller::logsubscriber#send_data()","actiondispatch::request#send_early_hints()","actioncontroller::datastreaming#send_file()","actioncontroller::instrumentation#send_file()","actioncontroller::logsubscriber#send_file()","actiondispatch::response#send_file()","actioncontroller::live#send_stream()","actiondispatch::response#sending!()","actiondispatch::response#sending?()","actiondispatch::response#sending_file=()","actiondispatch::response#sent!()","actiondispatch::response#sent?()","activerecord::modelschema::classmethods#sequence_name()","activerecord::modelschema::classmethods#sequence_name=()","activerecord::connectionadapters::postgresql::columnmethods#serial()","activerecord::connectionadapters::postgresql::schemastatements#serial_sequence()","activemodel::type::value#serializable?()","activemodel::type::value#serializable?()","activemodel::serialization#serializable_hash()","activerecord::serialization#serializable_hash()","activejob::arguments#serialize()","activejob::core#serialize()","activejob::serializers::objectserializer#serialize()","activejob::serializers::rangeserializer#serialize()","activemodel::type::value#serialize()","activemodel::type::value#serialize()","activerecord::attributemethods::serialization::classmethods#serialize()","activerecord::encryption::encryptedattributetype#serialize()","activerecord::encryption::extendeddeterministicqueries::extendedencryptabletype#serialize()","activerecord::type::json#serialize()","activerecord::type::time#serialize()","activejob::serializers::objectserializer#serialize?()","rails::server#served_url()","rails::application#server()","rails::railtie::server()","actiondispatch::http::url#server_port()","actiondispatch::request#server_software()","activestorage::blob#service()","activestorage::logsubscriber#service_delete()","activestorage::logsubscriber#service_delete_prefixed()","activestorage::logsubscriber#service_download()","activestorage::logsubscriber#service_exist()","activestorage::blob#service_headers_for_direct_upload()","activestorage::logsubscriber#service_mirror()","activestorage::logsubscriber#service_streaming_download()","activestorage::logsubscriber#service_upload()","activestorage::logsubscriber#service_url()","activestorage::blob#service_url_for_direct_upload()","actiondispatch::testprocess#session()","activerecord::connectionadapters::postgresqladapter#session_auth=()","actiondispatch::request#session_options=()","rails::application::configuration#session_store()","activejob::core::classmethods#set()","activesupport::currentattributes#set()","rails::command::actions#set_application_directory!()","activesupport::callbacks::classmethods#set_callback()","actionmailer::base#set_content_type()","activesupport::errorreporter#set_context()","rails::server#set_environment()","rails::console#set_environment!()","activerecord::testfixtures::classmethods#set_fixture_class()","actiondispatch::response#set_header()","activesupport::logsubscriber::testhelper#set_logger()","actiondispatch::routing::mapper::resources#set_member_mappings_for_resource()","rails::generators::migration#set_migration_assigns!()","activerecord::connectionadapters::postgresqladapter#set_standard_conforming_strings()","activesupport::testing::setupandteardown::classmethods#setup()","actioncontroller::testcase::behavior#setup_controller_request_and_response()","activerecord::testfixtures::classmethods#setup_fixture_accessors()","activerecord::testfixtures#setup_fixtures()","rails::api::task#setup_horo_variables()","activerecord::tasks::databasetasks#setup_initial_database_yaml()","actionview::testcase::behavior#setup_with_controller()","actiondispatch::routing::mapper::resources#shallow()","actiondispatch::routing::mapper::resources#shallow?()","activerecord::connectionadapters::abstractadapter#shard()","activerecord::connectionhandling#shard_swapping_prohibited?()","activesupport::concurrency::sharelock#sharing()","actionview::template#short_identifier()","actiondispatch::http::mimenegotiation#should_apply_vary_header?()","activestorage::blobs::proxycontroller#show()","activestorage::blobs::redirectcontroller#show()","activestorage::diskcontroller#show()","activestorage::representations::proxycontroller#show()","activestorage::representations::redirectcontroller#show()","rails::rails::conductor::actionmailbox::inboundemailscontroller#show()","actioncontroller::rescue#show_detailed_exceptions?()","rails::generators::namedbase#show_helper()","activerecord::connectionadapters::abstractmysqladapter#show_variable()","actioncable::subscriptionadapter::base#shutdown()","actioncable::subscriptionadapter::postgresql::listener#shutdown()","actioncable::subscriptionadapter::redis::listener#shutdown()","activesupport::testing::parallelization::server#shutdown()","actioncable::connection::testcookiejar#signed()","actiondispatch::cookies::chainedcookiejars#signed()","activerecord::signedid#signed_id()","activestorage::blob#signed_id()","activerecord::signedid::classmethods#signed_id_verifier()","activerecord::signedid::classmethods#signed_id_verifier=()","actiondispatch::cookies::chainedcookiejars#signed_or_encrypted()","activesupport::deprecation::reporting#silence()","activesupport::loggersilence#silence()","activesupport::cache::store#silence!()","module#silence_redefinition_of_method()","kernel#silence_warnings()","activesupport::deprecation::reporting#silenced()","actionview::helpers::texthelper#simple_format()","activesupport::duration#since()","activesupport::timewithzone#since()","date#since()","datetime#since()","time#since()","activemodel::naming::singular()","activesupport::inflector::inflections#singular()","rails::generators::namedbase#singular_name()","activemodel::naming::singular_route_key()","rails::generators::namedbase#singular_route_name()","rails::generators::namedbase#singular_table_name()","activesupport::inflector#singularize()","string#singularize()","actiondispatch::http::uploadedfile#size()","actiondispatch::middlewarestack#size()","actiontext::attachmentgallery#size()","activerecord::associations::collectionproxy#size()","activerecord::connectionadapters::schemacache#size()","activerecord::fixtureset#size()","activerecord::relation#size()","abstractcontroller::callbacks::classmethods#skip_after_action()","abstractcontroller::callbacks::classmethods#skip_around_action()","abstractcontroller::callbacks::classmethods#skip_before_action()","activesupport::callbacks::classmethods#skip_callback()","actioncontroller::requestforgeryprotection::classmethods#skip_forgery_protection()","actioncontroller::parameterencoding::classmethods#skip_parameter_encoding()","actioncontroller::parameters#slice()","activerecord::core#slice()","activesupport::hashwithindifferentaccess#slice()","activesupport::hashwithindifferentaccess#slice()","actioncontroller::parameters#slice!()","activesupport::hashwithindifferentaccess#slice!()","activesupport::hashwithindifferentaccess#slice!()","activesupport::multibyte::chars#slice!()","hash#slice!()","actionview::helpers::urlhelper#sms_to()","activerecord::findermethods#sole()","enumerable#sole()","rails::generators::sorted_groups()","actionmailbox::inboundemail#source()","actionview::template#source()","activerecord::encryption::encryptablerecord#source_attribute_from_preserved_attribute()","actiondispatch::exceptionwrapper#source_extracts()","rails::generators::base::source_root()","actiondispatch::exceptionwrapper#source_to_show_id()","activesupport::multibyte::chars#split()","array#split()","activerecord::logsubscriber#sql()","arel::sql()","string#squish()","string#squish!()","actioncontroller::conditionalget#stale?()","actiondispatch::session::stalesessioncheck#stale_session_check!()","actiondispatch::http::url#standard_port()","actiondispatch::http::url#standard_port?()","actionview::logsubscriber#start()","activesupport::logsubscriber#start()","activesupport::notifications::fanout#start()","activesupport::notifications::fanout::subscribers::eventobject#start()","activesupport::notifications::instrumenter#start()","activesupport::subscriber#start()","activesupport::testing::parallelization::worker#start()","rails::console::start()","rails::console#start()","rails::dbconsole::start()","rails::dbconsole#start()","rails::server#start()","activesupport::notifications::event#start!()","activesupport::xmlmini_nokogirisax::hashbuilder#start_document()","activesupport::xmlmini_nokogirisax::hashbuilder#start_element()","activesupport::concurrency::sharelock#start_exclusive()","actioncable::channel::channelstub#start_periodic_timers()","actioncontroller::logsubscriber#start_processing()","activesupport::dependencies::interlock#start_running()","activesupport::concurrency::sharelock#start_sharing()","activesupport::dependencies::interlock#start_unloading()","activesupport::testing::parallelization::server#start_worker()","rails::rack::logger#started_request_message()","activerecord::connectionadapters::connectionpool#stat()","actioncable::connection::base#statistics()","activesupport::cache::memcachestore#stats()","activesupport::cache::rediscachestore#stats()","actiondispatch::response#status=()","actiondispatch::exceptionwrapper#status_code()","actiondispatch::exceptionwrapper::status_code_for_exception()","actiondispatch::response#status_message()","activerecord::inheritance::classmethods#sti_class_for()","activerecord::inheritance::classmethods#sti_name()","actioncable::connection::streameventloop#stop()","actioncable::channel::channelstub#stop_all_streams()","actioncable::channel::streams#stop_all_streams()","activesupport::concurrency::sharelock#stop_exclusive()","actioncable::channel::channelstub#stop_periodic_timers()","activesupport::concurrency::sharelock#stop_sharing()","actioncable::channel::streams#stop_stream_for()","actioncable::channel::streams#stop_stream_from()","activesupport::testing::parallelization::server#stop_worker()","rails::appbuilder#storage()","activerecord::store::classmethods#store()","activesupport::hashwithindifferentaccess#store()","activesupport::hashwithindifferentaccess#store()","activerecord::store::classmethods#store_accessor()","activesupport::descendantstracker::store_inherited()","activerecord::store::classmethods#stored_attributes()","actioncable::channel::streams#stream_for()","actioncable::channel::channelstub#stream_from()","actioncable::channel::streams#stream_from()","actioncable::channel::streams#stream_or_reject_for()","actioncable::channel::channelstub#streams()","activesupport::timewithzone#strftime()","activerecord::querymethods#strict_loading()","activerecord::core#strict_loading!()","activerecord::core#strict_loading?()","activerecord::core#strict_loading_n_plus_one_only?()","activerecord::logsubscriber#strict_loading_violation()","activemodel::error#strict_match?()","activerecord::connectionadapters::abstractmysqladapter#strict_mode?()","actiondispatch::flash::flashhash#stringify_array()","activesupport::hashwithindifferentaccess#stringify_keys()","activesupport::hashwithindifferentaccess#stringify_keys()","hash#stringify_keys()","activesupport::hashwithindifferentaccess#stringify_keys!()","activesupport::hashwithindifferentaccess#stringify_keys!()","hash#stringify_keys!()","string#strip_heredoc()","actionview::helpers::sanitizehelper#strip_links()","actionview::helpers::sanitizehelper#strip_tags()","actiondispatch::http::cache::response#strong_etag=()","actiondispatch::http::cache::response#strong_etag?()","activesupport::timezone#strptime()","activerecord::querymethods#structurally_compatible?()","activerecord::tasks::databasetasks#structure_dump()","activerecord::tasks::databasetasks::structure_dump_flags()","activerecord::tasks::databasetasks#structure_load()","activerecord::tasks::databasetasks::structure_load_flags()","actioncable::channel::testcase::behavior#stub_connection()","actionview::helpers::assettaghelper#stylesheet_link_tag()","actionview::helpers::asseturlhelper#stylesheet_path()","actionview::helpers::asseturlhelper#stylesheet_url()","rails::pluginbuilder#stylesheets()","activesupport::descendantstracker::subclasses()","activesupport::descendantstracker#subclasses()","class#subclasses()","rails::railtie::subclasses()","actiondispatch::http::url#subdomain()","actiondispatch::http::url#subdomains()","actionview::helpers::formbuilder#submit()","actionview::helpers::formtaghelper#submit_tag()","actioncable::channel::testcase::behavior#subscribe()","actioncable::subscriptionadapter::base#subscribe()","activesupport::errorreporter#subscribe()","activesupport::notifications::subscribe()","activesupport::notifications::fanout#subscribe()","actioncable::channel::base#subscribe_to_channel()","actioncable::channel::base#subscribed()","activesupport::notifications::subscribed()","activesupport::subscriber::subscribers()","actioncable::channel::base#subscription_confirmation_sent?()","actioncable::channel::base#subscription_rejected?()","datetime#subsec()","actionmailbox::relayer::result#success?()","activejob::core#successfully_enqueued?()","activerecord::dynamicmatchers::findbybang::suffix()","activerecord::dynamicmatchers::method::suffix()","activerecord::calculations#sum()","enumerable#sum()","dateandtime::calculations#sunday()","activerecord::connectionadapters::abstractadapter#supports_advisory_locks?()","activerecord::connectionadapters::abstractmysqladapter#supports_advisory_locks?()","activerecord::connectionadapters::postgresqladapter#supports_advisory_locks?()","activerecord::connectionadapters::abstractadapter#supports_bulk_alter?()","activerecord::connectionadapters::abstractmysqladapter#supports_bulk_alter?()","activerecord::connectionadapters::postgresqladapter#supports_bulk_alter?()","activesupport::cache::filestore::supports_cache_versioning?()","activesupport::cache::memcachestore::supports_cache_versioning?()","activesupport::cache::memorystore::supports_cache_versioning?()","activesupport::cache::nullstore::supports_cache_versioning?()","activesupport::cache::rediscachestore::supports_cache_versioning?()","activerecord::connectionadapters::abstractadapter#supports_check_constraints?()","activerecord::connectionadapters::abstractmysqladapter#supports_check_constraints?()","activerecord::connectionadapters::postgresqladapter#supports_check_constraints?()","activerecord::connectionadapters::sqlite3adapter#supports_check_constraints?()","activerecord::connectionadapters::abstractadapter#supports_comments?()","activerecord::connectionadapters::mysql2adapter#supports_comments?()","activerecord::connectionadapters::postgresqladapter#supports_comments?()","activerecord::connectionadapters::abstractadapter#supports_comments_in_create?()","activerecord::connectionadapters::mysql2adapter#supports_comments_in_create?()","activerecord::connectionadapters::abstractadapter#supports_common_table_expressions?()","activerecord::connectionadapters::abstractmysqladapter#supports_common_table_expressions?()","activerecord::connectionadapters::postgresqladapter#supports_common_table_expressions?()","activerecord::connectionadapters::sqlite3adapter#supports_common_table_expressions?()","activerecord::connectionadapters::abstractadapter#supports_concurrent_connections?()","activerecord::connectionadapters::sqlite3adapter#supports_concurrent_connections?()","activerecord::connectionadapters::abstractadapter#supports_datetime_with_precision?()","activerecord::connectionadapters::abstractmysqladapter#supports_datetime_with_precision?()","activerecord::connectionadapters::postgresqladapter#supports_datetime_with_precision?()","activerecord::connectionadapters::sqlite3adapter#supports_datetime_with_precision?()","activerecord::connectionadapters::abstractadapter#supports_ddl_transactions?()","activerecord::connectionadapters::postgresqladapter#supports_ddl_transactions?()","activerecord::connectionadapters::sqlite3adapter#supports_ddl_transactions?()","activerecord::connectionadapters::abstractadapter#supports_deferrable_constraints?()","activerecord::connectionadapters::postgresqladapter#supports_deferrable_constraints?()","activerecord::connectionadapters::abstractadapter#supports_explain?()","activerecord::connectionadapters::abstractmysqladapter#supports_explain?()","activerecord::connectionadapters::postgresqladapter#supports_explain?()","activerecord::connectionadapters::sqlite3adapter#supports_explain?()","activerecord::connectionadapters::abstractadapter#supports_expression_index?()","activerecord::connectionadapters::abstractmysqladapter#supports_expression_index?()","activerecord::connectionadapters::postgresqladapter#supports_expression_index?()","activerecord::connectionadapters::sqlite3adapter#supports_expression_index?()","activerecord::connectionadapters::abstractadapter#supports_extensions?()","activerecord::connectionadapters::postgresqladapter#supports_extensions?()","activerecord::connectionadapters::abstractadapter#supports_foreign_keys?()","activerecord::connectionadapters::abstractmysqladapter#supports_foreign_keys?()","activerecord::connectionadapters::postgresqladapter#supports_foreign_keys?()","activerecord::connectionadapters::sqlite3adapter#supports_foreign_keys?()","activerecord::connectionadapters::abstractadapter#supports_foreign_tables?()","activerecord::connectionadapters::postgresqladapter#supports_foreign_tables?()","activerecord::connectionadapters::abstractadapter#supports_index_sort_order?()","activerecord::connectionadapters::abstractmysqladapter#supports_index_sort_order?()","activerecord::connectionadapters::postgresqladapter#supports_index_sort_order?()","activerecord::connectionadapters::sqlite3adapter#supports_index_sort_order?()","activerecord::connectionadapters::abstractadapter#supports_indexes_in_create?()","activerecord::connectionadapters::abstractmysqladapter#supports_indexes_in_create?()","activerecord::connectionadapters::abstractadapter#supports_insert_conflict_target?()","activerecord::connectionadapters::postgresqladapter#supports_insert_conflict_target?()","activerecord::connectionadapters::sqlite3adapter#supports_insert_conflict_target?()","activerecord::connectionadapters::postgresqladapter#supports_insert_on_conflict?()","activerecord::connectionadapters::sqlite3adapter#supports_insert_on_conflict?()","activerecord::connectionadapters::abstractadapter#supports_insert_on_duplicate_skip?()","activerecord::connectionadapters::abstractmysqladapter#supports_insert_on_duplicate_skip?()","activerecord::connectionadapters::postgresqladapter#supports_insert_on_duplicate_skip?()","activerecord::connectionadapters::sqlite3adapter#supports_insert_on_duplicate_skip?()","activerecord::connectionadapters::abstractadapter#supports_insert_on_duplicate_update?()","activerecord::connectionadapters::abstractmysqladapter#supports_insert_on_duplicate_update?()","activerecord::connectionadapters::postgresqladapter#supports_insert_on_duplicate_update?()","activerecord::connectionadapters::sqlite3adapter#supports_insert_on_duplicate_update?()","activerecord::connectionadapters::abstractadapter#supports_insert_returning?()","activerecord::connectionadapters::postgresqladapter#supports_insert_returning?()","activerecord::connectionadapters::abstractadapter#supports_json?()","activerecord::connectionadapters::mysql2adapter#supports_json?()","activerecord::connectionadapters::postgresqladapter#supports_json?()","activerecord::connectionadapters::sqlite3adapter#supports_json?()","activerecord::connectionadapters::abstractadapter#supports_lazy_transactions?()","activerecord::connectionadapters::mysql2adapter#supports_lazy_transactions?()","activerecord::connectionadapters::postgresqladapter#supports_lazy_transactions?()","activerecord::connectionadapters::sqlite3adapter#supports_lazy_transactions?()","activerecord::connectionadapters::abstractadapter#supports_materialized_views?()","activerecord::connectionadapters::postgresqladapter#supports_materialized_views?()","activerecord::connectionadapters::abstractadapter#supports_optimizer_hints?()","activerecord::connectionadapters::abstractmysqladapter#supports_optimizer_hints?()","activerecord::connectionadapters::postgresqladapter#supports_optimizer_hints?()","activerecord::connectionadapters::abstractadapter#supports_partial_index?()","activerecord::connectionadapters::postgresqladapter#supports_partial_index?()","activerecord::connectionadapters::sqlite3adapter#supports_partial_index?()","activerecord::connectionadapters::abstractadapter#supports_partitioned_indexes?()","activerecord::connectionadapters::postgresqladapter#supports_partitioned_indexes?()","abstractcontroller::base::supports_path?()","actionmailer::base::supports_path?()","activerecord::connectionadapters::postgresqladapter#supports_pgcrypto_uuid?()","activerecord::connectionadapters::abstractadapter#supports_savepoints?()","activerecord::connectionadapters::mysql2adapter#supports_savepoints?()","activerecord::connectionadapters::postgresqladapter#supports_savepoints?()","activerecord::connectionadapters::sqlite3adapter#supports_savepoints?()","actionview::template#supports_streaming?()","actionview::template::handlers::erb#supports_streaming?()","activerecord::connectionadapters::abstractadapter#supports_transaction_isolation?()","activerecord::connectionadapters::abstractmysqladapter#supports_transaction_isolation?()","activerecord::connectionadapters::postgresqladapter#supports_transaction_isolation?()","activerecord::connectionadapters::sqlite3adapter#supports_transaction_isolation?()","activerecord::connectionadapters::abstractadapter#supports_validate_constraints?()","activerecord::connectionadapters::postgresqladapter#supports_validate_constraints?()","activerecord::connectionadapters::abstractadapter#supports_views?()","activerecord::connectionadapters::abstractmysqladapter#supports_views?()","activerecord::connectionadapters::postgresqladapter#supports_views?()","activerecord::connectionadapters::sqlite3adapter#supports_views?()","activerecord::connectionadapters::abstractadapter#supports_virtual_columns?()","activerecord::connectionadapters::abstractmysqladapter#supports_virtual_columns?()","activerecord::connectionadapters::postgresqladapter#supports_virtual_columns?()","activerecord::suppressor::classmethods#suppress()","kernel#suppress()","activerecord::migration#suppress_messages()","actiondispatch::middlewarestack#swap()","rails::configuration::middlewarestackproxy#swap()","activesupport::hashwithindifferentaccess#symbolize_keys()","activesupport::hashwithindifferentaccess#symbolize_keys()","hash#symbolize_keys()","hash#symbolize_keys!()","actionview::template::types::symbols()","activesupport::concurrency::loadinterlockawaremonitor#synchronize()","rails::appbuilder#system_test()","abstractcontroller::translation#t()","actionview::helpers::translationhelper#t()","activerecord::connectionadapters::schemastatements#table_alias_for()","activerecord::connectionadapters::databaselimits#table_alias_length()","activerecord::connectionadapters::schemastatements#table_comment()","activerecord::connectionadapters::schemastatements#table_exists?()","activerecord::modelschema::classmethods#table_exists?()","activerecord::modelschema::classmethods#table_name()","rails::generators::namedbase#table_name()","activerecord::modelschema::classmethods#table_name=()","activerecord::modelschema::table_name_prefix()","activerecord::modelschema::table_name_prefix=()","activerecord::modelschema::table_name_suffix()","activerecord::modelschema::table_name_suffix=()","activerecord::connectionadapters::schemastatements#table_options()","activerecord::fixtureset#table_rows()","activesupport::inflector#tableize()","string#tableize()","activerecord::connectionadapters::schemastatements#tables()","actioncable::connection::taggedloggerproxy#tag()","actionview::helpers::activemodelinstancetag#tag()","actionview::helpers::taghelper#tag()","activesupport::taggedlogging#tagged()","rails::sourceannotationextractor::annotation::tags()","activerecord::associations::collectionproxy#take()","activerecord::findermethods#take()","activerecord::findermethods#take!()","actiondispatch::systemtesting::testhelpers::screenshothelper#take_failed_screenshot()","actiondispatch::systemtesting::testhelpers::screenshothelper#take_screenshot()","activerecord::associations::collectionproxy#target()","activerecord::tasks::databasetasks#target_version()","activesupport::testing::setupandteardown::classmethods#teardown()","activerecord::testfixtures#teardown_fixtures()","actionview::helpers::formbuilder#telephone_field()","actionview::helpers::formhelper#telephone_field()","actionview::helpers::formtaghelper#telephone_field_tag()","rails::generators::namedbase#template()","actionview::lookupcontext::viewpaths#template_exists?()","numeric#terabyte()","numeric#terabytes()","activesupport::testing::declarative#test()","rails::appbuilder#test()","rails::pluginbuilder#test()","rails::pluginbuilder#test_dummy_clean()","rails::pluginbuilder#test_dummy_config()","rails::pluginbuilder#test_dummy_sprocket_assets()","activemodel::lint::tests#test_errors_aref()","activemodel::lint::tests#test_model_naming()","activesupport::testcase::test_order()","activesupport::testcase::test_order=()","activemodel::lint::tests#test_persisted?()","activemodel::lint::tests#test_to_key()","activemodel::lint::tests#test_to_param()","activemodel::lint::tests#test_to_partial_path()","actioncable::channel::testcase::behavior::classmethods#tests()","actioncable::connection::testcase::behavior::classmethods#tests()","actioncontroller::testcase::behavior::classmethods#tests()","actionmailer::testcase::behavior::classmethods#tests()","actionview::testcase::behavior::classmethods#tests()","rails::generators::testing::behaviour::classmethods#tests()","activestorage::blob#text?()","actionview::helpers::formbuilder#text_area()","actionview::helpers::formhelper#text_area()","actionview::helpers::formtaghelper#text_area_tag()","actionview::helpers::formbuilder#text_field()","actionview::helpers::formhelper#text_field()","actionview::helpers::formtaghelper#text_field_tag()","activerecord::associations::collectionproxy#third()","activerecord::findermethods#third()","array#third()","activerecord::findermethods#third!()","activerecord::associations::collectionproxy#third_to_last()","activerecord::findermethods#third_to_last()","array#third_to_last()","activerecord::findermethods#third_to_last!()","module#thread_cattr_accessor()","module#thread_mattr_accessor()","activerecord::connectionadapters::abstractadapter#throw_away!()","activesupport::multibyte::chars#tidy_bytes()","activesupport::multibyte::unicode#tidy_bytes()","activesupport::timewithzone#time()","actionview::helpers::datehelper#time_ago_in_words()","actionview::helpers::formbuilder#time_field()","actionview::helpers::formhelper#time_field()","actionview::helpers::formtaghelper#time_field_tag()","actionview::helpers::datehelper#time_select()","actionview::helpers::formbuilder#time_select()","actionview::helpers::datehelper#time_tag()","actionview::helpers::formoptionshelper#time_zone_options_for_select()","actionview::helpers::formbuilder#time_zone_select()","actionview::helpers::formoptionshelper#time_zone_select()","actioncable::connection::streameventloop#timer()","activerecord::connectionadapters::table#timestamps()","activerecord::connectionadapters::tabledefinition#timestamps()","activerecord::connectionadapters::postgresql::columnmethods#timestamptz()","activerecord::connectionadapters::mysql::columnmethods#tinyblob()","activerecord::connectionadapters::mysql::columnmethods#tinytext()","activesupport::multibyte::chars#titlecase()","string#titlecase()","activesupport::inflector#titleize()","activesupport::multibyte::chars#titleize()","string#titleize()","rails::appbuilder#tmp()","activestorage::analyzer#tmpdir()","activestorage::previewer#tmpdir()","array#to()","string#to()","actiondispatch::response#to_a()","activemodel::errors#to_a()","activerecord::relation#to_a()","activerecord::result#to_a()","activesupport::timewithzone#to_a()","rails::paths::path#to_a()","mail::message#to_addresses()","actiondispatch::response::rackbody#to_ary()","activerecord::relation#to_ary()","activerecord::result#to_ary()","rails::paths::path#to_ary()","actiontext::attachable#to_attachable_partial_path()","activesupport::executionwrapper::to_complete()","string#to_date()","activesupport::timewithzone#to_datetime()","string#to_datetime()","actionview::digestor::node#to_dep_map()","activesupport::timewithzone#to_f()","datetime#to_f()","activesupport::numericwithformat#to_formatted_s()","activesupport::rangewithformat#to_formatted_s()","activesupport::timewithzone#to_formatted_s()","array#to_formatted_s()","date#to_formatted_s()","datetime#to_formatted_s()","time#to_formatted_s()","activesupport::numericwithformat#to_fs()","activesupport::rangewithformat#to_fs()","activesupport::timewithzone#to_fs()","array#to_fs()","date#to_fs()","datetime#to_fs()","time#to_fs()","actioncontroller::parameters#to_h()","activerecord::encryption::properties#to_h()","activerecord::encryption::scheme#to_h()","actioncontroller::parameters#to_hash()","actiondispatch::flash::flashhash#to_hash()","activemodel::errors#to_hash()","activesupport::hashwithindifferentaccess#to_hash()","activesupport::hashwithindifferentaccess#to_hash()","actiontext::attachment#to_html()","actiontext::content#to_html()","actiontext::fragment#to_html()","actiontext::trixattachment#to_html()","rails::info::to_html()","activesupport::duration#to_i()","activesupport::timewithzone#to_i()","datetime#to_i()","actiondispatch::http::uploadedfile#to_io()","activestorage::filename#to_json()","activemodel::conversion#to_key()","activerecord::attributemethods::primarykey#to_key()","actionview::helpers::formbuilder#to_model()","activemodel::conversion#to_model()","activesupport::hashwithindifferentaccess#to_options()","activesupport::hashwithindifferentaccess#to_options()","hash#to_options()","activesupport::hashwithindifferentaccess#to_options!()","activesupport::hashwithindifferentaccess#to_options!()","hash#to_options!()","actioncontroller::parameters#to_param()","activemodel::conversion#to_param()","activerecord::integration#to_param()","activerecord::integration::classmethods#to_param()","activesupport::safebuffer#to_param()","array#to_param()","falseclass#to_param()","hash#to_param()","nilclass#to_param()","object#to_param()","trueclass#to_param()","actiontext::attachables::contentattachment#to_partial_path()","actiontext::attachables::missingattachable::to_partial_path()","actiontext::attachables::remoteimage#to_partial_path()","actiontext::content#to_partial_path()","actionview::helpers::formbuilder#to_partial_path()","activemodel::conversion#to_partial_path()","actiondispatch::http::uploadedfile#to_path()","actiondispatch::response::rackbody#to_path()","actionview::filesystemresolver#to_path()","actiontext::attachment#to_plain_text()","actiontext::content#to_plain_text()","actiontext::fragment#to_plain_text()","actiontext::richtext#to_plain_text()","activesupport::reloader::to_prepare()","rails::railtie::configuration#to_prepare()","rails::railtie::configuration#to_prepare_blocks()","actioncontroller::parameters#to_query()","array#to_query()","hash#to_query()","object#to_query()","activesupport::timewithzone#to_r()","actiontext::content#to_rendered_html_with_layout()","actiontext::attachable#to_rich_text_attributes()","activesupport::executionwrapper::to_run()","actioncontroller::parameters#to_s()","actiondispatch::remoteip::getip#to_s()","actiontext::attachment#to_s()","actiontext::content#to_s()","actiontext::fragment#to_s()","actiontext::trixattachment#to_s()","actionview::filesystemresolver#to_s()","actionview::fixtureresolver#to_s()","actionview::template::sources::file#to_s()","actionview::template::types::type#to_s()","activemodel::name#to_s()","activerecord::connectionadapters::abstractadapter::version#to_s()","activerecord::connectionadapters::postgresql::oid::bit::data#to_s()","activestorage::filename#to_s()","activesupport::duration#to_s()","activesupport::safebuffer#to_s()","activesupport::timewithzone#to_s()","activesupport::timezone#to_s()","mime::nulltype#to_s()","mime::type#to_s()","rails::generators::appbase::gemfileentry#to_s()","rails::info::to_s()","rails::sourceannotationextractor::annotation#to_s()","actionview::helpers::outputsafetyhelper#to_sentence()","array#to_sentence()","activerecord::connectionadapters::databasestatements#to_sql()","activerecord::relation#to_sql()","actionview::template::types::type#to_str()","activemodel::name#to_str()","mime::type#to_str()","actionview::template::types::type#to_sym()","mime::type#to_sym()","activesupport::xmlmini#to_tag()","activesupport::timewithzone#to_time()","date#to_time()","datetime#to_time()","string#to_time()","time#to_time()","actiontext::attachments::trixconversion#to_trix_attachment()","actiontext::attachable#to_trix_content_attachment_partial_path()","actiontext::attachables::contentattachment#to_trix_content_attachment_partial_path()","actiontext::engine#to_trix_content_attachment_partial_path()","actiontext::content#to_trix_html()","actiontext::richtext#to_trix_html()","actioncontroller::parameters#to_unsafe_h()","actioncontroller::parameters#to_unsafe_hash()","array#to_xml()","hash#to_xml()","activesupport::timezone#today()","activesupport::timewithzone#today?()","dateandtime::calculations#today?()","activerecord::persistence#toggle()","activerecord::persistence#toggle!()","actioncontroller::httpauthentication::token#token_and_options()","actionview::helpers::taghelper#token_list()","actioncontroller::httpauthentication::token#token_params_from()","activesupport::timezone#tomorrow()","date::tomorrow()","dateandtime::calculations#tomorrow()","activesupport::timewithzone#tomorrow?()","dateandtime::calculations#tomorrow?()","activerecord::persistence#touch()","activerecord::relation#touch_all()","actiondispatch::exceptionwrapper#trace_to_show()","actiondispatch::exceptionwrapper#traces()","activerecord::connectionadapters::databasestatements#transaction()","activerecord::transactions::classmethods#transaction()","activerecord::connectionadapters::databasestatements#transaction_isolation_levels()","activerecord::connectionadapters::databasestatements#transaction_open?()","activestorage::transformers::transformer#transform()","activestorage::variation#transform()","actioncontroller::parameters#transform_keys()","activesupport::hashwithindifferentaccess#transform_keys()","activesupport::hashwithindifferentaccess#transform_keys()","actioncontroller::parameters#transform_keys!()","activesupport::hashwithindifferentaccess#transform_keys!()","activesupport::hashwithindifferentaccess#transform_keys!()","actioncontroller::parameters#transform_values()","activesupport::hashwithindifferentaccess#transform_values()","activesupport::hashwithindifferentaccess#transform_values()","actioncontroller::parameters#transform_values!()","actionmailbox::relayer::result#transient_failure?()","abstractcontroller::translation#translate()","actionview::helpers::translationhelper#translate()","activesupport::inflector#transliterate()","actioncable::channel::testcase::behavior#transmissions()","actioncable::channel::base#transmit()","actioncable::channel::connectionstub#transmit()","activesupport::testing::timehelpers#travel()","activesupport::testing::timehelpers#travel_back()","activesupport::testing::timehelpers#travel_to()","actionview::digestor::tree()","actionview::helpers::texthelper#truncate()","activerecord::connectionadapters::databasestatements#truncate()","string#truncate()","activerecord::tasks::databasetasks#truncate_all()","string#truncate_bytes()","string#truncate_words()","delegator#try()","nilclass#try()","object#try()","delegator#try!()","nilclass#try!()","object#try!()","rails::initializable::collection#tsort_each_child()","activerecord::connectionadapters::postgresql::columnmethods#tsrange()","activerecord::connectionadapters::postgresql::columnmethods#tstzrange()","activerecord::connectionadapters::postgresql::columnmethods#tsvector()","activesupport::timewithzone#tv_sec()","actionview::template#type()","activerecord::type::json#type()","activerecord::connectionadapters::quoting#type_cast()","activerecord::connectionadapters::abstractadapter::type_cast_config_to_boolean()","activerecord::connectionadapters::abstractadapter::type_cast_config_to_integer()","activerecord::modelschema::classmethods#type_for_attribute()","actionview::helpers::cachehelper#uncacheable!()","activerecord::connectionadapters::querycache#uncached()","activerecord::querycache::classmethods#uncached()","activesupport::inflector::inflections#uncountable()","activemodel::name#uncountable?()","activemodel::naming::uncountable?()","activesupport::inflector::inflections::uncountables#uncountable?()","rails::generators::namedbase#uncountable?()","activemodel::attributemethods::classmethods#undefine_attribute_methods()","activesupport::inflector#underscore()","string#underscore()","activerecord::connectionadapters::postgresql::quoting#unescape_bytea()","activesupport::testing::timehelpers#unfreeze_time()","activerecord::querymethods#uniq!()","activesupport::dependencies::unload_interlock()","activesupport::dependencies::interlock#unloading()","actioncontroller::requestforgeryprotection#unmask_token()","actioncontroller::logsubscriber#unpermitted_parameters()","activerecord::connectionadapters::abstractadapter#unprepared_statement()","activerecord::connectionadapters::quoting#unquoted_false()","activerecord::connectionadapters::quoting#unquoted_true()","mime::type::unregister()","actionmailer::base::unregister_interceptor()","actionmailer::base::unregister_interceptors()","actionmailer::base::unregister_observer()","actionmailer::base::unregister_observers()","actionmailer::previews::classmethods#unregister_preview_interceptor()","actionmailer::previews::classmethods#unregister_preview_interceptors()","activerecord::querymethods#unscope()","activerecord::scoping::default::classmethods#unscoped()","actiondispatch::middlewarestack#unshift()","rails::configuration::middlewarestackproxy#unshift()","rails::paths::path#unshift()","activerecord::connectionadapters::mysql::columnmethods#unsigned_bigint()","activerecord::connectionadapters::mysql::columnmethods#unsigned_decimal()","activerecord::connectionadapters::mysql::columnmethods#unsigned_float()","activerecord::connectionadapters::mysql::columnmethods#unsigned_integer()","actioncable::channel::testcase::behavior#unsubscribe()","actioncable::subscriptionadapter::base#unsubscribe()","activesupport::notifications::unsubscribe()","activesupport::notifications::fanout#unsubscribe()","activesupport::notifications::fanout::subscribers::matcher::allmessages#unsubscribe!()","actioncable::channel::base#unsubscribed()","activesupport::duration#until()","actiondispatch::exceptionwrapper#unwrapped_exception()","activerecord::migration#up()","activerecord::migration#up_only()","activesupport::inflector#upcase_first()","string#upcase_first()","actiontext::fragment#update()","activerecord::connectionadapters::databasestatements#update()","activerecord::persistence#update()","activerecord::persistence::classmethods#update()","activestorage::diskcontroller#update()","activesupport::hashwithindifferentaccess#update()","activesupport::hashwithindifferentaccess#update()","rails::generators::activemodel#update()","activerecord::persistence#update!()","activerecord::persistence::classmethods#update!()","activerecord::batches::batchenumerator#update_all()","activerecord::relation#update_all()","activerecord::persistence#update_attribute()","activerecord::persistence#update_column()","activerecord::persistence#update_columns()","activerecord::countercache::classmethods#update_counters()","activerecord::locking::optimistic::classmethods#update_counters()","activerecord::relation#update_counters()","activestorage::service#update_metadata()","activestorage::service::gcsservice#update_metadata()","activesupport::fileupdatechecker#updated?()","actiondispatch::contentsecuritypolicy#upgrade_insecure_requests()","activestorage::blob#upload()","activestorage::service#upload()","activestorage::service::azurestorageservice#upload()","activestorage::service::diskservice#upload()","activestorage::service::gcsservice#upload()","activestorage::service::mirrorservice#upload()","activestorage::service::s3service#upload()","activerecord::persistence::classmethods#upsert()","activerecord::persistence::classmethods#upsert_all()","actiondispatch::http::url#url()","activestorage::blob#url()","activestorage::preview#url()","activestorage::service#url()","activestorage::variant#url()","actionview::helpers::formbuilder#url_field()","actionview::helpers::formhelper#url_field()","actionview::helpers::formtaghelper#url_field_tag()","actioncontroller::metal#url_for()","actiondispatch::http::url::url_for()","actiondispatch::routing::urlfor#url_for()","actionview::routingurlfor#url_for()","activestorage::service#url_for_direct_upload()","activestorage::service::azurestorageservice#url_for_direct_upload()","activestorage::service::diskservice#url_for_direct_upload()","activestorage::service::gcsservice#url_for_direct_upload()","activestorage::service::s3service#url_for_direct_upload()","actioncontroller::redirecting#url_from()","rails::generators::namedbase#url_helper_prefix()","actioncontroller::urlfor#url_options()","actiondispatch::integration::session#url_options()","actiondispatch::integrationtest::urloptions#url_options()","actiondispatch::routing::urlfor#url_options()","actionview::helpers::asseturlhelper#url_to_asset()","actionview::helpers::asseturlhelper#url_to_audio()","actionview::helpers::asseturlhelper#url_to_font()","actionview::helpers::asseturlhelper#url_to_image()","actionview::helpers::asseturlhelper#url_to_javascript()","actionview::helpers::asseturlhelper#url_to_stylesheet()","actionview::helpers::asseturlhelper#url_to_video()","activesupport::timezone::us_zones()","rails::command::base::usage_path()","rails::generators::base::usage_path()","actioncontroller::metal::use()","actiondispatch::middlewarestack#use()","rails::configuration::middlewarestackproxy#use()","actiondispatch::http::mimenegotiation#use_accept_header()","activerecord::connectionadapters::postgresqladapter#use_insert_returning?()","activerecord::connectionadapters::abstractadapter#use_metadata_table?()","actioncontroller::renderers::classmethods#use_renderer()","actioncontroller::renderers::classmethods#use_renderers()","time::use_zone()","datetime#usec()","actiondispatch::testrequest#user_agent=()","actioncontroller::httpauthentication::basic#user_name_and_password()","activerecord::databaseconnectionerror::username_error()","activerecord::testfixtures::classmethods#uses_transaction()","activerecord::testfixtures::classmethods#uses_transaction?()","activesupport::timewithzone#utc()","datetime#utc()","activesupport::timewithzone#utc?()","datetime#utc?()","activesupport::timewithzone#utc_offset()","activesupport::timezone#utc_offset()","datetime#utc_offset()","activesupport::timezone#utc_to_local()","actionview::helpers::formtaghelper#utf8_enforcer_tag()","actiondispatch::request#uuid()","activerecord::connectionadapters::postgresql::columnmethods#uuid()","digest::uuid::uuid_from_hash()","digest::uuid::uuid_v3()","digest::uuid::uuid_v4()","digest::uuid::uuid_v5()","activemodel::validations#valid?()","activerecord::dynamicmatchers::method#valid?()","activerecord::validations#valid?()","actiondispatch::http::mimenegotiation#valid_accept_header()","actioncontroller::requestforgeryprotection#valid_authenticity_token?()","activesupport::messageverifier#valid_message?()","actioncontroller::requestforgeryprotection#valid_per_form_csrf_token?()","actioncontroller::requestforgeryprotection#valid_request_origin?()","activemodel::eachvalidator#validate()","activemodel::validations#validate()","activemodel::validations::classmethods#validate()","activemodel::validator#validate()","activerecord::validations#validate()","activemodel::validations#validate!()","activerecord::connectionadapters::postgresql::schemastatements#validate_check_constraint()","activerecord::encryption::encryptablerecord#validate_column_size()","activerecord::connectionadapters::postgresql::altertable#validate_constraint()","activerecord::connectionadapters::postgresql::schemastatements#validate_constraint()","actioncontroller::httpauthentication::digest#validate_digest_response()","activemodel::eachvalidator#validate_each()","activerecord::encryption::extendeddeterministicuniquenessvalidator::encrypteduniquenessvalidator#validate_each()","activerecord::connectionadapters::postgresql::schemastatements#validate_foreign_key()","actioncontroller::httpauthentication::digest#validate_nonce()","rails::application#validate_secret_key_base()","activestorage::attached::model#validate_service_configuration()","activerecord::encryption::properties#validate_value_type()","activemodel::validations::classmethods#validates()","activemodel::validations::classmethods#validates!()","activemodel::validations::helpermethods#validates_absence_of()","activerecord::validations::classmethods#validates_absence_of()","activemodel::validations::helpermethods#validates_acceptance_of()","activerecord::validations::classmethods#validates_associated()","activemodel::validations::helpermethods#validates_comparison_of()","activemodel::validations::helpermethods#validates_confirmation_of()","activemodel::validations::classmethods#validates_each()","activemodel::validations::helpermethods#validates_exclusion_of()","activemodel::validations::helpermethods#validates_format_of()","activemodel::validations::helpermethods#validates_inclusion_of()","activemodel::validations::helpermethods#validates_length_of()","activerecord::validations::classmethods#validates_length_of()","activemodel::validations::helpermethods#validates_numericality_of()","activerecord::validations::classmethods#validates_numericality_of()","activemodel::validations::helpermethods#validates_presence_of()","activerecord::validations::classmethods#validates_presence_of()","activemodel::validations::helpermethods#validates_size_of()","activerecord::validations::classmethods#validates_size_of()","activerecord::validations::classmethods#validates_uniqueness_of()","activemodel::validations#validates_with()","activemodel::validations::classmethods#validates_with()","activemodel::validations::classmethods#validators()","activemodel::validations::classmethods#validators_on()","activerecord::statementcache::partialquerycollector#value()","actioncontroller::parameters#value?()","actioncontroller::parameters#values()","activerecord::relation#values()","rails::paths::root#values()","actioncontroller::parameters#values_at()","activerecord::core#values_at()","activesupport::hashwithindifferentaccess#values_at()","activesupport::hashwithindifferentaccess#values_at()","rails::paths::root#values_at()","activestorage::blob::representable#variable?()","actiondispatch::http::mimenegotiation#variant()","activestorage::attachment#variant()","activestorage::blob::representable#variant()","actiondispatch::http::mimenegotiation#variant=()","rails::appbuilder#vendor()","rails::generators::actions#vendor()","activesupport::messageverifier#verified()","activesupport::messages::rotator::verifier#verified()","actioncontroller::requestforgeryprotection#verified_request?()","activesupport::messageverifier#verify()","activerecord::connectionadapters::abstractadapter#verify!()","actioncontroller::requestforgeryprotection#verify_authenticity_token()","actioncontroller::requestforgeryprotection#verify_same_origin_request()","actioncable::version()","actionmailbox::version()","actionmailer::version()","actiontext::version()","actionview::version()","activejob::version()","activemodel::version()","activerecord::version()","activestorage::version()","activesupport::version()","rails::version()","rails::generators::appbase::gemfileentry::version()","rails::appbuilder#version_control()","rails::pluginbuilder#version_control()","activestorage::blob#video?()","actionview::helpers::asseturlhelper#video_path()","actionview::helpers::assettaghelper#video_tag()","actionview::helpers::asseturlhelper#video_url()","abstractcontroller::rendering#view_assigns()","abstractcontroller::caching#view_cache_dependencies()","abstractcontroller::caching::classmethods#view_cache_dependency()","actionview::rendering#view_context()","actionview::rendering#view_context_class()","actionview::rendering::classmethods#view_context_class()","activerecord::connectionadapters::schemastatements#view_exists?()","actionview::viewpaths::classmethods#view_paths()","actionview::viewpaths::classmethods#view_paths=()","actionview::testcase::behavior::renderedviewscollection#view_rendered?()","activerecord::connectionadapters::schemastatements#views()","actionview::templatepath::virtual()","activesupport::logsubscriber::testhelper#wait()","activesupport::notifications::fanout#wait()","activesupport::deprecation::reporting#warn()","rails::railtie::configuration#watchable_dirs()","rails::railtie::configuration#watchable_files()","actiondispatch::http::cache::response#weak_etag=()","actiondispatch::http::cache::response#weak_etag?()","numeric#week()","actionview::helpers::formbuilder#week_field()","actionview::helpers::formhelper#week_field()","actionview::helpers::formtaghelper#week_field_tag()","actionview::helpers::formoptionshelper#weekday_options_for_select()","actionview::helpers::formbuilder#weekday_select()","actionview::helpers::formoptionshelper#weekday_select()","numeric#weeks()","dateandtime::calculations#weeks_ago()","dateandtime::calculations#weeks_since()","actioncable::remoteconnections#where()","activemodel::errors#where()","activerecord::encryption::extendeddeterministicqueries::relationqueries#where()","activerecord::querymethods#where()","activerecord::connectionadapters::connectionhandler#while_preventing_writes()","activerecord::connectionhandling#while_preventing_writes()","activerecord::attributemethods::dirty#will_save_change_to_attribute?()","abstractcontroller::railties::routeshelpers::with()","actionmailer::parameterized::classmethods#with()","activesupport::cache::connectionpoollike#with()","actiontext::attribute#with_all_rich_text()","activesupport::xmlmini#with_backend()","activerecord::connectionadapters::connectionpool#with_connection()","activerecord::encryption::scheme#with_context()","actioncable::server::worker::activerecordconnectionmanagement#with_database_connections()","actiondispatch::routing::mapper::base#with_default_scope()","actioncontroller::parameters#with_defaults()","actioncontroller::renderer#with_defaults()","activesupport::hashwithindifferentaccess#with_defaults()","activesupport::hashwithindifferentaccess#with_defaults()","hash#with_defaults()","actioncontroller::parameters#with_defaults!()","activesupport::hashwithindifferentaccess#with_defaults!()","activesupport::hashwithindifferentaccess#with_defaults!()","hash#with_defaults!()","activerecord::encryption::contexts#with_encryption_context()","actiontext::attachment#with_full_attributes()","rails::generators::actions#with_indentation()","activesupport::hashwithindifferentaccess#with_indifferent_access()","activesupport::hashwithindifferentaccess#with_indifferent_access()","hash#with_indifferent_access()","activesupport::cache::strategy::localcache#with_local_cache()","activerecord::locking::pessimistic#with_lock()","object#with_options()","actiondispatch::assertions::routingassertions#with_routing()","actiondispatch::routing::mapper::resources#with_scope_level()","kernel#with_warnings()","activerecord::querymethods#without()","activesupport::hashwithindifferentaccess#without()","activesupport::hashwithindifferentaccess#without()","array#without()","enumerable#without()","activerecord::encryption::contexts#without_encryption()","actioncontroller::api::without_modules()","actioncontroller::base::without_modules()","actionview::helpers::texthelper#word_wrap()","activesupport::testing::parallelization::worker#work_from_queue()","actioncable::server::base#worker_pool()","actiontext::fragment::wrap()","activestorage::filename::wrap()","activestorage::variation::wrap()","activesupport::executionwrapper::wrap()","activesupport::reloader::wrap()","array::wrap()","mail::address::wrap()","actioncontroller::paramswrapper::options::classmethods#wrap_parameters()","rails::generators::base#wrap_with_namespace()","actioncontroller::live::sse#write()","actiondispatch::railsentitystore#write()","actiondispatch::railsmetastore#write()","actiondispatch::response#write()","activerecord::migration#write()","activesupport::cache::store#write()","activesupport::encryptedconfiguration#write()","activesupport::encryptedfile#write()","activerecord::attributemethods::write#write_attribute()","activesupport::cache::memcachestore::duplocalcache::duplocalstore#write_entry()","activesupport::cache::strategy::localcache::localstore#write_entry()","abstractcontroller::caching::fragments#write_fragment()","activesupport::cache::store#write_multi()","activerecord::connectionadapters::databasestatements#write_query?()","actiondispatch::session::cachestore#write_session()","activerecord::store#write_store_attribute()","actioncable::connection::streameventloop#writes_pending()","mail::message#x_original_to_addresses()","actiondispatch::request#xhr?()","activerecord::connectionadapters::postgresql::columnmethods#xml()","actiondispatch::request#xml_http_request?()","erb::util::xml_name_escape()","activesupport::timewithzone#xmlschema()","date#xmlschema()","actioncontroller::requestforgeryprotection#xor_byte_strings()","integer#year()","integer#years()","dateandtime::calculations#years_ago()","dateandtime::calculations#years_since()","activesupport::timezone#yesterday()","date::yesterday()","dateandtime::calculations#yesterday()","activesupport::timewithzone#yesterday?()","dateandtime::calculations#yesterday?()","activesupport::concurrency::sharelock#yield_shares()","activesupport::timewithzone#zone()","time::zone()","time::zone=()","","","","","","","","","","","","",""],"info":[["AbstractController","","classes/AbstractController.html","",""],["AbstractController::ActionNotFound","","classes/AbstractController/ActionNotFound.html","","<p>Raised when a non-existing controller action is triggered.\n"],["AbstractController::Base","","classes/AbstractController/Base.html","","<p>AbstractController::Base is a low-level API. Nobody should be using it directly, and subclasses (like â€¦\n"],["AbstractController::Caching","","classes/AbstractController/Caching.html","",""],["AbstractController::Caching::ClassMethods","","classes/AbstractController/Caching/ClassMethods.html","",""],["AbstractController::Caching::ConfigMethods","","classes/AbstractController/Caching/ConfigMethods.html","",""],["AbstractController::Caching::Fragments","","classes/AbstractController/Caching/Fragments.html","","<p>Fragment caching is used for caching various blocks within views without caching the entire action as â€¦\n"],["AbstractController::Caching::Fragments::ClassMethods","","classes/AbstractController/Caching/Fragments/ClassMethods.html","",""],["AbstractController::Callbacks","","classes/AbstractController/Callbacks.html","","<p>Abstract Controller Callbacks\n<p>Abstract Controller provides hooks during the life cycle of a controller â€¦\n"],["AbstractController::Callbacks::ClassMethods","","classes/AbstractController/Callbacks/ClassMethods.html","",""],["AbstractController::Collector","","classes/AbstractController/Collector.html","",""],["AbstractController::DoubleRenderError","","classes/AbstractController/DoubleRenderError.html","",""],["AbstractController::Helpers","","classes/AbstractController/Helpers.html","",""],["AbstractController::Helpers::ClassMethods","","classes/AbstractController/Helpers/ClassMethods.html","",""],["AbstractController::Helpers::MissingHelperError","","classes/AbstractController/Helpers/MissingHelperError.html","",""],["AbstractController::Railties","","classes/AbstractController/Railties.html","",""],["AbstractController::Railties::RoutesHelpers","","classes/AbstractController/Railties/RoutesHelpers.html","",""],["AbstractController::Rendering","","classes/AbstractController/Rendering.html","",""],["AbstractController::Translation","","classes/AbstractController/Translation.html","",""],["AbstractController::UrlFor","","classes/AbstractController/UrlFor.html","","<p>Includes <code>url_for</code> into the host class (e.g. an abstract controller or mailer). The class has to provide â€¦\n"],["AbstractController::UrlFor::ClassMethods","","classes/AbstractController/UrlFor/ClassMethods.html","",""],["ActionCable","","classes/ActionCable.html","",""],["ActionCable::Channel","","classes/ActionCable/Channel.html","",""],["ActionCable::Channel::Base","","classes/ActionCable/Channel/Base.html","","<p>The channel provides the basic structure of grouping behavior into logical units when communicating over â€¦\n"],["ActionCable::Channel::Broadcasting","","classes/ActionCable/Channel/Broadcasting.html","",""],["ActionCable::Channel::Broadcasting::ClassMethods","","classes/ActionCable/Channel/Broadcasting/ClassMethods.html","",""],["ActionCable::Channel::Callbacks","","classes/ActionCable/Channel/Callbacks.html","",""],["ActionCable::Channel::Callbacks::ClassMethods","","classes/ActionCable/Channel/Callbacks/ClassMethods.html","",""],["ActionCable::Channel::ChannelStub","","classes/ActionCable/Channel/ChannelStub.html","","<p>Stub <code>stream_from</code> to track streams for the channel. Add public aliases for <code>subscription_confirmation_sent?</code> â€¦\n"],["ActionCable::Channel::ConnectionStub","","classes/ActionCable/Channel/ConnectionStub.html","",""],["ActionCable::Channel::Naming","","classes/ActionCable/Channel/Naming.html","",""],["ActionCable::Channel::Naming::ClassMethods","","classes/ActionCable/Channel/Naming/ClassMethods.html","",""],["ActionCable::Channel::NonInferrableChannelError","","classes/ActionCable/Channel/NonInferrableChannelError.html","",""],["ActionCable::Channel::PeriodicTimers","","classes/ActionCable/Channel/PeriodicTimers.html","",""],["ActionCable::Channel::PeriodicTimers::ClassMethods","","classes/ActionCable/Channel/PeriodicTimers/ClassMethods.html","",""],["ActionCable::Channel::Streams","","classes/ActionCable/Channel/Streams.html","","<p>Streams allow channels to route broadcastings to the subscriber. A broadcasting is, as discussed elsewhere, â€¦\n"],["ActionCable::Channel::TestCase","","classes/ActionCable/Channel/TestCase.html","","<p>Superclass for Action Cable channel functional tests.\n<p>Basic example\n<p>Functional tests are written as follows: â€¦\n"],["ActionCable::Channel::TestCase::Behavior","","classes/ActionCable/Channel/TestCase/Behavior.html","",""],["ActionCable::Channel::TestCase::Behavior::ClassMethods","","classes/ActionCable/Channel/TestCase/Behavior/ClassMethods.html","",""],["ActionCable::Connection","","classes/ActionCable/Connection.html","",""],["ActionCable::Connection::Assertions","","classes/ActionCable/Connection/Assertions.html","",""],["ActionCable::Connection::Authorization","","classes/ActionCable/Connection/Authorization.html","",""],["ActionCable::Connection::Authorization::UnauthorizedError","","classes/ActionCable/Connection/Authorization/UnauthorizedError.html","",""],["ActionCable::Connection::Base","","classes/ActionCable/Connection/Base.html","","<p>For every WebSocket connection the Action Cable server accepts, a Connection object will be instantiated. â€¦\n"],["ActionCable::Connection::Identification","","classes/ActionCable/Connection/Identification.html","",""],["ActionCable::Connection::Identification::ClassMethods","","classes/ActionCable/Connection/Identification/ClassMethods.html","",""],["ActionCable::Connection::InternalChannel","","classes/ActionCable/Connection/InternalChannel.html","","<p>Makes it possible for the RemoteConnection to disconnect a specific connection.\n"],["ActionCable::Connection::NonInferrableConnectionError","","classes/ActionCable/Connection/NonInferrableConnectionError.html","",""],["ActionCable::Connection::StreamEventLoop","","classes/ActionCable/Connection/StreamEventLoop.html","",""],["ActionCable::Connection::TaggedLoggerProxy","","classes/ActionCable/Connection/TaggedLoggerProxy.html","","<p>Allows the use of per-connection tags against the server logger. This wouldn&#39;t work using the traditional â€¦\n"],["ActionCable::Connection::TestCase","","classes/ActionCable/Connection/TestCase.html","","<p>Unit test Action Cable connections.\n<p>Useful to check whether a connection&#39;s <code>identified_by</code> gets assigned â€¦\n"],["ActionCable::Connection::TestCase::Behavior","","classes/ActionCable/Connection/TestCase/Behavior.html","",""],["ActionCable::Connection::TestCase::Behavior::ClassMethods","","classes/ActionCable/Connection/TestCase/Behavior/ClassMethods.html","",""],["ActionCable::Connection::TestConnection","","classes/ActionCable/Connection/TestConnection.html","",""],["ActionCable::Connection::TestCookieJar","","classes/ActionCable/Connection/TestCookieJar.html","","<p>We don&#39;t want to use the whole â€œencryption stackâ€ for connection unit-tests, but we want â€¦\n"],["ActionCable::Connection::TestRequest","","classes/ActionCable/Connection/TestRequest.html","",""],["ActionCable::Helpers","","classes/ActionCable/Helpers.html","",""],["ActionCable::Helpers::ActionCableHelper","","classes/ActionCable/Helpers/ActionCableHelper.html","",""],["ActionCable::RemoteConnections","","classes/ActionCable/RemoteConnections.html","","<p>If you need to disconnect a given connection, you can go through the RemoteConnections. You can find â€¦\n"],["ActionCable::RemoteConnections::RemoteConnection","","classes/ActionCable/RemoteConnections/RemoteConnection.html","","<p>Represents a single remote connection found via <code>ActionCable.server.remote_connections.where(*)</code>. Exists â€¦\n"],["ActionCable::RemoteConnections::RemoteConnection::InvalidIdentifiersError","","classes/ActionCable/RemoteConnections/RemoteConnection/InvalidIdentifiersError.html","",""],["ActionCable::Server","","classes/ActionCable/Server.html","",""],["ActionCable::Server::Base","","classes/ActionCable/Server/Base.html","","<p>A singleton ActionCable::Server instance is available via ActionCable.server. It&#39;s used by the Rack â€¦\n"],["ActionCable::Server::Broadcasting","","classes/ActionCable/Server/Broadcasting.html","","<p>Broadcasting is how other parts of your application can send messages to a channel&#39;s subscribers. â€¦\n"],["ActionCable::Server::Broadcasting::Broadcaster","","classes/ActionCable/Server/Broadcasting/Broadcaster.html","",""],["ActionCable::Server::Configuration","","classes/ActionCable/Server/Configuration.html","","<p>An instance of this configuration object is available via ActionCable.server.config, which allows you â€¦\n"],["ActionCable::Server::Worker","","classes/ActionCable/Server/Worker.html","",""],["ActionCable::Server::Worker::ActiveRecordConnectionManagement","","classes/ActionCable/Server/Worker/ActiveRecordConnectionManagement.html","",""],["ActionCable::SubscriptionAdapter","","classes/ActionCable/SubscriptionAdapter.html","",""],["ActionCable::SubscriptionAdapter::Async","","classes/ActionCable/SubscriptionAdapter/Async.html","",""],["ActionCable::SubscriptionAdapter::Async::AsyncSubscriberMap","","classes/ActionCable/SubscriptionAdapter/Async/AsyncSubscriberMap.html","",""],["ActionCable::SubscriptionAdapter::Base","","classes/ActionCable/SubscriptionAdapter/Base.html","",""],["ActionCable::SubscriptionAdapter::PostgreSQL","","classes/ActionCable/SubscriptionAdapter/PostgreSQL.html","",""],["ActionCable::SubscriptionAdapter::PostgreSQL::Listener","","classes/ActionCable/SubscriptionAdapter/PostgreSQL/Listener.html","",""],["ActionCable::SubscriptionAdapter::Redis","","classes/ActionCable/SubscriptionAdapter/Redis.html","",""],["ActionCable::SubscriptionAdapter::Redis::Listener","","classes/ActionCable/SubscriptionAdapter/Redis/Listener.html","",""],["ActionCable::SubscriptionAdapter::SubscriberMap","","classes/ActionCable/SubscriptionAdapter/SubscriberMap.html","",""],["ActionCable::SubscriptionAdapter::Test","","classes/ActionCable/SubscriptionAdapter/Test.html","","<p>Test adapter for Action Cable\n<p>The test adapter should be used only in testing. Along with ActionCable::TestHelper â€¦\n"],["ActionCable::TestCase","","classes/ActionCable/TestCase.html","",""],["ActionCable::TestHelper","","classes/ActionCable/TestHelper.html","","<p>Provides helper methods for testing Action Cable broadcasting\n"],["ActionCable::VERSION","","classes/ActionCable/VERSION.html","",""],["ActionController","","classes/ActionController.html","",""],["ActionController::API","","classes/ActionController/API.html","","<p>API Controller is a lightweight version of ActionController::Base, created for applications that don&#39;t â€¦\n"],["ActionController::ApiRendering","","classes/ActionController/ApiRendering.html","",""],["ActionController::Base","","classes/ActionController/Base.html","","<p>Action Controllers are the core of a web request in Rails. They are made up of one or more actions that â€¦\n"],["ActionController::Caching","","classes/ActionController/Caching.html","","<p>Caching is a cheap way of speeding up slow applications by keeping the result of calculations, renderings, â€¦\n"],["ActionController::ConditionalGet","","classes/ActionController/ConditionalGet.html","",""],["ActionController::ConditionalGet::ClassMethods","","classes/ActionController/ConditionalGet/ClassMethods.html","",""],["ActionController::ContentSecurityPolicy","","classes/ActionController/ContentSecurityPolicy.html","",""],["ActionController::ContentSecurityPolicy::ClassMethods","","classes/ActionController/ContentSecurityPolicy/ClassMethods.html","",""],["ActionController::Cookies","","classes/ActionController/Cookies.html","",""],["ActionController::DataStreaming","","classes/ActionController/DataStreaming.html","","<p>Methods for sending arbitrary data and for streaming files to the browser, instead of rendering.\n"],["ActionController::DefaultHeaders","","classes/ActionController/DefaultHeaders.html","","<p>Allows configuring default headers that will be automatically merged into each response.\n"],["ActionController::DefaultHeaders::ClassMethods","","classes/ActionController/DefaultHeaders/ClassMethods.html","",""],["ActionController::EtagWithFlash","","classes/ActionController/EtagWithFlash.html","","<p>When you&#39;re using the flash, it&#39;s generally used as a conditional on the view. This means the â€¦\n"],["ActionController::EtagWithTemplateDigest","","classes/ActionController/EtagWithTemplateDigest.html","","<p>When our views change, they should bubble up into HTTP cache freshness and bust browser caches. So the â€¦\n"],["ActionController::Flash","","classes/ActionController/Flash.html","",""],["ActionController::Flash::ClassMethods","","classes/ActionController/Flash/ClassMethods.html","",""],["ActionController::FormBuilder","","classes/ActionController/FormBuilder.html","","<p>Override the default form builder for all views rendered by this controller and any of its descendants. â€¦\n"],["ActionController::FormBuilder::ClassMethods","","classes/ActionController/FormBuilder/ClassMethods.html","",""],["ActionController::Head","","classes/ActionController/Head.html","",""],["ActionController::Helpers","","classes/ActionController/Helpers.html","","<p>The Rails framework provides a large number of helpers for working with assets, dates, forms, numbers â€¦\n"],["ActionController::Helpers::ClassMethods","","classes/ActionController/Helpers/ClassMethods.html","",""],["ActionController::HttpAuthentication","","classes/ActionController/HttpAuthentication.html","","<p>HTTP Basic, Digest, and Token authentication.\n"],["ActionController::HttpAuthentication::Basic","","classes/ActionController/HttpAuthentication/Basic.html","","<p>HTTP Basic authentication\n<p>Simple Basic example\n\n<pre><code> class PostsController &lt; ApplicationController\n   http_basic_authenticate_with ...\n</code></pre>\n"],["ActionController::HttpAuthentication::Basic::ControllerMethods","","classes/ActionController/HttpAuthentication/Basic/ControllerMethods.html","",""],["ActionController::HttpAuthentication::Basic::ControllerMethods::ClassMethods","","classes/ActionController/HttpAuthentication/Basic/ControllerMethods/ClassMethods.html","",""],["ActionController::HttpAuthentication::Digest","","classes/ActionController/HttpAuthentication/Digest.html","","<p>HTTP Digest authentication\n<p>Simple Digest example\n\n<pre><code>require &quot;openssl&quot;\nclass PostsController &lt; ApplicationController ...\n</code></pre>\n"],["ActionController::HttpAuthentication::Digest::ControllerMethods","","classes/ActionController/HttpAuthentication/Digest/ControllerMethods.html","",""],["ActionController::HttpAuthentication::Token","","classes/ActionController/HttpAuthentication/Token.html","","<p>HTTP Token authentication\n<p>Simple Token example\n\n<pre><code>class PostsController &lt; ApplicationController\n  TOKEN = ...\n</code></pre>\n"],["ActionController::HttpAuthentication::Token::ControllerMethods","","classes/ActionController/HttpAuthentication/Token/ControllerMethods.html","",""],["ActionController::ImplicitRender","","classes/ActionController/ImplicitRender.html","","<p>Handles implicit rendering for a controller action that does not explicitly respond with <code>render</code>, <code>respond_to</code> â€¦\n"],["ActionController::Instrumentation","","classes/ActionController/Instrumentation.html","","<p>Adds instrumentation to several ends in ActionController::Base. It also provides some hooks related with â€¦\n"],["ActionController::Instrumentation::ClassMethods","","classes/ActionController/Instrumentation/ClassMethods.html","",""],["ActionController::Live","","classes/ActionController/Live.html","","<p>Mix this module into your controller, and all actions in that controller will be able to stream data â€¦\n"],["ActionController::Live::ClassMethods","","classes/ActionController/Live/ClassMethods.html","",""],["ActionController::Live::ClientDisconnected","","classes/ActionController/Live/ClientDisconnected.html","",""],["ActionController::Live::SSE","","classes/ActionController/Live/SSE.html","","<p>This class provides the ability to write an SSE (Server Sent Event) to an IO stream. The class is initialized â€¦\n"],["ActionController::LiveTestResponse","","classes/ActionController/LiveTestResponse.html","",""],["ActionController::LogSubscriber","","classes/ActionController/LogSubscriber.html","",""],["ActionController::Logging","","classes/ActionController/Logging.html","",""],["ActionController::Logging::ClassMethods","","classes/ActionController/Logging/ClassMethods.html","",""],["ActionController::Metal","","classes/ActionController/Metal.html","","<p><code>ActionController::Metal</code> is the simplest possible controller, providing a valid Rack interface without â€¦\n"],["ActionController::MimeResponds","","classes/ActionController/MimeResponds.html","",""],["ActionController::MimeResponds::Collector","","classes/ActionController/MimeResponds/Collector.html","","<p>A container for responses available from the current controller for requests for different mime-types â€¦\n"],["ActionController::MissingRenderer","","classes/ActionController/MissingRenderer.html","","<p>See <code>Responder#api_behavior</code>\n"],["ActionController::ParameterEncoding","","classes/ActionController/ParameterEncoding.html","","<p>Specify binary encoding for parameters for a given action.\n"],["ActionController::ParameterEncoding::ClassMethods","","classes/ActionController/ParameterEncoding/ClassMethods.html","",""],["ActionController::ParameterMissing","","classes/ActionController/ParameterMissing.html","","<p>Raised when a required parameter is missing.\n\n<pre><code>params = ActionController::Parameters.new(a: {})\nparams.fetch(:b) ...\n</code></pre>\n"],["ActionController::Parameters","","classes/ActionController/Parameters.html","","<p>Action Controller Parameters\n<p>Allows you to choose which attributes should be permitted for mass updating â€¦\n"],["ActionController::ParamsWrapper","","classes/ActionController/ParamsWrapper.html","","<p>Wraps the parameters hash into a nested hash. This will allow clients to submit requests without having â€¦\n"],["ActionController::ParamsWrapper::Options","","classes/ActionController/ParamsWrapper/Options.html","",""],["ActionController::ParamsWrapper::Options::ClassMethods","","classes/ActionController/ParamsWrapper/Options/ClassMethods.html","",""],["ActionController::PermissionsPolicy","","classes/ActionController/PermissionsPolicy.html","",""],["ActionController::PermissionsPolicy::ClassMethods","","classes/ActionController/PermissionsPolicy/ClassMethods.html","",""],["ActionController::Railties","","classes/ActionController/Railties.html","",""],["ActionController::Railties::Helpers","","classes/ActionController/Railties/Helpers.html","",""],["ActionController::Redirecting","","classes/ActionController/Redirecting.html","",""],["ActionController::Redirecting::UnsafeRedirectError","","classes/ActionController/Redirecting/UnsafeRedirectError.html","",""],["ActionController::Renderer","","classes/ActionController/Renderer.html","","<p>ActionController::Renderer allows you to render arbitrary templates without requirement of being in controller â€¦\n"],["ActionController::Renderers","","classes/ActionController/Renderers.html","",""],["ActionController::Renderers::All","","classes/ActionController/Renderers/All.html","","<p>Used in ActionController::Base and ActionController::API to include all renderers by default.\n"],["ActionController::Renderers::ClassMethods","","classes/ActionController/Renderers/ClassMethods.html","",""],["ActionController::Rendering","","classes/ActionController/Rendering.html","",""],["ActionController::Rendering::ClassMethods","","classes/ActionController/Rendering/ClassMethods.html","",""],["ActionController::RequestForgeryProtection","","classes/ActionController/RequestForgeryProtection.html","","<p>Controller actions are protected from Cross-Site Request Forgery (CSRF) attacks by including a token â€¦\n"],["ActionController::RequestForgeryProtection::ClassMethods","","classes/ActionController/RequestForgeryProtection/ClassMethods.html","",""],["ActionController::RequestForgeryProtection::ProtectionMethods","","classes/ActionController/RequestForgeryProtection/ProtectionMethods.html","",""],["ActionController::RequestForgeryProtection::ProtectionMethods::Exception","","classes/ActionController/RequestForgeryProtection/ProtectionMethods/Exception.html","",""],["ActionController::RequestForgeryProtection::ProtectionMethods::NullSession","","classes/ActionController/RequestForgeryProtection/ProtectionMethods/NullSession.html","",""],["ActionController::RequestForgeryProtection::ProtectionMethods::ResetSession","","classes/ActionController/RequestForgeryProtection/ProtectionMethods/ResetSession.html","",""],["ActionController::Rescue","","classes/ActionController/Rescue.html","","<p>This module is responsible for providing <code>rescue_from</code> helpers to controllers and configuring when detailed â€¦\n"],["ActionController::RespondToMismatchError","","classes/ActionController/RespondToMismatchError.html","","<p>Raised when a nested respond_to is triggered and the content types of each are incompatible. For example: â€¦\n"],["ActionController::Streaming","","classes/ActionController/Streaming.html","","<p>Allows views to be streamed back to the client as they are rendered.\n<p>By default, Rails renders views by â€¦\n"],["ActionController::StrongParameters","","classes/ActionController/StrongParameters.html","","<p>Strong Parameters\n<p>It provides an interface for protecting attributes from end-user assignment. This makes â€¦\n"],["ActionController::TestCase","","classes/ActionController/TestCase.html","","<p>Superclass for ActionController functional tests. Functional tests allow you to test a single controller â€¦\n"],["ActionController::TestCase::Behavior","","classes/ActionController/TestCase/Behavior.html","",""],["ActionController::TestCase::Behavior::ClassMethods","","classes/ActionController/TestCase/Behavior/ClassMethods.html","",""],["ActionController::Testing","","classes/ActionController/Testing.html","",""],["ActionController::UnfilteredParameters","","classes/ActionController/UnfilteredParameters.html","","<p>Raised when a Parameters instance is not marked as permitted and an operation to transform it to hash â€¦\n"],["ActionController::UnpermittedParameters","","classes/ActionController/UnpermittedParameters.html","","<p>Raised when a supplied parameter is not expected and ActionController::Parameters.action_on_unpermitted_parameters â€¦\n"],["ActionController::UrlFor","","classes/ActionController/UrlFor.html","","<p>Includes <code>url_for</code> into the host class. The class has to provide a <code>RouteSet</code> by implementing the <code>_routes</code> â€¦\n"],["ActionDispatch","","classes/ActionDispatch.html","",""],["ActionDispatch::AssertionResponse","","classes/ActionDispatch/AssertionResponse.html","","<p>This is a class that abstracts away an asserted response. It purposely does not inherit from Response â€¦\n"],["ActionDispatch::Assertions","","classes/ActionDispatch/Assertions.html","",""],["ActionDispatch::Assertions::ResponseAssertions","","classes/ActionDispatch/Assertions/ResponseAssertions.html","","<p>A small suite of assertions that test responses from Rails applications.\n"],["ActionDispatch::Assertions::RoutingAssertions","","classes/ActionDispatch/Assertions/RoutingAssertions.html","","<p>Suite of assertions to test routes generated by Rails and the handling of requests made to them.\n"],["ActionDispatch::Callbacks","","classes/ActionDispatch/Callbacks.html","","<p>Provides callbacks to be executed before and after dispatching the request.\n"],["ActionDispatch::ContentSecurityPolicy","","classes/ActionDispatch/ContentSecurityPolicy.html","","<p>Configures the HTTP Content-Security-Policy response header to help protect against XSS and injection â€¦\n"],["ActionDispatch::ContentSecurityPolicy::Middleware","","classes/ActionDispatch/ContentSecurityPolicy/Middleware.html","",""],["ActionDispatch::ContentSecurityPolicy::Request","","classes/ActionDispatch/ContentSecurityPolicy/Request.html","",""],["ActionDispatch::Cookies","","classes/ActionDispatch/Cookies.html","","<p>Read and write data to cookies through ActionController#cookies.\n<p>When reading cookie data, the data is â€¦\n"],["ActionDispatch::Cookies::ChainedCookieJars","","classes/ActionDispatch/Cookies/ChainedCookieJars.html","","<p>Include in a cookie jar to allow chaining, e.g. <code>cookies.permanent.signed</code>.\n"],["ActionDispatch::DebugExceptions","","classes/ActionDispatch/DebugExceptions.html","","<p>This middleware is responsible for logging exceptions and showing a debugging page in case the request â€¦\n"],["ActionDispatch::DebugLocks","","classes/ActionDispatch/DebugLocks.html","","<p>This middleware can be used to diagnose deadlocks in the autoload interlock.\n<p>To use it, insert it near â€¦\n"],["ActionDispatch::ExceptionWrapper","","classes/ActionDispatch/ExceptionWrapper.html","",""],["ActionDispatch::Executor","","classes/ActionDispatch/Executor.html","",""],["ActionDispatch::FileHandler","","classes/ActionDispatch/FileHandler.html","","<p>This endpoint serves static files from disk using Rack::File.\n<p>URL paths are matched with static files â€¦\n"],["ActionDispatch::Flash","","classes/ActionDispatch/Flash.html","","<p>The flash provides a way to pass temporary primitive-types (String, Array, Hash) between actions. Anything â€¦\n"],["ActionDispatch::Flash::FlashHash","","classes/ActionDispatch/Flash/FlashHash.html","",""],["ActionDispatch::Flash::RequestMethods","","classes/ActionDispatch/Flash/RequestMethods.html","",""],["ActionDispatch::HostAuthorization","","classes/ActionDispatch/HostAuthorization.html","","<p>This middleware guards from DNS rebinding attacks by explicitly permitting the hosts a request can be â€¦\n"],["ActionDispatch::Http","","classes/ActionDispatch/Http.html","",""],["ActionDispatch::Http::Cache","","classes/ActionDispatch/Http/Cache.html","",""],["ActionDispatch::Http::Cache::Request","","classes/ActionDispatch/Http/Cache/Request.html","",""],["ActionDispatch::Http::Cache::Response","","classes/ActionDispatch/Http/Cache/Response.html","",""],["ActionDispatch::Http::FilterParameters","","classes/ActionDispatch/Http/FilterParameters.html","","<p>Allows you to specify sensitive parameters which will be replaced from the request log by looking in â€¦\n"],["ActionDispatch::Http::FilterRedirect","","classes/ActionDispatch/Http/FilterRedirect.html","",""],["ActionDispatch::Http::Headers","","classes/ActionDispatch/Http/Headers.html","","<p>Provides access to the request&#39;s HTTP headers from the environment.\n\n<pre><code>env     = { &quot;CONTENT_TYPE&quot; =&gt; ...\n</code></pre>\n"],["ActionDispatch::Http::MimeNegotiation","","classes/ActionDispatch/Http/MimeNegotiation.html","",""],["ActionDispatch::Http::MimeNegotiation::InvalidType","","classes/ActionDispatch/Http/MimeNegotiation/InvalidType.html","",""],["ActionDispatch::Http::Parameters","","classes/ActionDispatch/Http/Parameters.html","",""],["ActionDispatch::Http::Parameters::ClassMethods","","classes/ActionDispatch/Http/Parameters/ClassMethods.html","",""],["ActionDispatch::Http::Parameters::ParseError","","classes/ActionDispatch/Http/Parameters/ParseError.html","","<p>Raised when raw data from the request cannot be parsed by the parser defined for request&#39;s content â€¦\n"],["ActionDispatch::Http::URL","","classes/ActionDispatch/Http/URL.html","",""],["ActionDispatch::Http::UploadedFile","","classes/ActionDispatch/Http/UploadedFile.html","","<p>Models uploaded files.\n<p>The actual file is accessible via the <code>tempfile</code> accessor, though some of its interface â€¦\n"],["ActionDispatch::Integration","","classes/ActionDispatch/Integration.html","",""],["ActionDispatch::Integration::RequestHelpers","","classes/ActionDispatch/Integration/RequestHelpers.html","",""],["ActionDispatch::Integration::Runner","","classes/ActionDispatch/Integration/Runner.html","",""],["ActionDispatch::Integration::Session","","classes/ActionDispatch/Integration/Session.html","","<p>An instance of this class represents a set of requests and responses performed sequentially by a test â€¦\n"],["ActionDispatch::IntegrationTest","","classes/ActionDispatch/IntegrationTest.html","","<p>An integration test spans multiple controllers and actions, tying them all together to ensure they work â€¦\n"],["ActionDispatch::IntegrationTest::Behavior","","classes/ActionDispatch/IntegrationTest/Behavior.html","",""],["ActionDispatch::IntegrationTest::Behavior::ClassMethods","","classes/ActionDispatch/IntegrationTest/Behavior/ClassMethods.html","",""],["ActionDispatch::IntegrationTest::UrlOptions","","classes/ActionDispatch/IntegrationTest/UrlOptions.html","",""],["ActionDispatch::Journey","","classes/ActionDispatch/Journey.html","",""],["ActionDispatch::Journey::Format","","classes/ActionDispatch/Journey/Format.html","",""],["ActionDispatch::Journey::Formatter","","classes/ActionDispatch/Journey/Formatter.html","",""],["ActionDispatch::Journey::Formatter::MissingRoute","","classes/ActionDispatch/Journey/Formatter/MissingRoute.html","",""],["ActionDispatch::Journey::Formatter::RouteWithParams","","classes/ActionDispatch/Journey/Formatter/RouteWithParams.html","",""],["ActionDispatch::Journey::Parser","","classes/ActionDispatch/Journey/Parser.html","",""],["ActionDispatch::Journey::Route","","classes/ActionDispatch/Journey/Route.html","",""],["ActionDispatch::Journey::Route::VerbMatchers","","classes/ActionDispatch/Journey/Route/VerbMatchers.html","",""],["ActionDispatch::Journey::Route::VerbMatchers::All","","classes/ActionDispatch/Journey/Route/VerbMatchers/All.html","",""],["ActionDispatch::Journey::Route::VerbMatchers::Unknown","","classes/ActionDispatch/Journey/Route/VerbMatchers/Unknown.html","",""],["ActionDispatch::MiddlewareStack","","classes/ActionDispatch/MiddlewareStack.html","",""],["ActionDispatch::MiddlewareStack::InstrumentationProxy","","classes/ActionDispatch/MiddlewareStack/InstrumentationProxy.html","","<p>This class is used to instrument the execution of a single middleware. It proxies the <code>call</code> method transparently â€¦\n"],["ActionDispatch::MiddlewareStack::Middleware","","classes/ActionDispatch/MiddlewareStack/Middleware.html","",""],["ActionDispatch::PermissionsPolicy","","classes/ActionDispatch/PermissionsPolicy.html","","<p>Configures the HTTP Feature-Policy response header to specify which browser features the current document â€¦\n"],["ActionDispatch::PermissionsPolicy::Middleware","","classes/ActionDispatch/PermissionsPolicy/Middleware.html","",""],["ActionDispatch::PermissionsPolicy::Request","","classes/ActionDispatch/PermissionsPolicy/Request.html","",""],["ActionDispatch::PublicExceptions","","classes/ActionDispatch/PublicExceptions.html","","<p>When called, this middleware renders an error page. By default if an HTML response is expected it will â€¦\n"],["ActionDispatch::RailsEntityStore","","classes/ActionDispatch/RailsEntityStore.html","",""],["ActionDispatch::RailsEntityStore::Rack","","classes/ActionDispatch/RailsEntityStore/Rack.html","",""],["ActionDispatch::RailsEntityStore::Rack::Cache","","classes/ActionDispatch/RailsEntityStore/Rack/Cache.html","",""],["ActionDispatch::RailsEntityStore::Rack::Cache::EntityStore","","classes/ActionDispatch/RailsEntityStore/Rack/Cache/EntityStore.html","",""],["ActionDispatch::RailsMetaStore","","classes/ActionDispatch/RailsMetaStore.html","",""],["ActionDispatch::RailsMetaStore::Rack","","classes/ActionDispatch/RailsMetaStore/Rack.html","",""],["ActionDispatch::RailsMetaStore::Rack::Cache","","classes/ActionDispatch/RailsMetaStore/Rack/Cache.html","",""],["ActionDispatch::RailsMetaStore::Rack::Cache::MetaStore","","classes/ActionDispatch/RailsMetaStore/Rack/Cache/MetaStore.html","",""],["ActionDispatch::Reloader","","classes/ActionDispatch/Reloader.html","","<p>ActionDispatch::Reloader wraps the request with callbacks provided by ActiveSupport::Reloader callbacks, â€¦\n"],["ActionDispatch::RemoteIp","","classes/ActionDispatch/RemoteIp.html","","<p>This middleware calculates the IP address of the remote client that is making the request. It does this â€¦\n"],["ActionDispatch::RemoteIp::GetIp","","classes/ActionDispatch/RemoteIp/GetIp.html","","<p>The GetIp class exists as a way to defer processing of the request data into an actual IP address. If â€¦\n"],["ActionDispatch::RemoteIp::IpSpoofAttackError","","classes/ActionDispatch/RemoteIp/IpSpoofAttackError.html","",""],["ActionDispatch::Request","","classes/ActionDispatch/Request.html","",""],["ActionDispatch::RequestCookieMethods","","classes/ActionDispatch/RequestCookieMethods.html","",""],["ActionDispatch::RequestEncoder","","classes/ActionDispatch/RequestEncoder.html","",""],["ActionDispatch::RequestEncoder::IdentityEncoder","","classes/ActionDispatch/RequestEncoder/IdentityEncoder.html","",""],["ActionDispatch::RequestId","","classes/ActionDispatch/RequestId.html","","<p>Makes a unique request id available to the <code>action_dispatch.request_id</code> env variable (which is then accessible â€¦\n"],["ActionDispatch::Response","","classes/ActionDispatch/Response.html","","<p>Represents an HTTP response generated by a controller action. Use it to retrieve the current state of â€¦\n"],["ActionDispatch::Response::RackBody","","classes/ActionDispatch/Response/RackBody.html","",""],["ActionDispatch::Routing","","classes/ActionDispatch/Routing.html","","<p>The routing module provides URL rewriting in native Ruby. It&#39;s a way to redirect incoming requests â€¦\n"],["ActionDispatch::Routing::ConsoleFormatter","","classes/ActionDispatch/Routing/ConsoleFormatter.html","",""],["ActionDispatch::Routing::ConsoleFormatter::Base","","classes/ActionDispatch/Routing/ConsoleFormatter/Base.html","",""],["ActionDispatch::Routing::ConsoleFormatter::Expanded","","classes/ActionDispatch/Routing/ConsoleFormatter/Expanded.html","",""],["ActionDispatch::Routing::ConsoleFormatter::Sheet","","classes/ActionDispatch/Routing/ConsoleFormatter/Sheet.html","",""],["ActionDispatch::Routing::HtmlTableFormatter","","classes/ActionDispatch/Routing/HtmlTableFormatter.html","",""],["ActionDispatch::Routing::Mapper","","classes/ActionDispatch/Routing/Mapper.html","",""],["ActionDispatch::Routing::Mapper::Base","","classes/ActionDispatch/Routing/Mapper/Base.html","",""],["ActionDispatch::Routing::Mapper::Concerns","","classes/ActionDispatch/Routing/Mapper/Concerns.html","","<p>Routing Concerns allow you to declare common routes that can be reused inside others resources and routes. â€¦\n"],["ActionDispatch::Routing::Mapper::CustomUrls","","classes/ActionDispatch/Routing/Mapper/CustomUrls.html","",""],["ActionDispatch::Routing::Mapper::HttpHelpers","","classes/ActionDispatch/Routing/Mapper/HttpHelpers.html","",""],["ActionDispatch::Routing::Mapper::Resources","","classes/ActionDispatch/Routing/Mapper/Resources.html","","<p>Resource routing allows you to quickly declare all of the common routes for a given resourceful controller. â€¦\n"],["ActionDispatch::Routing::Mapper::Scoping","","classes/ActionDispatch/Routing/Mapper/Scoping.html","","<p>You may wish to organize groups of controllers under a namespace. Most commonly, you might group a number â€¦\n"],["ActionDispatch::Routing::PathRedirect","","classes/ActionDispatch/Routing/PathRedirect.html","",""],["ActionDispatch::Routing::PolymorphicRoutes","","classes/ActionDispatch/Routing/PolymorphicRoutes.html","","<p>Polymorphic URL helpers are methods for smart resolution to a named route call when given an Active  â€¦\n"],["ActionDispatch::Routing::Redirection","","classes/ActionDispatch/Routing/Redirection.html","",""],["ActionDispatch::Routing::RouteSet","","classes/ActionDispatch/Routing/RouteSet.html","",""],["ActionDispatch::Routing::RouteSet::CustomUrlHelper","","classes/ActionDispatch/Routing/RouteSet/CustomUrlHelper.html","",""],["ActionDispatch::Routing::RouteSet::Dispatcher","","classes/ActionDispatch/Routing/RouteSet/Dispatcher.html","",""],["ActionDispatch::Routing::RouteSet::Generator","","classes/ActionDispatch/Routing/RouteSet/Generator.html","",""],["ActionDispatch::Routing::RouteSet::MountedHelpers","","classes/ActionDispatch/Routing/RouteSet/MountedHelpers.html","",""],["ActionDispatch::Routing::RouteSet::NamedRouteCollection","","classes/ActionDispatch/Routing/RouteSet/NamedRouteCollection.html","",""],["ActionDispatch::Routing::RouteSet::NamedRouteCollection::UrlHelper","","classes/ActionDispatch/Routing/RouteSet/NamedRouteCollection/UrlHelper.html","",""],["ActionDispatch::Routing::RouteSet::NamedRouteCollection::UrlHelper::OptimizedUrlHelper","","classes/ActionDispatch/Routing/RouteSet/NamedRouteCollection/UrlHelper/OptimizedUrlHelper.html","",""],["ActionDispatch::Routing::RouteSet::StaticDispatcher","","classes/ActionDispatch/Routing/RouteSet/StaticDispatcher.html","",""],["ActionDispatch::Routing::UrlFor","","classes/ActionDispatch/Routing/UrlFor.html","","<p>In <code>config/routes.rb</code> you define URL-to-controller mappings, but the reverse is also possible: a URL can â€¦\n"],["ActionDispatch::SSL","","classes/ActionDispatch/SSL.html","","<p>This middleware is added to the stack when <code>config.force_ssl = true</code>, and is passed the options set in â€¦\n"],["ActionDispatch::ServerTiming","","classes/ActionDispatch/ServerTiming.html","",""],["ActionDispatch::Session","","classes/ActionDispatch/Session.html","",""],["ActionDispatch::Session::AbstractSecureStore","","classes/ActionDispatch/Session/AbstractSecureStore.html","",""],["ActionDispatch::Session::AbstractStore","","classes/ActionDispatch/Session/AbstractStore.html","",""],["ActionDispatch::Session::CacheStore","","classes/ActionDispatch/Session/CacheStore.html","","<p>A session store that uses an ActiveSupport::Cache::Store to store the sessions. This store is most useful â€¦\n"],["ActionDispatch::Session::Compatibility","","classes/ActionDispatch/Session/Compatibility.html","",""],["ActionDispatch::Session::CookieStore","","classes/ActionDispatch/Session/CookieStore.html","","<p>This cookie-based session store is the Rails default. It is dramatically faster than the alternatives. â€¦\n"],["ActionDispatch::Session::CookieStore::SessionId","","classes/ActionDispatch/Session/CookieStore/SessionId.html","",""],["ActionDispatch::Session::MemCacheStore","","classes/ActionDispatch/Session/MemCacheStore.html","","<p>A session store that uses MemCache to implement storage.\n<p>Options\n<p><code>expire_after</code>  - The length of time a session â€¦\n"],["ActionDispatch::Session::StaleSessionCheck","","classes/ActionDispatch/Session/StaleSessionCheck.html","",""],["ActionDispatch::ShowExceptions","","classes/ActionDispatch/ShowExceptions.html","","<p>This middleware rescues any exception returned by the application and calls an exceptions app that will â€¦\n"],["ActionDispatch::Static","","classes/ActionDispatch/Static.html","","<p>This middleware serves static files from disk, if available. If no file is found, it hands off to the â€¦\n"],["ActionDispatch::SystemTestCase","","classes/ActionDispatch/SystemTestCase.html","","<p>System Testing\n<p>System tests let you test applications in the browser. Because system tests use a real â€¦\n"],["ActionDispatch::SystemTesting","","classes/ActionDispatch/SystemTesting.html","",""],["ActionDispatch::SystemTesting::TestHelpers","","classes/ActionDispatch/SystemTesting/TestHelpers.html","",""],["ActionDispatch::SystemTesting::TestHelpers::ScreenshotHelper","","classes/ActionDispatch/SystemTesting/TestHelpers/ScreenshotHelper.html","","<p>Screenshot helper for system testing.\n"],["ActionDispatch::TestProcess","","classes/ActionDispatch/TestProcess.html","",""],["ActionDispatch::TestProcess::FixtureFile","","classes/ActionDispatch/TestProcess/FixtureFile.html","",""],["ActionDispatch::TestRequest","","classes/ActionDispatch/TestRequest.html","",""],["ActionDispatch::TestResponse","","classes/ActionDispatch/TestResponse.html","","<p>Integration test methods such as ActionDispatch::Integration::Session#get and ActionDispatch::Integration::Session#post â€¦\n"],["ActionMailbox","","classes/ActionMailbox.html","",""],["ActionMailbox::Base","","classes/ActionMailbox/Base.html","","<p>The base class for all application mailboxes. Not intended to be inherited from directly. Inherit from â€¦\n"],["ActionMailbox::BaseController","","classes/ActionMailbox/BaseController.html","","<p>The base class for all Action Mailbox ingress controllers.\n"],["ActionMailbox::Callbacks","","classes/ActionMailbox/Callbacks.html","","<p>Defines the callbacks related to processing.\n"],["ActionMailbox::Engine","","classes/ActionMailbox/Engine.html","",""],["ActionMailbox::InboundEmail","","classes/ActionMailbox/InboundEmail.html","","<p>The <code>InboundEmail</code> is an Active Record that keeps a reference to the raw email stored in Active Storage â€¦\n"],["ActionMailbox::InboundEmail::Incineratable","","classes/ActionMailbox/InboundEmail/Incineratable.html","","<p>Ensure that the <code>InboundEmail</code> is automatically scheduled for later incineration if the status has been â€¦\n"],["ActionMailbox::InboundEmail::Incineratable::Incineration","","classes/ActionMailbox/InboundEmail/Incineratable/Incineration.html","","<p>Command class for carrying out the actual incineration of the <code>InboundMail</code> that&#39;s been scheduled for â€¦\n"],["ActionMailbox::InboundEmail::MessageId","","classes/ActionMailbox/InboundEmail/MessageId.html","","<p>The <code>Message-ID</code> as specified by rfc822 is supposed to be a unique identifier for that individual email. â€¦\n"],["ActionMailbox::InboundEmail::Routable","","classes/ActionMailbox/InboundEmail/Routable.html","","<p>A newly received <code>InboundEmail</code> will not be routed synchronously as part of ingress controller&#39;s receival. â€¦\n"],["ActionMailbox::InboundEmails","","classes/ActionMailbox/InboundEmails.html","",""],["ActionMailbox::IncinerationJob","","classes/ActionMailbox/IncinerationJob.html","","<p>You can configure when this <code>IncinerationJob</code> will be run as a time-after-processing using the <code>config.action_mailbox.incinerate_after</code> â€¦\n"],["ActionMailbox::Ingresses","","classes/ActionMailbox/Ingresses.html","",""],["ActionMailbox::Ingresses::Mailgun","","classes/ActionMailbox/Ingresses/Mailgun.html","",""],["ActionMailbox::Ingresses::Mailgun::InboundEmailsController","","classes/ActionMailbox/Ingresses/Mailgun/InboundEmailsController.html","","<p>Ingests inbound emails from Mailgun. Requires the following parameters:\n<p><code>body-mime</code>: The full RFC 822 message â€¦\n"],["ActionMailbox::Ingresses::Mailgun::InboundEmailsController::Authenticator","","classes/ActionMailbox/Ingresses/Mailgun/InboundEmailsController/Authenticator.html","",""],["ActionMailbox::Ingresses::Mandrill","","classes/ActionMailbox/Ingresses/Mandrill.html","",""],["ActionMailbox::Ingresses::Mandrill::InboundEmailsController","","classes/ActionMailbox/Ingresses/Mandrill/InboundEmailsController.html","","<p>Ingests inbound emails from Mandrill.\n<p>Requires a <code>mandrill_events</code> parameter containing a JSON array of â€¦\n"],["ActionMailbox::Ingresses::Mandrill::InboundEmailsController::Authenticator","","classes/ActionMailbox/Ingresses/Mandrill/InboundEmailsController/Authenticator.html","",""],["ActionMailbox::Ingresses::Postmark","","classes/ActionMailbox/Ingresses/Postmark.html","",""],["ActionMailbox::Ingresses::Postmark::InboundEmailsController","","classes/ActionMailbox/Ingresses/Postmark/InboundEmailsController.html","","<p>Ingests inbound emails from Postmark. Requires a <code>RawEmail</code> parameter containing a full RFC 822 message. â€¦\n"],["ActionMailbox::Ingresses::Relay","","classes/ActionMailbox/Ingresses/Relay.html","",""],["ActionMailbox::Ingresses::Relay::InboundEmailsController","","classes/ActionMailbox/Ingresses/Relay/InboundEmailsController.html","","<p>Ingests inbound emails relayed from an SMTP server.\n<p>Authenticates requests using HTTP basic access authentication. â€¦\n"],["ActionMailbox::Ingresses::Sendgrid","","classes/ActionMailbox/Ingresses/Sendgrid.html","",""],["ActionMailbox::Ingresses::Sendgrid::InboundEmailsController","","classes/ActionMailbox/Ingresses/Sendgrid/InboundEmailsController.html","","<p>Ingests inbound emails from SendGrid. Requires an <code>email</code> parameter containing a full RFC 822 message. â€¦\n"],["ActionMailbox::Relayer","","classes/ActionMailbox/Relayer.html","",""],["ActionMailbox::Relayer::Result","","classes/ActionMailbox/Relayer/Result.html","",""],["ActionMailbox::Router","","classes/ActionMailbox/Router.html","","<p>Encapsulates the routes that live on the ApplicationMailbox and performs the actual routing when an  â€¦\n"],["ActionMailbox::Router::Route","","classes/ActionMailbox/Router/Route.html","","<p>Encapsulates a route, which can then be matched against an inbound_email and provide a lookup of the â€¦\n"],["ActionMailbox::Router::RoutingError","","classes/ActionMailbox/Router/RoutingError.html","",""],["ActionMailbox::Routing","","classes/ActionMailbox/Routing.html","","<p>See ActionMailbox::Base for how to specify routing.\n"],["ActionMailbox::RoutingJob","","classes/ActionMailbox/RoutingJob.html","","<p>Routing a new InboundEmail is an asynchronous operation, which allows the ingress controllers to quickly â€¦\n"],["ActionMailbox::TestCase","","classes/ActionMailbox/TestCase.html","",""],["ActionMailbox::TestHelper","","classes/ActionMailbox/TestHelper.html","",""],["ActionMailbox::VERSION","","classes/ActionMailbox/VERSION.html","",""],["ActionMailer","","classes/ActionMailer.html","",""],["ActionMailer::Base","","classes/ActionMailer/Base.html","","<p>Action Mailer allows you to send email from your application using a mailer model and views.\n<p>Mailer Models â€¦\n"],["ActionMailer::Base::LateAttachmentsProxy","","classes/ActionMailer/Base/LateAttachmentsProxy.html","",""],["ActionMailer::Collector","","classes/ActionMailer/Collector.html","",""],["ActionMailer::DeliveryMethods","","classes/ActionMailer/DeliveryMethods.html","","<p>This module handles everything related to mail delivery, from registering new delivery methods to configuring â€¦\n"],["ActionMailer::DeliveryMethods::ClassMethods","","classes/ActionMailer/DeliveryMethods/ClassMethods.html","","<p>Helpers for creating and wrapping delivery behavior, used by DeliveryMethods.\n"],["ActionMailer::InlinePreviewInterceptor","","classes/ActionMailer/InlinePreviewInterceptor.html","","<p>Implements a mailer preview interceptor that converts image tag src attributes that use inline cid: style â€¦\n"],["ActionMailer::LogSubscriber","","classes/ActionMailer/LogSubscriber.html","","<p>Implements the ActiveSupport::LogSubscriber for logging notifications when email is delivered or received. â€¦\n"],["ActionMailer::MailHelper","","classes/ActionMailer/MailHelper.html","","<p>Provides helper methods for ActionMailer::Base that can be used for easily formatting messages, accessing â€¦\n"],["ActionMailer::MessageDelivery","","classes/ActionMailer/MessageDelivery.html","","<p>The <code>ActionMailer::MessageDelivery</code> class is used by ActionMailer::Base when creating a new mailer. <code>MessageDelivery</code> â€¦\n"],["ActionMailer::NonInferrableMailerError","","classes/ActionMailer/NonInferrableMailerError.html","",""],["ActionMailer::Parameterized","","classes/ActionMailer/Parameterized.html","","<p>Provides the option to parameterize mailers in order to share instance variable setup, processing, and â€¦\n"],["ActionMailer::Parameterized::ClassMethods","","classes/ActionMailer/Parameterized/ClassMethods.html","",""],["ActionMailer::Preview","","classes/ActionMailer/Preview.html","",""],["ActionMailer::Previews","","classes/ActionMailer/Previews.html","",""],["ActionMailer::Previews::ClassMethods","","classes/ActionMailer/Previews/ClassMethods.html","",""],["ActionMailer::Rescuable","","classes/ActionMailer/Rescuable.html","","<p>Provides <code>rescue_from</code> for mailers. Wraps mailer action processing, mail job processing, and mail delivery. â€¦\n"],["ActionMailer::TestCase","","classes/ActionMailer/TestCase.html","",""],["ActionMailer::TestCase::Behavior","","classes/ActionMailer/TestCase/Behavior.html","",""],["ActionMailer::TestCase::Behavior::ClassMethods","","classes/ActionMailer/TestCase/Behavior/ClassMethods.html","",""],["ActionMailer::TestCase::ClearTestDeliveries","","classes/ActionMailer/TestCase/ClearTestDeliveries.html","",""],["ActionMailer::TestHelper","","classes/ActionMailer/TestHelper.html","","<p>Provides helper methods for testing Action Mailer, including #assert_emails and #assert_no_emails.\n"],["ActionMailer::VERSION","","classes/ActionMailer/VERSION.html","",""],["ActionText","","classes/ActionText.html","",""],["ActionText::Attachable","","classes/ActionText/Attachable.html","",""],["ActionText::Attachables","","classes/ActionText/Attachables.html","",""],["ActionText::Attachables::ContentAttachment","","classes/ActionText/Attachables/ContentAttachment.html","",""],["ActionText::Attachables::MissingAttachable","","classes/ActionText/Attachables/MissingAttachable.html","",""],["ActionText::Attachables::RemoteImage","","classes/ActionText/Attachables/RemoteImage.html","",""],["ActionText::Attachment","","classes/ActionText/Attachment.html","",""],["ActionText::AttachmentGallery","","classes/ActionText/AttachmentGallery.html","",""],["ActionText::Attachments","","classes/ActionText/Attachments.html","",""],["ActionText::Attachments::Caching","","classes/ActionText/Attachments/Caching.html","",""],["ActionText::Attachments::Minification","","classes/ActionText/Attachments/Minification.html","",""],["ActionText::Attachments::TrixConversion","","classes/ActionText/Attachments/TrixConversion.html","",""],["ActionText::Attribute","","classes/ActionText/Attribute.html","",""],["ActionText::Content","","classes/ActionText/Content.html","",""],["ActionText::ContentHelper","","classes/ActionText/ContentHelper.html","",""],["ActionText::EncryptedRichText","","classes/ActionText/EncryptedRichText.html","",""],["ActionText::Encryption","","classes/ActionText/Encryption.html","",""],["ActionText::Engine","","classes/ActionText/Engine.html","",""],["ActionText::FixtureSet","","classes/ActionText/FixtureSet.html","","<p>Fixtures are a way of organizing data that you want to test against; in short, sample data.\n<p>To learn more â€¦\n"],["ActionText::Fragment","","classes/ActionText/Fragment.html","",""],["ActionText::HtmlConversion","","classes/ActionText/HtmlConversion.html","",""],["ActionText::PlainTextConversion","","classes/ActionText/PlainTextConversion.html","",""],["ActionText::RichText","","classes/ActionText/RichText.html","","<p>The RichText record holds the content produced by the Trix editor in a serialized <code>body</code> attribute. It â€¦\n"],["ActionText::Serialization","","classes/ActionText/Serialization.html","",""],["ActionText::SystemTestHelper","","classes/ActionText/SystemTestHelper.html","",""],["ActionText::TagHelper","","classes/ActionText/TagHelper.html","",""],["ActionText::TrixAttachment","","classes/ActionText/TrixAttachment.html","",""],["ActionText::VERSION","","classes/ActionText/VERSION.html","",""],["ActionView","","classes/ActionView.html","",""],["ActionView::AbstractRenderer","","classes/ActionView/AbstractRenderer.html","",""],["ActionView::AbstractRenderer::RenderedCollection","","classes/ActionView/AbstractRenderer/RenderedCollection.html","",""],["ActionView::AbstractRenderer::RenderedCollection::EmptyCollection","","classes/ActionView/AbstractRenderer/RenderedCollection/EmptyCollection.html","",""],["ActionView::Base","","classes/ActionView/Base.html","","<p>Action View Base\n<p>Action View templates can be written in several ways. If the template file has a <code>.erb</code> â€¦\n"],["ActionView::CacheExpiry","","classes/ActionView/CacheExpiry.html","",""],["ActionView::CacheExpiry::Executor","","classes/ActionView/CacheExpiry/Executor.html","",""],["ActionView::CacheExpiry::ViewModificationWatcher","","classes/ActionView/CacheExpiry/ViewModificationWatcher.html","",""],["ActionView::Context","","classes/ActionView/Context.html","","<p>Action View Context\n<p>Action View contexts are supplied to Action Controller to render a template. The default â€¦\n"],["ActionView::Digestor","","classes/ActionView/Digestor.html","",""],["ActionView::Digestor::Injected","","classes/ActionView/Digestor/Injected.html","",""],["ActionView::Digestor::Missing","","classes/ActionView/Digestor/Missing.html","",""],["ActionView::Digestor::Node","","classes/ActionView/Digestor/Node.html","",""],["ActionView::Digestor::NullLogger","","classes/ActionView/Digestor/NullLogger.html","",""],["ActionView::Digestor::Partial","","classes/ActionView/Digestor/Partial.html","",""],["ActionView::FileSystemResolver","","classes/ActionView/FileSystemResolver.html","","<p>A resolver that loads files from the filesystem.\n"],["ActionView::FixtureResolver","","classes/ActionView/FixtureResolver.html","","<p>Use FixtureResolver in your tests to simulate the presence of files on the file system. This is used â€¦\n"],["ActionView::Helpers","","classes/ActionView/Helpers.html","",""],["ActionView::Helpers::ActiveModelHelper","","classes/ActionView/Helpers/ActiveModelHelper.html","",""],["ActionView::Helpers::ActiveModelInstanceTag","","classes/ActionView/Helpers/ActiveModelInstanceTag.html","",""],["ActionView::Helpers::AssetTagHelper","","classes/ActionView/Helpers/AssetTagHelper.html","","<p>This module provides methods for generating HTML that links views to assets such as images, JavaScripts â€¦\n"],["ActionView::Helpers::AssetUrlHelper","","classes/ActionView/Helpers/AssetUrlHelper.html","","<p>This module provides methods for generating asset paths and URLs.\n\n<pre><code>image_path(&quot;rails.png&quot;)\n# =&gt; &quot;/assets/rails.png&quot; ...\n</code></pre>\n"],["ActionView::Helpers::AtomFeedHelper","","classes/ActionView/Helpers/AtomFeedHelper.html","",""],["ActionView::Helpers::CacheHelper","","classes/ActionView/Helpers/CacheHelper.html","",""],["ActionView::Helpers::CacheHelper::UncacheableFragmentError","","classes/ActionView/Helpers/CacheHelper/UncacheableFragmentError.html","",""],["ActionView::Helpers::CaptureHelper","","classes/ActionView/Helpers/CaptureHelper.html","","<p>CaptureHelper exposes methods to let you extract generated markup which can be used in other parts of â€¦\n"],["ActionView::Helpers::CspHelper","","classes/ActionView/Helpers/CspHelper.html","",""],["ActionView::Helpers::CsrfHelper","","classes/ActionView/Helpers/CsrfHelper.html","",""],["ActionView::Helpers::DateHelper","","classes/ActionView/Helpers/DateHelper.html","","<p>Action View Date Helpers\n<p>The Date Helper primarily creates select/option tags for different kinds of dates â€¦\n"],["ActionView::Helpers::DebugHelper","","classes/ActionView/Helpers/DebugHelper.html","",""],["ActionView::Helpers::FormBuilder","","classes/ActionView/Helpers/FormBuilder.html","","<p>A <code>FormBuilder</code> object is associated with a particular model object and allows you to generate fields associated â€¦\n"],["ActionView::Helpers::FormHelper","","classes/ActionView/Helpers/FormHelper.html","","<p>Form helpers are designed to make working with resources much easier compared to using vanilla HTML. â€¦\n"],["ActionView::Helpers::FormOptionsHelper","","classes/ActionView/Helpers/FormOptionsHelper.html","","<p>Provides a number of methods for turning different kinds of containers into a set of option tags.\n<p>The â€¦\n"],["ActionView::Helpers::FormTagHelper","","classes/ActionView/Helpers/FormTagHelper.html","","<p>Provides a number of methods for creating form tags that don&#39;t rely on an Active Record object assigned â€¦\n"],["ActionView::Helpers::JavaScriptHelper","","classes/ActionView/Helpers/JavaScriptHelper.html","",""],["ActionView::Helpers::NumberHelper","","classes/ActionView/Helpers/NumberHelper.html","","<p>Provides methods for converting numbers into formatted strings. Methods are provided for phone numbers, â€¦\n"],["ActionView::Helpers::NumberHelper::InvalidNumberError","","classes/ActionView/Helpers/NumberHelper/InvalidNumberError.html","","<p>Raised when argument <code>number</code> param given to the helpers is invalid and the option <code>:raise</code> is set to  <code>true</code> â€¦\n"],["ActionView::Helpers::OutputSafetyHelper","","classes/ActionView/Helpers/OutputSafetyHelper.html","",""],["ActionView::Helpers::RenderingHelper","","classes/ActionView/Helpers/RenderingHelper.html","","<p>Action View Rendering\n<p>Implements methods that allow rendering from a view context. In order to use this â€¦\n"],["ActionView::Helpers::SanitizeHelper","","classes/ActionView/Helpers/SanitizeHelper.html","","<p>The SanitizeHelper module provides a set of methods for scrubbing text of undesired HTML elements. These â€¦\n"],["ActionView::Helpers::TagHelper","","classes/ActionView/Helpers/TagHelper.html","","<p>Provides methods to generate HTML tags programmatically both as a modern HTML5 compliant builder style â€¦\n"],["ActionView::Helpers::Tags","","classes/ActionView/Helpers/Tags.html","",""],["ActionView::Helpers::Tags::ActionText","","classes/ActionView/Helpers/Tags/ActionText.html","",""],["ActionView::Helpers::TextHelper","","classes/ActionView/Helpers/TextHelper.html","","<p>The TextHelper module provides a set of methods for filtering, formatting and transforming strings, which â€¦\n"],["ActionView::Helpers::TranslationHelper","","classes/ActionView/Helpers/TranslationHelper.html","",""],["ActionView::Helpers::UrlHelper","","classes/ActionView/Helpers/UrlHelper.html","","<p>Provides a set of methods for making links and getting URLs that depend on the routing subsystem (see â€¦\n"],["ActionView::Helpers::UrlHelper::ClassMethods","","classes/ActionView/Helpers/UrlHelper/ClassMethods.html","",""],["ActionView::Layouts","","classes/ActionView/Layouts.html","","<p>Layouts reverse the common pattern of including shared headers and footers in many templates to isolate â€¦\n"],["ActionView::Layouts::ClassMethods","","classes/ActionView/Layouts/ClassMethods.html","",""],["ActionView::LogSubscriber","","classes/ActionView/LogSubscriber.html","","<p>Action View Log Subscriber\n<p>Provides functionality so that Rails can output logs from Action View.\n"],["ActionView::LookupContext","","classes/ActionView/LookupContext.html","",""],["ActionView::LookupContext::DetailsCache","","classes/ActionView/LookupContext/DetailsCache.html","","<p>Add caching behavior on top of Details.\n"],["ActionView::LookupContext::ViewPaths","","classes/ActionView/LookupContext/ViewPaths.html","","<p>Helpers related to template lookup using the lookup context information.\n"],["ActionView::NullResolver","","classes/ActionView/NullResolver.html","",""],["ActionView::PartialIteration","","classes/ActionView/PartialIteration.html","",""],["ActionView::PartialRenderer","","classes/ActionView/PartialRenderer.html","","<p>Action View Partials\n<p>There&#39;s also a convenience method for rendering sub templates within the current â€¦\n"],["ActionView::RecordIdentifier","","classes/ActionView/RecordIdentifier.html","","<p>RecordIdentifier encapsulates methods used by various ActionView helpers to associate records with DOM â€¦\n"],["ActionView::Renderer","","classes/ActionView/Renderer.html","","<p>This is the main entry point for rendering. It basically delegates to other objects like TemplateRenderer â€¦\n"],["ActionView::Rendering","","classes/ActionView/Rendering.html","",""],["ActionView::Rendering::ClassMethods","","classes/ActionView/Rendering/ClassMethods.html","",""],["ActionView::Resolver","","classes/ActionView/Resolver.html","","<p>Action View Resolver\n"],["ActionView::RoutingUrlFor","","classes/ActionView/RoutingUrlFor.html","",""],["ActionView::Template","","classes/ActionView/Template.html","","<p>Action View Template\n<p>Action View Renderable Template for objects that respond to #render_in\n"],["ActionView::Template::Handlers","","classes/ActionView/Template/Handlers.html","",""],["ActionView::Template::Handlers::Builder","","classes/ActionView/Template/Handlers/Builder.html","",""],["ActionView::Template::Handlers::ERB","","classes/ActionView/Template/Handlers/ERB.html","",""],["ActionView::Template::Handlers::Html","","classes/ActionView/Template/Handlers/Html.html","",""],["ActionView::Template::Handlers::Raw","","classes/ActionView/Template/Handlers/Raw.html","",""],["ActionView::Template::Sources","","classes/ActionView/Template/Sources.html","",""],["ActionView::Template::Sources::File","","classes/ActionView/Template/Sources/File.html","",""],["ActionView::Template::Types","","classes/ActionView/Template/Types.html","",""],["ActionView::Template::Types::Type","","classes/ActionView/Template/Types/Type.html","",""],["ActionView::TemplateDetails","","classes/ActionView/TemplateDetails.html","",""],["ActionView::TemplateDetails::Requested","","classes/ActionView/TemplateDetails/Requested.html","",""],["ActionView::TemplatePath","","classes/ActionView/TemplatePath.html","","<p>Represents a template path within ActionView&#39;s lookup and rendering system, like â€œusers/showâ€ â€¦\n"],["ActionView::TestCase","","classes/ActionView/TestCase.html","","<p>Action View Test Case\n"],["ActionView::TestCase::Behavior","","classes/ActionView/TestCase/Behavior.html","",""],["ActionView::TestCase::Behavior::ClassMethods","","classes/ActionView/TestCase/Behavior/ClassMethods.html","",""],["ActionView::TestCase::Behavior::Locals","","classes/ActionView/TestCase/Behavior/Locals.html","",""],["ActionView::TestCase::Behavior::RenderedViewsCollection","","classes/ActionView/TestCase/Behavior/RenderedViewsCollection.html","","<p>Need to experiment if this priority is the best one: rendered =&gt; output_buffer\n"],["ActionView::TestCase::TestController","","classes/ActionView/TestCase/TestController.html","",""],["ActionView::UnboundTemplate","","classes/ActionView/UnboundTemplate.html","",""],["ActionView::VERSION","","classes/ActionView/VERSION.html","",""],["ActionView::ViewPaths","","classes/ActionView/ViewPaths.html","",""],["ActionView::ViewPaths::ClassMethods","","classes/ActionView/ViewPaths/ClassMethods.html","",""],["ActiveJob","","classes/ActiveJob.html","",""],["ActiveJob::Arguments","","classes/ActiveJob/Arguments.html","",""],["ActiveJob::Arguments::Hash","","classes/ActiveJob/Arguments/Hash.html","",""],["ActiveJob::Base","","classes/ActiveJob/Base.html","","<p>Active Job\n<p>Active Job objects can be configured to work with different backend queuing frameworks. To â€¦\n"],["ActiveJob::Callbacks","","classes/ActiveJob/Callbacks.html","","<p>Active Job Callbacks\n<p>Active Job provides hooks during the life cycle of a job. Callbacks allow you to â€¦\n"],["ActiveJob::Callbacks::ClassMethods","","classes/ActiveJob/Callbacks/ClassMethods.html","","<p>These methods will be included into any Active Job object, adding callbacks for <code>perform</code> and <code>enqueue</code> methods. â€¦\n"],["ActiveJob::Core","","classes/ActiveJob/Core.html","","<p>Provides general behavior that will be included into every Active Job object that inherits from ActiveJob::Base â€¦\n"],["ActiveJob::Core::ClassMethods","","classes/ActiveJob/Core/ClassMethods.html","","<p>These methods will be included into any Active Job object, adding helpers for de/serialization and creation â€¦\n"],["ActiveJob::DeserializationError","","classes/ActiveJob/DeserializationError.html","","<p>Raised when an exception is raised during job arguments deserialization.\n<p>Wraps the original exception â€¦\n"],["ActiveJob::EnqueueError","","classes/ActiveJob/EnqueueError.html","","<p>Can be raised by adapters if they wish to communicate to the caller a reason why the adapter was unexpectedly â€¦\n"],["ActiveJob::Enqueuing","","classes/ActiveJob/Enqueuing.html","",""],["ActiveJob::Enqueuing::ClassMethods","","classes/ActiveJob/Enqueuing/ClassMethods.html","","<p>Includes the <code>perform_later</code> method for job initialization.\n"],["ActiveJob::Exceptions","","classes/ActiveJob/Exceptions.html","","<p>Provides behavior for retrying and discarding jobs on exceptions.\n"],["ActiveJob::Exceptions::ClassMethods","","classes/ActiveJob/Exceptions/ClassMethods.html","",""],["ActiveJob::Execution","","classes/ActiveJob/Execution.html","",""],["ActiveJob::Execution::ClassMethods","","classes/ActiveJob/Execution/ClassMethods.html","","<p>Includes methods for executing and performing jobs instantly.\n"],["ActiveJob::QueueAdapter","","classes/ActiveJob/QueueAdapter.html","",""],["ActiveJob::QueueAdapter::ClassMethods","","classes/ActiveJob/QueueAdapter/ClassMethods.html","","<p>Includes the setter method for changing the active queue adapter.\n"],["ActiveJob::QueueAdapters","","classes/ActiveJob/QueueAdapters.html","","<p>Active Job adapters\n<p>Active Job has adapters for the following queuing backends:\n<p>Backburner\n"],["ActiveJob::QueueAdapters::AsyncAdapter","","classes/ActiveJob/QueueAdapters/AsyncAdapter.html","","<p>Active Job Async adapter\n<p>The Async adapter runs jobs with an in-process thread pool.\n<p>This is the default â€¦\n"],["ActiveJob::QueueAdapters::BackburnerAdapter","","classes/ActiveJob/QueueAdapters/BackburnerAdapter.html","","<p>Backburner adapter for Active Job\n<p>Backburner is a beanstalkd-powered job queue that can handle a very â€¦\n"],["ActiveJob::QueueAdapters::DelayedJobAdapter","","classes/ActiveJob/QueueAdapters/DelayedJobAdapter.html","","<p>Delayed Job adapter for Active Job\n<p>Delayed::Job (or DJ) encapsulates the common pattern of asynchronously â€¦\n"],["ActiveJob::QueueAdapters::InlineAdapter","","classes/ActiveJob/QueueAdapters/InlineAdapter.html","","<p>Active Job Inline adapter\n<p>When enqueuing jobs with the Inline adapter the job will be executed immediately. â€¦\n"],["ActiveJob::QueueAdapters::QueAdapter","","classes/ActiveJob/QueueAdapters/QueAdapter.html","","<p>Que adapter for Active Job\n<p>Que is a high-performance alternative to DelayedJob or QueueClassic that improves â€¦\n"],["ActiveJob::QueueAdapters::QueueClassicAdapter","","classes/ActiveJob/QueueAdapters/QueueClassicAdapter.html","","<p>queue_classic adapter for Active Job\n<p>queue_classic provides a simple interface to a PostgreSQL-backed â€¦\n"],["ActiveJob::QueueAdapters::ResqueAdapter","","classes/ActiveJob/QueueAdapters/ResqueAdapter.html","","<p>Resque adapter for Active Job\n<p>Resque (pronounced like â€œrescueâ€) is a Redis-backed library for â€¦\n"],["ActiveJob::QueueAdapters::SidekiqAdapter","","classes/ActiveJob/QueueAdapters/SidekiqAdapter.html","","<p>Sidekiq adapter for Active Job\n<p>Simple, efficient background processing for Ruby. Sidekiq uses threads â€¦\n"],["ActiveJob::QueueAdapters::SneakersAdapter","","classes/ActiveJob/QueueAdapters/SneakersAdapter.html","","<p>Sneakers adapter for Active Job\n<p>A high-performance RabbitMQ background processing framework for Ruby. â€¦\n"],["ActiveJob::QueueAdapters::SuckerPunchAdapter","","classes/ActiveJob/QueueAdapters/SuckerPunchAdapter.html","","<p>Sucker Punch adapter for Active Job\n<p>Sucker Punch is a single-process Ruby asynchronous processing library. â€¦\n"],["ActiveJob::QueueAdapters::TestAdapter","","classes/ActiveJob/QueueAdapters/TestAdapter.html","","<p>Test adapter for Active Job\n<p>The test adapter should be used only in testing. Along with ActiveJob::TestCase â€¦\n"],["ActiveJob::QueueName","","classes/ActiveJob/QueueName.html","",""],["ActiveJob::QueueName::ClassMethods","","classes/ActiveJob/QueueName/ClassMethods.html","","<p>Includes the ability to override the default queue name and prefix.\n"],["ActiveJob::QueuePriority","","classes/ActiveJob/QueuePriority.html","",""],["ActiveJob::QueuePriority::ClassMethods","","classes/ActiveJob/QueuePriority/ClassMethods.html","","<p>Includes the ability to override the default queue priority.\n"],["ActiveJob::SerializationError","","classes/ActiveJob/SerializationError.html","","<p>Raised when an unsupported argument type is set as a job argument. We currently support String, Integer â€¦\n"],["ActiveJob::Serializers","","classes/ActiveJob/Serializers.html","",""],["ActiveJob::Serializers::ObjectSerializer","","classes/ActiveJob/Serializers/ObjectSerializer.html","","<p>Base class for serializing and deserializing custom objects.\n<p>Example:\n\n<pre><code>class MoneySerializer &lt; ActiveJob::Serializers::ObjectSerializer ...\n</code></pre>\n"],["ActiveJob::Serializers::RangeSerializer","","classes/ActiveJob/Serializers/RangeSerializer.html","",""],["ActiveJob::TestCase","","classes/ActiveJob/TestCase.html","",""],["ActiveJob::TestHelper","","classes/ActiveJob/TestHelper.html","","<p>Provides helper methods for testing Active Job\n"],["ActiveJob::TestHelper::TestQueueAdapter","","classes/ActiveJob/TestHelper/TestQueueAdapter.html","",""],["ActiveJob::TestHelper::TestQueueAdapter::ClassMethods","","classes/ActiveJob/TestHelper/TestQueueAdapter/ClassMethods.html","",""],["ActiveJob::VERSION","","classes/ActiveJob/VERSION.html","",""],["ActiveModel","","classes/ActiveModel.html","",""],["ActiveModel::API","","classes/ActiveModel/API.html","","<p>Active Model API\n<p>Includes the required interface for an object to interact with Action Pack and Action â€¦\n"],["ActiveModel::AttributeAssignment","","classes/ActiveModel/AttributeAssignment.html","",""],["ActiveModel::AttributeMethods","","classes/ActiveModel/AttributeMethods.html","","<p>Active Model Attribute Methods\n<p>Provides a way to add prefixes and suffixes to your methods as well as â€¦\n"],["ActiveModel::AttributeMethods::ClassMethods","","classes/ActiveModel/AttributeMethods/ClassMethods.html","",""],["ActiveModel::Attributes","","classes/ActiveModel/Attributes.html","",""],["ActiveModel::Attributes::ClassMethods","","classes/ActiveModel/Attributes/ClassMethods.html","",""],["ActiveModel::Callbacks","","classes/ActiveModel/Callbacks.html","","<p>Active Model Callbacks\n<p>Provides an interface for any class to have Active Record like callbacks.\n<p>Like the â€¦\n"],["ActiveModel::Conversion","","classes/ActiveModel/Conversion.html","","<p>Active Model Conversion\n<p>Handles default conversions: to_model, to_key, to_param, and to_partial_path. â€¦\n"],["ActiveModel::Dirty","","classes/ActiveModel/Dirty.html","","<p>Active Model Dirty\n<p>Provides a way to track changes in your object in the same way as Active Record does. â€¦\n"],["ActiveModel::EachValidator","","classes/ActiveModel/EachValidator.html","","<p><code>EachValidator</code> is a validator which iterates through the attributes given in the options hash invoking â€¦\n"],["ActiveModel::Error","","classes/ActiveModel/Error.html","","<p>Active Model Error\n<p>Represents one single error\n"],["ActiveModel::Errors","","classes/ActiveModel/Errors.html","","<p>Active Model Errors\n<p>Provides error related functionalities you can include in your object for handling â€¦\n"],["ActiveModel::ForbiddenAttributesError","","classes/ActiveModel/ForbiddenAttributesError.html","","<p>Raised when forbidden attributes are used for mass assignment.\n\n<pre><code>class Person &lt; ActiveRecord::Base\nend\n ...\n</code></pre>\n"],["ActiveModel::Lint","","classes/ActiveModel/Lint.html","",""],["ActiveModel::Lint::Tests","","classes/ActiveModel/Lint/Tests.html","","<p>Active Model Lint Tests\n<p>You can test whether an object is compliant with the Active Model API by including â€¦\n"],["ActiveModel::MissingAttributeError","","classes/ActiveModel/MissingAttributeError.html","","<p>Raised when an attribute is not defined.\n\n<pre><code>class User &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nuser = ...\n</code></pre>\n"],["ActiveModel::Model","","classes/ActiveModel/Model.html","","<p>Active Model Basic Model\n<p>Allows implementing models similar to ActiveRecord::Base. Includes ActiveModel::API â€¦\n"],["ActiveModel::Name","","classes/ActiveModel/Name.html","",""],["ActiveModel::Naming","","classes/ActiveModel/Naming.html","","<p>Active Model Naming\n<p>Creates a <code>model_name</code> method on your object.\n<p>To implement, just extend ActiveModel::Naming â€¦\n"],["ActiveModel::NestedError","","classes/ActiveModel/NestedError.html","",""],["ActiveModel::RangeError","","classes/ActiveModel/RangeError.html","","<p>Raised when attribute values are out of range.\n"],["ActiveModel::SecurePassword","","classes/ActiveModel/SecurePassword.html","",""],["ActiveModel::SecurePassword::ClassMethods","","classes/ActiveModel/SecurePassword/ClassMethods.html","",""],["ActiveModel::SecurePassword::InstanceMethodsOnActivation","","classes/ActiveModel/SecurePassword/InstanceMethodsOnActivation.html","",""],["ActiveModel::Serialization","","classes/ActiveModel/Serialization.html","","<p>Active Model Serialization\n<p>Provides a basic serialization to a serializable_hash for your objects.\n<p>A minimal â€¦\n"],["ActiveModel::Serializers","","classes/ActiveModel/Serializers.html","",""],["ActiveModel::Serializers::JSON","","classes/ActiveModel/Serializers/JSON.html","","<p>Active Model JSON Serializer\n"],["ActiveModel::StrictValidationFailed","","classes/ActiveModel/StrictValidationFailed.html","","<p>Raised when a validation cannot be corrected by end users and are considered exceptional.\n\n<pre><code>class Person ...\n</code></pre>\n"],["ActiveModel::Translation","","classes/ActiveModel/Translation.html","","<p>Active Model Translation\n<p>Provides integration between your object and the Rails internationalization (i18n) â€¦\n"],["ActiveModel::Type","","classes/ActiveModel/Type.html","",""],["ActiveModel::Type::Boolean","","classes/ActiveModel/Type/Boolean.html","","<p>Active Model Type Boolean\n<p>A class that behaves like a boolean type, including rules for coercion of user â€¦\n"],["ActiveModel::Type::Helpers","","classes/ActiveModel/Type/Helpers.html","",""],["ActiveModel::Type::Helpers::AcceptsMultiparameterTime","","classes/ActiveModel/Type/Helpers/AcceptsMultiparameterTime.html","",""],["ActiveModel::Type::Helpers::AcceptsMultiparameterTime::InstanceMethods","","classes/ActiveModel/Type/Helpers/AcceptsMultiparameterTime/InstanceMethods.html","",""],["ActiveModel::Type::Helpers::Mutable","","classes/ActiveModel/Type/Helpers/Mutable.html","",""],["ActiveModel::Type::Helpers::Numeric","","classes/ActiveModel/Type/Helpers/Numeric.html","",""],["ActiveModel::Type::Helpers::TimeValue","","classes/ActiveModel/Type/Helpers/TimeValue.html","",""],["ActiveModel::Type::Helpers::Timezone","","classes/ActiveModel/Type/Helpers/Timezone.html","",""],["ActiveModel::Type::Value","","classes/ActiveModel/Type/Value.html","",""],["ActiveModel::UnknownAttributeError","","classes/ActiveModel/UnknownAttributeError.html","","<p>Raised when unknown attributes are supplied via mass assignment.\n\n<pre><code>class Person\n  include ActiveModel::AttributeAssignment ...\n</code></pre>\n"],["ActiveModel::VERSION","","classes/ActiveModel/VERSION.html","",""],["ActiveModel::ValidationError","","classes/ActiveModel/ValidationError.html","","<p>Active Model ValidationError\n<p>Raised by <code>validate!</code> when the model is invalid. Use the <code>model</code> method to retrieve â€¦\n"],["ActiveModel::Validations","","classes/ActiveModel/Validations.html","","<p>Active Model Validations\n<p>Provides a full validation framework to your objects.\n<p>A minimal implementation â€¦\n"],["ActiveModel::Validations::AcceptanceValidator","","classes/ActiveModel/Validations/AcceptanceValidator.html","",""],["ActiveModel::Validations::AcceptanceValidator::LazilyDefineAttributes","","classes/ActiveModel/Validations/AcceptanceValidator/LazilyDefineAttributes.html","",""],["ActiveModel::Validations::Callbacks","","classes/ActiveModel/Validations/Callbacks.html","","<p>Active Model Validation Callbacks\n<p>Provides an interface for any class to have <code>before_validation</code> and <code>after_validation</code> â€¦\n"],["ActiveModel::Validations::Callbacks::ClassMethods","","classes/ActiveModel/Validations/Callbacks/ClassMethods.html","",""],["ActiveModel::Validations::ClassMethods","","classes/ActiveModel/Validations/ClassMethods.html","",""],["ActiveModel::Validations::HelperMethods","","classes/ActiveModel/Validations/HelperMethods.html","",""],["ActiveModel::Validator","","classes/ActiveModel/Validator.html","","<p>Active Model Validator\n<p>A simple base class that can be used along with ActiveModel::Validations::ClassMethods.validates_with â€¦\n"],["ActiveRecord","","classes/ActiveRecord.html","",""],["ActiveRecord::ActiveJobRequiredError","","classes/ActiveRecord/ActiveJobRequiredError.html","","<p>Raised when trying to use a feature in Active Record which requires Active Job but the gem is not present. â€¦\n"],["ActiveRecord::ActiveRecordError","","classes/ActiveRecord/ActiveRecordError.html","","<p>Active Record Errors\n<p>Generic Active Record exception class.\n"],["ActiveRecord::AdapterNotFound","","classes/ActiveRecord/AdapterNotFound.html","","<p>Raised when Active Record cannot find database adapter specified in <code>config/database.yml</code> or programmatically. â€¦\n"],["ActiveRecord::AdapterNotSpecified","","classes/ActiveRecord/AdapterNotSpecified.html","","<p>Raised when adapter not specified on connection (or configuration file <code>config/database.yml</code> misses adapter â€¦\n"],["ActiveRecord::AdapterTimeout","","classes/ActiveRecord/AdapterTimeout.html","","<p>AdapterTimeout will be raised when database clients times out while waiting from the server.\n"],["ActiveRecord::Aggregations","","classes/ActiveRecord/Aggregations.html","","<p>See ActiveRecord::Aggregations::ClassMethods for documentation\n"],["ActiveRecord::Aggregations::ClassMethods","","classes/ActiveRecord/Aggregations/ClassMethods.html","","<p>Active Record implements aggregation through a macro-like class method called #composed_of for representing â€¦\n"],["ActiveRecord::AssociationTypeMismatch","","classes/ActiveRecord/AssociationTypeMismatch.html","","<p>Raised when an object assigned to an association has an incorrect type.\n\n<pre><code>class Ticket &lt; ActiveRecord::Base ...\n</code></pre>\n"],["ActiveRecord::Associations","","classes/ActiveRecord/Associations.html","",""],["ActiveRecord::Associations::ClassMethods","","classes/ActiveRecord/Associations/ClassMethods.html","","<p>Associations are a set of macro-like class methods for tying objects together through foreign keys.  â€¦\n"],["ActiveRecord::Associations::CollectionProxy","","classes/ActiveRecord/Associations/CollectionProxy.html","","<p>Collection proxies in Active Record are middlemen between an <code>association</code>, and its <code>target</code> result set. â€¦\n"],["ActiveRecord::Associations::Preloader","","classes/ActiveRecord/Associations/Preloader.html","",""],["ActiveRecord::Associations::Preloader::Association","","classes/ActiveRecord/Associations/Preloader/Association.html","",""],["ActiveRecord::Associations::Preloader::Association::LoaderQuery","","classes/ActiveRecord/Associations/Preloader/Association/LoaderQuery.html","",""],["ActiveRecord::Associations::Preloader::Association::LoaderRecords","","classes/ActiveRecord/Associations/Preloader/Association/LoaderRecords.html","",""],["ActiveRecord::AsynchronousQueryInsideTransactionError","","classes/ActiveRecord/AsynchronousQueryInsideTransactionError.html","","<p>AsynchronousQueryInsideTransactionError will be raised when attempting to perform an asynchronous query â€¦\n"],["ActiveRecord::AttributeAssignment","","classes/ActiveRecord/AttributeAssignment.html","",""],["ActiveRecord::AttributeAssignmentError","","classes/ActiveRecord/AttributeAssignmentError.html","","<p>Raised when an error occurred while doing a mass assignment to an attribute through the ActiveRecord::Base#attributes= â€¦\n"],["ActiveRecord::AttributeMethods","","classes/ActiveRecord/AttributeMethods.html","","<p>Active Record Attribute Methods\n"],["ActiveRecord::AttributeMethods::BeforeTypeCast","","classes/ActiveRecord/AttributeMethods/BeforeTypeCast.html","","<p>Active Record Attribute Methods Before Type Cast\n<p>ActiveRecord::AttributeMethods::BeforeTypeCast provides â€¦\n"],["ActiveRecord::AttributeMethods::ClassMethods","","classes/ActiveRecord/AttributeMethods/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Dirty","","classes/ActiveRecord/AttributeMethods/Dirty.html","",""],["ActiveRecord::AttributeMethods::Dirty::ClassMethods","","classes/ActiveRecord/AttributeMethods/Dirty/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::PrimaryKey","","classes/ActiveRecord/AttributeMethods/PrimaryKey.html","",""],["ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Query","","classes/ActiveRecord/AttributeMethods/Query.html","",""],["ActiveRecord::AttributeMethods::Read","","classes/ActiveRecord/AttributeMethods/Read.html","",""],["ActiveRecord::AttributeMethods::Serialization","","classes/ActiveRecord/AttributeMethods/Serialization.html","",""],["ActiveRecord::AttributeMethods::Serialization::ClassMethods","","classes/ActiveRecord/AttributeMethods/Serialization/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Serialization::ColumnNotSerializableError","","classes/ActiveRecord/AttributeMethods/Serialization/ColumnNotSerializableError.html","",""],["ActiveRecord::AttributeMethods::TimeZoneConversion","","classes/ActiveRecord/AttributeMethods/TimeZoneConversion.html","",""],["ActiveRecord::AttributeMethods::Write","","classes/ActiveRecord/AttributeMethods/Write.html","",""],["ActiveRecord::Attributes","","classes/ActiveRecord/Attributes.html","","<p>See ActiveRecord::Attributes::ClassMethods for documentation\n"],["ActiveRecord::Attributes::ClassMethods","","classes/ActiveRecord/Attributes/ClassMethods.html","",""],["ActiveRecord::AutosaveAssociation","","classes/ActiveRecord/AutosaveAssociation.html","","<p>Active Record Autosave Association\n<p>AutosaveAssociation is a module that takes care of automatically saving â€¦\n"],["ActiveRecord::Base","","classes/ActiveRecord/Base.html","","<p>Active Record\n<p>Active Record objects don&#39;t specify their attributes directly, but rather infer them â€¦\n"],["ActiveRecord::Batches","","classes/ActiveRecord/Batches.html","",""],["ActiveRecord::Batches::BatchEnumerator","","classes/ActiveRecord/Batches/BatchEnumerator.html","",""],["ActiveRecord::Calculations","","classes/ActiveRecord/Calculations.html","",""],["ActiveRecord::Callbacks","","classes/ActiveRecord/Callbacks.html","","<p>Active Record Callbacks\n<p>Callbacks are hooks into the life cycle of an Active Record object that allow â€¦\n"],["ActiveRecord::Callbacks::ClassMethods","","classes/ActiveRecord/Callbacks/ClassMethods.html","",""],["ActiveRecord::ConfigurationError","","classes/ActiveRecord/ConfigurationError.html","","<p>Raised when association is being configured improperly or user tries to use offset and limit together â€¦\n"],["ActiveRecord::ConnectionAdapters","","classes/ActiveRecord/ConnectionAdapters.html","",""],["ActiveRecord::ConnectionAdapters::AbstractAdapter","","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html","","<p>Active Record supports multiple database systems. AbstractAdapter and related classes form the abstraction â€¦\n"],["ActiveRecord::ConnectionAdapters::AbstractAdapter::Version","","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter/Version.html","",""],["ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html","",""],["ActiveRecord::ConnectionAdapters::Column","","classes/ActiveRecord/ConnectionAdapters/Column.html","",""],["ActiveRecord::ConnectionAdapters::ColumnMethods","","classes/ActiveRecord/ConnectionAdapters/ColumnMethods.html","",""],["ActiveRecord::ConnectionAdapters::ConnectionHandler","","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html","","<p>ConnectionHandler is a collection of ConnectionPool objects. It is used for keeping separate connection â€¦\n"],["ActiveRecord::ConnectionAdapters::ConnectionPool","","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html","","<p>Connection pool base class for managing Active Record database connections.\n<p>Introduction\n<p>A connection pool â€¦\n"],["ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html","","<p>Threadsafe, fair, LIFO queue.  Meant to be used by ConnectionPool with which it shares a Monitor.\n"],["ActiveRecord::ConnectionAdapters::ConnectionPool::Reaper","","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Reaper.html","","<p>Every <code>frequency</code> seconds, the reaper will call <code>reap</code> and <code>flush</code> on <code>pool</code>. A reaper instantiated with a zero â€¦\n"],["ActiveRecord::ConnectionAdapters::DatabaseLimits","","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html","",""],["ActiveRecord::ConnectionAdapters::DatabaseStatements","","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html","",""],["ActiveRecord::ConnectionAdapters::Deduplicable","","classes/ActiveRecord/ConnectionAdapters/Deduplicable.html","",""],["ActiveRecord::ConnectionAdapters::Deduplicable::ClassMethods","","classes/ActiveRecord/ConnectionAdapters/Deduplicable/ClassMethods.html","",""],["ActiveRecord::ConnectionAdapters::MySQL","","classes/ActiveRecord/ConnectionAdapters/MySQL.html","",""],["ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods","","classes/ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html","",""],["ActiveRecord::ConnectionAdapters::MySQL::DatabaseStatements","","classes/ActiveRecord/ConnectionAdapters/MySQL/DatabaseStatements.html","",""],["ActiveRecord::ConnectionAdapters::MySQL::Table","","classes/ActiveRecord/ConnectionAdapters/MySQL/Table.html","",""],["ActiveRecord::ConnectionAdapters::MySQL::TableDefinition","","classes/ActiveRecord/ConnectionAdapters/MySQL/TableDefinition.html","",""],["ActiveRecord::ConnectionAdapters::Mysql2Adapter","","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html","",""],["ActiveRecord::ConnectionAdapters::NullColumn","","classes/ActiveRecord/ConnectionAdapters/NullColumn.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL","","classes/ActiveRecord/ConnectionAdapters/PostgreSQL.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::AlterTable","","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/AlterTable.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::OID","","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/OID.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit","","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Bit.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit::Data","","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Bit/Data.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting","","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/Quoting.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::Table","","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/Table.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::TableDefinition","","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/TableDefinition.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::TypeMetadata","","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/TypeMetadata.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html","","<p>The PostgreSQL adapter works with the native C (github.com/ged/ruby-pg) driver.\n<p>Options:\n<p><code>:host</code> - Defaults â€¦\n"],["ActiveRecord::ConnectionAdapters::QueryCache","","classes/ActiveRecord/ConnectionAdapters/QueryCache.html","",""],["ActiveRecord::ConnectionAdapters::QueryCache::ConnectionPoolConfiguration","","classes/ActiveRecord/ConnectionAdapters/QueryCache/ConnectionPoolConfiguration.html","",""],["ActiveRecord::ConnectionAdapters::Quoting","","classes/ActiveRecord/ConnectionAdapters/Quoting.html","",""],["ActiveRecord::ConnectionAdapters::RealTransaction","","classes/ActiveRecord/ConnectionAdapters/RealTransaction.html","",""],["ActiveRecord::ConnectionAdapters::SQLite3","","classes/ActiveRecord/ConnectionAdapters/SQLite3.html","",""],["ActiveRecord::ConnectionAdapters::SQLite3::DatabaseStatements","","classes/ActiveRecord/ConnectionAdapters/SQLite3/DatabaseStatements.html","",""],["ActiveRecord::ConnectionAdapters::SQLite3::TableDefinition","","classes/ActiveRecord/ConnectionAdapters/SQLite3/TableDefinition.html","",""],["ActiveRecord::ConnectionAdapters::SQLite3Adapter","","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html","","<p>The SQLite3 adapter works with the sqlite3-ruby drivers (available as gem from rubygems.org/gems/sqlite3 â€¦\n"],["ActiveRecord::ConnectionAdapters::SavepointTransaction","","classes/ActiveRecord/ConnectionAdapters/SavepointTransaction.html","",""],["ActiveRecord::ConnectionAdapters::Savepoints","","classes/ActiveRecord/ConnectionAdapters/Savepoints.html","",""],["ActiveRecord::ConnectionAdapters::SchemaCache","","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html","",""],["ActiveRecord::ConnectionAdapters::SchemaStatements","","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html","",""],["ActiveRecord::ConnectionAdapters::SqlTypeMetadata","","classes/ActiveRecord/ConnectionAdapters/SqlTypeMetadata.html","",""],["ActiveRecord::ConnectionAdapters::Table","","classes/ActiveRecord/ConnectionAdapters/Table.html","","<p>Represents an SQL table in an abstract way for updating a table. Also see TableDefinition and connection.create_table â€¦\n"],["ActiveRecord::ConnectionAdapters::TableDefinition","","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html","","<p>Represents the schema of an SQL table in an abstract way. This class provides methods for manipulating â€¦\n"],["ActiveRecord::ConnectionAdapters::TransactionState","","classes/ActiveRecord/ConnectionAdapters/TransactionState.html","",""],["ActiveRecord::ConnectionHandling","","classes/ActiveRecord/ConnectionHandling.html","",""],["ActiveRecord::ConnectionNotEstablished","","classes/ActiveRecord/ConnectionNotEstablished.html","","<p>Raised when connection to the database could not been established (for example when ActiveRecord::Base.connection= â€¦\n"],["ActiveRecord::ConnectionTimeoutError","","classes/ActiveRecord/ConnectionTimeoutError.html","","<p>Raised when a connection could not be obtained within the connection acquisition timeout period: because â€¦\n"],["ActiveRecord::Core","","classes/ActiveRecord/Core.html","",""],["ActiveRecord::Core::ClassMethods","","classes/ActiveRecord/Core/ClassMethods.html","",""],["ActiveRecord::Core::InspectionMask","","classes/ActiveRecord/Core/InspectionMask.html","",""],["ActiveRecord::CounterCache","","classes/ActiveRecord/CounterCache.html","","<p>Active Record Counter Cache\n"],["ActiveRecord::CounterCache::ClassMethods","","classes/ActiveRecord/CounterCache/ClassMethods.html","",""],["ActiveRecord::DangerousAttributeError","","classes/ActiveRecord/DangerousAttributeError.html","","<p>Raised when attribute has a name reserved by Active Record (when attribute has name of one of Active â€¦\n"],["ActiveRecord::DatabaseAlreadyExists","","classes/ActiveRecord/DatabaseAlreadyExists.html","","<p>Raised when creating a database if it exists.\n"],["ActiveRecord::DatabaseConfigurations","","classes/ActiveRecord/DatabaseConfigurations.html","","<p>ActiveRecord::DatabaseConfigurations returns an array of DatabaseConfig objects (either a HashConfig â€¦\n"],["ActiveRecord::DatabaseConfigurations::HashConfig","","classes/ActiveRecord/DatabaseConfigurations/HashConfig.html","","<p>A HashConfig object is created for each database configuration entry that is created from a hash.\n<p>A hash â€¦\n"],["ActiveRecord::DatabaseConfigurations::InvalidConfigurationError","","classes/ActiveRecord/DatabaseConfigurations/InvalidConfigurationError.html","",""],["ActiveRecord::DatabaseConfigurations::UrlConfig","","classes/ActiveRecord/DatabaseConfigurations/UrlConfig.html","","<p>A UrlConfig object is created for each database configuration entry that is created from a URL. This â€¦\n"],["ActiveRecord::DatabaseConnectionError","","classes/ActiveRecord/DatabaseConnectionError.html","","<p>Raised when connection to the database could not been established because it was not able to connect â€¦\n"],["ActiveRecord::Deadlocked","","classes/ActiveRecord/Deadlocked.html","","<p>Deadlocked will be raised when a transaction is rolled back by the database when a deadlock is encountered. â€¦\n"],["ActiveRecord::DelegatedType","","classes/ActiveRecord/DelegatedType.html","","<p>Delegated types\n<p>Class hierarchies can map to relational database tables in many ways. Active Record, for â€¦\n"],["ActiveRecord::DestroyAssociationAsyncError","","classes/ActiveRecord/DestroyAssociationAsyncError.html","",""],["ActiveRecord::DestroyAssociationAsyncJob","","classes/ActiveRecord/DestroyAssociationAsyncJob.html","","<p>Job to destroy the records associated with a destroyed record in background.\n"],["ActiveRecord::DynamicMatchers","","classes/ActiveRecord/DynamicMatchers.html","",""],["ActiveRecord::DynamicMatchers::FindBy","","classes/ActiveRecord/DynamicMatchers/FindBy.html","",""],["ActiveRecord::DynamicMatchers::FindByBang","","classes/ActiveRecord/DynamicMatchers/FindByBang.html","",""],["ActiveRecord::DynamicMatchers::Method","","classes/ActiveRecord/DynamicMatchers/Method.html","",""],["ActiveRecord::EagerLoadPolymorphicError","","classes/ActiveRecord/EagerLoadPolymorphicError.html","","<p>This error is raised when trying to eager load a polymorphic association using a JOIN. Eager loading â€¦\n"],["ActiveRecord::Encryption","","classes/ActiveRecord/Encryption.html","",""],["ActiveRecord::Encryption::Cipher","","classes/ActiveRecord/Encryption/Cipher.html","","<p>The algorithm used for encrypting and decrypting <code>Message</code> objects.\n<p>It uses AES-256-GCM. It will generate â€¦\n"],["ActiveRecord::Encryption::Cipher::Aes256Gcm","","classes/ActiveRecord/Encryption/Cipher/Aes256Gcm.html","","<p>A 256-GCM cipher.\n<p>By default it will use random initialization vectors. For deterministic encryption, â€¦\n"],["ActiveRecord::Encryption::Config","","classes/ActiveRecord/Encryption/Config.html","","<p>Container of configuration options\n"],["ActiveRecord::Encryption::Configurable","","classes/ActiveRecord/Encryption/Configurable.html","","<p>Configuration API for ActiveRecord::Encryption\n"],["ActiveRecord::Encryption::Context","","classes/ActiveRecord/Encryption/Context.html","","<p>An encryption context configures the different entities used to perform encryption:\n<p>A key provider\n<p>A key â€¦\n"],["ActiveRecord::Encryption::Contexts","","classes/ActiveRecord/Encryption/Contexts.html","","<p>ActiveRecord::Encryption uses encryption contexts to configure the different entities used to encrypt/decrypt â€¦\n"],["ActiveRecord::Encryption::DerivedSecretKeyProvider","","classes/ActiveRecord/Encryption/DerivedSecretKeyProvider.html","","<p>A KeyProvider that derives keys from passwords.\n"],["ActiveRecord::Encryption::DeterministicKeyProvider","","classes/ActiveRecord/Encryption/DeterministicKeyProvider.html","","<p>A KeyProvider that derives keys from passwords.\n"],["ActiveRecord::Encryption::EncryptableRecord","","classes/ActiveRecord/Encryption/EncryptableRecord.html","","<p>This is the concern mixed in Active Record models to make them encryptable. It adds the <code>encrypts</code> attribute â€¦\n"],["ActiveRecord::Encryption::EncryptedAttributeType","","classes/ActiveRecord/Encryption/EncryptedAttributeType.html","","<p>An ActiveModel::Type::Value that encrypts/decrypts strings of text.\n<p>This is the central piece that connects â€¦\n"],["ActiveRecord::Encryption::EncryptedFixtures","","classes/ActiveRecord/Encryption/EncryptedFixtures.html","",""],["ActiveRecord::Encryption::EncryptingOnlyEncryptor","","classes/ActiveRecord/Encryption/EncryptingOnlyEncryptor.html","","<p>An encryptor that can encrypt data but can&#39;t decrypt it.\n"],["ActiveRecord::Encryption::Encryptor","","classes/ActiveRecord/Encryption/Encryptor.html","","<p>An encryptor exposes the encryption API that ActiveRecord::Encryption::EncryptedAttributeType uses for â€¦\n"],["ActiveRecord::Encryption::EnvelopeEncryptionKeyProvider","","classes/ActiveRecord/Encryption/EnvelopeEncryptionKeyProvider.html","","<p>Implements a simple envelope encryption approach where:\n<p>It generates a random data-encryption key for â€¦\n"],["ActiveRecord::Encryption::Errors","","classes/ActiveRecord/Encryption/Errors.html","",""],["ActiveRecord::Encryption::Errors::Base","","classes/ActiveRecord/Encryption/Errors/Base.html","",""],["ActiveRecord::Encryption::Errors::Configuration","","classes/ActiveRecord/Encryption/Errors/Configuration.html","",""],["ActiveRecord::Encryption::Errors::Decryption","","classes/ActiveRecord/Encryption/Errors/Decryption.html","",""],["ActiveRecord::Encryption::Errors::Encoding","","classes/ActiveRecord/Encryption/Errors/Encoding.html","",""],["ActiveRecord::Encryption::Errors::EncryptedContentIntegrity","","classes/ActiveRecord/Encryption/Errors/EncryptedContentIntegrity.html","",""],["ActiveRecord::Encryption::Errors::Encryption","","classes/ActiveRecord/Encryption/Errors/Encryption.html","",""],["ActiveRecord::Encryption::Errors::ForbiddenClass","","classes/ActiveRecord/Encryption/Errors/ForbiddenClass.html","",""],["ActiveRecord::Encryption::ExtendedDeterministicQueries","","classes/ActiveRecord/Encryption/ExtendedDeterministicQueries.html","","<p>Automatically expand encrypted arguments to support querying both encrypted and unencrypted data\n<p>Active â€¦\n"],["ActiveRecord::Encryption::ExtendedDeterministicQueries::AdditionalValue","","classes/ActiveRecord/Encryption/ExtendedDeterministicQueries/AdditionalValue.html","",""],["ActiveRecord::Encryption::ExtendedDeterministicQueries::CoreQueries","","classes/ActiveRecord/Encryption/ExtendedDeterministicQueries/CoreQueries.html","",""],["ActiveRecord::Encryption::ExtendedDeterministicQueries::EncryptedQueryArgumentProcessor","","classes/ActiveRecord/Encryption/ExtendedDeterministicQueries/EncryptedQueryArgumentProcessor.html","",""],["ActiveRecord::Encryption::ExtendedDeterministicQueries::ExtendedEncryptableType","","classes/ActiveRecord/Encryption/ExtendedDeterministicQueries/ExtendedEncryptableType.html","",""],["ActiveRecord::Encryption::ExtendedDeterministicQueries::InWithAdditionalValues","","classes/ActiveRecord/Encryption/ExtendedDeterministicQueries/InWithAdditionalValues.html","",""],["ActiveRecord::Encryption::ExtendedDeterministicQueries::RelationQueries","","classes/ActiveRecord/Encryption/ExtendedDeterministicQueries/RelationQueries.html","",""],["ActiveRecord::Encryption::ExtendedDeterministicUniquenessValidator","","classes/ActiveRecord/Encryption/ExtendedDeterministicUniquenessValidator.html","",""],["ActiveRecord::Encryption::ExtendedDeterministicUniquenessValidator::EncryptedUniquenessValidator","","classes/ActiveRecord/Encryption/ExtendedDeterministicUniquenessValidator/EncryptedUniquenessValidator.html","",""],["ActiveRecord::Encryption::Key","","classes/ActiveRecord/Encryption/Key.html","","<p>A key is a container for a given <code>secret</code>\n<p>Optionally, it can include <code>public_tags</code>. These tags are meant to â€¦\n"],["ActiveRecord::Encryption::KeyGenerator","","classes/ActiveRecord/Encryption/KeyGenerator.html","","<p>Utility for generating and deriving random keys.\n"],["ActiveRecord::Encryption::KeyProvider","","classes/ActiveRecord/Encryption/KeyProvider.html","","<p>A <code>KeyProvider</code> serves keys:\n<p>An encryption key\n<p>A list of potential decryption keys. Serving multiple decryption â€¦\n"],["ActiveRecord::Encryption::Message","","classes/ActiveRecord/Encryption/Message.html","","<p>A message defines the structure of the data we store in encrypted attributes. It contains:\n<p>An encrypted â€¦\n"],["ActiveRecord::Encryption::MessageSerializer","","classes/ActiveRecord/Encryption/MessageSerializer.html","","<p>A message serializer that serializes <code>Messages</code> with JSON.\n<p>The generated structure is pretty simple:\n\n<pre><code>{\n  ...\n</code></pre>\n"],["ActiveRecord::Encryption::NullEncryptor","","classes/ActiveRecord/Encryption/NullEncryptor.html","","<p>An encryptor that won&#39;t decrypt or encrypt. It will just return the passed values\n"],["ActiveRecord::Encryption::Properties","","classes/ActiveRecord/Encryption/Properties.html","","<p>This is a wrapper for a hash of encryption properties. It is used by <code>Key</code> (public tags) and <code>Message</code> (headers). â€¦\n"],["ActiveRecord::Encryption::ReadOnlyNullEncryptor","","classes/ActiveRecord/Encryption/ReadOnlyNullEncryptor.html","","<p>A <code>NullEncryptor</code> that will raise an error when trying to encrypt data\n<p>This is useful when you want to reveal â€¦\n"],["ActiveRecord::Encryption::Scheme","","classes/ActiveRecord/Encryption/Scheme.html","","<p>A container of attribute encryption options.\n<p>It validates and serves attribute encryption options.\n<p>See â€¦\n"],["ActiveRecord::Enum","","classes/ActiveRecord/Enum.html","","<p>Declare an enum attribute where the values map to integers in the database, but can be queried by name. â€¦\n"],["ActiveRecord::EnvironmentMismatchError","","classes/ActiveRecord/EnvironmentMismatchError.html","",""],["ActiveRecord::ExclusiveConnectionTimeoutError","","classes/ActiveRecord/ExclusiveConnectionTimeoutError.html","","<p>Raised when a pool was unable to get ahold of all its connections to perform a â€œgroupâ€ action â€¦\n"],["ActiveRecord::Explain","","classes/ActiveRecord/Explain.html","",""],["ActiveRecord::FinderMethods","","classes/ActiveRecord/FinderMethods.html","",""],["ActiveRecord::FixtureSet","","classes/ActiveRecord/FixtureSet.html","","<p>Fixtures are a way of organizing data that you want to test against; in short, sample data.\n<p>They are stored â€¦\n"],["ActiveRecord::FixtureSet::ClassCache","","classes/ActiveRecord/FixtureSet/ClassCache.html","",""],["ActiveRecord::FutureResult","","classes/ActiveRecord/FutureResult.html","",""],["ActiveRecord::FutureResult::EventBuffer","","classes/ActiveRecord/FutureResult/EventBuffer.html","",""],["ActiveRecord::ImmutableRelation","","classes/ActiveRecord/ImmutableRelation.html","","<p>Raised when a relation cannot be mutated because it&#39;s already loaded.\n\n<pre><code>class Task &lt; ActiveRecord::Base ...\n</code></pre>\n"],["ActiveRecord::Inheritance","","classes/ActiveRecord/Inheritance.html","","<p>Single table inheritance\n<p>Active Record allows inheritance by storing the name of the class in a column â€¦\n"],["ActiveRecord::Inheritance::ClassMethods","","classes/ActiveRecord/Inheritance/ClassMethods.html","",""],["ActiveRecord::Integration","","classes/ActiveRecord/Integration.html","",""],["ActiveRecord::Integration::ClassMethods","","classes/ActiveRecord/Integration/ClassMethods.html","",""],["ActiveRecord::InvalidForeignKey","","classes/ActiveRecord/InvalidForeignKey.html","","<p>Raised when a record cannot be inserted or updated because it references a non-existent record, or when â€¦\n"],["ActiveRecord::IrreversibleMigration","","classes/ActiveRecord/IrreversibleMigration.html","","<p>Exception that can be raised to stop migrations from being rolled back. For example the following migration â€¦\n"],["ActiveRecord::IrreversibleOrderError","","classes/ActiveRecord/IrreversibleOrderError.html","","<p>IrreversibleOrderError is raised when a relation&#39;s order is too complex for <code>reverse_order</code> to automatically â€¦\n"],["ActiveRecord::LockWaitTimeout","","classes/ActiveRecord/LockWaitTimeout.html","","<p>LockWaitTimeout will be raised when lock wait timeout exceeded.\n"],["ActiveRecord::Locking","","classes/ActiveRecord/Locking.html","",""],["ActiveRecord::Locking::Optimistic","","classes/ActiveRecord/Locking/Optimistic.html","","<p>What is Optimistic Locking\n<p>Optimistic locking allows multiple users to access the same record for edits, â€¦\n"],["ActiveRecord::Locking::Optimistic::ClassMethods","","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html","",""],["ActiveRecord::Locking::Pessimistic","","classes/ActiveRecord/Locking/Pessimistic.html","","<p>Locking::Pessimistic provides support for row-level locking using SELECT â€¦ FOR UPDATE and other lock â€¦\n"],["ActiveRecord::LogSubscriber","","classes/ActiveRecord/LogSubscriber.html","",""],["ActiveRecord::Middleware","","classes/ActiveRecord/Middleware.html","",""],["ActiveRecord::Middleware::DatabaseSelector","","classes/ActiveRecord/Middleware/DatabaseSelector.html","","<p>The DatabaseSelector Middleware provides a framework for automatically swapping from the primary to the â€¦\n"],["ActiveRecord::Middleware::ShardSelector","","classes/ActiveRecord/Middleware/ShardSelector.html","","<p>The ShardSelector Middleware provides a framework for automatically swapping shards. Rails provides a â€¦\n"],["ActiveRecord::Migration","","classes/ActiveRecord/Migration.html","","<p>Active Record Migrations\n<p>Migrations can manage the evolution of a schema used by several physical databases. â€¦\n"],["ActiveRecord::Migration::CheckPending","","classes/ActiveRecord/Migration/CheckPending.html","","<p>This class is used to verify that all migrations have been run before loading a web page if <code>config.active_record.migration_error</code> â€¦\n"],["ActiveRecord::Migration::CommandRecorder","","classes/ActiveRecord/Migration/CommandRecorder.html","","<p><code>ActiveRecord::Migration::CommandRecorder</code> records commands done during a migration and knows how to reverse â€¦\n"],["ActiveRecord::Migration::Compatibility","","classes/ActiveRecord/Migration/Compatibility.html","",""],["ActiveRecord::Migration::Compatibility::V4_2","","classes/ActiveRecord/Migration/Compatibility/V4_2.html","",""],["ActiveRecord::Migration::Compatibility::V4_2::TableDefinition","","classes/ActiveRecord/Migration/Compatibility/V4_2/TableDefinition.html","",""],["ActiveRecord::Migration::Compatibility::V5_0","","classes/ActiveRecord/Migration/Compatibility/V5_0.html","",""],["ActiveRecord::Migration::Compatibility::V5_0::TableDefinition","","classes/ActiveRecord/Migration/Compatibility/V5_0/TableDefinition.html","",""],["ActiveRecord::Migration::Compatibility::V5_1","","classes/ActiveRecord/Migration/Compatibility/V5_1.html","",""],["ActiveRecord::Migration::Compatibility::V5_2","","classes/ActiveRecord/Migration/Compatibility/V5_2.html","",""],["ActiveRecord::Migration::Compatibility::V5_2::CommandRecorder","","classes/ActiveRecord/Migration/Compatibility/V5_2/CommandRecorder.html","",""],["ActiveRecord::Migration::Compatibility::V5_2::TableDefinition","","classes/ActiveRecord/Migration/Compatibility/V5_2/TableDefinition.html","",""],["ActiveRecord::Migration::Compatibility::V6_0","","classes/ActiveRecord/Migration/Compatibility/V6_0.html","",""],["ActiveRecord::Migration::Compatibility::V6_0::ReferenceDefinition","","classes/ActiveRecord/Migration/Compatibility/V6_0/ReferenceDefinition.html","",""],["ActiveRecord::Migration::Compatibility::V6_0::TableDefinition","","classes/ActiveRecord/Migration/Compatibility/V6_0/TableDefinition.html","",""],["ActiveRecord::Migration::Compatibility::V6_1","","classes/ActiveRecord/Migration/Compatibility/V6_1.html","",""],["ActiveRecord::Migration::Compatibility::V6_1::PostgreSQLCompat","","classes/ActiveRecord/Migration/Compatibility/V6_1/PostgreSQLCompat.html","",""],["ActiveRecord::Migration::Compatibility::V6_1::TableDefinition","","classes/ActiveRecord/Migration/Compatibility/V6_1/TableDefinition.html","",""],["ActiveRecord::MigrationContext","","classes/ActiveRecord/MigrationContext.html","","<p>MigrationContext sets the context in which a migration is run.\n<p>A migration context requires the path to â€¦\n"],["ActiveRecord::MismatchedForeignKey","","classes/ActiveRecord/MismatchedForeignKey.html","","<p>Raised when a foreign key constraint cannot be added because the column type does not match the referenced â€¦\n"],["ActiveRecord::ModelSchema","","classes/ActiveRecord/ModelSchema.html","",""],["ActiveRecord::ModelSchema::ClassMethods","","classes/ActiveRecord/ModelSchema/ClassMethods.html","",""],["ActiveRecord::MultiparameterAssignmentErrors","","classes/ActiveRecord/MultiparameterAssignmentErrors.html","","<p>Raised when there are multiple errors while doing a mass assignment through the ActiveRecord::Base#attributes= â€¦\n"],["ActiveRecord::NestedAttributes","","classes/ActiveRecord/NestedAttributes.html","",""],["ActiveRecord::NestedAttributes::ClassMethods","","classes/ActiveRecord/NestedAttributes/ClassMethods.html","","<p>Active Record Nested Attributes\n<p>Nested attributes allow you to save attributes on associated records through â€¦\n"],["ActiveRecord::NestedAttributes::TooManyRecords","","classes/ActiveRecord/NestedAttributes/TooManyRecords.html","",""],["ActiveRecord::NoDatabaseError","","classes/ActiveRecord/NoDatabaseError.html","","<p>Raised when a given database does not exist.\n"],["ActiveRecord::NoTouching","","classes/ActiveRecord/NoTouching.html","","<p>Active Record No Touching\n"],["ActiveRecord::NoTouching::ClassMethods","","classes/ActiveRecord/NoTouching/ClassMethods.html","",""],["ActiveRecord::NotNullViolation","","classes/ActiveRecord/NotNullViolation.html","","<p>Raised when a record cannot be inserted or updated because it would violate a not null constraint.\n"],["ActiveRecord::Persistence","","classes/ActiveRecord/Persistence.html","","<p>Active Record Persistence\n"],["ActiveRecord::Persistence::ClassMethods","","classes/ActiveRecord/Persistence/ClassMethods.html","",""],["ActiveRecord::PreparedStatementCacheExpired","","classes/ActiveRecord/PreparedStatementCacheExpired.html","","<p>Raised when PostgreSQL returns &#39;cached plan must not change result type&#39; and we cannot retry â€¦\n"],["ActiveRecord::PreparedStatementInvalid","","classes/ActiveRecord/PreparedStatementInvalid.html","","<p>Raised when the number of placeholders in an SQL fragment passed to ActiveRecord::Base.where does not â€¦\n"],["ActiveRecord::QueryAborted","","classes/ActiveRecord/QueryAborted.html","","<p>Superclass for errors that have been aborted (either by client or server).\n"],["ActiveRecord::QueryCache","","classes/ActiveRecord/QueryCache.html","","<p>Active Record Query Cache\n"],["ActiveRecord::QueryCache::ClassMethods","","classes/ActiveRecord/QueryCache/ClassMethods.html","",""],["ActiveRecord::QueryCanceled","","classes/ActiveRecord/QueryCanceled.html","","<p>QueryCanceled will be raised when canceling statement due to user request.\n"],["ActiveRecord::QueryLogs","","classes/ActiveRecord/QueryLogs.html","","<p>Active Record Query Logs\n<p>Automatically tag SQL queries with runtime information.\n<p>Default tags available â€¦\n"],["ActiveRecord::QueryMethods","","classes/ActiveRecord/QueryMethods.html","",""],["ActiveRecord::QueryMethods::WhereChain","","classes/ActiveRecord/QueryMethods/WhereChain.html","","<p>WhereChain objects act as placeholder for queries in which #where does not have any parameter. In this â€¦\n"],["ActiveRecord::Querying","","classes/ActiveRecord/Querying.html","",""],["ActiveRecord::RangeError","","classes/ActiveRecord/RangeError.html","","<p>Raised when values that executed are out of range.\n"],["ActiveRecord::ReadOnlyError","","classes/ActiveRecord/ReadOnlyError.html","","<p>Raised when a write to the database is attempted on a read only connection.\n"],["ActiveRecord::ReadOnlyRecord","","classes/ActiveRecord/ReadOnlyRecord.html","","<p>Raised on attempt to update record that is instantiated as read only.\n"],["ActiveRecord::ReadonlyAttributes","","classes/ActiveRecord/ReadonlyAttributes.html","",""],["ActiveRecord::ReadonlyAttributes::ClassMethods","","classes/ActiveRecord/ReadonlyAttributes/ClassMethods.html","",""],["ActiveRecord::RecordInvalid","","classes/ActiveRecord/RecordInvalid.html","","<p>Active Record RecordInvalid\n<p>Raised by ActiveRecord::Base#save! and ActiveRecord::Base#create! when the â€¦\n"],["ActiveRecord::RecordNotDestroyed","","classes/ActiveRecord/RecordNotDestroyed.html","","<p>Raised by ActiveRecord::Base#destroy! when a call to #destroy would return false.\n\n<pre><code>begin\n  complex_operation_that_internally_calls_destroy! ...\n</code></pre>\n"],["ActiveRecord::RecordNotFound","","classes/ActiveRecord/RecordNotFound.html","","<p>Raised when Active Record cannot find a record by given id or set of ids.\n"],["ActiveRecord::RecordNotSaved","","classes/ActiveRecord/RecordNotSaved.html","","<p>Raised by ActiveRecord::Base#save! and ActiveRecord::Base.create! methods when a record is invalid and â€¦\n"],["ActiveRecord::RecordNotUnique","","classes/ActiveRecord/RecordNotUnique.html","","<p>Raised when a record cannot be inserted or updated because it would violate a uniqueness constraint. â€¦\n"],["ActiveRecord::Reflection","","classes/ActiveRecord/Reflection.html","",""],["ActiveRecord::Reflection::ClassMethods","","classes/ActiveRecord/Reflection/ClassMethods.html","","<p>Reflection enables the ability to examine the associations and aggregations of Active Record classes â€¦\n"],["ActiveRecord::Reflection::MacroReflection","","classes/ActiveRecord/Reflection/MacroReflection.html","","<p>Base class for AggregateReflection and AssociationReflection. Objects of AggregateReflection and AssociationReflection â€¦\n"],["ActiveRecord::Relation","","classes/ActiveRecord/Relation.html","","<p>Active Record Relation\n"],["ActiveRecord::Relation::RecordFetchWarning","","classes/ActiveRecord/Relation/RecordFetchWarning.html","",""],["ActiveRecord::Result","","classes/ActiveRecord/Result.html","","<p>This class encapsulates a result returned from calling #exec_query on any database connection adapter. â€¦\n"],["ActiveRecord::Rollback","","classes/ActiveRecord/Rollback.html","","<p>ActiveRecord::Base.transaction uses this exception to distinguish a deliberate rollback from other exceptional â€¦\n"],["ActiveRecord::Sanitization","","classes/ActiveRecord/Sanitization.html","",""],["ActiveRecord::Sanitization::ClassMethods","","classes/ActiveRecord/Sanitization/ClassMethods.html","",""],["ActiveRecord::Schema","","classes/ActiveRecord/Schema.html","","<p>Active Record Schema\n<p>Allows programmers to programmatically define a schema in a portable DSL. This means â€¦\n"],["ActiveRecord::Schema::Definition","","classes/ActiveRecord/Schema/Definition.html","",""],["ActiveRecord::Schema::Definition::ClassMethods","","classes/ActiveRecord/Schema/Definition/ClassMethods.html","",""],["ActiveRecord::Scoping","","classes/ActiveRecord/Scoping.html","","<p>Active Record Named Scopes\n"],["ActiveRecord::Scoping::Default","","classes/ActiveRecord/Scoping/Default.html","",""],["ActiveRecord::Scoping::Default::ClassMethods","","classes/ActiveRecord/Scoping/Default/ClassMethods.html","",""],["ActiveRecord::Scoping::Named","","classes/ActiveRecord/Scoping/Named.html","",""],["ActiveRecord::Scoping::Named::ClassMethods","","classes/ActiveRecord/Scoping/Named/ClassMethods.html","",""],["ActiveRecord::SecureToken","","classes/ActiveRecord/SecureToken.html","",""],["ActiveRecord::SecureToken::ClassMethods","","classes/ActiveRecord/SecureToken/ClassMethods.html","",""],["ActiveRecord::SecureToken::MinimumLengthError","","classes/ActiveRecord/SecureToken/MinimumLengthError.html","",""],["ActiveRecord::Serialization","","classes/ActiveRecord/Serialization.html","","<p>Active Record Serialization\n"],["ActiveRecord::SerializationFailure","","classes/ActiveRecord/SerializationFailure.html","","<p>SerializationFailure will be raised when a transaction is rolled back by the database due to a serialization â€¦\n"],["ActiveRecord::SerializationTypeMismatch","","classes/ActiveRecord/SerializationTypeMismatch.html","","<p>Raised when unserialized object&#39;s type mismatches one specified for serializable field.\n"],["ActiveRecord::SignedId","","classes/ActiveRecord/SignedId.html","","<p>Active Record Signed Id\n"],["ActiveRecord::SignedId::ClassMethods","","classes/ActiveRecord/SignedId/ClassMethods.html","",""],["ActiveRecord::SoleRecordExceeded","","classes/ActiveRecord/SoleRecordExceeded.html","","<p>Raised when Active Record finds multiple records but only expected one.\n"],["ActiveRecord::SpawnMethods","","classes/ActiveRecord/SpawnMethods.html","",""],["ActiveRecord::StaleObjectError","","classes/ActiveRecord/StaleObjectError.html","","<p>Raised on attempt to save stale record. Record is stale when it&#39;s being saved in another query after â€¦\n"],["ActiveRecord::StatementCache","","classes/ActiveRecord/StatementCache.html","",""],["ActiveRecord::StatementCache::PartialQueryCollector","","classes/ActiveRecord/StatementCache/PartialQueryCollector.html","",""],["ActiveRecord::StatementInvalid","","classes/ActiveRecord/StatementInvalid.html","","<p>Superclass for all database execution errors.\n<p>Wraps the underlying database error as <code>cause</code>.\n"],["ActiveRecord::StatementTimeout","","classes/ActiveRecord/StatementTimeout.html","","<p>StatementTimeout will be raised when statement timeout exceeded.\n"],["ActiveRecord::Store","","classes/ActiveRecord/Store.html","","<p>Store gives you a thin wrapper around serialize for the purpose of storing hashes in a single column. â€¦\n"],["ActiveRecord::Store::ClassMethods","","classes/ActiveRecord/Store/ClassMethods.html","",""],["ActiveRecord::StrictLoadingViolationError","","classes/ActiveRecord/StrictLoadingViolationError.html","","<p>Raised on attempt to lazily load records that are marked as strict loading.\n"],["ActiveRecord::SubclassNotFound","","classes/ActiveRecord/SubclassNotFound.html","","<p>Raised when the single-table inheritance mechanism fails to locate the subclass (for example due to improper â€¦\n"],["ActiveRecord::Suppressor","","classes/ActiveRecord/Suppressor.html","","<p>ActiveRecord::Suppressor prevents the receiver from being saved during a given block.\n<p>For example, here&#39;s â€¦\n"],["ActiveRecord::Suppressor::ClassMethods","","classes/ActiveRecord/Suppressor/ClassMethods.html","",""],["ActiveRecord::TableNotSpecified","","classes/ActiveRecord/TableNotSpecified.html","","<p>Raised when a model makes a query but it has not specified an associated table.\n"],["ActiveRecord::Tasks","","classes/ActiveRecord/Tasks.html","",""],["ActiveRecord::Tasks::DatabaseTasks","","classes/ActiveRecord/Tasks/DatabaseTasks.html","","<p>ActiveRecord::Tasks::DatabaseTasks is a utility class, which encapsulates logic behind common tasks used â€¦\n"],["ActiveRecord::TestFixtures","","classes/ActiveRecord/TestFixtures.html","",""],["ActiveRecord::TestFixtures::ClassMethods","","classes/ActiveRecord/TestFixtures/ClassMethods.html","",""],["ActiveRecord::Timestamp","","classes/ActiveRecord/Timestamp.html","","<p>Active Record Timestamp\n<p>Active Record automatically timestamps create and update operations if the table â€¦\n"],["ActiveRecord::TransactionIsolationError","","classes/ActiveRecord/TransactionIsolationError.html","","<p>TransactionIsolationError will be raised under the following conditions:\n<p>The adapter does not support â€¦\n"],["ActiveRecord::TransactionRollbackError","","classes/ActiveRecord/TransactionRollbackError.html","","<p>TransactionRollbackError will be raised when a transaction is rolled back by the database due to a serialization â€¦\n"],["ActiveRecord::Transactions","","classes/ActiveRecord/Transactions.html","","<p>See ActiveRecord::Transactions::ClassMethods for documentation.\n"],["ActiveRecord::Transactions::ClassMethods","","classes/ActiveRecord/Transactions/ClassMethods.html","","<p>Active Record Transactions\n<p>Transactions are protective blocks where SQL statements are only permanent â€¦\n"],["ActiveRecord::Translation","","classes/ActiveRecord/Translation.html","",""],["ActiveRecord::Type","","classes/ActiveRecord/Type.html","",""],["ActiveRecord::Type::BigInteger","","classes/ActiveModel/Type/BigInteger.html","",""],["ActiveRecord::Type::Binary","","classes/ActiveModel/Type/Binary.html","",""],["ActiveRecord::Type::Boolean","","classes/ActiveModel/Type/Boolean.html","","<p>Active Model Type Boolean\n<p>A class that behaves like a boolean type, including rules for coercion of user â€¦\n"],["ActiveRecord::Type::Date","","classes/ActiveRecord/Type/Date.html","",""],["ActiveRecord::Type::DateTime","","classes/ActiveRecord/Type/DateTime.html","",""],["ActiveRecord::Type::Decimal","","classes/ActiveModel/Type/Decimal.html","",""],["ActiveRecord::Type::Float","","classes/ActiveModel/Type/Float.html","",""],["ActiveRecord::Type::ImmutableString","","classes/ActiveModel/Type/ImmutableString.html","",""],["ActiveRecord::Type::Integer","","classes/ActiveModel/Type/Integer.html","",""],["ActiveRecord::Type::Internal","","classes/ActiveRecord/Type/Internal.html","",""],["ActiveRecord::Type::Internal::Timezone","","classes/ActiveRecord/Type/Internal/Timezone.html","",""],["ActiveRecord::Type::Json","","classes/ActiveRecord/Type/Json.html","",""],["ActiveRecord::Type::String","","classes/ActiveModel/Type/String.html","",""],["ActiveRecord::Type::Time","","classes/ActiveRecord/Type/Time.html","",""],["ActiveRecord::Type::Value","","classes/ActiveModel/Type/Value.html","",""],["ActiveRecord::UnknownAttributeError","","classes/ActiveModel/UnknownAttributeError.html","","<p>Raised when unknown attributes are supplied via mass assignment.\n\n<pre><code>class Person\n  include ActiveModel::AttributeAssignment ...\n</code></pre>\n"],["ActiveRecord::UnknownAttributeReference","","classes/ActiveRecord/UnknownAttributeReference.html","","<p>UnknownAttributeReference is raised when an unknown and potentially unsafe value is passed to a query â€¦\n"],["ActiveRecord::UnknownPrimaryKey","","classes/ActiveRecord/UnknownPrimaryKey.html","","<p>Raised when a primary key is needed, but not specified in the schema or model.\n"],["ActiveRecord::VERSION","","classes/ActiveRecord/VERSION.html","",""],["ActiveRecord::Validations","","classes/ActiveRecord/Validations.html","","<p>Active Record Validations\n<p>Active Record includes the majority of its validations from ActiveModel::Validations â€¦\n"],["ActiveRecord::Validations::ClassMethods","","classes/ActiveRecord/Validations/ClassMethods.html","",""],["ActiveRecord::ValueTooLong","","classes/ActiveRecord/ValueTooLong.html","","<p>Raised when a record cannot be inserted or updated because a value too long for a column type.\n"],["ActiveRecord::WrappedDatabaseException","","classes/ActiveRecord/WrappedDatabaseException.html","","<p>Defunct wrapper class kept for compatibility. StatementInvalid wraps the original exception now.\n"],["ActiveStorage","","classes/ActiveStorage.html","",""],["ActiveStorage::AnalyzeJob","","classes/ActiveStorage/AnalyzeJob.html","","<p>Provides asynchronous analysis of ActiveStorage::Blob records via ActiveStorage::Blob#analyze_later. â€¦\n"],["ActiveStorage::Analyzer","","classes/ActiveStorage/Analyzer.html","","<p>This is an abstract base class for analyzers, which extract metadata from blobs. See ActiveStorage::Analyzer::VideoAnalyzer â€¦\n"],["ActiveStorage::Analyzer::AudioAnalyzer","","classes/ActiveStorage/Analyzer/AudioAnalyzer.html","","<p>Extracts duration (seconds) and bit_rate (bits/s) from an audio blob.\n<p>Example:\n\n<pre><code>ActiveStorage::Analyzer::AudioAnalyzer.new(blob).metadata ...\n</code></pre>\n"],["ActiveStorage::Analyzer::ImageAnalyzer","","classes/ActiveStorage/Analyzer/ImageAnalyzer.html","","<p>This is an abstract base class for image analyzers, which extract width and height from an image blob. â€¦\n"],["ActiveStorage::Analyzer::ImageAnalyzer::ImageMagick","","classes/ActiveStorage/Analyzer/ImageAnalyzer/ImageMagick.html","","<p>This analyzer relies on the third-party MiniMagick gem. MiniMagick requires the ImageMagick system library. â€¦\n"],["ActiveStorage::Analyzer::ImageAnalyzer::Vips","","classes/ActiveStorage/Analyzer/ImageAnalyzer/Vips.html","","<p>This analyzer relies on the third-party ruby-vips gem. Ruby-vips requires the libvips system library. â€¦\n"],["ActiveStorage::Analyzer::VideoAnalyzer","","classes/ActiveStorage/Analyzer/VideoAnalyzer.html","","<p>Extracts the following from a video blob:\n<p>Width (pixels)\n<p>Height (pixels)\n"],["ActiveStorage::Attached","","classes/ActiveStorage/Attached.html","","<p>Abstract base class for the concrete ActiveStorage::Attached::One and ActiveStorage::Attached::Many classes â€¦\n"],["ActiveStorage::Attached::Many","","classes/ActiveStorage/Attached/Many.html","","<p>Decorated proxy object representing of multiple attachments to a model.\n"],["ActiveStorage::Attached::Model","","classes/ActiveStorage/Attached/Model.html","","<p>Provides the class-level DSL for declaring an Active Record model&#39;s attachments.\n"],["ActiveStorage::Attached::One","","classes/ActiveStorage/Attached/One.html","","<p>Representation of a single attachment to a model.\n"],["ActiveStorage::Attachment","","classes/ActiveStorage/Attachment.html","","<p>Attachments associate records with blobs. Usually that&#39;s a one record-many blobs relationship, but â€¦\n"],["ActiveStorage::BaseController","","classes/ActiveStorage/BaseController.html","","<p>The base class for all Active Storage controllers.\n"],["ActiveStorage::BaseJob","","classes/ActiveStorage/BaseJob.html","",""],["ActiveStorage::Blob","","classes/ActiveStorage/Blob.html","","<p>A blob is a record that contains the metadata about a file and a key for where that file resides on the â€¦\n"],["ActiveStorage::Blob::Analyzable","","classes/ActiveStorage/Blob/Analyzable.html","",""],["ActiveStorage::Blob::Identifiable","","classes/ActiveStorage/Blob/Identifiable.html","",""],["ActiveStorage::Blob::Representable","","classes/ActiveStorage/Blob/Representable.html","",""],["ActiveStorage::Blobs","","classes/ActiveStorage/Blobs.html","",""],["ActiveStorage::Blobs::ProxyController","","classes/ActiveStorage/Blobs/ProxyController.html","","<p>Proxy files through application. This avoids having a redirect and makes files easier to cache.\n<p>WARNING: â€¦\n"],["ActiveStorage::Blobs::RedirectController","","classes/ActiveStorage/Blobs/RedirectController.html","","<p>Take a signed permanent reference for a blob and turn it into an expiring service URL for download.\n<p>WARNING: â€¦\n"],["ActiveStorage::DirectUploadsController","","classes/ActiveStorage/DirectUploadsController.html","","<p>Creates a new blob on the server side in anticipation of a direct-to-service upload from the client side. â€¦\n"],["ActiveStorage::DiskController","","classes/ActiveStorage/DiskController.html","","<p>Serves files stored with the disk service in the same way that the cloud services do. This means using â€¦\n"],["ActiveStorage::Error","","classes/ActiveStorage/Error.html","","<p>Generic base class for all Active Storage exceptions.\n"],["ActiveStorage::FileNotFoundError","","classes/ActiveStorage/FileNotFoundError.html","","<p>Raised when ActiveStorage::Blob#download is called on a blob where the backing file is no longer present â€¦\n"],["ActiveStorage::Filename","","classes/ActiveStorage/Filename.html","","<p>Encapsulates a string representing a filename to provide convenient access to parts of it and sanitization. â€¦\n"],["ActiveStorage::FixtureSet","","classes/ActiveStorage/FixtureSet.html","","<p>Fixtures are a way of organizing data that you want to test against; in short, sample data.\n<p>To learn more â€¦\n"],["ActiveStorage::IntegrityError","","classes/ActiveStorage/IntegrityError.html","","<p>Raised when uploaded or downloaded data does not match a precomputed checksum. Indicates that a network â€¦\n"],["ActiveStorage::InvariableError","","classes/ActiveStorage/InvariableError.html","","<p>Raised when ActiveStorage::Blob#variant is called on a blob that isn&#39;t variable. Use ActiveStorage::Blob#variable? â€¦\n"],["ActiveStorage::LogSubscriber","","classes/ActiveStorage/LogSubscriber.html","",""],["ActiveStorage::MirrorJob","","classes/ActiveStorage/MirrorJob.html","","<p>Provides asynchronous mirroring of directly-uploaded blobs.\n"],["ActiveStorage::Preview","","classes/ActiveStorage/Preview.html","","<p>Some non-image blobs can be previewed: that is, they can be presented as images. A video blob can be â€¦\n"],["ActiveStorage::Preview::UnprocessedError","","classes/ActiveStorage/Preview/UnprocessedError.html","",""],["ActiveStorage::PreviewError","","classes/ActiveStorage/PreviewError.html","","<p>Raised when a Previewer is unable to generate a preview image.\n"],["ActiveStorage::Previewer","","classes/ActiveStorage/Previewer.html","","<p>This is an abstract base class for previewers, which generate images from blobs. See ActiveStorage::Previewer::MuPDFPreviewer â€¦\n"],["ActiveStorage::Previewer::MuPDFPreviewer","","classes/ActiveStorage/Previewer/MuPDFPreviewer.html","",""],["ActiveStorage::Previewer::PopplerPDFPreviewer","","classes/ActiveStorage/Previewer/PopplerPDFPreviewer.html","",""],["ActiveStorage::Previewer::VideoPreviewer","","classes/ActiveStorage/Previewer/VideoPreviewer.html","",""],["ActiveStorage::PurgeJob","","classes/ActiveStorage/PurgeJob.html","","<p>Provides asynchronous purging of ActiveStorage::Blob records via ActiveStorage::Blob#purge_later.\n"],["ActiveStorage::Reflection","","classes/ActiveStorage/Reflection.html","",""],["ActiveStorage::Reflection::ActiveRecordExtensions","","classes/ActiveStorage/Reflection/ActiveRecordExtensions.html","",""],["ActiveStorage::Reflection::ActiveRecordExtensions::ClassMethods","","classes/ActiveStorage/Reflection/ActiveRecordExtensions/ClassMethods.html","",""],["ActiveStorage::Representations","","classes/ActiveStorage/Representations.html","",""],["ActiveStorage::Representations::ProxyController","","classes/ActiveStorage/Representations/ProxyController.html","","<p>Proxy files through application. This avoids having a redirect and makes files easier to cache.\n<p>WARNING: â€¦\n"],["ActiveStorage::Representations::RedirectController","","classes/ActiveStorage/Representations/RedirectController.html","","<p>Take a signed permanent reference for a blob representation and turn it into an expiring service URL â€¦\n"],["ActiveStorage::Service","","classes/ActiveStorage/Service.html","","<p>Abstract class serving as an interface for concrete services.\n<p>The available services are:\n<p><code>Disk</code>, to manage â€¦\n"],["ActiveStorage::Service::AzureStorageService","","classes/ActiveStorage/Service/AzureStorageService.html","","<p>Wraps the Microsoft Azure Storage Blob Service as an Active Storage service. See ActiveStorage::Service â€¦\n"],["ActiveStorage::Service::DiskService","","classes/ActiveStorage/Service/DiskService.html","","<p>Wraps a local disk path as an Active Storage service. See ActiveStorage::Service for the generic API â€¦\n"],["ActiveStorage::Service::GCSService","","classes/ActiveStorage/Service/GCSService.html","","<p>Wraps the Google Cloud Storage as an Active Storage service. See ActiveStorage::Service for the generic â€¦\n"],["ActiveStorage::Service::GCSService::MetadataServerError","","classes/ActiveStorage/Service/GCSService/MetadataServerError.html","",""],["ActiveStorage::Service::GCSService::MetadataServerNotFoundError","","classes/ActiveStorage/Service/GCSService/MetadataServerNotFoundError.html","",""],["ActiveStorage::Service::MirrorService","","classes/ActiveStorage/Service/MirrorService.html","","<p>Wraps a set of mirror services and provides a single ActiveStorage::Service object that will all have â€¦\n"],["ActiveStorage::Service::S3Service","","classes/ActiveStorage/Service/S3Service.html","","<p>Wraps the Amazon Simple Storage Service (S3) as an Active Storage service. See ActiveStorage::Service â€¦\n"],["ActiveStorage::SetCurrent","","classes/ActiveStorage/SetCurrent.html","","<p>Sets the <code>ActiveStorage::Current.url_options</code> attribute, which the disk service uses to generate URLs. â€¦\n"],["ActiveStorage::Streaming","","classes/ActiveStorage/Streaming.html","",""],["ActiveStorage::Transformers","","classes/ActiveStorage/Transformers.html","",""],["ActiveStorage::Transformers::ImageProcessingTransformer","","classes/ActiveStorage/Transformers/ImageProcessingTransformer.html","",""],["ActiveStorage::Transformers::ImageProcessingTransformer::UnsupportedImageProcessingArgument","","classes/ActiveStorage/Transformers/ImageProcessingTransformer/UnsupportedImageProcessingArgument.html","",""],["ActiveStorage::Transformers::ImageProcessingTransformer::UnsupportedImageProcessingMethod","","classes/ActiveStorage/Transformers/ImageProcessingTransformer/UnsupportedImageProcessingMethod.html","",""],["ActiveStorage::Transformers::Transformer","","classes/ActiveStorage/Transformers/Transformer.html","","<p>A Transformer applies a set of transformations to an image.\n<p>The following concrete subclasses are included â€¦\n"],["ActiveStorage::UnpreviewableError","","classes/ActiveStorage/UnpreviewableError.html","","<p>Raised when ActiveStorage::Blob#preview is called on a blob that isn&#39;t previewable. Use ActiveStorage::Blob#previewable? â€¦\n"],["ActiveStorage::UnrepresentableError","","classes/ActiveStorage/UnrepresentableError.html","","<p>Raised when ActiveStorage::Blob#representation is called on a blob that isn&#39;t representable. Use â€¦\n"],["ActiveStorage::VERSION","","classes/ActiveStorage/VERSION.html","",""],["ActiveStorage::Variant","","classes/ActiveStorage/Variant.html","","<p>Image blobs can have variants that are the result of a set of transformations applied to the original. â€¦\n"],["ActiveStorage::VariantRecord","","classes/ActiveStorage/VariantRecord.html","",""],["ActiveStorage::VariantWithRecord","","classes/ActiveStorage/VariantWithRecord.html","","<p>Like an ActiveStorage::Variant, but keeps detail about the variant in the database as an ActiveStorage::VariantRecord â€¦\n"],["ActiveStorage::Variation","","classes/ActiveStorage/Variation.html","","<p>A set of transformations that can be applied to a blob to create a variant. This class is exposed via â€¦\n"],["ActiveSupport","","classes/ActiveSupport.html","",""],["ActiveSupport::ActionableError","","classes/ActiveSupport/ActionableError.html","","<p>Actionable errors lets you define actions to resolve an error.\n<p>To make an error actionable, include the â€¦\n"],["ActiveSupport::ActionableError::ClassMethods","","classes/ActiveSupport/ActionableError/ClassMethods.html","",""],["ActiveSupport::ActionableError::NonActionable","","classes/ActiveSupport/ActionableError/NonActionable.html","",""],["ActiveSupport::ArrayInquirer","","classes/ActiveSupport/ArrayInquirer.html","","<p>Wrapping an array in an <code>ArrayInquirer</code> gives a friendlier way to check its string-like contents:\n\n<pre><code>variants ...\n</code></pre>\n"],["ActiveSupport::Autoload","","classes/ActiveSupport/Autoload.html","","<p>Autoload and eager load conveniences for your library.\n<p>This module allows you to define autoloads based â€¦\n"],["ActiveSupport::BacktraceCleaner","","classes/ActiveSupport/BacktraceCleaner.html","","<p>Backtraces often include many lines that are not relevant for the context under review. This makes it â€¦\n"],["ActiveSupport::Benchmarkable","","classes/ActiveSupport/Benchmarkable.html","",""],["ActiveSupport::Cache","","classes/ActiveSupport/Cache.html","","<p>See ActiveSupport::Cache::Store for documentation.\n"],["ActiveSupport::Cache::Coders","","classes/ActiveSupport/Cache/Coders.html","",""],["ActiveSupport::Cache::Coders::Loader","","classes/ActiveSupport/Cache/Coders/Loader.html","",""],["ActiveSupport::Cache::Coders::Rails61Coder","","classes/ActiveSupport/Cache/Coders/Rails61Coder.html","",""],["ActiveSupport::Cache::Coders::Rails70Coder","","classes/ActiveSupport/Cache/Coders/Rails70Coder.html","",""],["ActiveSupport::Cache::ConnectionPoolLike","","classes/ActiveSupport/Cache/ConnectionPoolLike.html","",""],["ActiveSupport::Cache::FileStore","","classes/ActiveSupport/Cache/FileStore.html","","<p>A cache store implementation which stores everything on the filesystem.\n<p>FileStore implements the Strategy::LocalCache â€¦\n"],["ActiveSupport::Cache::MemCacheStore","","classes/ActiveSupport/Cache/MemCacheStore.html","","<p>A cache store implementation which stores data in Memcached: memcached.org\n<p>This is currently the most â€¦\n"],["ActiveSupport::Cache::MemCacheStore::Coders","","classes/ActiveSupport/Cache/MemCacheStore/Coders.html","",""],["ActiveSupport::Cache::MemCacheStore::Coders::Loader","","classes/ActiveSupport/Cache/MemCacheStore/Coders/Loader.html","",""],["ActiveSupport::Cache::MemCacheStore::Coders::Rails61Coder","","classes/ActiveSupport/Cache/MemCacheStore/Coders/Rails61Coder.html","",""],["ActiveSupport::Cache::MemCacheStore::Coders::Rails70Coder","","classes/ActiveSupport/Cache/MemCacheStore/Coders/Rails70Coder.html","",""],["ActiveSupport::Cache::MemCacheStore::DupLocalCache","","classes/ActiveSupport/Cache/MemCacheStore/DupLocalCache.html","",""],["ActiveSupport::Cache::MemCacheStore::DupLocalCache::DupLocalStore","","classes/ActiveSupport/Cache/MemCacheStore/DupLocalCache/DupLocalStore.html","",""],["ActiveSupport::Cache::MemoryStore","","classes/ActiveSupport/Cache/MemoryStore.html","","<p>A cache store implementation which stores everything into memory in the same process. If you&#39;re running â€¦\n"],["ActiveSupport::Cache::NullStore","","classes/ActiveSupport/Cache/NullStore.html","","<p>A cache store implementation which doesn&#39;t actually store anything. Useful in development and test â€¦\n"],["ActiveSupport::Cache::RedisCacheStore","","classes/ActiveSupport/Cache/RedisCacheStore.html","","<p>Redis cache store.\n<p>Deployment note: Take care to use a *dedicated Redis cache* rather than pointing this â€¦\n"],["ActiveSupport::Cache::Store","","classes/ActiveSupport/Cache/Store.html","","<p>An abstract cache store class. There are multiple cache store implementations, each having its own additional â€¦\n"],["ActiveSupport::Cache::Strategy","","classes/ActiveSupport/Cache/Strategy.html","",""],["ActiveSupport::Cache::Strategy::LocalCache","","classes/ActiveSupport/Cache/Strategy/LocalCache.html","","<p>Caches that implement LocalCache will be backed by an in-memory cache for the duration of a block. Repeated â€¦\n"],["ActiveSupport::Cache::Strategy::LocalCache::LocalStore","","classes/ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html","","<p>Simple memory backed cache. This cache is not thread safe and is intended only for serving as a temporary â€¦\n"],["ActiveSupport::CachingKeyGenerator","","classes/ActiveSupport/CachingKeyGenerator.html","","<p>CachingKeyGenerator is a wrapper around KeyGenerator which allows users to avoid re-executing the key â€¦\n"],["ActiveSupport::Callbacks","","classes/ActiveSupport/Callbacks.html","","<p>Callbacks are code hooks that are run at key points in an object&#39;s life cycle. The typical use case â€¦\n"],["ActiveSupport::Callbacks::CallTemplate","","classes/ActiveSupport/Callbacks/CallTemplate.html","",""],["ActiveSupport::Callbacks::CallTemplate::InstanceExec0","","classes/ActiveSupport/Callbacks/CallTemplate/InstanceExec0.html","",""],["ActiveSupport::Callbacks::CallTemplate::InstanceExec1","","classes/ActiveSupport/Callbacks/CallTemplate/InstanceExec1.html","",""],["ActiveSupport::Callbacks::CallTemplate::InstanceExec2","","classes/ActiveSupport/Callbacks/CallTemplate/InstanceExec2.html","",""],["ActiveSupport::Callbacks::CallTemplate::MethodCall","","classes/ActiveSupport/Callbacks/CallTemplate/MethodCall.html","",""],["ActiveSupport::Callbacks::CallTemplate::ObjectCall","","classes/ActiveSupport/Callbacks/CallTemplate/ObjectCall.html","",""],["ActiveSupport::Callbacks::CallTemplate::ProcCall","","classes/ActiveSupport/Callbacks/CallTemplate/ProcCall.html","",""],["ActiveSupport::Callbacks::ClassMethods","","classes/ActiveSupport/Callbacks/ClassMethods.html","",""],["ActiveSupport::Callbacks::Conditionals","","classes/ActiveSupport/Callbacks/Conditionals.html","",""],["ActiveSupport::Callbacks::Conditionals::Value","","classes/ActiveSupport/Callbacks/Conditionals/Value.html","",""],["ActiveSupport::Callbacks::Filters","","classes/ActiveSupport/Callbacks/Filters.html","",""],["ActiveSupport::Callbacks::Filters::After","","classes/ActiveSupport/Callbacks/Filters/After.html","",""],["ActiveSupport::Callbacks::Filters::Before","","classes/ActiveSupport/Callbacks/Filters/Before.html","",""],["ActiveSupport::CodeGenerator","","classes/ActiveSupport/CodeGenerator.html","",""],["ActiveSupport::CodeGenerator::MethodSet","","classes/ActiveSupport/CodeGenerator/MethodSet.html","",""],["ActiveSupport::CompareWithRange","","classes/ActiveSupport/CompareWithRange.html","",""],["ActiveSupport::Concern","","classes/ActiveSupport/Concern.html","","<p>A typical module looks like this:\n\n<pre><code>module M\n  def self.included(base)\n    base.extend ClassMethods\n    ...\n</code></pre>\n"],["ActiveSupport::Concurrency","","classes/ActiveSupport/Concurrency.html","",""],["ActiveSupport::Concurrency::LoadInterlockAwareMonitor","","classes/ActiveSupport/Concurrency/LoadInterlockAwareMonitor.html","","<p>A monitor that will permit dependency loading while blocked waiting for the lock.\n"],["ActiveSupport::Concurrency::ShareLock","","classes/ActiveSupport/Concurrency/ShareLock.html","","<p>A share/exclusive lock, otherwise known as a read/write lock.\n<p>en.wikipedia.org/wiki/Readers%E2%80%93writer_lock â€¦\n"],["ActiveSupport::Configurable","","classes/ActiveSupport/Configurable.html","","<p>Configurable provides a <code>config</code> method to store and retrieve configuration options as an OrderedOptions â€¦\n"],["ActiveSupport::Configurable::ClassMethods","","classes/ActiveSupport/Configurable/ClassMethods.html","",""],["ActiveSupport::Configurable::Configuration","","classes/ActiveSupport/Configurable/Configuration.html","",""],["ActiveSupport::ConfigurationFile","","classes/ActiveSupport/ConfigurationFile.html","",""],["ActiveSupport::ConfigurationFile::FormatError","","classes/ActiveSupport/ConfigurationFile/FormatError.html","",""],["ActiveSupport::CurrentAttributes","","classes/ActiveSupport/CurrentAttributes.html","","<p>Abstract super class that provides a thread-isolated attributes singleton, which resets automatically â€¦\n"],["ActiveSupport::Dependencies","","classes/ActiveSupport/Dependencies.html","",""],["ActiveSupport::Dependencies::Interlock","","classes/ActiveSupport/Dependencies/Interlock.html","",""],["ActiveSupport::Dependencies::RequireDependency","","classes/ActiveSupport/Dependencies/RequireDependency.html","",""],["ActiveSupport::Deprecation","","classes/ActiveSupport/Deprecation.html","","<p>Deprecation specifies the API used by Rails to deprecate methods, instance variables, objects, and constants. â€¦\n"],["ActiveSupport::Deprecation::Behavior","","classes/ActiveSupport/Deprecation/Behavior.html","","<p>Behavior module allows to determine how to display deprecation messages. You can create a custom behavior â€¦\n"],["ActiveSupport::Deprecation::DeprecatedConstantAccessor","","classes/ActiveSupport/Deprecation/DeprecatedConstantAccessor.html","","<p>DeprecatedConstantAccessor transforms a constant into a deprecated one by hooking <code>const_missing</code>.\n<p>It takes â€¦\n"],["ActiveSupport::Deprecation::DeprecatedConstantProxy","","classes/ActiveSupport/Deprecation/DeprecatedConstantProxy.html","","<p>DeprecatedConstantProxy transforms a constant into a deprecated one. It takes the names of an old (deprecated) â€¦\n"],["ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy","","classes/ActiveSupport/Deprecation/DeprecatedInstanceVariableProxy.html","","<p>DeprecatedInstanceVariableProxy transforms an instance variable into a deprecated one. It takes an instance â€¦\n"],["ActiveSupport::Deprecation::DeprecatedObjectProxy","","classes/ActiveSupport/Deprecation/DeprecatedObjectProxy.html","","<p>DeprecatedObjectProxy transforms an object into a deprecated one. It takes an object, a deprecation message, â€¦\n"],["ActiveSupport::Deprecation::Disallowed","","classes/ActiveSupport/Deprecation/Disallowed.html","",""],["ActiveSupport::Deprecation::MethodWrapper","","classes/ActiveSupport/Deprecation/MethodWrapper.html","",""],["ActiveSupport::Deprecation::Reporting","","classes/ActiveSupport/Deprecation/Reporting.html","",""],["ActiveSupport::DeprecationException","","classes/ActiveSupport/DeprecationException.html","","<p>Raised when ActiveSupport::Deprecation::Behavior#behavior is set with <code>:raise</code>. You would set <code>:raise</code>, as â€¦\n"],["ActiveSupport::DescendantsTracker","","classes/ActiveSupport/DescendantsTracker.html","","<p>This module provides an internal implementation to track descendants which is faster than iterating through â€¦\n"],["ActiveSupport::Duration","","classes/ActiveSupport/Duration.html","","<p>Provides accurate date and time measurements using Date#advance and Time#advance, respectively. It mainly â€¦\n"],["ActiveSupport::Duration::ISO8601Parser","","classes/ActiveSupport/Duration/ISO8601Parser.html","",""],["ActiveSupport::Duration::ISO8601Parser::ParsingError","","classes/ActiveSupport/Duration/ISO8601Parser/ParsingError.html","",""],["ActiveSupport::EncryptedConfiguration","","classes/ActiveSupport/EncryptedConfiguration.html","",""],["ActiveSupport::EncryptedFile","","classes/ActiveSupport/EncryptedFile.html","",""],["ActiveSupport::EncryptedFile::InvalidKeyLengthError","","classes/ActiveSupport/EncryptedFile/InvalidKeyLengthError.html","",""],["ActiveSupport::EncryptedFile::MissingContentError","","classes/ActiveSupport/EncryptedFile/MissingContentError.html","",""],["ActiveSupport::EncryptedFile::MissingKeyError","","classes/ActiveSupport/EncryptedFile/MissingKeyError.html","",""],["ActiveSupport::EnumerableCoreExt","","classes/ActiveSupport/EnumerableCoreExt.html","",""],["ActiveSupport::EnumerableCoreExt::Constants","","classes/ActiveSupport/EnumerableCoreExt/Constants.html","",""],["ActiveSupport::ErrorReporter","","classes/ActiveSupport/ErrorReporter.html","","<p><code>ActiveSupport::ErrorReporter</code> is a common interface for error reporting services.\n<p>To rescue and report â€¦\n"],["ActiveSupport::EventedFileUpdateChecker","","classes/ActiveSupport/EventedFileUpdateChecker.html","",""],["ActiveSupport::EventedFileUpdateChecker::Core","","classes/ActiveSupport/EventedFileUpdateChecker/Core.html","",""],["ActiveSupport::ExecutionWrapper","","classes/ActiveSupport/ExecutionWrapper.html","",""],["ActiveSupport::Executor","","classes/ActiveSupport/Executor.html","",""],["ActiveSupport::FileUpdateChecker","","classes/ActiveSupport/FileUpdateChecker.html","","<p>FileUpdateChecker specifies the API used by Rails to watch files and control reloading. The API depends â€¦\n"],["ActiveSupport::ForkTracker","","classes/ActiveSupport/ForkTracker.html","",""],["ActiveSupport::ForkTracker::CoreExt","","classes/ActiveSupport/ForkTracker/CoreExt.html","",""],["ActiveSupport::ForkTracker::CoreExtPrivate","","classes/ActiveSupport/ForkTracker/CoreExtPrivate.html","",""],["ActiveSupport::ForkTracker::ModernCoreExt","","classes/ActiveSupport/ForkTracker/ModernCoreExt.html","",""],["ActiveSupport::Gzip","","classes/ActiveSupport/Gzip.html","","<p>A convenient wrapper for the zlib standard library that allows compression/decompression of strings with â€¦\n"],["ActiveSupport::Gzip::Stream","","classes/ActiveSupport/Gzip/Stream.html","",""],["ActiveSupport::HashWithIndifferentAccess","","classes/ActiveSupport/HashWithIndifferentAccess.html","","<p>Implements a hash where keys <code>:foo</code> and <code>&quot;foo&quot;</code> are considered to be the same.\n\n<pre><code>rgb = ActiveSupport::HashWithIndifferentAccess.new ...\n</code></pre>\n"],["ActiveSupport::HashWithIndifferentAccess","","classes/ActiveSupport/HashWithIndifferentAccess.html","","<p>Implements a hash where keys <code>:foo</code> and <code>&quot;foo&quot;</code> are considered to be the same.\n\n<pre><code>rgb = ActiveSupport::HashWithIndifferentAccess.new ...\n</code></pre>\n"],["ActiveSupport::Inflector","","classes/ActiveSupport/Inflector.html","","<p>The Inflector transforms words from singular to plural, class names to table names, modularized class â€¦\n"],["ActiveSupport::Inflector::Inflections","","classes/ActiveSupport/Inflector/Inflections.html","","<p>A singleton instance of this class is yielded by Inflector.inflections, which can then be used to specify â€¦\n"],["ActiveSupport::Inflector::Inflections::Uncountables","","classes/ActiveSupport/Inflector/Inflections/Uncountables.html","",""],["ActiveSupport::InheritableOptions","","classes/ActiveSupport/InheritableOptions.html","","<p><code>InheritableOptions</code> provides a constructor to build an OrderedOptions hash inherited from another hash. â€¦\n"],["ActiveSupport::JSON","","classes/ActiveSupport/JSON.html","",""],["ActiveSupport::KeyGenerator","","classes/ActiveSupport/KeyGenerator.html","","<p>KeyGenerator is a simple wrapper around OpenSSL&#39;s implementation of PBKDF2. It can be used to derive â€¦\n"],["ActiveSupport::LazyLoadHooks","","classes/ActiveSupport/LazyLoadHooks.html","","<p>LazyLoadHooks allows Rails to lazily load a lot of components and thus making the app boot faster. Because â€¦\n"],["ActiveSupport::LogSubscriber","","classes/ActiveSupport/LogSubscriber.html","","<p><code>ActiveSupport::LogSubscriber</code> is an object set to consume ActiveSupport::Notifications with the sole purpose â€¦\n"],["ActiveSupport::LogSubscriber::TestHelper","","classes/ActiveSupport/LogSubscriber/TestHelper.html","","<p>Provides some helpers to deal with testing log subscribers by setting up notifications. Take for instance â€¦\n"],["ActiveSupport::LogSubscriber::TestHelper::MockLogger","","classes/ActiveSupport/LogSubscriber/TestHelper/MockLogger.html","",""],["ActiveSupport::Logger","","classes/ActiveSupport/Logger.html","",""],["ActiveSupport::Logger::SimpleFormatter","","classes/ActiveSupport/Logger/SimpleFormatter.html","","<p>Simple formatter which only displays the message.\n"],["ActiveSupport::LoggerSilence","","classes/ActiveSupport/LoggerSilence.html","",""],["ActiveSupport::MessageEncryptor","","classes/ActiveSupport/MessageEncryptor.html","","<p>MessageEncryptor is a simple way to encrypt values which get stored somewhere you don&#39;t trust.\n<p>The â€¦\n"],["ActiveSupport::MessageEncryptor::InvalidMessage","","classes/ActiveSupport/MessageEncryptor/InvalidMessage.html","",""],["ActiveSupport::MessageVerifier","","classes/ActiveSupport/MessageVerifier.html","","<p><code>MessageVerifier</code> makes it easy to generate and verify messages which are signed to prevent tampering. â€¦\n"],["ActiveSupport::MessageVerifier::InvalidSignature","","classes/ActiveSupport/MessageVerifier/InvalidSignature.html","",""],["ActiveSupport::Messages","","classes/ActiveSupport/Messages.html","",""],["ActiveSupport::Messages::Rotator","","classes/ActiveSupport/Messages/Rotator.html","",""],["ActiveSupport::Messages::Rotator::Encryptor","","classes/ActiveSupport/Messages/Rotator/Encryptor.html","",""],["ActiveSupport::Messages::Rotator::Verifier","","classes/ActiveSupport/Messages/Rotator/Verifier.html","",""],["ActiveSupport::Multibyte","","classes/ActiveSupport/Multibyte.html","",""],["ActiveSupport::Multibyte::Chars","","classes/ActiveSupport/Multibyte/Chars.html","","<p>Chars enables you to work transparently with UTF-8 encoding in the Ruby String class without having extensive â€¦\n"],["ActiveSupport::Multibyte::Unicode","","classes/ActiveSupport/Multibyte/Unicode.html","",""],["ActiveSupport::Notifications","","classes/ActiveSupport/Notifications.html","","<p>Notifications\n<p><code>ActiveSupport::Notifications</code> provides an instrumentation API for Ruby.\n<p>Instrumenters\n"],["ActiveSupport::Notifications::Event","","classes/ActiveSupport/Notifications/Event.html","",""],["ActiveSupport::Notifications::Fanout","","classes/ActiveSupport/Notifications/Fanout.html","","<p>This is a default queue implementation that ships with Notifications. It just pushes events to all registered â€¦\n"],["ActiveSupport::Notifications::Fanout::Subscribers","","classes/ActiveSupport/Notifications/Fanout/Subscribers.html","",""],["ActiveSupport::Notifications::Fanout::Subscribers::EventObject","","classes/ActiveSupport/Notifications/Fanout/Subscribers/EventObject.html","",""],["ActiveSupport::Notifications::Fanout::Subscribers::Matcher","","classes/ActiveSupport/Notifications/Fanout/Subscribers/Matcher.html","",""],["ActiveSupport::Notifications::Fanout::Subscribers::Matcher::AllMessages","","classes/ActiveSupport/Notifications/Fanout/Subscribers/Matcher/AllMessages.html","",""],["ActiveSupport::Notifications::InstrumentationSubscriberError","","classes/ActiveSupport/Notifications/InstrumentationSubscriberError.html","",""],["ActiveSupport::Notifications::Instrumenter","","classes/ActiveSupport/Notifications/Instrumenter.html","","<p>Instrumenters are stored in a thread local.\n"],["ActiveSupport::NumberHelper","","classes/ActiveSupport/NumberHelper.html","",""],["ActiveSupport::NumericWithFormat","","classes/ActiveSupport/NumericWithFormat.html","",""],["ActiveSupport::OrderedOptions","","classes/ActiveSupport/OrderedOptions.html","","<p><code>OrderedOptions</code> inherits from <code>Hash</code> and provides dynamic accessor methods.\n<p>With a <code>Hash</code>, key-value pairs â€¦\n"],["ActiveSupport::ParameterFilter","","classes/ActiveSupport/ParameterFilter.html","","<p><code>ParameterFilter</code> allows you to specify keys for sensitive data from hash-like object and replace corresponding â€¦\n"],["ActiveSupport::PerThreadRegistry","","classes/ActiveSupport/PerThreadRegistry.html","","<p>NOTE: This approach has been deprecated for end-user code in favor of thread_mattr_accessor and friends. â€¦\n"],["ActiveSupport::ProxyObject","","classes/ActiveSupport/ProxyObject.html","","<p>A class with no predefined methods that behaves similarly to Builder&#39;s BlankSlate. Used for proxy â€¦\n"],["ActiveSupport::RangeWithFormat","","classes/ActiveSupport/RangeWithFormat.html","",""],["ActiveSupport::Reloader","","classes/ActiveSupport/Reloader.html","",""],["ActiveSupport::Rescuable","","classes/ActiveSupport/Rescuable.html","","<p>Rescuable module adds support for easier exception handling.\n"],["ActiveSupport::Rescuable::ClassMethods","","classes/ActiveSupport/Rescuable/ClassMethods.html","",""],["ActiveSupport::SafeBuffer","","classes/ActiveSupport/SafeBuffer.html","",""],["ActiveSupport::SafeBuffer::SafeConcatError","","classes/ActiveSupport/SafeBuffer/SafeConcatError.html","","<p>Raised when ActiveSupport::SafeBuffer#safe_concat is called on unsafe buffers.\n"],["ActiveSupport::SecureCompareRotator","","classes/ActiveSupport/SecureCompareRotator.html","","<p>The ActiveSupport::SecureCompareRotator is a wrapper around ActiveSupport::SecurityUtils.secure_compare â€¦\n"],["ActiveSupport::SecurityUtils","","classes/ActiveSupport/SecurityUtils.html","",""],["ActiveSupport::StringInquirer","","classes/ActiveSupport/StringInquirer.html","","<p>Wrapping a string in this class gives you a prettier way to test for equality. The value returned by â€¦\n"],["ActiveSupport::Subscriber","","classes/ActiveSupport/Subscriber.html","","<p>ActiveSupport::Subscriber is an object set to consume ActiveSupport::Notifications. The subscriber dispatches â€¦\n"],["ActiveSupport::TaggedLogging","","classes/ActiveSupport/TaggedLogging.html","","<p>Wraps any standard Logger object to provide tagging capabilities.\n<p>May be called with a block:\n\n<pre><code>logger = ...\n</code></pre>\n"],["ActiveSupport::TestCase","","classes/ActiveSupport/TestCase.html","",""],["ActiveSupport::Testing","","classes/ActiveSupport/Testing.html","",""],["ActiveSupport::Testing::Assertions","","classes/ActiveSupport/Testing/Assertions.html","",""],["ActiveSupport::Testing::ConstantLookup","","classes/ActiveSupport/Testing/ConstantLookup.html","","<p>Resolves a constant from a minitest spec name.\n<p>Given the following spec-style test:\n\n<pre><code>describe WidgetsController, ...\n</code></pre>\n"],["ActiveSupport::Testing::Declarative","","classes/ActiveSupport/Testing/Declarative.html","",""],["ActiveSupport::Testing::Deprecation","","classes/ActiveSupport/Testing/Deprecation.html","",""],["ActiveSupport::Testing::FileFixtures","","classes/ActiveSupport/Testing/FileFixtures.html","","<p>Adds simple access to sample files called file fixtures. File fixtures are normal files stored in <code>ActiveSupport::TestCase.file_fixture_path</code> â€¦\n"],["ActiveSupport::Testing::Isolation","","classes/ActiveSupport/Testing/Isolation.html","",""],["ActiveSupport::Testing::Isolation::Forking","","classes/ActiveSupport/Testing/Isolation/Forking.html","",""],["ActiveSupport::Testing::Isolation::Subprocess","","classes/ActiveSupport/Testing/Isolation/Subprocess.html","",""],["ActiveSupport::Testing::Parallelization","","classes/ActiveSupport/Testing/Parallelization.html","",""],["ActiveSupport::Testing::Parallelization::Server","","classes/ActiveSupport/Testing/Parallelization/Server.html","",""],["ActiveSupport::Testing::Parallelization::Worker","","classes/ActiveSupport/Testing/Parallelization/Worker.html","",""],["ActiveSupport::Testing::SetupAndTeardown","","classes/ActiveSupport/Testing/SetupAndTeardown.html","","<p>Adds support for <code>setup</code> and <code>teardown</code> callbacks. These callbacks serve as a replacement to overwriting â€¦\n"],["ActiveSupport::Testing::SetupAndTeardown::ClassMethods","","classes/ActiveSupport/Testing/SetupAndTeardown/ClassMethods.html","",""],["ActiveSupport::Testing::TimeHelpers","","classes/ActiveSupport/Testing/TimeHelpers.html","","<p>Contains helpers that help you test passage of time.\n"],["ActiveSupport::TimeWithZone","","classes/ActiveSupport/TimeWithZone.html","","<p>A Time-like class that can represent a time in any time zone. Necessary because standard Ruby Time instances â€¦\n"],["ActiveSupport::TimeZone","","classes/ActiveSupport/TimeZone.html","","<p>The TimeZone class serves as a wrapper around <code>TZInfo::Timezone</code> instances. It allows us to do the following: â€¦\n"],["ActiveSupport::VERSION","","classes/ActiveSupport/VERSION.html","",""],["ActiveSupport::XMLConverter","","classes/ActiveSupport/XMLConverter.html","",""],["ActiveSupport::XMLConverter::DisallowedType","","classes/ActiveSupport/XMLConverter/DisallowedType.html","","<p>Raised if the XML contains attributes with type=â€œyamlâ€ or type=â€œsymbolâ€. Read Hash#from_xml â€¦\n"],["ActiveSupport::XmlMini","","classes/ActiveSupport/XmlMini.html","","<p>XmlMini\n<p>To use the much faster libxml parser:\n\n<pre><code>gem &#39;libxml-ruby&#39;, &#39;=0.9.7&#39;\nXmlMini.backend = &#39;LibXML&#39;\n</code></pre>\n"],["ActiveSupport::XmlMini_LibXMLSAX","","classes/ActiveSupport/XmlMini_LibXMLSAX.html","",""],["ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html","","<p>Class that will build the hash while the XML document is being parsed using SAX events.\n"],["ActiveSupport::XmlMini_NokogiriSAX","","classes/ActiveSupport/XmlMini_NokogiriSAX.html","",""],["ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html","","<p>Class that will build the hash while the XML document is being parsed using SAX events.\n"],["Arel","","classes/Arel.html","",""],["Arel::Nodes","","classes/Arel/Nodes.html","",""],["Array","","classes/Array.html","",""],["Benchmark","","classes/Benchmark.html","",""],["BigDecimal","","classes/BigDecimal.html","",""],["Class","","classes/Class.html","",""],["Date","","classes/Date.html","",""],["DateAndTime","","classes/DateAndTime.html","",""],["DateAndTime::Calculations","","classes/DateAndTime/Calculations.html","",""],["DateAndTime::Compatibility","","classes/DateAndTime/Compatibility.html","",""],["DateAndTime::Zones","","classes/DateAndTime/Zones.html","",""],["DateTime","","classes/DateTime.html","",""],["Delegator","","classes/Delegator.html","",""],["Digest","","classes/Digest.html","",""],["Digest::UUID","","classes/Digest/UUID.html","",""],["ERB","","classes/ERB.html","",""],["ERB::Util","","classes/ERB/Util.html","",""],["Enumerable","","classes/Enumerable.html","",""],["Enumerable::SoleItemExpectedError","","classes/Enumerable/SoleItemExpectedError.html","","<p>Error generated by <code>sole</code> when called on an enumerable that doesn&#39;t have exactly one item.\n"],["Exception","","classes/Exception.html","",""],["FalseClass","","classes/FalseClass.html","",""],["File","","classes/File.html","",""],["Float","","classes/Float.html","",""],["Hash","","classes/Hash.html","",""],["IO","","classes/IO.html","",""],["Integer","","classes/Integer.html","",""],["Kernel","","classes/Kernel.html","",""],["LoadError","","classes/LoadError.html","",""],["Mail","","classes/Mail.html","",""],["Mail::Address","","classes/Mail/Address.html","",""],["Mail::Message","","classes/Mail/Message.html","",""],["Method","","classes/Method.html","",""],["Mime","","classes/Mime.html","",""],["Mime::AllType","","classes/Mime/AllType.html","",""],["Mime::Mimes","","classes/Mime/Mimes.html","",""],["Mime::NullType","","classes/Mime/NullType.html","",""],["Mime::Type","","classes/Mime/Type.html","","<p>Encapsulates the notion of a MIME type. Can be used at render time, for example, with:\n\n<pre><code>class PostsController ...\n</code></pre>\n"],["Mime::Type::InvalidMimeType","","classes/Mime/Type/InvalidMimeType.html","",""],["Minitest","","classes/Minitest.html","",""],["Minitest::BacktraceFilterWithFallback","","classes/Minitest/BacktraceFilterWithFallback.html","",""],["Minitest::SuppressedSummaryReporter","","classes/Minitest/SuppressedSummaryReporter.html","",""],["Module","","classes/Module.html","","<p>Attribute Accessors\n<p>Extends the module object with class/module and instance accessors for class/module â€¦\n"],["Module::Concerning","","classes/Module/Concerning.html","","<p>Bite-sized separation of concerns\n<p>We often find ourselves with a medium-sized chunk of behavior that we&#39;d â€¦\n"],["Module::DelegationError","","classes/Module/DelegationError.html","","<p>Error generated by <code>delegate</code> when a method is called on <code>nil</code> and <code>allow_nil</code> option is not used.\n"],["NameError","","classes/NameError.html","",""],["NilClass","","classes/NilClass.html","",""],["Numeric","","classes/Numeric.html","",""],["Object","","classes/Object.html","",""],["Pathname","","classes/Pathname.html","",""],["Process","","classes/Process.html","",""],["Rails","","classes/Rails.html","",""],["Rails::API","","classes/Rails/API.html","",""],["Rails::API::EdgeTask","","classes/Rails/API/EdgeTask.html","",""],["Rails::API::RepoTask","","classes/Rails/API/RepoTask.html","",""],["Rails::API::StableTask","","classes/Rails/API/StableTask.html","",""],["Rails::API::Task","","classes/Rails/API/Task.html","",""],["Rails::AppBuilder","","classes/Rails/AppBuilder.html","","<p>The application builder allows you to override elements of the application generator without being forced â€¦\n"],["Rails::Application","","classes/Rails/Application.html","","<p>An Engine with the responsibility of coordinating the whole boot process.\n<p>Initialization\n<p>Rails::Application â€¦\n"],["Rails::Application::Bootstrap","","classes/Rails/Application/Bootstrap.html","",""],["Rails::Application::Configuration","","classes/Rails/Application/Configuration.html","",""],["Rails::Application::DefaultMiddlewareStack","","classes/Rails/Application/DefaultMiddlewareStack.html","",""],["Rails::Application::Finisher","","classes/Rails/Application/Finisher.html","",""],["Rails::Application::Finisher::InterlockHook","","classes/Rails/Application/Finisher/InterlockHook.html","",""],["Rails::Application::Finisher::MutexHook","","classes/Rails/Application/Finisher/MutexHook.html","",""],["Rails::Application::RoutesReloader","","classes/Rails/Application/RoutesReloader.html","",""],["Rails::BacktraceCleaner","","classes/Rails/BacktraceCleaner.html","",""],["Rails::Command","","classes/Rails/Command.html","",""],["Rails::Command::Actions","","classes/Rails/Command/Actions.html","",""],["Rails::Command::Base","","classes/Rails/Command/Base.html","",""],["Rails::Command::Db","","classes/Rails/Command/Db.html","",""],["Rails::Command::Db::System","","classes/Rails/Command/Db/System.html","",""],["Rails::Command::Helpers","","classes/Rails/Command/Helpers.html","",""],["Rails::Command::Helpers::Editor","","classes/Rails/Command/Helpers/Editor.html","",""],["Rails::Conductor","","classes/Rails/Conductor.html","",""],["Rails::Configuration","","classes/Rails/Configuration.html","",""],["Rails::Configuration::MiddlewareStackProxy","","classes/Rails/Configuration/MiddlewareStackProxy.html","","<p>MiddlewareStackProxy is a proxy for the Rails middleware stack that allows you to configure middlewares â€¦\n"],["Rails::Console","","classes/Rails/Console.html","",""],["Rails::Console::BacktraceCleaner","","classes/Rails/Console/BacktraceCleaner.html","",""],["Rails::ConsoleMethods","","classes/Rails/ConsoleMethods.html","",""],["Rails::DBConsole","","classes/Rails/DBConsole.html","",""],["Rails::Engine","","classes/Rails/Engine.html","","<p><code>Rails::Engine</code> allows you to wrap a specific Rails application or subset of functionality and share it â€¦\n"],["Rails::Engine::Configuration","","classes/Rails/Engine/Configuration.html","",""],["Rails::Engine::Railties","","classes/Rails/Engine/Railties.html","",""],["Rails::Engine::Updater","","classes/Rails/Engine/Updater.html","",""],["Rails::Generators","","classes/Rails/Generators.html","",""],["Rails::Generators::Actions","","classes/Rails/Generators/Actions.html","",""],["Rails::Generators::ActiveModel","","classes/Rails/Generators/ActiveModel.html","","<p>ActiveModel is a class to be implemented by each ORM to allow Rails to generate customized controller â€¦\n"],["Rails::Generators::AppBase","","classes/Rails/Generators/AppBase.html","",""],["Rails::Generators::AppBase::GemfileEntry","","classes/Rails/Generators/AppBase/GemfileEntry.html","",""],["Rails::Generators::AppGenerator","","classes/Rails/Generators/AppGenerator.html","",""],["Rails::Generators::Base","","classes/Rails/Generators/Base.html","",""],["Rails::Generators::BenchmarkGenerator","","classes/Rails/Generators/BenchmarkGenerator.html","",""],["Rails::Generators::Db","","classes/Rails/Generators/Db.html","",""],["Rails::Generators::Db::System","","classes/Rails/Generators/Db/System.html","",""],["Rails::Generators::Migration","","classes/Rails/Generators/Migration.html","","<p>Holds common methods for migrations. It assumes that migrations have the [0-9]*_name format and can be â€¦\n"],["Rails::Generators::NamedBase","","classes/Rails/Generators/NamedBase.html","",""],["Rails::Generators::TestCase","","classes/Rails/Generators/TestCase.html","","<p>This class provides a TestCase for testing generators. To set up, you need just to configure the destination â€¦\n"],["Rails::Generators::Testing","","classes/Rails/Generators/Testing.html","",""],["Rails::Generators::Testing::Assertions","","classes/Rails/Generators/Testing/Assertions.html","",""],["Rails::Generators::Testing::Behaviour","","classes/Rails/Generators/Testing/Behaviour.html","",""],["Rails::Generators::Testing::Behaviour::ClassMethods","","classes/Rails/Generators/Testing/Behaviour/ClassMethods.html","",""],["Rails::Generators::Testing::SetupAndTeardown","","classes/Rails/Generators/Testing/SetupAndTeardown.html","",""],["Rails::Info","","classes/Rails/Info.html","","<p>This module helps build the runtime properties that are displayed in Rails::InfoController responses. â€¦\n"],["Rails::Initializable","","classes/Rails/Initializable.html","",""],["Rails::Initializable::ClassMethods","","classes/Rails/Initializable/ClassMethods.html","",""],["Rails::Initializable::Collection","","classes/Rails/Initializable/Collection.html","",""],["Rails::Initializable::Initializer","","classes/Rails/Initializable/Initializer.html","",""],["Rails::Paths","","classes/Rails/Paths.html","",""],["Rails::Paths::Path","","classes/Rails/Paths/Path.html","",""],["Rails::Paths::Root","","classes/Rails/Paths/Root.html","","<p>This object is an extended hash that behaves as root of the <code>Rails::Paths</code> system. It allows you to collect â€¦\n"],["Rails::PluginBuilder","","classes/Rails/PluginBuilder.html","","<p>The plugin builder allows you to override elements of the plugin generator without being forced to reverse â€¦\n"],["Rails::Rack","","classes/Rails/Rack.html","",""],["Rails::Rack::Logger","","classes/Rails/Rack/Logger.html","","<p>Sets log tags, logs the request, calls the app, and flushes the logs.\n<p>Log tags (<code>taggers</code>) can be an Array â€¦\n"],["Rails::Rails","","classes/Rails/Rails.html","",""],["Rails::Rails::Conductor","","classes/Rails/Rails/Conductor.html","",""],["Rails::Rails::Conductor::ActionMailbox","","classes/Rails/Rails/Conductor/ActionMailbox.html","",""],["Rails::Rails::Conductor::ActionMailbox::InboundEmails","","classes/Rails/Rails/Conductor/ActionMailbox/InboundEmails.html","",""],["Rails::Rails::Conductor::ActionMailbox::InboundEmails::SourcesController","","classes/Rails/Rails/Conductor/ActionMailbox/InboundEmails/SourcesController.html","",""],["Rails::Rails::Conductor::ActionMailbox::InboundEmailsController","","classes/Rails/Rails/Conductor/ActionMailbox/InboundEmailsController.html","",""],["Rails::Rails::Conductor::ActionMailbox::IncineratesController","","classes/Rails/Rails/Conductor/ActionMailbox/IncineratesController.html","","<p>Incinerating will destroy an email that is due and has already been processed.\n"],["Rails::Rails::Conductor::ActionMailbox::ReroutesController","","classes/Rails/Rails/Conductor/ActionMailbox/ReroutesController.html","","<p>Rerouting will run routing and processing on an email that has already been, or attempted to be, processed. â€¦\n"],["Rails::Railtie","","classes/Rails/Railtie.html","","<p><code>Rails::Railtie</code> is the core of the Rails framework and provides several hooks to extend Rails and/or modify â€¦\n"],["Rails::Railtie::Configurable","","classes/Rails/Railtie/Configurable.html","",""],["Rails::Railtie::Configurable::ClassMethods","","classes/Rails/Railtie/Configurable/ClassMethods.html","",""],["Rails::Railtie::Configuration","","classes/Rails/Railtie/Configuration.html","",""],["Rails::Secrets","","classes/Rails/Secrets.html","",""],["Rails::Secrets::MissingKeyError","","classes/Rails/Secrets/MissingKeyError.html","",""],["Rails::Server","","classes/Rails/Server.html","",""],["Rails::Server::Options","","classes/Rails/Server/Options.html","",""],["Rails::SourceAnnotationExtractor","","classes/Rails/SourceAnnotationExtractor.html","","<p>Implements the logic behind <code>Rails::Command::NotesCommand</code>. See <code>rails notes --help</code> for usage information. â€¦\n"],["Rails::SourceAnnotationExtractor::Annotation","","classes/Rails/SourceAnnotationExtractor/Annotation.html","",""],["Rails::VERSION","","classes/Rails/VERSION.html","",""],["Range","","classes/Range.html","",""],["Regexp","","classes/Regexp.html","",""],["SecureRandom","","classes/SecureRandom.html","",""],["Singleton","","classes/Singleton.html","",""],["String","","classes/String.html","","<p>String inflections define new methods on the String class to transform names for different purposes. â€¦\n"],["Symbol","","classes/Symbol.html","",""],["Time","","classes/Time.html","",""],["TrueClass","","classes/TrueClass.html","",""],["URI","","classes/URI.html","",""],["UnboundMethod","","classes/UnboundMethod.html","",""],["!~","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-21~","","<p>Equivalent to <code>String#!~</code>. Match the class name against the given regexp. Returns <code>true</code> if there is no match, â€¦\n"],["%","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-25","(other)","<p>Returns the modulo of this Duration by another Duration or Numeric. Numeric values are treated as seconds. â€¦\n"],["%","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-25","(args)",""],["*","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-2A","(other)","<p>Multiplies this Duration by a Numeric and returns a new Duration.\n"],["*","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-2A","(*)",""],["+","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-2B","(other)","<p>Adds another Duration or a Numeric to this Duration. Numeric values are treated as seconds.\n"],["+","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-2B","(other)",""],["+","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-2B","(other)","<p>Adds an interval of time to the current object&#39;s time and returns that value as a new TimeWithZone â€¦\n"],["+","Rails::Initializable::Collection","classes/Rails/Initializable/Collection.html#method-i-2B","(other)",""],["-","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-2D","(other)","<p>Subtracts another Duration or a Numeric from this Duration. Numeric values are treated as seconds.\n"],["-","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-2D","(other)","<p>Subtracts an interval of time and returns a new TimeWithZone object unless the other value <code>acts_like?</code> â€¦\n"],["-","Rails::Engine::Railties","classes/Rails/Engine/Railties.html#method-i-2D","(others)",""],["-","Time","classes/Time.html#method-i-2D","(other)",""],["-@","ActiveRecord::ConnectionAdapters::Deduplicable","classes/ActiveRecord/ConnectionAdapters/Deduplicable.html#method-i-2D-40","()",""],["/","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-2F","(other)","<p>Divides this Duration by a Numeric and returns a new Duration.\n"],["<<","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-3C-3C","(*records)","<p>Adds one or more <code>records</code> to the collection by setting their foreign keys to the association&#39;s primary â€¦\n"],["<<","ActiveRecord::StatementCache::PartialQueryCollector","classes/ActiveRecord/StatementCache/PartialQueryCollector.html#method-i-3C-3C","(str)",""],["<<","ActiveSupport::Inflector::Inflections::Uncountables","classes/ActiveSupport/Inflector/Inflections/Uncountables.html#method-i-3C-3C","(*word)",""],["<<","ActiveSupport::Notifications::Event","classes/ActiveSupport/Notifications/Event.html#method-i-3C-3C","(event)",""],["<<","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-3C-3C","(value)",""],["<<","ActiveSupport::Testing::Parallelization::Server","classes/ActiveSupport/Testing/Parallelization/Server.html#method-i-3C-3C","(o)",""],["<<","Mime::Mimes","classes/Mime/Mimes.html#method-i-3C-3C","(type)",""],["<<","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-3C-3C","(path)",""],["<=>","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-3C-3D-3E","","<p>Equivalent to <code>String#&lt;=&gt;</code>.\n\n<pre><code>class BlogPost\n  extend ActiveModel::Naming\nend\n\nBlogPost.model_name &lt;=&gt; ...\n</code></pre>\n"],["<=>","ActiveRecord::ConnectionAdapters::AbstractAdapter::Version","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter/Version.html#method-i-3C-3D-3E","(version_string)",""],["<=>","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-3C-3D-3E","(other_object)","<p>Allows sort on objects\n"],["<=>","ActiveStorage::Filename","classes/ActiveStorage/Filename.html#method-i-3C-3D-3E","(other)",""],["<=>","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-3C-3D-3E","(other)","<p>Compares one Duration with another or a Numeric to this Duration. Numeric values are treated as seconds. â€¦\n"],["<=>","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-3C-3D-3E","(other)","<p>Use the time in UTC for comparisons.\n"],["<=>","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-3C-3D-3E","(zone)","<p>Compare this time zone to the parameter. The two are compared first on their offsets, and then by name. â€¦\n"],["<=>","Date","classes/Date.html#method-i-3C-3D-3E","(other)",""],["<=>","DateTime","classes/DateTime.html#method-i-3C-3D-3E","(other)","<p>Layers additional behavior on DateTime#&lt;=&gt; so that Time and ActiveSupport::TimeWithZone instances â€¦\n"],["<=>","Time","classes/Time.html#method-i-3C-3D-3E","(other)",""],["==","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-3D-3D","(other)","<p>Returns true if another <code>Parameters</code> object contains the same content and permitted flag.\n"],["==","ActionDispatch::MiddlewareStack::Middleware","classes/ActionDispatch/MiddlewareStack/Middleware.html#method-i-3D-3D","(middleware)",""],["==","ActionText::Content","classes/ActionText/Content.html#method-i-3D-3D","(other)",""],["==","ActionView::FileSystemResolver","classes/ActionView/FileSystemResolver.html#method-i-3D-3D","(resolver)",""],["==","ActionView::Template::Types::Type","classes/ActionView/Template/Types/Type.html#method-i-3D-3D","(type)",""],["==","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-3D-3D","","<p>Equivalent to <code>String#==</code>. Returns <code>true</code> if the class name and <code>other</code> are equal, otherwise <code>false</code>.\n\n<pre><code>class BlogPost ...\n</code></pre>\n"],["==","ActiveModel::Type::Value","classes/ActiveModel/Type/Value.html#method-i-3D-3D","(other)",""],["==","ActiveModel::Type::Value","classes/ActiveModel/Type/Value.html#method-i-3D-3D","(other)",""],["==","ActiveModel::Validations::AcceptanceValidator::LazilyDefineAttributes","classes/ActiveModel/Validations/AcceptanceValidator/LazilyDefineAttributes.html#method-i-3D-3D","(other)",""],["==","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-3D-3D","(other)","<p>Equivalent to <code>Array#==</code>. Returns <code>true</code> if the two arrays contain the same number of elements and if each â€¦\n"],["==","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-3D-3D","(comparison_object)","<p>Returns true if <code>comparison_object</code> is the same exact object, or <code>comparison_object</code> is of the same type â€¦\n"],["==","ActiveRecord::Encryption::Message","classes/ActiveRecord/Encryption/Message.html#method-i-3D-3D","(other_message)",""],["==","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-i-3D-3D","(other_aggregation)","<p>Returns <code>true</code> if <code>self</code> and <code>other_aggregation</code> have the same <code>name</code> attribute, <code>active_record</code> attribute, and â€¦\n"],["==","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-3D-3D","(other)","<p>Compares two relations for equality.\n"],["==","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-3D-3D","(other)","<p>Returns <code>true</code> if <code>other</code> is also a Duration instance with the same <code>value</code>, or if <code>other == value</code>.\n"],["==","Mail::Address","classes/Mail/Address.html#method-i-3D-3D","(other_address)",""],["==","Mime::Type","classes/Mime/Type.html#method-i-3D-3D","(mime_type)",""],["===","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-3D-3D-3D","","<p>Equivalent to <code>#==</code>.\n\n<pre><code>class BlogPost\n  extend ActiveModel::Naming\nend\n\nBlogPost.model_name === &#39;BlogPost&#39; ...\n</code></pre>\n"],["===","ActiveSupport::CompareWithRange","classes/ActiveSupport/CompareWithRange.html#method-i-3D-3D-3D","(value)","<p>Extends the default Range#=== to support range comparisons.\n\n<pre><code>(1..5) === (1..5)  # =&gt; true\n(1..5) === (2..3) ...\n</code></pre>\n"],["===","ActiveSupport::Notifications::Fanout::Subscribers::Matcher::AllMessages","classes/ActiveSupport/Notifications/Fanout/Subscribers/Matcher/AllMessages.html#method-i-3D-3D-3D","(name)",""],["===","Mime::Type","classes/Mime/Type.html#method-i-3D-3D-3D","(list)",""],["===","Time","classes/Time.html#method-c-3D-3D-3D","(other)","<p>Overriding case equality method so that it returns true for ActiveSupport::TimeWithZone instances\n"],["=~","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-3D~","","<p>Equivalent to <code>String#=~</code>. Match the class name against the given regexp. Returns the position where the â€¦\n"],["=~","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-3D~","(re)","<p>Compare #name and TZInfo identifier to a supplied regexp, returning <code>true</code> if a match is found.\n"],["=~","Mime::Type","classes/Mime/Type.html#method-i-3D~","(mime_type)",""],["GET","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-GET","()","<p>Override Rack&#39;s GET method to support indifferent access.\n"],["POST","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-POST","()","<p>Override Rack&#39;s POST method to support indifferent access.\n"],["[]","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-5B-5D","(key)","<p>Returns a parameter for the given <code>key</code>. If not found, returns <code>nil</code>.\n\n<pre><code>params = ActionController::Parameters.new(person: ...\n</code></pre>\n"],["[]","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-5B-5D","(k)",""],["[]","ActionDispatch::Http::Headers","classes/ActionDispatch/Http/Headers.html#method-i-5B-5D","(key)","<p>Returns the value for the given key mapped to @env.\n"],["[]","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-5B-5D","(i)",""],["[]","ActionView::Template::Types","classes/ActionView/Template/Types.html#method-c-5B-5D","(type)",""],["[]","ActionView::Template::Types::Type","classes/ActionView/Template/Types/Type.html#method-c-5B-5D","(type)",""],["[]","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-5B-5D","(attribute)","<p>When passed a symbol or a name of a method, returns an array of errors for the method.\n\n<pre><code>person.errors[:name] ...\n</code></pre>\n"],["[]","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-5B-5D","(attr_name)","<p>Returns the value of the attribute identified by <code>attr_name</code> after it has been typecast (for example, â€œ2004-12-12â€ â€¦\n"],["[]","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-5B-5D","(name)","<p>Returns a ColumnDefinition for the column with name <code>name</code>.\n"],["[]","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-i-5B-5D","(x)",""],["[]","ActiveRecord::FixtureSet::ClassCache","classes/ActiveRecord/FixtureSet/ClassCache.html#method-i-5B-5D","(fs_name)",""],["[]","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-c-5B-5D","(version)",""],["[]","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-i-5B-5D","(idx)",""],["[]","ActiveRecord::Schema","classes/ActiveRecord/Schema.html#method-c-5B-5D","(version)",""],["[]","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-c-5B-5D","(*args)",""],["[]","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-5B-5D","(key)","<p>Same as <code>Hash#[]</code> where the key passed as argument can be either a string or a symbol:\n\n<pre><code>counters = ActiveSupport::HashWithIndifferentAccess.new ...\n</code></pre>\n"],["[]","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-c-5B-5D","(*args)",""],["[]","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-5B-5D","(key)","<p>Same as <code>Hash#[]</code> where the key passed as argument can be either a string or a symbol:\n\n<pre><code>counters = ActiveSupport::HashWithIndifferentAccess.new ...\n</code></pre>\n"],["[]","ActiveSupport::OrderedOptions","classes/ActiveSupport/OrderedOptions.html#method-i-5B-5D","(key)",""],["[]","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-5B-5D","(*args)",""],["[]","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-5B-5D","(arg)","<p>Locate a specific time zone object. If the argument is a string, it is interpreted to mean the name of â€¦\n"],["[]","Mime","classes/Mime.html#method-c-5B-5D","(type)",""],["[]","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-5B-5D","(path)",""],["[]=","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-5B-5D-3D","(key, value)","<p>Assigns a value to a given <code>key</code>. The given key may still get filtered out when <code>permit</code> is called.\n"],["[]=","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-5B-5D-3D","(k, v)",""],["[]=","ActionDispatch::Http::Headers","classes/ActionDispatch/Http/Headers.html#method-i-5B-5D-3D","(key, value)","<p>Sets the given value for the key mapped to @env.\n"],["[]=","ActionMailer::Base::LateAttachmentsProxy","classes/ActionMailer/Base/LateAttachmentsProxy.html#method-i-5B-5D-3D","(_name, _content)",""],["[]=","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-5B-5D-3D","(attr_name, value)","<p>Updates the attribute identified by <code>attr_name</code> with the specified <code>value</code>. (Alias for the protected #write_attribute â€¦\n"],["[]=","ActiveRecord::Encryption::Properties","classes/ActiveRecord/Encryption/Properties.html#method-i-5B-5D-3D","(key, value)","<p>Set a value for a given key\n<p>It will raise an <code>EncryptedContentIntegrity</code> if the value exists\n"],["[]=","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-i-5B-5D-3D","(k, v)",""],["[]=","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-5B-5D-3D","(key, value)","<p>Assigns a new value to the hash:\n\n<pre><code>hash = ActiveSupport::HashWithIndifferentAccess.new\nhash[:key] = &#39;value&#39;\n</code></pre>\n"],["[]=","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-5B-5D-3D","(key, value)","<p>Assigns a new value to the hash:\n\n<pre><code>hash = ActiveSupport::HashWithIndifferentAccess.new\nhash[:key] = &#39;value&#39;\n</code></pre>\n"],["[]=","ActiveSupport::OrderedOptions","classes/ActiveSupport/OrderedOptions.html#method-i-5B-5D-3D","(key, value)",""],["[]=","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-5B-5D-3D","(*args)",""],["[]=","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-5B-5D-3D","(path, value)",""],["_current_page?","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-_current_page-3F","(options = nil, check_parameters: false, **options_as_kwargs)",""],["_dump","ActionText::Serialization","classes/ActionText/Serialization.html#method-i-_dump","(*)",""],["_fork","ActiveSupport::ForkTracker::ModernCoreExt","classes/ActiveSupport/ForkTracker/ModernCoreExt.html#method-i-_fork","()",""],["_get","ActiveSupport::OrderedOptions","classes/ActiveSupport/OrderedOptions.html#method-i-_get","(key)",""],["_helpers","AbstractController::Helpers","classes/AbstractController/Helpers.html#method-i-_helpers","()",""],["_helpers","ActionView::Rendering::ClassMethods","classes/ActionView/Rendering/ClassMethods.html#method-i-_helpers","()",""],["_helpers_for_modification","AbstractController::Helpers::ClassMethods","classes/AbstractController/Helpers/ClassMethods.html#method-i-_helpers_for_modification","()",""],["_insert_callbacks","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-_insert_callbacks","(callbacks, block = nil)","<p>Take callback names and an optional callback proc, normalize them, then call the block with each callback. â€¦\n"],["_layout_for","ActionView::Context","classes/ActionView/Context.html#method-i-_layout_for","(name = nil)","<p>Encapsulates the interaction with the view flow so it returns the correct buffer on <code>yield</code>. This is usually â€¦\n"],["_layout_for","ActionView::Helpers::RenderingHelper","classes/ActionView/Helpers/RenderingHelper.html#method-i-_layout_for","(*args, &block)","<p>Overrides _layout_for in the context object so it supports the case a block is passed to a partial.  â€¦\n"],["_normalize_args","AbstractController::Rendering","classes/AbstractController/Rendering.html#method-i-_normalize_args","(action = nil, options = {})","<p>Normalize args by converting <code>render &quot;foo&quot;</code> to <code>render :action =&gt; &quot;foo&quot;</code> and <code>render</code> â€¦\n"],["_normalize_callback_options","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-_normalize_callback_options","(options)","<p>If <code>:only</code> or <code>:except</code> are used, convert the options into the <code>:if</code> and <code>:unless</code> options of ActiveSupport::Callbacks â€¦\n"],["_normalize_options","AbstractController::Rendering","classes/AbstractController/Rendering.html#method-i-_normalize_options","(options)","<p>Normalize options.\n"],["_prepare_context","ActionView::Context","classes/ActionView/Context.html#method-i-_prepare_context","()","<p>Prepares the context by setting the appropriate instance variables.\n"],["_process_options","AbstractController::Rendering","classes/AbstractController/Rendering.html#method-i-_process_options","(options)","<p>Process extra options.\n"],["_render_to_body_with_renderer","ActionController::Renderers","classes/ActionController/Renderers.html#method-i-_render_to_body_with_renderer","(options)",""],["_render_with_renderer_method_name","ActionController::Renderers","classes/ActionController/Renderers.html#method-c-_render_with_renderer_method_name","(key)",""],["_routes","AbstractController::UrlFor","classes/AbstractController/UrlFor.html#method-i-_routes","()",""],["_routes","AbstractController::UrlFor::ClassMethods","classes/AbstractController/UrlFor/ClassMethods.html#method-i-_routes","()",""],["_routes","ActionView::Rendering::ClassMethods","classes/ActionView/Rendering/ClassMethods.html#method-i-_routes","()",""],["_routes","ActionView::TestCase::Behavior","classes/ActionView/TestCase/Behavior.html#method-i-_routes","()",""],["_routes_context","ActionDispatch::Routing::UrlFor","classes/ActionDispatch/Routing/UrlFor.html#method-i-_routes_context","()",""],["_run","ActionView::Base","classes/ActionView/Base.html#method-i-_run","(method, template, locals, buffer, add_to_stack: true, &block)",""],["_set_detail","ActionView::LookupContext::DetailsCache","classes/ActionView/LookupContext/DetailsCache.html#method-i-_set_detail","(key, value)",""],["_set_wrapper_options","ActionController::ParamsWrapper::Options::ClassMethods","classes/ActionController/ParamsWrapper/Options/ClassMethods.html#method-i-_set_wrapper_options","(options)",""],["_test_case","ActionView::TestCase::Behavior","classes/ActionView/TestCase/Behavior.html#method-i-_test_case","()",""],["_to_partial_path","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-c-_to_partial_path","()",""],["_url_for_modules","ActionView::Helpers::UrlHelper::ClassMethods","classes/ActionView/Helpers/UrlHelper/ClassMethods.html#method-i-_url_for_modules","()",""],["_view_paths","ActionView::ViewPaths::ClassMethods","classes/ActionView/ViewPaths/ClassMethods.html#method-i-_view_paths","()",""],["_view_paths=","ActionView::ViewPaths::ClassMethods","classes/ActionView/ViewPaths/ClassMethods.html#method-i-_view_paths-3D","(paths)",""],["_with_routes","ActionDispatch::Routing::UrlFor","classes/ActionDispatch/Routing/UrlFor.html#method-i-_with_routes","(routes)",""],["abort","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-abort","()",""],["abstract!","AbstractController::Base","classes/AbstractController/Base.html#method-c-abstract-21","()","<p>Define a controller as abstract. See internal_methods for more details.\n"],["abstract_class?","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-abstract_class-3F","()","<p>Returns whether this class is an abstract class or not.\n"],["abstract_railtie?","Rails::Railtie","classes/Rails/Railtie.html#method-c-abstract_railtie-3F","()",""],["accept=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-accept-3D","(mime_types)",""],["accept?","ActiveStorage::Analyzer","classes/ActiveStorage/Analyzer.html#method-c-accept-3F","(blob)","<p>Implement this method in a concrete subclass. Have it return true when given a blob from which the analyzer â€¦\n"],["accept?","ActiveStorage::Analyzer::AudioAnalyzer","classes/ActiveStorage/Analyzer/AudioAnalyzer.html#method-c-accept-3F","(blob)",""],["accept?","ActiveStorage::Analyzer::ImageAnalyzer","classes/ActiveStorage/Analyzer/ImageAnalyzer.html#method-c-accept-3F","(blob)",""],["accept?","ActiveStorage::Analyzer::ImageAnalyzer::ImageMagick","classes/ActiveStorage/Analyzer/ImageAnalyzer/ImageMagick.html#method-c-accept-3F","(blob)",""],["accept?","ActiveStorage::Analyzer::ImageAnalyzer::Vips","classes/ActiveStorage/Analyzer/ImageAnalyzer/Vips.html#method-c-accept-3F","(blob)",""],["accept?","ActiveStorage::Analyzer::VideoAnalyzer","classes/ActiveStorage/Analyzer/VideoAnalyzer.html#method-c-accept-3F","(blob)",""],["accept?","ActiveStorage::Previewer","classes/ActiveStorage/Previewer.html#method-c-accept-3F","(blob)","<p>Implement this method in a concrete subclass. Have it return true when given a blob from which the previewer â€¦\n"],["accept?","ActiveStorage::Previewer::MuPDFPreviewer","classes/ActiveStorage/Previewer/MuPDFPreviewer.html#method-c-accept-3F","(blob)",""],["accept?","ActiveStorage::Previewer::PopplerPDFPreviewer","classes/ActiveStorage/Previewer/PopplerPDFPreviewer.html#method-c-accept-3F","(blob)",""],["accept?","ActiveStorage::Previewer::VideoPreviewer","classes/ActiveStorage/Previewer/VideoPreviewer.html#method-c-accept-3F","(blob)",""],["accept_header","ActionDispatch::RequestEncoder::IdentityEncoder","classes/ActionDispatch/RequestEncoder/IdentityEncoder.html#method-i-accept_header","()",""],["accepts","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-accepts","()","<p>Returns the accepted MIME type for the request.\n"],["accepts_nested_attributes_for","ActiveRecord::NestedAttributes::ClassMethods","classes/ActiveRecord/NestedAttributes/ClassMethods.html#method-i-accepts_nested_attributes_for","(*attr_names)","<p>Defines an attributes writer for the specified association(s).\n<p>Supported options:\n<p>:allow_destroy &mdash; If true, â€¦\n"],["accessed_fields","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-accessed_fields","()","<p>Returns the name of all database fields which have been read from this model. This can be useful in development â€¦\n"],["accessor","ActiveRecord::Type::Json","classes/ActiveRecord/Type/Json.html#method-i-accessor","()",""],["acronym","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-i-acronym","(word)","<p>Specifies a new acronym. An acronym must be specified as it will appear in a camelized string. An underscore â€¦\n"],["action","ActionController::Metal","classes/ActionController/Metal.html#method-c-action","(name)","<p>Returns a Rack endpoint for the given action name.\n"],["action","ActiveSupport::ActionableError::ClassMethods","classes/ActiveSupport/ActionableError/ClassMethods.html#method-i-action","(name, &block)","<p>Defines an action that can resolve the error.\n\n<pre><code>class PendingMigrationError &lt; MigrationError\n  include ActiveSupport::ActionableError ...\n</code></pre>\n"],["action=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-action-3D","(action_name)",""],["action_cable_meta_tag","ActionCable::Helpers::ActionCableHelper","classes/ActionCable/Helpers/ActionCableHelper.html#method-i-action_cable_meta_tag","()","<p>Returns an â€œaction-cable-urlâ€ meta tag with the value of the URL specified in your configuration. â€¦\n"],["action_has_layout?","ActionView::Layouts","classes/ActionView/Layouts.html#method-i-action_has_layout-3F","()","<p>Controls whether an action should be rendered using a layout. If you want to disable any <code>layout</code> settings â€¦\n"],["action_methods","AbstractController::Base","classes/AbstractController/Base.html#method-c-action_methods","()","<p>A list of method names that should be considered actions. This includes all public instance methods on â€¦\n"],["action_methods","AbstractController::Base","classes/AbstractController/Base.html#method-i-action_methods","()","<p>Delegates to the class&#39;s ::action_methods.\n"],["action_methods","AbstractController::UrlFor::ClassMethods","classes/AbstractController/UrlFor/ClassMethods.html#method-i-action_methods","()",""],["action_methods","ActionCable::Channel::Base","classes/ActionCable/Channel/Base.html#method-c-action_methods","()","<p>A list of method names that should be considered actions. This includes all public instance methods on â€¦\n"],["action_name","AbstractController::Base","classes/AbstractController/Base.html#method-i-action_name","","<p>Returns the name of the action this controller is processing.\n"],["active?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-active-3F","()","<p>Checks whether the connection to the database is still active. This includes checking whether the database â€¦\n"],["active?","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-active-3F","()",""],["active?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-active-3F","()","<p>Is this connection alive and ready for queries?\n"],["active?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-active-3F","()",""],["active_connection?","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-active_connection-3F","()","<p>Returns true if there is an open connection being used for the current thread.\n<p>This method only works â€¦\n"],["active_connections?","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-active_connections-3F","(role = ActiveRecord::Base.current_role)","<p>Returns true if there are any active connections among the connection pools that the ConnectionHandler â€¦\n"],["active_primary_key","ActiveRecord::Encryption::EnvelopeEncryptionKeyProvider","classes/ActiveRecord/Encryption/EnvelopeEncryptionKeyProvider.html#method-i-active_primary_key","()",""],["active_workers?","ActiveSupport::Testing::Parallelization::Server","classes/ActiveSupport/Testing/Parallelization/Server.html#method-i-active_workers-3F","()",""],["acts_like?","Object","classes/Object.html#method-i-acts_like-3F","(duck)","<p>Provides a way to check whether some class acts like some other class based on the existence of an appropriately-named â€¦\n"],["acts_like_date?","Date","classes/Date.html#method-i-acts_like_date-3F","()","<p>Duck-types as a Date-like class. See Object#acts_like?.\n"],["acts_like_date?","DateTime","classes/DateTime.html#method-i-acts_like_date-3F","()","<p>Duck-types as a Date-like class. See Object#acts_like?.\n"],["acts_like_string?","String","classes/String.html#method-i-acts_like_string-3F","()","<p>Enables more predictable duck-typing on String-like classes. See <code>Object#acts_like?</code>.\n"],["acts_like_time?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-acts_like_time-3F","()","<p>So that <code>self</code> <code>acts_like?(:time)</code>.\n"],["acts_like_time?","DateTime","classes/DateTime.html#method-i-acts_like_time-3F","()","<p>Duck-types as a Time-like class. See Object#acts_like?.\n"],["acts_like_time?","Time","classes/Time.html#method-i-acts_like_time-3F","()","<p>Duck-types as a Time-like class. See Object#acts_like?.\n"],["adapter","ActiveRecord::DatabaseConfigurations::HashConfig","classes/ActiveRecord/DatabaseConfigurations/HashConfig.html#method-i-adapter","()",""],["adapter_name","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-adapter_name","()","<p>Returns the human-readable name of the adapter. Use mixed case - one can always use downcase if needed. â€¦\n"],["add","ActionController::Renderers","classes/ActionController/Renderers.html#method-c-add","(key, &block)","<p>Adds a new renderer to call within controller actions. A renderer is invoked by passing its name as an â€¦\n"],["add","ActionDispatch::Http::Headers","classes/ActionDispatch/Http/Headers.html#method-i-add","(key, value)","<p>Add a value to a multivalued header like Vary or Accept-Encoding.\n"],["add","ActionView::TestCase::Behavior::RenderedViewsCollection","classes/ActionView/TestCase/Behavior/RenderedViewsCollection.html#method-i-add","(view, locals)",""],["add","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-add","(attribute, type = :invalid, **options)","<p>Adds a new error of <code>type</code> on <code>attribute</code>. More than one error can be added to the same <code>attribute</code>. If no â€¦\n"],["add","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-add","(element)","<p>Add <code>element</code> to the queue.  Never blocks.\n"],["add","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-add","(table_name)","<p>Add internal cache for table with <code>table_name</code>.\n"],["add","ActiveRecord::Encryption::Properties","classes/ActiveRecord/Encryption/Properties.html#method-i-add","(other_properties)",""],["add","ActiveSupport::Inflector::Inflections::Uncountables","classes/ActiveSupport/Inflector/Inflections/Uncountables.html#method-i-add","(words)",""],["add","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-add","(path, options = {})",""],["add_belongs_to","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_belongs_to","(table_name, ref_name, **options)",""],["add_bind","ActiveRecord::StatementCache::PartialQueryCollector","classes/ActiveRecord/StatementCache/PartialQueryCollector.html#method-i-add_bind","(obj)",""],["add_binds","ActiveRecord::StatementCache::PartialQueryCollector","classes/ActiveRecord/StatementCache/PartialQueryCollector.html#method-i-add_binds","(binds, proc_for_binds = nil)",""],["add_channel","ActionCable::SubscriptionAdapter::PostgreSQL::Listener","classes/ActionCable/SubscriptionAdapter/PostgreSQL/Listener.html#method-i-add_channel","(channel, on_success)",""],["add_channel","ActionCable::SubscriptionAdapter::Redis::Listener","classes/ActionCable/SubscriptionAdapter/Redis/Listener.html#method-i-add_channel","(channel, on_success)",""],["add_channel","ActionCable::SubscriptionAdapter::SubscriberMap","classes/ActionCable/SubscriptionAdapter/SubscriberMap.html#method-i-add_channel","(channel, on_success)",""],["add_check_constraint","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_check_constraint","(table_name, expression, **options)","<p>Adds a new check constraint to the table. <code>expression</code> is a String representation of verifiable boolean â€¦\n"],["add_child","ActiveRecord::ConnectionAdapters::TransactionState","classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-add_child","(state)",""],["add_column","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_column","(table_name, column_name, type, **options)","<p>Add a new <code>type</code> column named <code>column_name</code> to <code>table_name</code>.\n<p>See ActiveRecord::ConnectionAdapters::TableDefinition.column â€¦\n"],["add_delivery_method","ActionMailer::DeliveryMethods::ClassMethods","classes/ActionMailer/DeliveryMethods/ClassMethods.html#method-i-add_delivery_method","(symbol, klass, default_options = {})","<p>Adds a new delivery method through the given class using the given symbol as alias and the default options â€¦\n"],["add_event_subscriber","ActiveSupport::Subscriber","classes/ActiveSupport/Subscriber.html#method-c-add_event_subscriber","(event)",""],["add_filter","ActiveSupport::BacktraceCleaner","classes/ActiveSupport/BacktraceCleaner.html#method-i-add_filter","(&block)","<p>Adds a filter from the block provided. Each line in the backtrace will be mapped against this filter. â€¦\n"],["add_flash_types","ActionController::Flash::ClassMethods","classes/ActionController/Flash/ClassMethods.html#method-i-add_flash_types","(*types)","<p>Creates new flash types. You can pass as many types as you want to create flash types other than the â€¦\n"],["add_foreign_key","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_foreign_key","(from_table, to_table, **options)","<p>Adds a new foreign key. <code>from_table</code> is the table with the key column, <code>to_table</code> contains the referenced â€¦\n"],["add_index","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_index","(table_name, column_name, **options)","<p>Adds a new index to the table. <code>column_name</code> can be a single Symbol, or an Array of Symbols.\n<p>The index will â€¦\n"],["add_length_validation_for_encrypted_columns","ActiveRecord::Encryption::EncryptableRecord","classes/ActiveRecord/Encryption/EncryptableRecord.html#method-i-add_length_validation_for_encrypted_columns","()",""],["add_reference","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_reference","(table_name, ref_name, **options)","<p>Adds a reference. The reference column is a bigint by default, the <code>:type</code> option can be used to specify â€¦\n"],["add_renderer","ActionController","classes/ActionController.html#method-c-add_renderer","(key, &block)","<p>See <code>Renderers.add</code>\n"],["add_route","ActionMailbox::Router","classes/ActionMailbox/Router.html#method-i-add_route","(address, to:)",""],["add_routes","ActionMailbox::Router","classes/ActionMailbox/Router.html#method-i-add_routes","(routes)",""],["add_shebang_option!","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-add_shebang_option-21","()","<p>Small macro to add ruby as an option to the generator with proper default value plus an instance helper â€¦\n"],["add_silencer","ActiveSupport::BacktraceCleaner","classes/ActiveSupport/BacktraceCleaner.html#method-i-add_silencer","(&block)","<p>Adds a silencer from the block provided. If the silencer returns <code>true</code> for a given line, it will be excluded â€¦\n"],["add_source","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-add_source","(source, options = {}, &block)","<p>Add the given source to <code>Gemfile</code>\n<p>If block is given, gem entries in block are wrapped into the source group. â€¦\n"],["add_subscriber","ActionCable::SubscriptionAdapter::Async::AsyncSubscriberMap","classes/ActionCable/SubscriptionAdapter/Async/AsyncSubscriberMap.html#method-i-add_subscriber","(*)",""],["add_subscriber","ActionCable::SubscriptionAdapter::SubscriberMap","classes/ActionCable/SubscriptionAdapter/SubscriberMap.html#method-i-add_subscriber","(channel, subscriber, on_success)",""],["add_tags","ActionCable::Connection::TaggedLoggerProxy","classes/ActionCable/Connection/TaggedLoggerProxy.html#method-i-add_tags","(*tags)",""],["add_timestamps","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_timestamps","(table_name, **options)","<p>Adds timestamps (<code>created_at</code> and <code>updated_at</code>) columns to <code>table_name</code>. Additional options (like <code>:null</code>) are â€¦\n"],["add_transaction_record","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-add_transaction_record","(record, ensure_finalize = true)","<p>Register a record with the current transaction so that its after_commit and after_rollback callbacks â€¦\n"],["added?","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-added-3F","(attribute, type = :invalid, options = {})","<p>Returns <code>true</code> if an error matches provided <code>attribute</code> and <code>type</code>, or <code>false</code> otherwise. <code>type</code> is treated the â€¦\n"],["advance","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-advance","(options)","<p>Uses Date to provide precise Time calculations for years, months, and days according to the proleptic â€¦\n"],["advance","Date","classes/Date.html#method-i-advance","(options)","<p>Provides precise Date calculations for years, months, and days. The <code>options</code> parameter takes a hash with â€¦\n"],["advance","DateTime","classes/DateTime.html#method-i-advance","(options)","<p>Uses Date to provide precise Time calculations for years, months, and days. The <code>options</code> parameter takes â€¦\n"],["advance","Time","classes/Time.html#method-i-advance","(options)","<p>Uses Date to provide precise Time calculations for years, months, and days according to the proleptic â€¦\n"],["after","ActionDispatch::Callbacks","classes/ActionDispatch/Callbacks.html#method-c-after","(*args, &block)",""],["after","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-after","(time = ::Time.current)",""],["after","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-i-after","()",""],["after?","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-after-3F","(date_or_time)","<p>Returns true if the date/time falls after <code>date_or_time</code>.\n"],["after_action","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-after_action","","<p>Append a callback after actions. See _insert_callbacks for parameter details.\n"],["after_bundle","Rails::Generators::AppGenerator","classes/Rails/Generators/AppGenerator.html#method-i-after_bundle","(&block)","<p>Registers a callback to be executed after bundle binstubs have run.\n\n<pre><code>after_bundle do\n  git add: &#39;.&#39;\nend\n</code></pre>\n"],["after_class_unload","ActiveSupport::Reloader","classes/ActiveSupport/Reloader.html#method-c-after_class_unload","(*args, &block)","<p>Registers a callback that will run immediately after the classes are unloaded.\n"],["after_commit","ActiveRecord::Transactions::ClassMethods","classes/ActiveRecord/Transactions/ClassMethods.html#method-i-after_commit","(*args, &block)","<p>This callback is called after a record has been created, updated, or destroyed.\n<p>You can specify that the â€¦\n"],["after_create","ActiveRecord::Callbacks::ClassMethods","classes/ActiveRecord/Callbacks/ClassMethods.html#method-i-after_create","","<p>Registers a callback to be called after a record is created. See ActiveRecord::Callbacks for more information. â€¦\n"],["after_create_commit","ActiveRecord::Transactions::ClassMethods","classes/ActiveRecord/Transactions/ClassMethods.html#method-i-after_create_commit","(*args, &block)","<p>Shortcut for <code>after_commit :hook, on: :create</code>.\n"],["after_destroy","ActiveRecord::Callbacks::ClassMethods","classes/ActiveRecord/Callbacks/ClassMethods.html#method-i-after_destroy","","<p>Registers a callback to be called after a record is destroyed. See ActiveRecord::Callbacks for more information. â€¦\n"],["after_destroy_commit","ActiveRecord::Transactions::ClassMethods","classes/ActiveRecord/Transactions/ClassMethods.html#method-i-after_destroy_commit","(*args, &block)","<p>Shortcut for <code>after_commit :hook, on: :destroy</code>.\n"],["after_enqueue","ActiveJob::Callbacks::ClassMethods","classes/ActiveJob/Callbacks/ClassMethods.html#method-i-after_enqueue","(*filters, &blk)","<p>Defines a callback that will get called right after the job is enqueued.\n\n<pre><code>class VideoProcessJob &lt; ActiveJob::Base ...\n</code></pre>\n"],["after_find","ActiveRecord::Callbacks::ClassMethods","classes/ActiveRecord/Callbacks/ClassMethods.html#method-i-after_find","","<p>Registers a callback to be called after a record is instantiated via a finder. See ActiveRecord::Callbacks â€¦\n"],["after_fork","ActiveSupport::Testing::Parallelization::Worker","classes/ActiveSupport/Testing/Parallelization/Worker.html#method-i-after_fork","()",""],["after_initialize","ActiveRecord::Callbacks::ClassMethods","classes/ActiveRecord/Callbacks/ClassMethods.html#method-i-after_initialize","","<p>Registers a callback to be called after a record is instantiated. See ActiveRecord::Callbacks for more â€¦\n"],["after_initialize","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-after_initialize","(&block)","<p>Last configurable block to run. Called after frameworks initialize.\n"],["after_perform","ActiveJob::Callbacks::ClassMethods","classes/ActiveJob/Callbacks/ClassMethods.html#method-i-after_perform","(*filters, &blk)","<p>Defines a callback that will get called right after the job&#39;s perform method has finished.\n\n<pre><code>class VideoProcessJob ...\n</code></pre>\n"],["after_processing","ActionMailbox::Callbacks","classes/ActionMailbox/Callbacks.html#method-i-after_processing","(*methods, &block)",""],["after_reset","ActiveSupport::CurrentAttributes","classes/ActiveSupport/CurrentAttributes.html#method-c-after_reset","(&block)",""],["after_rollback","ActiveRecord::Transactions::ClassMethods","classes/ActiveRecord/Transactions/ClassMethods.html#method-i-after_rollback","(*args, &block)","<p>This callback is called after a create, update, or destroy are rolled back.\n<p>Please check the documentation â€¦\n"],["after_save","ActiveRecord::Callbacks::ClassMethods","classes/ActiveRecord/Callbacks/ClassMethods.html#method-i-after_save","","<p>Registers a callback to be called after a record is saved. See ActiveRecord::Callbacks for more information. â€¦\n"],["after_save_commit","ActiveRecord::Transactions::ClassMethods","classes/ActiveRecord/Transactions/ClassMethods.html#method-i-after_save_commit","(*args, &block)","<p>Shortcut for <code>after_commit :hook, on: [ :create, :update ]</code>.\n"],["after_subscribe","ActionCable::Channel::Callbacks::ClassMethods","classes/ActionCable/Channel/Callbacks/ClassMethods.html#method-i-after_subscribe","(*methods, &block)",""],["after_teardown","ActiveSupport::Testing::TimeHelpers","classes/ActiveSupport/Testing/TimeHelpers.html#method-i-after_teardown","()",""],["after_touch","ActiveRecord::Callbacks::ClassMethods","classes/ActiveRecord/Callbacks/ClassMethods.html#method-i-after_touch","","<p>Registers a callback to be called after a record is touched. See ActiveRecord::Callbacks for more information. â€¦\n"],["after_unsubscribe","ActionCable::Channel::Callbacks::ClassMethods","classes/ActionCable/Channel/Callbacks/ClassMethods.html#method-i-after_unsubscribe","(*methods, &block)",""],["after_update","ActiveRecord::Callbacks::ClassMethods","classes/ActiveRecord/Callbacks/ClassMethods.html#method-i-after_update","","<p>Registers a callback to be called after a record is updated. See ActiveRecord::Callbacks for more information. â€¦\n"],["after_update_commit","ActiveRecord::Transactions::ClassMethods","classes/ActiveRecord/Transactions/ClassMethods.html#method-i-after_update_commit","(*args, &block)","<p>Shortcut for <code>after_commit :hook, on: :update</code>.\n"],["after_validation","ActiveModel::Validations::Callbacks::ClassMethods","classes/ActiveModel/Validations/Callbacks/ClassMethods.html#method-i-after_validation","(*args, &block)","<p>Defines a callback that will get called right after validation.\n\n<pre><code>class Person\n  include ActiveModel::Validations ...\n</code></pre>\n"],["aggregated_results","Minitest::SuppressedSummaryReporter","classes/Minitest/SuppressedSummaryReporter.html#method-i-aggregated_results","(*)","<p>Disable extra failure output after a run if output is inline.\n"],["ago","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-ago","(time = ::Time.current)","<p>Calculates a new Time or Date that is as far in the past as this Duration represents.\n"],["ago","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-ago","(other)","<p>Subtracts an interval of time from the current object&#39;s time and returns the result as a new TimeWithZone â€¦\n"],["ago","Date","classes/Date.html#method-i-ago","(seconds)","<p>Converts Date to a Time (or DateTime if necessary) with the time portion set to the beginning of the â€¦\n"],["ago","DateTime","classes/DateTime.html#method-i-ago","(seconds)","<p>Returns a new DateTime representing the time a number of seconds ago. Do not use this method in combination â€¦\n"],["ago","Time","classes/Time.html#method-i-ago","(seconds)","<p>Returns a new Time representing the time a number of seconds ago, this is basically a wrapper around â€¦\n"],["alert","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-alert","()","<p>Convenience accessor for <code>flash[:alert]</code>.\n"],["alert=","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-alert-3D","(message)","<p>Convenience accessor for <code>flash[:alert]=</code>.\n"],["alias_attribute","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-alias_attribute","(new_name, old_name)","<p>Allows you to make aliases for attributes.\n\n<pre><code>class Person\n  include ActiveModel::AttributeMethods\n\n  attr_accessor ...\n</code></pre>\n"],["alias_attribute","Module","classes/Module.html#method-i-alias_attribute","(new_name, old_name)","<p>Allows you to make aliases for attributes, which includes getter, setter, and a predicate.\n\n<pre><code>class Content ...\n</code></pre>\n"],["all","ActionController::MimeResponds::Collector","classes/ActionController/MimeResponds/Collector.html#method-i-all","(*args, &block)",""],["all","ActionMailer::Collector","classes/ActionMailer/Collector.html#method-i-all","(*args, &block)",""],["all","ActionMailer::Preview","classes/ActionMailer/Preview.html#method-c-all","()","<p>Returns all mailer preview classes.\n"],["all","ActiveRecord::Scoping::Named::ClassMethods","classes/ActiveRecord/Scoping/Named/ClassMethods.html#method-i-all","()","<p>Returns an ActiveRecord::Relation scope object.\n\n<pre><code>posts = Post.all\nposts.size # Fires &quot;select count(*) from ...\n</code></pre>\n"],["all","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-all","()","<p>Returns an array of all TimeZone objects. There are multiple TimeZone objects per time zone, in many â€¦\n"],["all","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-c-all","(klass)","<p>GET index\n"],["all?","Mime::AllType","classes/Mime/AllType.html#method-i-all-3F","()",""],["all?","Mime::Type","classes/Mime/Type.html#method-i-all-3F","()",""],["all_connection_pools","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-all_connection_pools","()",""],["all_day","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-all_day","()","<p>Returns a Range representing the whole day of the current date/time.\n"],["all_foreign_keys_valid?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-all_foreign_keys_valid-3F","()","<p>Override to check all foreign key constraints in a database.\n"],["all_helpers_from_path","ActionController::Helpers::ClassMethods","classes/ActionController/Helpers/ClassMethods.html#method-i-all_helpers_from_path","(path)","<p>Returns a list of helper names in a given path.\n\n<pre><code>ActionController::Base.all_helpers_from_path &#39;app/helpers&#39; ...\n</code></pre>\n"],["all_month","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-all_month","()","<p>Returns a Range representing the whole month of the current date/time.\n"],["all_paths","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-all_paths","()",""],["all_quarter","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-all_quarter","()","<p>Returns a Range representing the whole quarter of the current date/time.\n"],["all_week","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-all_week","(start_day = Date.beginning_of_week)","<p>Returns a Range representing the whole week of the current date/time. Week starts on start_day, default â€¦\n"],["all_year","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-all_year","()","<p>Returns a Range representing the whole year of the current date/time.\n"],["allocations","ActiveSupport::Notifications::Event","classes/ActiveSupport/Notifications/Event.html#method-i-allocations","()","<p>Returns the number of allocations made since the call to <code>start!</code> and the call to <code>finish!</code>\n"],["allow","ActiveSupport::Deprecation::Reporting","classes/ActiveSupport/Deprecation/Reporting.html#method-i-allow","(allowed_warnings = :all, if: true, &block)","<p>Allow previously disallowed deprecation warnings within the block. <code>allowed_warnings</code> can be an array containing â€¦\n"],["analyze","ActiveStorage::Blob::Analyzable","classes/ActiveStorage/Blob/Analyzable.html#method-i-analyze","()","<p>Extracts and stores metadata from the file associated with this blob using a relevant analyzer. Active â€¦\n"],["analyze_later","ActiveStorage::Blob::Analyzable","classes/ActiveStorage/Blob/Analyzable.html#method-i-analyze_later","()","<p>Enqueues an ActiveStorage::AnalyzeJob which calls #analyze, or calls #analyze inline based on analyzer â€¦\n"],["analyze_later?","ActiveStorage::Analyzer","classes/ActiveStorage/Analyzer.html#method-c-analyze_later-3F","()","<p>Implement this method in concrete subclasses. It will determine if blob analysis should be done in a â€¦\n"],["analyzed?","ActiveStorage::Blob::Analyzable","classes/ActiveStorage/Blob/Analyzable.html#method-i-analyzed-3F","()","<p>Returns true if the blob has been analyzed.\n"],["and","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-and","(other)","<p>Returns a new relation, which is the logical intersection of this relation and the one passed as an argument. â€¦\n"],["annotate","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-annotate","(*args)","<p>Adds an SQL comment to queries generated from this relation. For example:\n\n<pre><code>User.annotate(&quot;selecting user ...\n</code></pre>\n"],["annotations","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-annotations","()",""],["announce","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-announce","(message)",""],["anonymous?","Module","classes/Module.html#method-i-anonymous-3F","()","<p>A module may or may not have a name.\n\n<pre><code>module M; end\nM.name # =&gt; &quot;M&quot;\n\nm = Module.new\nm.name # =&gt; nil\n</code></pre>\n<p><code>anonymous?</code> â€¦\n"],["any","ActionController::MimeResponds::Collector","classes/ActionController/MimeResponds/Collector.html#method-i-any","(*args, &block)",""],["any","ActionMailer::Collector","classes/ActionMailer/Collector.html#method-i-any","(*args, &block)",""],["any?","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-any-3F","(name, prefixes = [], partial = false)",""],["any?","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-any-3F","","<p>Returns <code>true</code> if the collection is not empty.\n\n<pre><code>class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nperson.pets.count ...\n</code></pre>\n"],["any?","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-any-3F","()","<p>Returns true if there are any records.\n"],["any?","ActiveSupport::ArrayInquirer","classes/ActiveSupport/ArrayInquirer.html#method-i-any-3F","(*candidates)","<p>Passes each element of <code>candidates</code> collection to ArrayInquirer collection. The method returns true if â€¦\n"],["any_authenticity_token_valid?","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-any_authenticity_token_valid-3F","()","<p>Checks if any of the authenticity tokens from the request are valid.\n"],["any_response?","ActionController::MimeResponds::Collector","classes/ActionController/MimeResponds/Collector.html#method-i-any_response-3F","()",""],["any_templates?","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-any_templates-3F","(name, prefixes = [], partial = false)",""],["any_waiting?","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-any_waiting-3F","()","<p>Test if any threads are currently waiting on the queue.\n"],["api_dir","Rails::API::RepoTask","classes/Rails/API/RepoTask.html#method-i-api_dir","()",""],["api_main","Rails::API::Task","classes/Rails/API/Task.html#method-i-api_main","()",""],["api_only!","Rails::Generators","classes/Rails/Generators.html#method-c-api_only-21","()","<p>Configure generators for API only applications. It basically hides everything that is usually browser â€¦\n"],["api_only=","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-api_only-3D","(value)",""],["api_only?","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-api_only-3F","()",""],["app","ActionDispatch::IntegrationTest::Behavior","classes/ActionDispatch/IntegrationTest/Behavior.html#method-i-app","()",""],["app","ActionDispatch::IntegrationTest::Behavior::ClassMethods","classes/ActionDispatch/IntegrationTest/Behavior/ClassMethods.html#method-i-app","()",""],["app","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-app","()",""],["app","Rails::ConsoleMethods","classes/Rails/ConsoleMethods.html#method-i-app","(create = false)","<p>reference the global â€œappâ€ instance, created on demand. To recreate the instance, pass a non-false â€¦\n"],["app","Rails::Engine","classes/Rails/Engine.html#method-i-app","()","<p>Returns the underlying Rack application for this engine.\n"],["app","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-app","()",""],["app=","ActionDispatch::IntegrationTest::Behavior::ClassMethods","classes/ActionDispatch/IntegrationTest/Behavior/ClassMethods.html#method-i-app-3D","(app)",""],["app_generators","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-app_generators","()","<p>This allows you to modify application&#39;s generators from Railties.\n<p>Values set on app_generators will â€¦\n"],["app_middleware","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-app_middleware","()","<p>This allows you to modify the application&#39;s middlewares from Engines.\n<p>All operations you run on the â€¦\n"],["append","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-append","(*records)",""],["append_after_action","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-append_after_action","","<p>Append a callback after actions. See _insert_callbacks for parameter details.\n"],["append_around_action","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-append_around_action","","<p>Append a callback around actions. See _insert_callbacks for parameter details.\n"],["append_attachables","ActionText::Content","classes/ActionText/Content.html#method-i-append_attachables","(attachables)",""],["append_before_action","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-append_before_action","","<p>Append a callback before actions. See _insert_callbacks for parameter details.\n<p>If the callback renders â€¦\n"],["append_info_to_payload","ActionController::Instrumentation","classes/ActionController/Instrumentation.html#method-i-append_info_to_payload","(payload)","<p>Every time after an action is processed, this method is invoked with the payload, so you can add more â€¦\n"],["append_view_path","ActionView::ViewPaths","classes/ActionView/ViewPaths.html#method-i-append_view_path","(path)","<p>Append a path to the list of view paths for the current LookupContext.\n<p>Parameters\n<p><code>path</code> - If a String is â€¦\n"],["append_view_path","ActionView::ViewPaths::ClassMethods","classes/ActionView/ViewPaths/ClassMethods.html#method-i-append_view_path","(path)","<p>Append a path to the list of view paths for this controller.\n<p>Parameters\n<p><code>path</code> - If a String is provided, â€¦\n"],["application","Rails","classes/Rails.html#method-c-application","()",""],["application","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-application","(data = nil, options = {})",""],["application_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-application_name","()","<p>Tries to retrieve the application name or simply return application.\n"],["application_trace","ActionDispatch::ExceptionWrapper","classes/ActionDispatch/ExceptionWrapper.html#method-i-application_trace","()",""],["apply","ActiveSupport::CodeGenerator::MethodSet","classes/ActiveSupport/CodeGenerator/MethodSet.html#method-i-apply","(owner, path, line)",""],["arguments","Rails::Generators::Testing::Behaviour::ClassMethods","classes/Rails/Generators/Testing/Behaviour/ClassMethods.html#method-i-arguments","(array)","<p>Sets default arguments on generator invocation. This can be overwritten when invoking it.\n\n<pre><code>arguments %w(app_name ...\n</code></pre>\n"],["around_action","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-around_action","","<p>Append a callback around actions. See _insert_callbacks for parameter details.\n"],["around_create","ActiveRecord::Callbacks::ClassMethods","classes/ActiveRecord/Callbacks/ClassMethods.html#method-i-around_create","","<p>Registers a callback to be called around the creation of a record. See ActiveRecord::Callbacks for more â€¦\n"],["around_destroy","ActiveRecord::Callbacks::ClassMethods","classes/ActiveRecord/Callbacks/ClassMethods.html#method-i-around_destroy","","<p>Registers a callback to be called around the destruction of a record. See ActiveRecord::Callbacks for â€¦\n"],["around_enqueue","ActiveJob::Callbacks::ClassMethods","classes/ActiveJob/Callbacks/ClassMethods.html#method-i-around_enqueue","(*filters, &blk)","<p>Defines a callback that will get called around the enqueuing of the job.\n\n<pre><code>class VideoProcessJob &lt; ActiveJob::Base ...\n</code></pre>\n"],["around_perform","ActiveJob::Callbacks::ClassMethods","classes/ActiveJob/Callbacks/ClassMethods.html#method-i-around_perform","(*filters, &blk)","<p>Defines a callback that will get called around the job&#39;s perform method.\n\n<pre><code>class VideoProcessJob &lt; ActiveJob::Base ...\n</code></pre>\n"],["around_processing","ActionMailbox::Callbacks","classes/ActionMailbox/Callbacks.html#method-i-around_processing","(*methods, &block)",""],["around_save","ActiveRecord::Callbacks::ClassMethods","classes/ActiveRecord/Callbacks/ClassMethods.html#method-i-around_save","","<p>Registers a callback to be called around the save of a record. See ActiveRecord::Callbacks for more information. â€¦\n"],["around_update","ActiveRecord::Callbacks::ClassMethods","classes/ActiveRecord/Callbacks/ClassMethods.html#method-i-around_update","","<p>Registers a callback to be called around the update of a record. See ActiveRecord::Callbacks for more â€¦\n"],["as_json","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-as_json","","<p>Returns a hash that can be used as the JSON representation for the parameters.\n"],["as_json","ActionText::Attachable","classes/ActionText/Attachable.html#method-i-as_json","(*)",""],["as_json","ActionText::Content","classes/ActionText/Content.html#method-i-as_json","(*)",""],["as_json","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-as_json","(options = nil)","<p>Returns a Hash that can be used as the JSON representation for this object. You can pass the <code>:full_messages</code> â€¦\n"],["as_json","ActiveModel::Serializers::JSON","classes/ActiveModel/Serializers/JSON.html#method-i-as_json","(options = nil)","<p>Returns a hash representing the model. Some configuration can be passed through <code>options</code>.\n<p>The option <code>include_root_in_json</code> â€¦\n"],["as_json","ActiveStorage::Filename","classes/ActiveStorage/Filename.html#method-i-as_json","(*)",""],["as_json","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-as_json","(options = nil)","<p>Coerces time to a string for JSON encoding. The default format is ISO 8601. You can get %Y/%m/%d %H:%M:%S â€¦\n"],["as_json","Exception","classes/Exception.html#method-i-as_json","(options = nil)",""],["assert_broadcast_on","ActionCable::Channel::TestCase::Behavior","classes/ActionCable/Channel/TestCase/Behavior.html#method-i-assert_broadcast_on","(stream_or_object, *args)",""],["assert_broadcast_on","ActionCable::TestHelper","classes/ActionCable/TestHelper.html#method-i-assert_broadcast_on","(stream, data, &block)","<p>Asserts that the specified message has been sent to the stream.\n\n<pre><code>def test_assert_transmitted_message\n  ...\n</code></pre>\n"],["assert_broadcasts","ActionCable::Channel::TestCase::Behavior","classes/ActionCable/Channel/TestCase/Behavior.html#method-i-assert_broadcasts","(stream_or_object, *args)","<p>Enhance TestHelper assertions to handle non-String broadcastings\n"],["assert_broadcasts","ActionCable::TestHelper","classes/ActionCable/TestHelper.html#method-i-assert_broadcasts","(stream, number, &block)","<p>Asserts that the number of broadcasted messages to the stream matches the given number.\n\n<pre><code>def test_broadcasts ...\n</code></pre>\n"],["assert_changes","ActiveSupport::Testing::Assertions","classes/ActiveSupport/Testing/Assertions.html#method-i-assert_changes","(expression, message = nil, from: UNTRACKED, to: UNTRACKED, &block)","<p>Assertion that the result of evaluating an expression is changed before and after invoking the passed â€¦\n"],["assert_class_method","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_class_method","(method, content, &block)","<p>Asserts the given class method exists in the given content. This method does not detect class methods â€¦\n"],["assert_deprecated","ActiveSupport::Testing::Deprecation","classes/ActiveSupport/Testing/Deprecation.html#method-i-assert_deprecated","(match = nil, deprecator = nil, &block)","<p>Asserts that a matching deprecation warning was emitted by the given deprecator during the execution â€¦\n"],["assert_difference","ActiveSupport::Testing::Assertions","classes/ActiveSupport/Testing/Assertions.html#method-i-assert_difference","(expression, *args, &block)","<p>Test numeric difference between the return value of an expression as a result of what is evaluated in â€¦\n"],["assert_directory","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_directory","(relative, *contents)",""],["assert_emails","ActionMailer::TestHelper","classes/ActionMailer/TestHelper.html#method-i-assert_emails","(number, &block)","<p>Asserts that the number of emails sent matches the given number.\n\n<pre><code>def test_emails\n  assert_emails 0\n  ContactMailer.welcome.deliver_now ...\n</code></pre>\n"],["assert_enqueued_email_with","ActionMailer::TestHelper","classes/ActionMailer/TestHelper.html#method-i-assert_enqueued_email_with","(mailer, method, args: nil, queue: ActionMailer::Base.deliver_later_queue_name || \"default\", &block)","<p>Asserts that a specific email has been enqueued, optionally matching arguments.\n\n<pre><code>def test_email\n  ContactMailer.welcome.deliver_later ...\n</code></pre>\n"],["assert_enqueued_emails","ActionMailer::TestHelper","classes/ActionMailer/TestHelper.html#method-i-assert_enqueued_emails","(number, &block)","<p>Asserts that the number of emails enqueued for later delivery matches the given number.\n\n<pre><code>def test_emails ...\n</code></pre>\n"],["assert_enqueued_jobs","ActiveJob::TestHelper","classes/ActiveJob/TestHelper.html#method-i-assert_enqueued_jobs","(number, only: nil, except: nil, queue: nil, &block)","<p>Asserts that the number of enqueued jobs matches the given number.\n\n<pre><code>def test_jobs\n  assert_enqueued_jobs ...\n</code></pre>\n"],["assert_enqueued_with","ActiveJob::TestHelper","classes/ActiveJob/TestHelper.html#method-i-assert_enqueued_with","(job: nil, args: nil, at: nil, queue: nil, priority: nil, &block)","<p>Asserts that the job has been enqueued with the given arguments.\n\n<pre><code>def test_assert_enqueued_with\n  MyJob.perform_later(1,2,3) ...\n</code></pre>\n"],["assert_field_default_value","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_field_default_value","(attribute_type, value)","<p>Asserts the given attribute type gets a proper default value:\n\n<pre><code>assert_field_default_value :string, &quot;MyString&quot;\n</code></pre>\n"],["assert_field_type","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_field_type","(attribute_type, field_type)","<p>Asserts the given attribute type gets translated to a field type properly:\n\n<pre><code>assert_field_type :date, :date_select\n</code></pre>\n"],["assert_file","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_file","(relative, *contents)","<p>Asserts a given file exists. You need to supply an absolute path or a path relative to the configured â€¦\n"],["assert_generates","ActionDispatch::Assertions::RoutingAssertions","classes/ActionDispatch/Assertions/RoutingAssertions.html#method-i-assert_generates","(expected_path, options, defaults = {}, extras = {}, message = nil)","<p>Asserts that the provided options can be used to generate the provided path. This is the inverse of  â€¦\n"],["assert_has_stream","ActionCable::Channel::TestCase::Behavior","classes/ActionCable/Channel/TestCase/Behavior.html#method-i-assert_has_stream","(stream)","<p>Asserts that the specified stream has been started.\n\n<pre><code>def test_assert_started_stream\n  subscribe\n  assert_has_stream ...\n</code></pre>\n"],["assert_has_stream_for","ActionCable::Channel::TestCase::Behavior","classes/ActionCable/Channel/TestCase/Behavior.html#method-i-assert_has_stream_for","(object)","<p>Asserts that the specified stream for a model has started.\n\n<pre><code>def test_assert_started_stream_for\n  subscribe ...\n</code></pre>\n"],["assert_instance_method","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_instance_method","(method, content)","<p>Asserts the given method exists in the given content. When a block is given, it yields the content of â€¦\n"],["assert_method","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_method","(method, content)",""],["assert_migration","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_migration","(relative, *contents, &block)","<p>Asserts a given migration exists. You need to supply an absolute path or a path relative to the configured â€¦\n"],["assert_no_broadcasts","ActionCable::TestHelper","classes/ActionCable/TestHelper.html#method-i-assert_no_broadcasts","(stream, &block)","<p>Asserts that no messages have been sent to the stream.\n\n<pre><code>def test_no_broadcasts\n  assert_no_broadcasts &#39;messages&#39; ...\n</code></pre>\n"],["assert_no_changes","ActiveSupport::Testing::Assertions","classes/ActiveSupport/Testing/Assertions.html#method-i-assert_no_changes","(expression, message = nil, from: UNTRACKED, &block)","<p>Assertion that the result of evaluating an expression is not changed before and after invoking the passed â€¦\n"],["assert_no_difference","ActiveSupport::Testing::Assertions","classes/ActiveSupport/Testing/Assertions.html#method-i-assert_no_difference","(expression, message = nil, &block)","<p>Assertion that the numeric result of evaluating an expression is not changed before and after invoking â€¦\n"],["assert_no_directory","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_no_directory","(relative)",""],["assert_no_emails","ActionMailer::TestHelper","classes/ActionMailer/TestHelper.html#method-i-assert_no_emails","(&block)","<p>Asserts that no emails have been sent.\n\n<pre><code>def test_emails\n  assert_no_emails\n  ContactMailer.welcome.deliver_now ...\n</code></pre>\n"],["assert_no_enqueued_emails","ActionMailer::TestHelper","classes/ActionMailer/TestHelper.html#method-i-assert_no_enqueued_emails","(&block)","<p>Asserts that no emails are enqueued for later delivery.\n\n<pre><code>def test_no_emails\n  assert_no_enqueued_emails ...\n</code></pre>\n"],["assert_no_enqueued_jobs","ActiveJob::TestHelper","classes/ActiveJob/TestHelper.html#method-i-assert_no_enqueued_jobs","(only: nil, except: nil, queue: nil, &block)","<p>Asserts that no jobs have been enqueued.\n\n<pre><code>def test_jobs\n  assert_no_enqueued_jobs\n  HelloJob.perform_later(&#39;jeremy&#39;) ...\n</code></pre>\n"],["assert_no_file","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_no_file","(relative)","<p>Asserts a given file does not exist. You need to supply an absolute path or a path relative to the configured â€¦\n"],["assert_no_migration","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_no_migration","(relative)","<p>Asserts a given migration does not exist. You need to supply an absolute path or a path relative to the â€¦\n"],["assert_no_performed_jobs","ActiveJob::TestHelper","classes/ActiveJob/TestHelper.html#method-i-assert_no_performed_jobs","(only: nil, except: nil, queue: nil, &block)","<p>Asserts that no jobs have been performed.\n\n<pre><code>def test_jobs\n  assert_no_performed_jobs\n\n  perform_enqueued_jobs ...\n</code></pre>\n"],["assert_no_streams","ActionCable::Channel::TestCase::Behavior","classes/ActionCable/Channel/TestCase/Behavior.html#method-i-assert_no_streams","()","<p>Asserts that no streams have been started.\n\n<pre><code>def test_assert_no_started_stream\n  subscribe\n  assert_no_streams ...\n</code></pre>\n"],["assert_not","ActiveSupport::Testing::Assertions","classes/ActiveSupport/Testing/Assertions.html#method-i-assert_not","(object, message = nil)","<p>Asserts that an expression is not truthy. Passes if <code>object</code> is <code>nil</code> or <code>false</code>. â€œTruthyâ€ means â€¦\n"],["assert_not_deprecated","ActiveSupport::Testing::Deprecation","classes/ActiveSupport/Testing/Deprecation.html#method-i-assert_not_deprecated","(deprecator = nil, &block)","<p>Asserts that no deprecation warnings are emitted by the given deprecator during the execution of the â€¦\n"],["assert_nothing_raised","ActiveSupport::Testing::Assertions","classes/ActiveSupport/Testing/Assertions.html#method-i-assert_nothing_raised","()","<p>Assertion that the block should not raise an exception.\n<p>Passes if evaluated code in the yielded block â€¦\n"],["assert_performed_jobs","ActiveJob::TestHelper","classes/ActiveJob/TestHelper.html#method-i-assert_performed_jobs","(number, only: nil, except: nil, queue: nil, &block)","<p>Asserts that the number of performed jobs matches the given number. If no block is passed, <code>perform_enqueued_jobs</code> â€¦\n"],["assert_performed_with","ActiveJob::TestHelper","classes/ActiveJob/TestHelper.html#method-i-assert_performed_with","(job: nil, args: nil, at: nil, queue: nil, priority: nil, &block)","<p>Asserts that the job has been performed with the given arguments.\n\n<pre><code>def test_assert_performed_with\n  MyJob.perform_later(1,2,3) ...\n</code></pre>\n"],["assert_recognizes","ActionDispatch::Assertions::RoutingAssertions","classes/ActionDispatch/Assertions/RoutingAssertions.html#method-i-assert_recognizes","(expected_options, path, extras = {}, msg = nil)","<p>Asserts that the routing of the given <code>path</code> was handled correctly and that the parsed options (given in â€¦\n"],["assert_redirected_to","ActionDispatch::Assertions::ResponseAssertions","classes/ActionDispatch/Assertions/ResponseAssertions.html#method-i-assert_redirected_to","(options = {}, message = nil)","<p>Asserts that the response is a redirect to a URL matching the given options.\n\n<pre><code># Asserts that the redirection ...\n</code></pre>\n"],["assert_reject_connection","ActionCable::Connection::Assertions","classes/ActionCable/Connection/Assertions.html#method-i-assert_reject_connection","(&block)","<p>Asserts that the connection is rejected (via <code>reject_unauthorized_connection</code>).\n\n<pre><code># Asserts that connection ...\n</code></pre>\n"],["assert_response","ActionDispatch::Assertions::ResponseAssertions","classes/ActionDispatch/Assertions/ResponseAssertions.html#method-i-assert_response","(type, message = nil)","<p>Asserts that the response is one of the following types:\n<p><code>:success</code>   - Status code was in the 200-299 range â€¦\n"],["assert_routing","ActionDispatch::Assertions::RoutingAssertions","classes/ActionDispatch/Assertions/RoutingAssertions.html#method-i-assert_routing","(path, options, defaults = {}, extras = {}, message = nil)","<p>Asserts that path and options match both ways; in other words, it verifies that <code>path</code> generates <code>options</code> â€¦\n"],["assert_valid_keys","Hash","classes/Hash.html#method-i-assert_valid_keys","(*valid_keys)","<p>Validates all keys in a hash match <code>*valid_keys</code>, raising <code>ArgumentError</code> on a mismatch.\n<p>Note that keys are â€¦\n"],["assert_valid_value","ActiveModel::Type::Value","classes/ActiveModel/Type/Value.html#method-i-assert_valid_value","(_)",""],["assert_valid_value","ActiveModel::Type::Value","classes/ActiveModel/Type/Value.html#method-i-assert_valid_value","(_)",""],["asset_path","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-asset_path","(source, options = {})","<p>This is the entry point for all assets. When using an asset pipeline gem (e.g. propshaft or sprockets-rails), â€¦\n"],["asset_url","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-asset_url","(source, options = {})","<p>Computes the full URL to an asset in the public directory. This will use <code>asset_path</code> internally, so most â€¦\n"],["assets_manifest","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-assets_manifest","()",""],["assign_attributes","ActiveModel::AttributeAssignment","classes/ActiveModel/AttributeAssignment.html#method-i-assign_attributes","(new_attributes)","<p>Allows you to set all the attributes by passing in a hash of attributes with keys matching the attribute â€¦\n"],["assigns","ActionDispatch::TestProcess","classes/ActionDispatch/TestProcess.html#method-i-assigns","(key = nil)",""],["assoc","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-assoc","(key)","<p>Same as <code>Hash#assoc</code> where the key passed as argument can be either a string or a symbol:\n\n<pre><code>counters = ActiveSupport::HashWithIndifferentAccess.new ...\n</code></pre>\n"],["assoc","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-assoc","(key)","<p>Same as <code>Hash#assoc</code> where the key passed as argument can be either a string or a symbol:\n\n<pre><code>counters = ActiveSupport::HashWithIndifferentAccess.new ...\n</code></pre>\n"],["associated","ActiveRecord::QueryMethods::WhereChain","classes/ActiveRecord/QueryMethods/WhereChain.html#method-i-associated","(*associations)","<p>Returns a new relation with joins and where clause to identify associated relations.\n<p>For example, posts â€¦\n"],["assume_migrated_upto_version","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-assume_migrated_upto_version","(version)",""],["at","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-at","(*args)","<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone of <code>self</code> from number of seconds â€¦\n"],["at","String","classes/String.html#method-i-at","(position)","<p>If you pass a single integer, returns a substring of one character at that position. The first character â€¦\n"],["at","Time","classes/Time.html#method-c-at","(*args, **kwargs)",""],["at_beginning_of_day","Date","classes/Date.html#method-i-at_beginning_of_day","()",""],["at_beginning_of_day","DateTime","classes/DateTime.html#method-i-at_beginning_of_day","()",""],["at_beginning_of_day","Time","classes/Time.html#method-i-at_beginning_of_day","()",""],["at_beginning_of_hour","DateTime","classes/DateTime.html#method-i-at_beginning_of_hour","()",""],["at_beginning_of_hour","Time","classes/Time.html#method-i-at_beginning_of_hour","()",""],["at_beginning_of_minute","DateTime","classes/DateTime.html#method-i-at_beginning_of_minute","()",""],["at_beginning_of_minute","Time","classes/Time.html#method-i-at_beginning_of_minute","()",""],["at_beginning_of_month","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-at_beginning_of_month","()",""],["at_beginning_of_quarter","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-at_beginning_of_quarter","()",""],["at_beginning_of_week","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-at_beginning_of_week","(start_day = Date.beginning_of_week)",""],["at_beginning_of_year","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-at_beginning_of_year","()",""],["at_end_of_day","Date","classes/Date.html#method-i-at_end_of_day","()",""],["at_end_of_day","DateTime","classes/DateTime.html#method-i-at_end_of_day","()",""],["at_end_of_day","Time","classes/Time.html#method-i-at_end_of_day","()",""],["at_end_of_hour","DateTime","classes/DateTime.html#method-i-at_end_of_hour","()",""],["at_end_of_hour","Time","classes/Time.html#method-i-at_end_of_hour","()",""],["at_end_of_minute","DateTime","classes/DateTime.html#method-i-at_end_of_minute","()",""],["at_end_of_minute","Time","classes/Time.html#method-i-at_end_of_minute","()",""],["at_end_of_month","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-at_end_of_month","()",""],["at_end_of_quarter","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-at_end_of_quarter","()",""],["at_end_of_week","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-at_end_of_week","(start_day = Date.beginning_of_week)",""],["at_end_of_year","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-at_end_of_year","()",""],["at_midday","Date","classes/Date.html#method-i-at_midday","()",""],["at_midday","DateTime","classes/DateTime.html#method-i-at_midday","()",""],["at_midday","Time","classes/Time.html#method-i-at_midday","()",""],["at_middle_of_day","Date","classes/Date.html#method-i-at_middle_of_day","()",""],["at_middle_of_day","DateTime","classes/DateTime.html#method-i-at_middle_of_day","()",""],["at_middle_of_day","Time","classes/Time.html#method-i-at_middle_of_day","()",""],["at_midnight","Date","classes/Date.html#method-i-at_midnight","()",""],["at_midnight","DateTime","classes/DateTime.html#method-i-at_midnight","()",""],["at_midnight","Time","classes/Time.html#method-i-at_midnight","()",""],["at_noon","Date","classes/Date.html#method-i-at_noon","()",""],["at_noon","DateTime","classes/DateTime.html#method-i-at_noon","()",""],["at_noon","Time","classes/Time.html#method-i-at_noon","()",""],["at_with_coercion","Time","classes/Time.html#method-c-at_with_coercion","(*args, **kwargs)","<p>Layers additional behavior on Time.at so that ActiveSupport::TimeWithZone and DateTime instances can â€¦\n"],["at_without_coercion","Time","classes/Time.html#method-c-at_without_coercion","(*args, **kwargs)",""],["atom_feed","ActionView::Helpers::AtomFeedHelper","classes/ActionView/Helpers/AtomFeedHelper.html#method-i-atom_feed","(options = {}, &block)","<p>Adds easy defaults to writing Atom feeds with the Builder template engine (this does not work on ERB â€¦\n"],["atomic_write","File","classes/File.html#method-c-atomic_write","(file_name, temp_dir = dirname(file_name))","<p>Write to a file atomically. Useful for situations where you don&#39;t want other processes or threads â€¦\n"],["attach","ActionCable::Connection::StreamEventLoop","classes/ActionCable/Connection/StreamEventLoop.html#method-i-attach","(io, stream)",""],["attach","ActiveStorage::Attached::Many","classes/ActiveStorage/Attached/Many.html#method-i-attach","(*attachables)","<p>Attaches one or more <code>attachables</code> to the record.\n<p>If the record is persisted and unchanged, the attachments â€¦\n"],["attach","ActiveStorage::Attached::One","classes/ActiveStorage/Attached/One.html#method-i-attach","(attachable)","<p>Attaches an <code>attachable</code> to the record.\n<p>If the record is persisted and unchanged, the attachment is saved â€¦\n"],["attach_to","ActiveSupport::Subscriber","classes/ActiveSupport/Subscriber.html#method-c-attach_to","(namespace, subscriber = new, notifier = ActiveSupport::Notifications, inherit_all: false)","<p>Attach the subscriber to a namespace.\n"],["attachable_content_type","ActionText::Attachable","classes/ActionText/Attachable.html#method-i-attachable_content_type","()",""],["attachable_filename","ActionText::Attachable","classes/ActionText/Attachable.html#method-i-attachable_filename","()",""],["attachable_filesize","ActionText::Attachable","classes/ActionText/Attachable.html#method-i-attachable_filesize","()",""],["attachable_metadata","ActionText::Attachable","classes/ActionText/Attachable.html#method-i-attachable_metadata","()",""],["attachable_plain_text_representation","ActionText::Attachables::ContentAttachment","classes/ActionText/Attachables/ContentAttachment.html#method-i-attachable_plain_text_representation","(caption)",""],["attachable_plain_text_representation","ActionText::Attachables::RemoteImage","classes/ActionText/Attachables/RemoteImage.html#method-i-attachable_plain_text_representation","(caption)",""],["attachable_plain_text_representation","ActionText::Engine","classes/ActionText/Engine.html#method-i-attachable_plain_text_representation","(caption = nil)",""],["attachable_sgid","ActionText::Attachable","classes/ActionText/Attachable.html#method-i-attachable_sgid","()",""],["attachables","ActionText::Content","classes/ActionText/Content.html#method-i-attachables","()",""],["attached?","ActiveStorage::Attached::Many","classes/ActiveStorage/Attached/Many.html#method-i-attached-3F","()","<p>Returns true if any attachments have been made.\n\n<pre><code>class Gallery &lt; ApplicationRecord\n  has_many_attached ...\n</code></pre>\n"],["attached?","ActiveStorage::Attached::One","classes/ActiveStorage/Attached/One.html#method-i-attached-3F","()","<p>Returns <code>true</code> if an attachment has been made.\n\n<pre><code>class User &lt; ApplicationRecord\n  has_one_attached :avatar ...\n</code></pre>\n"],["attachment","ActionText::FixtureSet","classes/ActionText/FixtureSet.html#method-c-attachment","(fixture_set_name, label, column_type: :integer)","<p>Fixtures support Action Text attachments as part of their <code>body</code> HTML.\n<p>Examples\n<p>For example, consider a second â€¦\n"],["attachment","ActiveStorage::Attached::One","classes/ActiveStorage/Attached/One.html#method-i-attachment","()","<p>Returns the associated attachment record.\n<p>You don&#39;t have to call this method to access the attachment&#39;s â€¦\n"],["attachment_galleries","ActionText::Content","classes/ActionText/Content.html#method-i-attachment_galleries","()",""],["attachment_selector","ActionText::AttachmentGallery","classes/ActionText/AttachmentGallery.html#method-c-attachment_selector","()",""],["attachments","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-attachments","()","<p>Allows you to add attachments to an email, like so:\n\n<pre><code>mail.attachments[&#39;filename.jpg&#39;] = File.read(&#39;/path/to/filename.jpg&#39;)\n</code></pre>\n"],["attachments","ActionMailer::MailHelper","classes/ActionMailer/MailHelper.html#method-i-attachments","()","<p>Access the message attachments list.\n"],["attachments","ActionText::AttachmentGallery","classes/ActionText/AttachmentGallery.html#method-i-attachments","()",""],["attachments","ActionText::Content","classes/ActionText/Content.html#method-i-attachments","()",""],["attachments","ActiveStorage::Attached::Many","classes/ActiveStorage/Attached/Many.html#method-i-attachments","()","<p>Returns all the associated attachment records.\n<p>All methods called on this proxy object that aren&#39;t â€¦\n"],["attempt","ActionDispatch::FileHandler","classes/ActionDispatch/FileHandler.html#method-i-attempt","(env)",""],["attr_internal","Module","classes/Module.html#method-i-attr_internal","(*attrs)",""],["attr_internal_accessor","Module","classes/Module.html#method-i-attr_internal_accessor","(*attrs)","<p>Declares an attribute reader and writer backed by an internally-named instance variable.\n"],["attr_internal_reader","Module","classes/Module.html#method-i-attr_internal_reader","(*attrs)","<p>Declares an attribute reader backed by an internally-named instance variable.\n"],["attr_internal_writer","Module","classes/Module.html#method-i-attr_internal_writer","(*attrs)","<p>Declares an attribute writer backed by an internally-named instance variable.\n"],["attr_readonly","ActiveRecord::ReadonlyAttributes::ClassMethods","classes/ActiveRecord/ReadonlyAttributes/ClassMethods.html#method-i-attr_readonly","(*attributes)","<p>Attributes listed as readonly will be used to create a new record but update operations will ignore these â€¦\n"],["attribute","ActiveModel::Attributes::ClassMethods","classes/ActiveModel/Attributes/ClassMethods.html#method-i-attribute","(name, cast_type = nil, default: NO_DEFAULT_PROVIDED, **options)",""],["attribute","ActiveRecord::Attributes::ClassMethods","classes/ActiveRecord/Attributes/ClassMethods.html#method-i-attribute","(name, cast_type = nil, default: NO_DEFAULT_PROVIDED, **options)","<p>Defines an attribute with a type on this model. It will override the type of existing attributes if needed. â€¦\n"],["attribute","ActiveSupport::CurrentAttributes","classes/ActiveSupport/CurrentAttributes.html#method-c-attribute","(*names)","<p>Declares one or more attributes that will be given both class and instance accessor methods.\n"],["attribute_alias","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_alias","(name)","<p>Returns the original name for the alias <code>name</code>\n"],["attribute_alias?","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_alias-3F","(new_name)","<p>Is <code>new_name</code> an alias?\n"],["attribute_before_last_save","ActiveRecord::AttributeMethods::Dirty","classes/ActiveRecord/AttributeMethods/Dirty.html#method-i-attribute_before_last_save","(attr_name)","<p>Returns the original value of an attribute before the last save.\n<p>This method is useful in after callbacks â€¦\n"],["attribute_change_to_be_saved","ActiveRecord::AttributeMethods::Dirty","classes/ActiveRecord/AttributeMethods/Dirty.html#method-i-attribute_change_to_be_saved","(attr_name)","<p>Returns the change to an attribute that will be persisted during the next save.\n<p>This method is useful â€¦\n"],["attribute_for_inspect","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-attribute_for_inspect","(attr_name)","<p>Returns an <code>#inspect</code>-like string for the value of the attribute <code>attr_name</code>. String attributes are truncated â€¦\n"],["attribute_in_database","ActiveRecord::AttributeMethods::Dirty","classes/ActiveRecord/AttributeMethods/Dirty.html#method-i-attribute_in_database","(attr_name)","<p>Returns the value of an attribute in the database, as opposed to the in-memory value that will be persisted â€¦\n"],["attribute_method?","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-attribute_method-3F","(attribute)","<p>Returns <code>true</code> if <code>attribute</code> is an attribute method, <code>false</code> otherwise.\n\n<pre><code>class Person\n  include ActiveModel::Validations ...\n</code></pre>\n"],["attribute_method?","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-attribute_method-3F","(attribute)","<p>Returns <code>true</code> if <code>attribute</code> is an attribute method and table exists, <code>false</code> otherwise.\n\n<pre><code>class Person &lt; ActiveRecord::Base ...\n</code></pre>\n"],["attribute_method_affix","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_method_affix","(*affixes)","<p>Declares a method available for all attributes with the given prefix and suffix. Uses <code>method_missing</code> â€¦\n"],["attribute_method_prefix","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_method_prefix","(*prefixes, parameters: nil)","<p>Declares a method available for all attributes with the given prefix. Uses <code>method_missing</code> and <code>respond_to?</code> â€¦\n"],["attribute_method_suffix","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_method_suffix","(*suffixes, parameters: nil)","<p>Declares a method available for all attributes with the given suffix. Uses <code>method_missing</code> and <code>respond_to?</code> â€¦\n"],["attribute_missing","ActiveModel::AttributeMethods","classes/ActiveModel/AttributeMethods.html#method-i-attribute_missing","(match, *args, &block)","<p><code>attribute_missing</code> is like <code>method_missing</code>, but for attributes. When <code>method_missing</code> is called we check â€¦\n"],["attribute_names","ActiveModel::Attributes::ClassMethods","classes/ActiveModel/Attributes/ClassMethods.html#method-i-attribute_names","()","<p>Returns an array of attribute names as strings\n\n<pre><code>class Person\n  include ActiveModel::Attributes\n\n  attribute ...\n</code></pre>\n"],["attribute_names","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-attribute_names","()","<p>Returns all error attribute names\n\n<pre><code>person.errors.messages        # =&gt; {:name=&gt;[&quot;cannot be nil&quot;, &quot;must be ...\n</code></pre>\n"],["attribute_names","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-attribute_names","()","<p>Returns an array of names for the attributes available on this object.\n\n<pre><code>class Person &lt; ActiveRecord::Base ...\n</code></pre>\n"],["attribute_names","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-attribute_names","()","<p>Returns an array of column names as strings if it&#39;s not an abstract class and table exists. Otherwise â€¦\n"],["attribute_present?","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-attribute_present-3F","(attr_name)","<p>Returns <code>true</code> if the specified <code>attribute</code> has been set by the user or by a database load and is neither â€¦\n"],["attributes","ActionText::TrixAttachment","classes/ActionText/TrixAttachment.html#method-i-attributes","()",""],["attributes","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-attributes","()","<p>Returns a hash of all the attributes with their names as keys and the values of the attributes as values. â€¦\n"],["attributes=","ActiveModel::AttributeAssignment","classes/ActiveModel/AttributeAssignment.html#method-i-attributes-3D","(new_attributes)",""],["attributes_before_type_cast","ActiveRecord::AttributeMethods::BeforeTypeCast","classes/ActiveRecord/AttributeMethods/BeforeTypeCast.html#method-i-attributes_before_type_cast","()","<p>Returns a hash of attributes before typecasting and deserialization.\n\n<pre><code>class Task &lt; ActiveRecord::Base\nend ...\n</code></pre>\n"],["attributes_for_database","ActiveRecord::AttributeMethods::BeforeTypeCast","classes/ActiveRecord/AttributeMethods/BeforeTypeCast.html#method-i-attributes_for_database","()","<p>Returns a hash of attributes for assignment to the database.\n"],["attributes_for_hash","ActiveModel::Error","classes/ActiveModel/Error.html#method-i-attributes_for_hash","()",""],["attributes_in_database","ActiveRecord::AttributeMethods::Dirty","classes/ActiveRecord/AttributeMethods/Dirty.html#method-i-attributes_in_database","()","<p>Returns a hash of the attributes that will change when the record is next saved.\n<p>The hash keys are the â€¦\n"],["attributes_names","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-attributes_names","()",""],["audio?","ActiveStorage::Blob","classes/ActiveStorage/Blob.html#method-i-audio-3F","()","<p>Returns true if the content_type of this blob is in the audio range, like audio/mpeg.\n"],["audio_path","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-audio_path","(source, options = {})","<p>Computes the path to an audio asset in the public audios directory. Full paths from the document root â€¦\n"],["audio_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-audio_tag","(*sources)","<p>Returns an HTML audio tag for the <code>sources</code>. If <code>sources</code> is a string, a single audio tag will be returned. â€¦\n"],["audio_url","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-audio_url","(source, options = {})","<p>Computes the full URL to an audio asset in the public audios directory. This will use <code>audio_path</code> internally, â€¦\n"],["auth_param","ActionController::HttpAuthentication::Basic","classes/ActionController/HttpAuthentication/Basic.html#method-i-auth_param","(request)",""],["auth_scheme","ActionController::HttpAuthentication::Basic","classes/ActionController/HttpAuthentication/Basic.html#method-i-auth_scheme","(request)",""],["authenticate","ActionController::HttpAuthentication::Basic","classes/ActionController/HttpAuthentication/Basic.html#method-i-authenticate","(request, &login_procedure)",""],["authenticate","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-authenticate","(request, realm, &password_procedure)","<p>Returns false on a valid response, true otherwise.\n"],["authenticate","ActionController::HttpAuthentication::Token","classes/ActionController/HttpAuthentication/Token.html#method-i-authenticate","(controller, &login_procedure)","<p>If token Authorization header is present, call the login procedure with the present token and options. â€¦\n"],["authenticate_or_request_with_http_basic","ActionController::HttpAuthentication::Basic::ControllerMethods","classes/ActionController/HttpAuthentication/Basic/ControllerMethods.html#method-i-authenticate_or_request_with_http_basic","(realm = nil, message = nil, &login_procedure)",""],["authenticate_or_request_with_http_digest","ActionController::HttpAuthentication::Digest::ControllerMethods","classes/ActionController/HttpAuthentication/Digest/ControllerMethods.html#method-i-authenticate_or_request_with_http_digest","(realm = \"Application\", message = nil, &password_procedure)","<p>Authenticate using an HTTP Digest, or otherwise render an HTTP header requesting the client to send a â€¦\n"],["authenticate_or_request_with_http_token","ActionController::HttpAuthentication::Token::ControllerMethods","classes/ActionController/HttpAuthentication/Token/ControllerMethods.html#method-i-authenticate_or_request_with_http_token","(realm = \"Application\", message = nil, &login_procedure)","<p>Authenticate using an HTTP Bearer token, or otherwise render an HTTP header requesting the client to â€¦\n"],["authenticate_with_http_basic","ActionController::HttpAuthentication::Basic::ControllerMethods","classes/ActionController/HttpAuthentication/Basic/ControllerMethods.html#method-i-authenticate_with_http_basic","(&login_procedure)",""],["authenticate_with_http_digest","ActionController::HttpAuthentication::Digest::ControllerMethods","classes/ActionController/HttpAuthentication/Digest/ControllerMethods.html#method-i-authenticate_with_http_digest","(realm = \"Application\", &password_procedure)","<p>Authenticate using an HTTP Digest. Returns true if authentication is successful, false otherwise.\n"],["authenticate_with_http_token","ActionController::HttpAuthentication::Token::ControllerMethods","classes/ActionController/HttpAuthentication/Token/ControllerMethods.html#method-i-authenticate_with_http_token","(&login_procedure)","<p>Authenticate using an HTTP Bearer token. Returns true if authentication is successful, false otherwise. â€¦\n"],["authenticated?","ActionMailbox::Ingresses::Mailgun::InboundEmailsController::Authenticator","classes/ActionMailbox/Ingresses/Mailgun/InboundEmailsController/Authenticator.html#method-i-authenticated-3F","()",""],["authenticated?","ActionMailbox::Ingresses::Mandrill::InboundEmailsController::Authenticator","classes/ActionMailbox/Ingresses/Mandrill/InboundEmailsController/Authenticator.html#method-i-authenticated-3F","()",""],["authentication_header","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-authentication_header","(controller, realm)",""],["authentication_request","ActionController::HttpAuthentication::Basic","classes/ActionController/HttpAuthentication/Basic.html#method-i-authentication_request","(controller, realm, message)",""],["authentication_request","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-authentication_request","(controller, realm, message = nil)",""],["authentication_request","ActionController::HttpAuthentication::Token","classes/ActionController/HttpAuthentication/Token.html#method-i-authentication_request","(controller, realm, message = nil)","<p>Sets a WWW-Authenticate header to let the client know a token is desired.\n<p>Returns nothing.\n<p>Parameters\n"],["authorization","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-authorization","()","<p>Returns the authorization header regardless of whether it was specified directly or through one of the â€¦\n"],["auto_discovery_link_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-auto_discovery_link_tag","(type = :rss, url_options = {}, tag_options = {})","<p>Returns a link tag that browsers and feed readers can use to auto-detect an RSS, Atom, or JSON feed. â€¦\n"],["autoload","ActiveSupport::Autoload","classes/ActiveSupport/Autoload.html#method-i-autoload","(const_name, path = @_at_path)",""],["autoload_at","ActiveSupport::Autoload","classes/ActiveSupport/Autoload.html#method-i-autoload_at","(path)",""],["autoload_once","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-autoload_once","()",""],["autoload_once_paths","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-autoload_once_paths","()",""],["autoload_paths","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-autoload_paths","()",""],["autoload_paths","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-autoload_paths","()",""],["autoload_under","ActiveSupport::Autoload","classes/ActiveSupport/Autoload.html#method-i-autoload_under","(path)",""],["autoloaders","Rails","classes/Rails.html#method-c-autoloaders","()",""],["autoloads","ActiveSupport::Autoload","classes/ActiveSupport/Autoload.html#method-i-autoloads","()",""],["autosave=","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-i-autosave-3D","(autosave)",""],["available_action?","AbstractController::Base","classes/AbstractController/Base.html#method-i-available_action-3F","(action_name)","<p>Returns true if a method for the action is available and can be dispatched, false otherwise.\n<p>Notice that â€¦\n"],["average","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-average","(column_name)","<p>Calculates the average value on a given column. Returns <code>nil</code> if there&#39;s no row. See #calculate for â€¦\n"],["await_commit","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-await_commit","()",""],["await_sent","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-await_sent","()",""],["backend","ActiveSupport::XmlMini","classes/ActiveSupport/XmlMini.html#method-i-backend","()",""],["backend=","ActiveSupport::XmlMini","classes/ActiveSupport/XmlMini.html#method-i-backend-3D","(name)",""],["backtrace_cleaner","Rails","classes/Rails.html#method-c-backtrace_cleaner","()",""],["banner","Rails::Command::Base","classes/Rails/Command/Base.html#method-c-banner","(*)","<p>Use Rails&#39; default banner.\n"],["banner","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-banner","()","<p>Use Rails default banner.\n"],["base","ActiveStorage::Filename","classes/ActiveStorage/Filename.html#method-i-base","()","<p>Returns the part of the filename preceding any extension.\n\n<pre><code>ActiveStorage::Filename.new(&quot;racecar.jpg&quot;).base ...\n</code></pre>\n"],["base36","SecureRandom","classes/SecureRandom.html#method-c-base36","(n = 16)","<p>SecureRandom.base36 generates a random base36 string in lowercase.\n<p>The argument <em>n</em> specifies the length â€¦\n"],["base58","SecureRandom","classes/SecureRandom.html#method-c-base58","(n = 16)","<p>SecureRandom.base58 generates a random base58 string.\n<p>The argument <em>n</em> specifies the length of the random â€¦\n"],["base_class?","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-base_class-3F","()","<p>Returns whether the class is a base class. See #base_class for more information.\n"],["base_name","Rails::Command::Base","classes/Rails/Command/Base.html#method-c-base_name","()","<p>Sets the base_name taking into account the current class namespace.\n\n<pre><code>Rails::Command::TestCommand.base_name ...\n</code></pre>\n"],["base_name","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-base_name","()","<p>Sets the base_name taking into account the current class namespace.\n"],["base_root","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-base_root","()","<p>Returns the base root for a common set of generators. This is used to dynamically guess the default source â€¦\n"],["batch_size","ActiveRecord::Batches::BatchEnumerator","classes/ActiveRecord/Batches/BatchEnumerator.html#method-i-batch_size","()","<p>The size of the batches yielded by the BatchEnumerator.\n"],["bcc_addresses","Mail::Message","classes/Mail/Message.html#method-i-bcc_addresses","()",""],["beat","ActionCable::Connection::Base","classes/ActionCable/Connection/Base.html#method-i-beat","()",""],["becomes","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-becomes","(klass)","<p>Returns an instance of the specified <code>klass</code> with the attributes of the current record. This is mostly â€¦\n"],["becomes!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-becomes-21","(klass)","<p>Wrapper around #becomes that also changes the instance&#39;s STI column value. This is especially useful â€¦\n"],["before","ActionDispatch::Callbacks","classes/ActionDispatch/Callbacks.html#method-c-before","(*args, &block)",""],["before","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-before","(time = ::Time.current)",""],["before","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-i-before","()",""],["before?","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-before-3F","(date_or_time)","<p>Returns true if the date/time falls before <code>date_or_time</code>.\n"],["before_action","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-before_action","","<p>Append a callback before actions. See _insert_callbacks for parameter details.\n<p>If the callback renders â€¦\n"],["before_class_unload","ActiveSupport::Reloader","classes/ActiveSupport/Reloader.html#method-c-before_class_unload","(*args, &block)","<p>Registers a callback that will run immediately before the classes are unloaded.\n"],["before_configuration","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-before_configuration","(&block)","<p>First configurable block to run. Called before any initializers are run.\n"],["before_create","ActiveRecord::Callbacks::ClassMethods","classes/ActiveRecord/Callbacks/ClassMethods.html#method-i-before_create","","<p>Registers a callback to be called before a record is created. See ActiveRecord::Callbacks for more information. â€¦\n"],["before_destroy","ActiveRecord::Callbacks::ClassMethods","classes/ActiveRecord/Callbacks/ClassMethods.html#method-i-before_destroy","","<p>Registers a callback to be called before a record is destroyed. See ActiveRecord::Callbacks for more â€¦\n"],["before_eager_load","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-before_eager_load","(&block)","<p>Third configurable block to run. Does not run if <code>config.eager_load</code> set to false.\n"],["before_enqueue","ActiveJob::Callbacks::ClassMethods","classes/ActiveJob/Callbacks/ClassMethods.html#method-i-before_enqueue","(*filters, &blk)","<p>Defines a callback that will get called right before the job is enqueued.\n\n<pre><code>class VideoProcessJob &lt; ActiveJob::Base ...\n</code></pre>\n"],["before_initialize","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-before_initialize","(&block)","<p>Second configurable block to run. Called before frameworks initialize.\n"],["before_perform","ActiveJob::Callbacks::ClassMethods","classes/ActiveJob/Callbacks/ClassMethods.html#method-i-before_perform","(*filters, &blk)","<p>Defines a callback that will get called right before the job&#39;s perform method is executed.\n\n<pre><code>class VideoProcessJob ...\n</code></pre>\n"],["before_processing","ActionMailbox::Callbacks","classes/ActionMailbox/Callbacks.html#method-i-before_processing","(*methods, &block)",""],["before_reset","ActiveSupport::CurrentAttributes","classes/ActiveSupport/CurrentAttributes.html#method-c-before_reset","(&block)","<p>Calls this block before #reset is called on the instance. Used for resetting external collaborators that â€¦\n"],["before_save","ActiveRecord::Callbacks::ClassMethods","classes/ActiveRecord/Callbacks/ClassMethods.html#method-i-before_save","","<p>Registers a callback to be called before a record is saved. See ActiveRecord::Callbacks for more information. â€¦\n"],["before_subscribe","ActionCable::Channel::Callbacks::ClassMethods","classes/ActionCable/Channel/Callbacks/ClassMethods.html#method-i-before_subscribe","(*methods, &block)",""],["before_unsubscribe","ActionCable::Channel::Callbacks::ClassMethods","classes/ActionCable/Channel/Callbacks/ClassMethods.html#method-i-before_unsubscribe","(*methods, &block)",""],["before_update","ActiveRecord::Callbacks::ClassMethods","classes/ActiveRecord/Callbacks/ClassMethods.html#method-i-before_update","","<p>Registers a callback to be called before a record is updated. See ActiveRecord::Callbacks for more information. â€¦\n"],["before_validation","ActiveModel::Validations::Callbacks::ClassMethods","classes/ActiveModel/Validations/Callbacks/ClassMethods.html#method-i-before_validation","(*args, &block)","<p>Defines a callback that will get called right before validation.\n\n<pre><code>class Person\n  include ActiveModel::Validations ...\n</code></pre>\n"],["begin_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-begin_db_transaction","()","<p>Begins the transaction (and turns off auto-committing).\n"],["begin_isolated_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-begin_isolated_db_transaction","(isolation)","<p>Begins the transaction with the isolation level set. Raises an error by default; adapters that support â€¦\n"],["beginning_of_day","Date","classes/Date.html#method-i-beginning_of_day","()","<p>Converts Date to a Time (or DateTime if necessary) with the time portion set to the beginning of the â€¦\n"],["beginning_of_day","DateTime","classes/DateTime.html#method-i-beginning_of_day","()","<p>Returns a new DateTime representing the start of the day (0:00).\n"],["beginning_of_day","Time","classes/Time.html#method-i-beginning_of_day","()","<p>Returns a new Time representing the start of the day (0:00)\n"],["beginning_of_hour","DateTime","classes/DateTime.html#method-i-beginning_of_hour","()","<p>Returns a new DateTime representing the start of the hour (hh:00:00).\n"],["beginning_of_hour","Time","classes/Time.html#method-i-beginning_of_hour","()","<p>Returns a new Time representing the start of the hour (x:00)\n"],["beginning_of_minute","DateTime","classes/DateTime.html#method-i-beginning_of_minute","()","<p>Returns a new DateTime representing the start of the minute (hh:mm:00).\n"],["beginning_of_minute","Time","classes/Time.html#method-i-beginning_of_minute","()","<p>Returns a new Time representing the start of the minute (x:xx:00)\n"],["beginning_of_month","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-beginning_of_month","()","<p>Returns a new date/time at the start of the month.\n\n<pre><code>today = Date.today # =&gt; Thu, 18 Jun 2015\ntoday.beginning_of_month ...\n</code></pre>\n"],["beginning_of_quarter","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-beginning_of_quarter","()","<p>Returns a new date/time at the start of the quarter.\n\n<pre><code>today = Date.today # =&gt; Fri, 10 Jul 2015\ntoday.beginning_of_quarter ...\n</code></pre>\n"],["beginning_of_week","Date","classes/Date.html#method-c-beginning_of_week","()","<p>Returns the week start (e.g. <code>:monday</code>) for the current request, if this has been set (via Date.beginning_of_week= â€¦\n"],["beginning_of_week","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-beginning_of_week","(start_day = Date.beginning_of_week)","<p>Returns a new date/time representing the start of this week on the given day. Week is assumed to start â€¦\n"],["beginning_of_week=","Date","classes/Date.html#method-c-beginning_of_week-3D","(week_start)","<p>Sets <code>Date.beginning_of_week</code> to a week start (e.g. <code>:monday</code>) for current request/thread.\n<p>This method accepts â€¦\n"],["beginning_of_year","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-beginning_of_year","()","<p>Returns a new date/time at the beginning of the year.\n\n<pre><code>today = Date.today # =&gt; Fri, 10 Jul 2015\ntoday.beginning_of_year ...\n</code></pre>\n"],["behavior","ActiveSupport::Deprecation::Behavior","classes/ActiveSupport/Deprecation/Behavior.html#method-i-behavior","()","<p>Returns the current behavior or if one isn&#39;t set, defaults to <code>:stderr</code>.\n"],["behavior=","ActiveSupport::Deprecation::Behavior","classes/ActiveSupport/Deprecation/Behavior.html#method-i-behavior-3D","(behavior)","<p>Sets the behavior to the specified value. Can be a single value, array, or an object that responds to â€¦\n"],["belongs_to","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-belongs_to","(name, scope = nil, **options)","<p>Specifies a one-to-one association with another class. This method should only be used if this class â€¦\n"],["belongs_to","ActiveRecord::ConnectionAdapters::SQLite3::TableDefinition","classes/ActiveRecord/ConnectionAdapters/SQLite3/TableDefinition.html#method-i-belongs_to","(*args, **options)",""],["belongs_to","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-belongs_to","(*args, **options)",""],["belongs_to","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-belongs_to","(*args, **options)",""],["belongs_to?","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-i-belongs_to-3F","(group)",""],["benchmark","ActiveSupport::Benchmarkable","classes/ActiveSupport/Benchmarkable.html#method-i-benchmark","(message = \"Benchmarking\", options = {}, &block)","<p>Allows you to measure the execution time of a block in a template and records the result to the log. â€¦\n"],["between?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-between-3F","(min, max)","<p>Returns true if the current object&#39;s time is within the specified <code>min</code> and <code>max</code> time.\n"],["bigserial","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-bigserial","",""],["bin","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-bin","()",""],["bin","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-bin","(force = false)",""],["bin_when_updating","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-bin_when_updating","()",""],["binary?","ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit::Data","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Bit/Data.html#method-i-binary-3F","()",""],["bind","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-i-bind","(context)",""],["bind_locals","ActionView::UnboundTemplate","classes/ActionView/UnboundTemplate.html#method-i-bind_locals","(locals)",""],["bit","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-bit","",""],["bit_varying","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-bit_varying","",""],["blank?","ActiveRecord::DatabaseConfigurations","classes/ActiveRecord/DatabaseConfigurations.html#method-i-blank-3F","()",""],["blank?","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-blank-3F","()","<p>Returns true if relation is blank.\n"],["blank?","ActiveStorage::Attached::One","classes/ActiveStorage/Attached/One.html#method-i-blank-3F","()","<p>Returns <code>true</code> if an attachment is not attached.\n\n<pre><code>class User &lt; ApplicationRecord\n  has_one_attached :avatar ...\n</code></pre>\n"],["blank?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-blank-3F","()","<p>An instance of ActiveSupport::TimeWithZone is never blank\n"],["blank?","FalseClass","classes/FalseClass.html#method-i-blank-3F","()","<p><code>false</code> is blank:\n\n<pre><code>false.blank? # =&gt; true\n</code></pre>\n<p>@return [true]\n"],["blank?","NilClass","classes/NilClass.html#method-i-blank-3F","()","<p><code>nil</code> is blank:\n\n<pre><code>nil.blank? # =&gt; true\n</code></pre>\n<p>@return [true]\n"],["blank?","Object","classes/Object.html#method-i-blank-3F","()","<p>An object is blank if it&#39;s false, empty, or a whitespace string. For example, <code>nil</code>, &#39;&#39;, &#39; â€¦\n"],["blank?","String","classes/String.html#method-i-blank-3F","()","<p>A string is blank if it&#39;s empty or contains whitespaces only:\n\n<pre><code>&#39;&#39;.blank?       # =&gt; true\n&#39;   &#39;.blank? ...\n</code></pre>\n"],["blank?","TrueClass","classes/TrueClass.html#method-i-blank-3F","()","<p><code>true</code> is not blank:\n\n<pre><code>true.blank? # =&gt; false\n</code></pre>\n<p>@return [false]\n"],["blob","ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-blob","",""],["blob","ActiveStorage::FixtureSet","classes/ActiveStorage/FixtureSet.html#method-c-blob","(filename:, **attributes)","<p>Generate a YAML-encoded representation of an ActiveStorage::Blob instance&#39;s attributes, resolve the â€¦\n"],["blobs","ActiveStorage::Attached::Many","classes/ActiveStorage/Attached/Many.html#method-i-blobs","()","<p>Returns all attached blobs.\n"],["block_all_mixed_content","ActionDispatch::ContentSecurityPolicy","classes/ActionDispatch/ContentSecurityPolicy.html#method-i-block_all_mixed_content","(enabled = true)","<p>Specify whether to prevent the user agent from loading any assets over HTTP when the page uses HTTPS: â€¦\n"],["block_format","ActionMailer::MailHelper","classes/ActionMailer/MailHelper.html#method-i-block_format","(text)","<p>Take the text and format it, indented two spaces for each line, and wrapped at 72 columns:\n\n<pre><code>text = &lt;&lt;-TEXT ...\n</code></pre>\n"],["body","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-body","()","<p>The request body is an IO input stream. If the RAW_POST_DATA environment variable is already set, wrap â€¦\n"],["body","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-body","()","<p>Returns the content of the response as a string. This contains the contents of any calls to <code>render</code>.\n"],["body","ActionDispatch::Response::RackBody","classes/ActionDispatch/Response/RackBody.html#method-i-body","()",""],["body","ActionView::AbstractRenderer::RenderedCollection::EmptyCollection","classes/ActionView/AbstractRenderer/RenderedCollection/EmptyCollection.html#method-i-body","()",""],["body=","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-body-3D","(body)","<p>Allows you to manually set or override the response body.\n"],["body_parts","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-body_parts","()",""],["bounce_with","ActionMailbox::Base","classes/ActionMailbox/Base.html#method-i-bounce_with","(message)","<p>Enqueues the given <code>message</code> for delivery and changes the inbound email&#39;s status to <code>:bounced</code>.\n"],["box","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-box","",""],["broadcast","ActionCable::Server::Broadcasting","classes/ActionCable/Server/Broadcasting.html#method-i-broadcast","(broadcasting, message, coder: ActiveSupport::JSON)","<p>Broadcast a hash directly to a named <code>broadcasting</code>. This will later be JSON encoded.\n"],["broadcast","ActionCable::Server::Broadcasting::Broadcaster","classes/ActionCable/Server/Broadcasting/Broadcaster.html#method-i-broadcast","(message)",""],["broadcast","ActionCable::SubscriptionAdapter::Base","classes/ActionCable/SubscriptionAdapter/Base.html#method-i-broadcast","(channel, payload)",""],["broadcast","ActionCable::SubscriptionAdapter::SubscriberMap","classes/ActionCable/SubscriptionAdapter/SubscriberMap.html#method-i-broadcast","(channel, message)",""],["broadcast","ActionCable::SubscriptionAdapter::Test","classes/ActionCable/SubscriptionAdapter/Test.html#method-i-broadcast","(channel, payload)",""],["broadcast_to","ActionCable::Channel::Broadcasting::ClassMethods","classes/ActionCable/Channel/Broadcasting/ClassMethods.html#method-i-broadcast_to","(model, message)","<p>Broadcast a hash to a unique broadcasting for this <code>model</code> in this channel.\n"],["broadcaster_for","ActionCable::Server::Broadcasting","classes/ActionCable/Server/Broadcasting.html#method-i-broadcaster_for","(broadcasting, coder: ActiveSupport::JSON)","<p>Returns a broadcaster for a named <code>broadcasting</code> that can be reused. Useful when you have an object that â€¦\n"],["broadcasting_for","ActionCable::Channel::Broadcasting::ClassMethods","classes/ActionCable/Channel/Broadcasting/ClassMethods.html#method-i-broadcasting_for","(model)","<p>Returns a unique broadcasting identifier for this <code>model</code> in this channel:\n\n<pre><code>CommentsChannel.broadcasting_for(&quot;all&quot;) ...\n</code></pre>\n"],["broadcasts","ActionCable::SubscriptionAdapter::Test","classes/ActionCable/SubscriptionAdapter/Test.html#method-i-broadcasts","(channel)",""],["build","ActionDispatch::ContentSecurityPolicy","classes/ActionDispatch/ContentSecurityPolicy.html#method-i-build","(context = nil, nonce = nil, nonce_directives = nil)",""],["build","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-build","(app = nil, &block)",""],["build","ActionDispatch::MiddlewareStack::Middleware","classes/ActionDispatch/MiddlewareStack/Middleware.html#method-i-build","(app)",""],["build","ActionDispatch::PermissionsPolicy","classes/ActionDispatch/PermissionsPolicy.html#method-i-build","(context = nil)",""],["build","ActionView::TemplatePath","classes/ActionView/TemplatePath.html#method-c-build","(name, prefix, partial)","<p>Convert name, prefix, and partial into a TemplatePath\n"],["build","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-build","(attributes = {}, &block)","<p>Returns a new object of the collection type that has been instantiated with <code>attributes</code> and linked to â€¦\n"],["build","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-build","(attributes = nil, &block)",""],["build","ActiveSupport::Callbacks::Filters::After","classes/ActiveSupport/Callbacks/Filters/After.html#method-c-build","(callback_sequence, user_callback, user_conditions, chain_config)",""],["build","ActiveSupport::Callbacks::Filters::Before","classes/ActiveSupport/Callbacks/Filters/Before.html#method-c-build","(callback_sequence, user_callback, user_conditions, chain_config, filter, name)",""],["build","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-c-build","(value)","<p>Creates a new Duration from a seconds value that is converted to the individual parts:\n\n<pre><code>ActiveSupport::Duration.build(31556952).parts ...\n</code></pre>\n"],["build","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-c-build","(klass, params = nil)","<p>GET new POST create\n"],["build_instrumented","ActionDispatch::MiddlewareStack::Middleware","classes/ActionDispatch/MiddlewareStack/Middleware.html#method-i-build_instrumented","(app)",""],["build_queue","ActiveJob::QueueAdapters::QueueClassicAdapter","classes/ActiveJob/QueueAdapters/QueueClassicAdapter.html#method-i-build_queue","(queue_name)","<p>Builds a <code>QC::Queue</code> object to schedule jobs on.\n<p>If you have a custom <code>QC::Queue</code> subclass you&#39;ll need â€¦\n"],["build_response","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-build_response","(klass)",""],["build_stack","Rails::Application::DefaultMiddlewareStack","classes/Rails/Application/DefaultMiddlewareStack.html#method-i-build_stack","()",""],["build_tag_values","ActionView::Helpers::TagHelper","classes/ActionView/Helpers/TagHelper.html#method-c-build_tag_values","(*args)",""],["build_view_context_class","ActionView::Rendering::ClassMethods","classes/ActionView/Rendering/ClassMethods.html#method-i-build_view_context_class","(klass, supports_path, routes, helpers)",""],["button","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-button","(value = nil, options = {}, &block)","<p>Add the submit button for the given form. When no value is given, it checks if the object is a new resource â€¦\n"],["button_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-button_tag","(content_or_options = nil, options = nil, &block)","<p>Creates a button element that defines a <code>submit</code> button, <code>reset</code> button or a generic button which can be â€¦\n"],["button_to","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-button_to","(name = nil, options = nil, html_options = nil, &block)","<p>Generates a form containing a single button that submits to the URL created by the set of <code>options</code>. This â€¦\n"],["byte","Numeric","classes/Numeric.html#method-i-byte","()",""],["bytes","Numeric","classes/Numeric.html#method-i-bytes","()","<p>Enables the use of byte calculations and declarations, like 45.bytes + 2.6.megabytes\n\n<pre><code>2.bytes # =&gt; 2\n</code></pre>\n"],["cache","AbstractController::Caching","classes/AbstractController/Caching.html#method-i-cache","(key, options = {}, &block)","<p>Convenience accessor.\n"],["cache","ActionView::Helpers::CacheHelper","classes/ActionView/Helpers/CacheHelper.html#method-i-cache","(name = {}, options = {}, &block)","<p>This helper exposes a method for caching fragments of a view rather than an entire action or page. This â€¦\n"],["cache","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-cache","()","<p>Enable the query cache within the block.\n"],["cache","ActiveRecord::QueryCache::ClassMethods","classes/ActiveRecord/QueryCache/ClassMethods.html#method-i-cache","(&block)","<p>Enable the query cache within the block if Active Record is configured. If it&#39;s not, it will execute â€¦\n"],["cache_dump_filename","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-cache_dump_filename","(db_config_name, schema_cache_path: nil)",""],["cache_fixtures","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-cache_fixtures","(connection, fixtures_map)",""],["cache_for_connection","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-cache_for_connection","(connection)",""],["cache_fragment_name","ActionView::Helpers::CacheHelper","classes/ActionView/Helpers/CacheHelper.html#method-i-cache_fragment_name","(name = {}, skip_digest: nil, digest_path: nil)","<p>This helper returns the name of a cache key for a given fragment cache call. By supplying <code>skip_digest:</code> â€¦\n"],["cache_if","ActionView::Helpers::CacheHelper","classes/ActionView/Helpers/CacheHelper.html#method-i-cache_if","(condition, name = {}, options = {}, &block)","<p>Cache fragments of a view if <code>condition</code> is true\n\n<pre><code>&lt;% cache_if admin?, project do %&gt;\n  &lt;b&gt;All the topics on ...\n</code></pre>\n"],["cache_key","ActionText::Attachments::Caching","classes/ActionText/Attachments/Caching.html#method-i-cache_key","(*args)",""],["cache_key","ActiveRecord::Integration","classes/ActiveRecord/Integration.html#method-i-cache_key","()","<p>Returns a stable cache key that can be used to identify this record.\n\n<pre><code>Product.new.cache_key     # =&gt; &quot;products/new&quot; ...\n</code></pre>\n"],["cache_key","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-cache_key","(timestamp_column = \"updated_at\")","<p>Returns a stable cache key that can be used to identify this query. The cache key is built with a fingerprint â€¦\n"],["cache_key_with_version","ActiveRecord::Integration","classes/ActiveRecord/Integration.html#method-i-cache_key_with_version","()","<p>Returns a cache key along with the version.\n"],["cache_key_with_version","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-cache_key_with_version","()","<p>Returns a cache key along with the version.\n"],["cache_message","ActionView::LogSubscriber","classes/ActionView/LogSubscriber.html#method-i-cache_message","(payload)",""],["cache_store","AbstractController::Caching::ConfigMethods","classes/AbstractController/Caching/ConfigMethods.html#method-i-cache_store","()",""],["cache_store=","AbstractController::Caching::ConfigMethods","classes/AbstractController/Caching/ConfigMethods.html#method-i-cache_store-3D","(store)",""],["cache_template_loading","ActionView::Base","classes/ActionView/Base.html#method-c-cache_template_loading","()",""],["cache_template_loading=","ActionView::Base","classes/ActionView/Base.html#method-c-cache_template_loading-3D","(value)",""],["cache_unless","ActionView::Helpers::CacheHelper","classes/ActionView/Helpers/CacheHelper.html#method-i-cache_unless","(condition, name = {}, options = {}, &block)","<p>Cache fragments of a view unless <code>condition</code> is true\n\n<pre><code>&lt;% cache_unless admin?, project do %&gt;\n  &lt;b&gt;All the ...\n</code></pre>\n"],["cache_version","ActiveRecord::Integration","classes/ActiveRecord/Integration.html#method-i-cache_version","()","<p>Returns a cache version that can be used together with the cache key to form a recyclable caching scheme. â€¦\n"],["cache_version","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-cache_version","(timestamp_column = :updated_at)","<p>Returns a cache version that can be used together with the cache key to form a recyclable caching scheme. â€¦\n"],["cached_fixtures","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-cached_fixtures","(connection, keys_to_fetch = nil)",""],["caching?","ActionView::Helpers::CacheHelper","classes/ActionView/Helpers/CacheHelper.html#method-i-caching-3F","()","<p>Returns whether the current view fragment is within a <code>cache</code> block.\n<p>Useful when certain fragments aren&#39;t â€¦\n"],["calculate","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-calculate","(operation, column_name)",""],["calculate","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-calculate","(operation, column_name)","<p>This calculates aggregate values in the given column. Methods for #count, #sum, #average, #minimum, and â€¦\n"],["calculate_ip","ActionDispatch::RemoteIp::GetIp","classes/ActionDispatch/RemoteIp/GetIp.html#method-i-calculate_ip","()","<p>Sort through the various IP address headers, looking for the IP most likely to be the address of the â€¦\n"],["call","ActionCable::Server::Base","classes/ActionCable/Server/Base.html#method-i-call","(env)","<p>Called by Rack to set up the server.\n"],["call","ActionDispatch::Callbacks","classes/ActionDispatch/Callbacks.html#method-i-call","(env)",""],["call","ActionDispatch::ContentSecurityPolicy::Middleware","classes/ActionDispatch/ContentSecurityPolicy/Middleware.html#method-i-call","(env)",""],["call","ActionDispatch::Cookies","classes/ActionDispatch/Cookies.html#method-i-call","(env)",""],["call","ActionDispatch::DebugExceptions","classes/ActionDispatch/DebugExceptions.html#method-i-call","(env)",""],["call","ActionDispatch::DebugLocks","classes/ActionDispatch/DebugLocks.html#method-i-call","(env)",""],["call","ActionDispatch::Executor","classes/ActionDispatch/Executor.html#method-i-call","(env)",""],["call","ActionDispatch::FileHandler","classes/ActionDispatch/FileHandler.html#method-i-call","(env)",""],["call","ActionDispatch::HostAuthorization","classes/ActionDispatch/HostAuthorization.html#method-i-call","(env)",""],["call","ActionDispatch::MiddlewareStack::InstrumentationProxy","classes/ActionDispatch/MiddlewareStack/InstrumentationProxy.html#method-i-call","(env)",""],["call","ActionDispatch::PermissionsPolicy::Middleware","classes/ActionDispatch/PermissionsPolicy/Middleware.html#method-i-call","(env)",""],["call","ActionDispatch::PublicExceptions","classes/ActionDispatch/PublicExceptions.html#method-i-call","(env)",""],["call","ActionDispatch::RemoteIp","classes/ActionDispatch/RemoteIp.html#method-i-call","(env)","<p>Since the IP address may not be needed, we store the object here without calculating the IP to keep from â€¦\n"],["call","ActionDispatch::RequestId","classes/ActionDispatch/RequestId.html#method-i-call","(env)",""],["call","ActionDispatch::ServerTiming","classes/ActionDispatch/ServerTiming.html#method-i-call","(env)",""],["call","ActionDispatch::ShowExceptions","classes/ActionDispatch/ShowExceptions.html#method-i-call","(env)",""],["call","ActionDispatch::Static","classes/ActionDispatch/Static.html#method-i-call","(env)",""],["call","ActionMailer::Preview","classes/ActionMailer/Preview.html#method-c-call","(email, params = {})","<p>Returns the mail object for the given email name. The registered preview interceptors will be informed â€¦\n"],["call","ActionView::Template::Handlers::Builder","classes/ActionView/Template/Handlers/Builder.html#method-i-call","(template, source)",""],["call","ActionView::Template::Handlers::ERB","classes/ActionView/Template/Handlers/ERB.html#method-c-call","(template, source)",""],["call","ActionView::Template::Handlers::ERB","classes/ActionView/Template/Handlers/ERB.html#method-i-call","(template, source)",""],["call","ActionView::Template::Handlers::Html","classes/ActionView/Template/Handlers/Html.html#method-i-call","(template, source)",""],["call","ActionView::Template::Handlers::Raw","classes/ActionView/Template/Handlers/Raw.html#method-i-call","(template, source)",""],["call","ActiveRecord::Middleware::DatabaseSelector","classes/ActiveRecord/Middleware/DatabaseSelector.html#method-i-call","(env)","<p>Middleware that determines which database connection to use in a multiple database application.\n"],["call","ActiveRecord::Middleware::ShardSelector","classes/ActiveRecord/Middleware/ShardSelector.html#method-i-call","(env)",""],["call","ActiveRecord::Migration::CheckPending","classes/ActiveRecord/Migration/CheckPending.html#method-i-call","(env)",""],["call","ActiveSupport::Callbacks::Conditionals::Value","classes/ActiveSupport/Callbacks/Conditionals/Value.html#method-i-call","(target, value)",""],["call","ActiveSupport::Logger::SimpleFormatter","classes/ActiveSupport/Logger/SimpleFormatter.html#method-i-call","(severity, timestamp, progname, msg)","<p>This method is invoked when a log event occurs\n"],["call","Rails::Engine","classes/Rails/Engine.html#method-i-call","(env)","<p>Define the Rack API for this engine.\n"],["call","Rails::Rack::Logger","classes/Rails/Rack/Logger.html#method-i-call","(env)",""],["call_app","Rails::Rack::Logger","classes/Rails/Rack/Logger.html#method-i-call_app","(request, env)",""],["camelcase","String","classes/String.html#method-i-camelcase","(first_letter = :upper)",""],["camelize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-camelize","(term, uppercase_first_letter = true)","<p>Converts strings to UpperCamelCase. If the <code>uppercase_first_letter</code> parameter is set to false, then produces â€¦\n"],["camelize","String","classes/String.html#method-i-camelize","(first_letter = :upper)","<p>By default, <code>camelize</code> converts strings to UpperCamelCase. If the argument to camelize is set to <code>:lower</code> â€¦\n"],["caption","ActionText::Attachment","classes/ActionText/Attachment.html#method-i-caption","()",""],["capture","ActionView::Helpers::CaptureHelper","classes/ActionView/Helpers/CaptureHelper.html#method-i-capture","(*args)","<p>The capture method extracts part of a template as a String object. You can then use this object anywhere â€¦\n"],["cast","ActiveModel::Type::Value","classes/ActiveModel/Type/Value.html#method-i-cast","(value)","<p>Type casts a value from user input (e.g. from a setter). This value may be a string from the form builder, â€¦\n"],["cast","ActiveModel::Type::Value","classes/ActiveModel/Type/Value.html#method-i-cast","(value)","<p>Type casts a value from user input (e.g. from a setter). This value may be a string from the form builder, â€¦\n"],["cast_value","ActiveModel::Type::Value","classes/ActiveModel/Type/Value.html#method-i-cast_value","(value)","<p>Convenience method for types which do not need separate type casting behavior for user and database inputs. â€¦\n"],["cast_value","ActiveModel::Type::Value","classes/ActiveModel/Type/Value.html#method-i-cast_value","(value)","<p>Convenience method for types which do not need separate type casting behavior for user and database inputs. â€¦\n"],["cattr_accessor","Module","classes/Module.html#method-i-cattr_accessor","(*syms, instance_reader: true, instance_writer: true, instance_accessor: true, default: nil, &blk)",""],["cattr_reader","Module","classes/Module.html#method-i-cattr_reader","(*syms, instance_reader: true, instance_accessor: true, default: nil, location: nil)",""],["cattr_writer","Module","classes/Module.html#method-i-cattr_writer","(*syms, instance_writer: true, instance_accessor: true, default: nil, location: nil)",""],["cc_addresses","Mail::Message","classes/Mail/Message.html#method-i-cc_addresses","()",""],["cdata_block","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-cdata_block","(string)",""],["cdata_section","ActionView::Helpers::TagHelper","classes/ActionView/Helpers/TagHelper.html#method-i-cdata_section","(content)","<p>Returns a CDATA section with the given <code>content</code>. CDATA sections are used to escape blocks of text containing â€¦\n"],["ceil","Time","classes/Time.html#method-i-ceil","(precision = 0)",""],["change","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-change","(column_name, type, **options)","<p>Changes the column&#39;s definition according to the new options.\n\n<pre><code>t.change(:name, :string, limit: 80) ...\n</code></pre>\n"],["change","ActiveSupport::EncryptedFile","classes/ActiveSupport/EncryptedFile.html#method-i-change","(&block)",""],["change","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-change","(options)","<p>Returns a new <code>ActiveSupport::TimeWithZone</code> where one or more of the elements have been changed according â€¦\n"],["change","Date","classes/Date.html#method-i-change","(options)","<p>Returns a new Date where one or more of the elements have been changed according to the <code>options</code> parameter. â€¦\n"],["change","DateTime","classes/DateTime.html#method-i-change","(options)","<p>Returns a new DateTime where one or more of the elements have been changed according to the <code>options</code> parameter. â€¦\n"],["change","Time","classes/Time.html#method-i-change","(options)","<p>Returns a new Time where one or more of the elements have been changed according to the <code>options</code> parameter. â€¦\n"],["change_column","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_column","(table_name, column_name, type, **options)","<p>Changes the column&#39;s definition according to the new options. See TableDefinition#column for details â€¦\n"],["change_column_comment","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_column_comment","(table_name, column_name, comment_or_changes)","<p>Changes the comment for a column or removes it if <code>nil</code>.\n<p>Passing a hash containing <code>:from</code> and <code>:to</code> will make â€¦\n"],["change_column_default","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_column_default","(table_name, column_name, default_or_changes)","<p>Sets a new default value for a column:\n\n<pre><code>change_column_default(:suppliers, :qualification, &#39;new&#39;)\nchange_column_default(:accounts, ...\n</code></pre>\n"],["change_column_null","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_column_null","(table_name, column_name, null, default = nil)","<p>Sets or removes a <code>NOT NULL</code> constraint on a column. The <code>null</code> flag indicates whether the value can be  â€¦\n"],["change_default","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-change_default","(column_name, default_or_changes)","<p>Sets a new default value for a column.\n\n<pre><code>t.change_default(:qualification, &#39;new&#39;)\nt.change_default(:authorized, ...\n</code></pre>\n"],["change_null","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-change_null","(column_name, null, default = nil)","<p>Sets or removes a NOT NULL constraint on a column.\n\n<pre><code>t.change_null(:qualification, true)\nt.change_null(:qualification, ...\n</code></pre>\n"],["change_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_table","(table_name, **options)","<p>A block for changing columns in <code>table</code>.\n\n<pre><code># change_table() yields a Table instance\nchange_table(:suppliers) ...\n</code></pre>\n"],["change_table_comment","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_table_comment","(table_name, comment_or_changes)","<p>Changes the comment for a table or removes it if <code>nil</code>.\n<p>Passing a hash containing <code>:from</code> and <code>:to</code> will make â€¦\n"],["changed","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-changed","()","<p>Returns an array with the name of the attributes with unsaved changes.\n\n<pre><code>person.changed # =&gt; []\nperson.name ...\n</code></pre>\n"],["changed?","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-changed-3F","()","<p>Returns <code>true</code> if any of the attributes has unsaved changes, <code>false</code> otherwise.\n\n<pre><code>person.changed? # =&gt; false ...\n</code></pre>\n"],["changed?","ActiveModel::Type::Value","classes/ActiveModel/Type/Value.html#method-i-changed-3F","(old_value, new_value, _new_value_before_type_cast)","<p>Determines whether a value has changed for dirty checking. <code>old_value</code> and <code>new_value</code> will always be type-cast. â€¦\n"],["changed?","ActiveModel::Type::Value","classes/ActiveModel/Type/Value.html#method-i-changed-3F","(old_value, new_value, _new_value_before_type_cast)","<p>Determines whether a value has changed for dirty checking. <code>old_value</code> and <code>new_value</code> will always be type-cast. â€¦\n"],["changed_attribute_names_to_save","ActiveRecord::AttributeMethods::Dirty","classes/ActiveRecord/AttributeMethods/Dirty.html#method-i-changed_attribute_names_to_save","()","<p>Returns an array of the names of any attributes that will change when the record is next saved.\n"],["changed_attributes","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-changed_attributes","()","<p>Returns a hash of the attributes with unsaved changes indicating their original values like <code>attr =&gt;</code> â€¦\n"],["changed_for_autosave?","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-changed_for_autosave-3F","()","<p>Returns whether or not this record has been changed in any way (including whether any of its nested autosave â€¦\n"],["changed_in_place?","ActiveModel::Type::Value","classes/ActiveModel/Type/Value.html#method-i-changed_in_place-3F","(raw_old_value, new_value)","<p>Determines whether the mutable value has been modified since it was read. Returns <code>false</code> by default.  â€¦\n"],["changed_in_place?","ActiveModel::Type::Value","classes/ActiveModel/Type/Value.html#method-i-changed_in_place-3F","(raw_old_value, new_value)","<p>Determines whether the mutable value has been modified since it was read. Returns <code>false</code> by default.  â€¦\n"],["changed_in_place?","ActiveRecord::Encryption::EncryptedAttributeType","classes/ActiveRecord/Encryption/EncryptedAttributeType.html#method-i-changed_in_place-3F","(raw_old_value, new_value)",""],["changed_in_place?","ActiveRecord::Type::Json","classes/ActiveRecord/Type/Json.html#method-i-changed_in_place-3F","(raw_old_value, new_value)",""],["changes","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-changes","()","<p>Returns a hash of changed attributes indicating their original and new values like <code>attr =&gt; [original</code> â€¦\n"],["changes_applied","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-changes_applied","()","<p>Clears dirty data and moves <code>changes</code> to <code>previous_changes</code> and <code>mutations_from_database</code> to <code>mutations_before_last_save</code> â€¦\n"],["changes_to_save","ActiveRecord::AttributeMethods::Dirty","classes/ActiveRecord/AttributeMethods/Dirty.html#method-i-changes_to_save","()","<p>Returns a hash containing all the changes that will be persisted during the next save.\n"],["channel_class","ActionCable::Channel::TestCase::Behavior::ClassMethods","classes/ActionCable/Channel/TestCase/Behavior/ClassMethods.html#method-i-channel_class","()",""],["channel_name","ActionCable::Channel::Naming::ClassMethods","classes/ActionCable/Channel/Naming/ClassMethods.html#method-i-channel_name","()","<p>Returns the name of the channel, underscored, without the <code>Channel</code> ending. If the channel is in a namespace, â€¦\n"],["characters","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-characters","(string)",""],["charset","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-charset","()","<p>The charset of the response. HTML wants to know the encoding of the content you&#39;re giving them, so â€¦\n"],["charset","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-charset","()","<p>Returns the database character set.\n"],["charset","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-charset","(configuration, *arguments)",""],["charset=","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-charset-3D","(charset)","<p>Sets the HTTP character set. In case of <code>nil</code> parameter it sets the charset to <code>default_charset</code>.\n\n<pre><code>response.charset ...\n</code></pre>\n"],["charset_current","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-charset_current","(env_name = env, db_name = name)",""],["check_box","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-check_box","(method, options = {}, checked_value = \"1\", unchecked_value = \"0\")","<p>Returns a checkbox tag tailored for accessing a specified attribute (identified by <code>method</code>) on an object â€¦\n"],["check_box","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-check_box","(object_name, method, options = {}, checked_value = \"1\", unchecked_value = \"0\")","<p>Returns a checkbox tag tailored for accessing a specified attribute (identified by <code>method</code>) on an object â€¦\n"],["check_box_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-check_box_tag","(name, value = \"1\", checked = false, options = {})","<p>Creates a check box form input tag.\n<p>Options\n<p><code>:disabled</code> - If set to true, the user will not be able to use â€¦\n"],["check_class_collision","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-c-check_class_collision","(options = {})","<p>Add a class collisions name to be checked on class initialization. You can supply a hash with a <code>:prefix</code> â€¦\n"],["check_constraint","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-check_constraint","(*args, **options)","<p>Adds a check constraint.\n\n<pre><code>t.check_constraint(&quot;price &gt; 0&quot;, name: &quot;price_check&quot;)\n</code></pre>\n<p>See connection.add_check_constraint â€¦\n"],["check_constraint","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-check_constraint","(expression, **options)",""],["check_constraints","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-check_constraints","(table_name)",""],["check_constraints","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-check_constraints","(table_name)","<p>Returns an array of check constraints for the given table. The check constraints are represented as  â€¦\n"],["check_pending!","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-c-check_pending-21","(connection = Base.connection)","<p>Raises <code>ActiveRecord::PendingMigrationError</code> error if any migrations are pending.\n"],["check_protected_environments!","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-check_protected_environments-21","()",""],["check_schema_file","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-check_schema_file","(filename)",""],["check_target_version","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-check_target_version","()",""],["check_validity!","ActiveModel::EachValidator","classes/ActiveModel/EachValidator.html#method-i-check_validity-21","()","<p>Hook method that gets called by the initializer allowing verification that the arguments supplied are â€¦\n"],["checkin","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-checkin","(conn)","<p>Check-in a database connection back into the pool, indicating that you no longer need this connection. â€¦\n"],["checkout","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-checkout","(checkout_timeout = @checkout_timeout)","<p>Check-out a database connection from the pool, indicating that you want to use it. You should call #checkin â€¦\n"],["checkout_timeout","ActiveRecord::DatabaseConfigurations::HashConfig","classes/ActiveRecord/DatabaseConfigurations/HashConfig.html#method-i-checkout_timeout","()",""],["children","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-children","()",""],["cidr","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-cidr","",""],["ciphertext_for","ActiveRecord::Encryption::EncryptableRecord","classes/ActiveRecord/Encryption/EncryptableRecord.html#method-i-ciphertext_for","(attribute_name)","<p>Returns the ciphertext for <code>attribute_name</code>.\n"],["circle","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-circle","",""],["citext","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-citext","",""],["civil_from_format","DateTime","classes/DateTime.html#method-c-civil_from_format","(utc_or_local, year, month = 1, day = 1, hour = 0, min = 0, sec = 0)","<p>Returns DateTime with local offset for given year if format is local else offset is zero.\n\n<pre><code>DateTime.civil_from_format ...\n</code></pre>\n"],["class","ActiveSupport::Deprecation::DeprecatedConstantProxy","classes/ActiveSupport/Deprecation/DeprecatedConstantProxy.html#method-i-class","()","<p>Returns the class of the new constant.\n\n<pre><code>PLANETS_POST_2006 = %w(mercury venus earth mars jupiter saturn ...\n</code></pre>\n"],["class_attribute","Class","classes/Class.html#method-i-class_attribute","(*attrs, instance_accessor: true, instance_reader: instance_accessor, instance_writer: instance_accessor, instance_predicate: true, default: nil)","<p>Declare a class-level attribute whose value is inheritable by subclasses. Subclasses can change their â€¦\n"],["class_eval","Kernel","classes/Kernel.html#method-i-class_eval","(*args, &block)","<p>class_eval on an object acts like <code>singleton_class.class_eval</code>.\n"],["class_methods","ActiveSupport::Concern","classes/ActiveSupport/Concern.html#method-i-class_methods","(&class_methods_module_definition)","<p>Define class methods from given block. You can define private class methods as well.\n\n<pre><code>module Example\n  ...\n</code></pre>\n"],["class_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-class_name","()",""],["class_names","ActionView::Helpers::TagHelper","classes/ActionView/Helpers/TagHelper.html#method-i-class_names","(*args)",""],["class_path","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-class_path","()",""],["classify","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-classify","(table_name)","<p>Creates a class name from a plural table name like Rails does for table names to models. Note that this â€¦\n"],["classify","String","classes/String.html#method-i-classify","()","<p>Creates a class name from a plural table name like Rails does for table names to models. Note that this â€¦\n"],["clean","ActiveSupport::BacktraceCleaner","classes/ActiveSupport/BacktraceCleaner.html#method-i-clean","(backtrace, kind = :silent)","<p>Returns the backtrace after all filters and silencers have been run against it. Filters run first, then â€¦\n"],["cleanup","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-cleanup","(options = nil)","<p>Preemptively iterates through all stored keys and removes the ones which have expired.\n"],["cleanup","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-cleanup","(options = nil)","<p>Preemptively iterates through all stored keys and removes the ones which have expired.\n"],["cleanup","ActiveSupport::Cache::NullStore","classes/ActiveSupport/Cache/NullStore.html#method-i-cleanup","(options = nil)",""],["cleanup","ActiveSupport::Cache::RedisCacheStore","classes/ActiveSupport/Cache/RedisCacheStore.html#method-i-cleanup","(options = nil)","<p>Cache Store API implementation.\n<p>Removes expired entries. Handled natively by Redis least-recently-/ least-frequently-used â€¦\n"],["cleanup","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-cleanup","(options = nil)","<p>Cleanups the cache by removing expired entries.\n<p>Options are passed to the underlying cache implementation. â€¦\n"],["cleanup_view_runtime","ActionController::Instrumentation","classes/ActionController/Instrumentation.html#method-i-cleanup_view_runtime","()","<p>A hook which allows you to clean up any time, wrongly taken into account in views, like database querying â€¦\n"],["clear","ActionCable::SubscriptionAdapter::Test","classes/ActionCable/SubscriptionAdapter/Test.html#method-i-clear","()",""],["clear","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-clear","()",""],["clear","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-clear","()","<p>Equivalent to <code>delete_all</code>. The difference is that returns <code>self</code>, instead of an array with the deleted objects, â€¦\n"],["clear","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-clear","()","<p>Remove all elements from the queue.\n"],["clear","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-clear","(options = nil)","<p>Deletes all items from the cache. In this case it deletes all the entries in the specified file store â€¦\n"],["clear","ActiveSupport::Cache::MemCacheStore","classes/ActiveSupport/Cache/MemCacheStore.html#method-i-clear","(options = nil)","<p>Clear the entire cache on all memcached servers. This method should be used with care when shared cache â€¦\n"],["clear","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-clear","(options = nil)","<p>Delete all data stored in a given cache store.\n"],["clear","ActiveSupport::Cache::NullStore","classes/ActiveSupport/Cache/NullStore.html#method-i-clear","(options = nil)",""],["clear","ActiveSupport::Cache::RedisCacheStore","classes/ActiveSupport/Cache/RedisCacheStore.html#method-i-clear","(options = nil)","<p>Clear the entire cache on all Redis servers. Safe to use on shared servers if the cache is namespaced. â€¦\n"],["clear","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-clear","(options = nil)","<p>Clears the entire cache. Be careful with this method since it could affect other processes if shared â€¦\n"],["clear","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","classes/ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-clear","(options = nil)",""],["clear","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-i-clear","(scope = :all)","<p>Clears the loaded inflections within a given scope (default is <code>:all</code>). Give the scope as a symbol of the â€¦\n"],["clear!","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-clear-21","()","<p>Clears out internal caches\n"],["clear_action_methods!","AbstractController::Base","classes/AbstractController/Base.html#method-c-clear_action_methods-21","()","<p>action_methods are cached and there is sometimes a need to refresh them. ::clear_action_methods! allows â€¦\n"],["clear_action_methods!","ActionCable::Channel::Base","classes/ActionCable/Channel/Base.html#method-c-clear_action_methods-21","()","<p>action_methods are cached and there is sometimes need to refresh them. ::clear_action_methods! allows â€¦\n"],["clear_active_connections!","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_active_connections-21","(role = ActiveRecord::Base.current_role)","<p>Returns any connections in use by the current thread back to the pool, and also returns connections to â€¦\n"],["clear_all_connections!","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_all_connections-21","(role = ActiveRecord::Base.current_role)",""],["clear_attribute_changes","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-clear_attribute_changes","(attr_names)",""],["clear_cache","ActionView::FileSystemResolver","classes/ActionView/FileSystemResolver.html#method-i-clear_cache","()",""],["clear_cache","ActionView::Resolver","classes/ActionView/Resolver.html#method-i-clear_cache","()",""],["clear_cache!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-clear_cache-21","()","<p>Clear any caching the database adapter may be doing.\n"],["clear_changes_information","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-clear_changes_information","()","<p>Clears all dirty data: current changes and previous changes.\n"],["clear_data_source_cache!","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-clear_data_source_cache-21","(name)","<p>Clear out internal caches for the data source <code>name</code>.\n"],["clear_helpers","AbstractController::Helpers::ClassMethods","classes/AbstractController/Helpers/ClassMethods.html#method-i-clear_helpers","()","<p>Clears up all existing helpers in this class, only keeping the helper with the same name as this class. â€¦\n"],["clear_messages","ActionCable::SubscriptionAdapter::Test","classes/ActionCable/SubscriptionAdapter/Test.html#method-i-clear_messages","(channel)",""],["clear_query_cache","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-clear_query_cache","()","<p>Clears the query cache.\n<p>One reason you may wish to call this method explicitly is between queries that â€¦\n"],["clear_query_caches_for_current_thread","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-clear_query_caches_for_current_thread","()","<p>Clears the query cache for all connections associated with the current thread.\n"],["clear_reloadable_connections","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-clear_reloadable_connections","(raise_on_acquisition_timeout = true)","<p>Clears the cache which maps classes and re-connects connections that require reloading.\n<p>Raises:\n<p>ActiveRecord::ExclusiveConnectionTimeoutError â€¦\n"],["clear_reloadable_connections!","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_reloadable_connections-21","(role = ActiveRecord::Base.current_role)","<p>Clears the cache which maps classes.\n<p>See ConnectionPool#clear_reloadable_connections! for details.\n"],["clear_reloadable_connections!","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-clear_reloadable_connections-21","()","<p>Clears the cache which maps classes and re-connects connections that require reloading.\n<p>The pool first â€¦\n"],["clear_schema_cache","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-clear_schema_cache","(filename)",""],["clear_validators!","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-clear_validators-21","()","<p>Clears all of the validators and validations.\n<p>Note that this will clear anything that is being used to â€¦\n"],["client_min_messages","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-client_min_messages","()","<p>Returns the current client message level.\n"],["client_min_messages=","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-client_min_messages-3D","(level)","<p>Set the client message level.\n"],["clone","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-clone","","<p>Identical to Ruby&#39;s clone method.  This is a â€œshallowâ€ copy.  Be warned that your attributes â€¦\n"],["clone_empty","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-clone_empty","()",""],["close","ActionCable::Connection::Base","classes/ActionCable/Connection/Base.html#method-i-close","(reason: nil, reconnect: true)","<p>Close the WebSocket connection.\n"],["close","ActionController::Live::SSE","classes/ActionController/Live/SSE.html#method-i-close","()",""],["close","ActionDispatch::Http::UploadedFile","classes/ActionDispatch/Http/UploadedFile.html#method-i-close","(unlink_now = false)","<p>Shortcut for <code>tempfile.close</code>.\n"],["close","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-close","()",""],["close","ActionDispatch::Response::RackBody","classes/ActionDispatch/Response/RackBody.html#method-i-close","()",""],["close","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-close","()","<p>Check the connection back in to the connection pool\n"],["close","ActiveSupport::Gzip::Stream","classes/ActiveSupport/Gzip/Stream.html#method-i-close","()",""],["code","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-code","()","<p>Returns a string to ensure compatibility with <code>Net::HTTPResponse</code>.\n"],["code_and_name","ActionDispatch::AssertionResponse","classes/ActionDispatch/AssertionResponse.html#method-i-code_and_name","()",""],["collation","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-collation","()","<p>Returns the database collation strategy.\n"],["collation","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-collation","()","<p>Returns the current database collation.\n"],["collation","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-collation","(configuration, *arguments)",""],["collation_current","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-collation_current","(env_name = env, db_name = name)",""],["collect_deprecations","ActiveSupport::Testing::Deprecation","classes/ActiveSupport/Testing/Deprecation.html#method-i-collect_deprecations","(deprecator = nil)","<p>Returns an array of all the deprecation warnings emitted by the given <code>deprecator</code> during the execution â€¦\n"],["collection","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-collection","(&block)","<p>To add a route to the collection:\n\n<pre><code>resources :photos do\n  collection do\n    get &#39;search&#39;\n  end\nend\n</code></pre>\n<p>This â€¦\n"],["collection_check_boxes","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-collection_check_boxes","(method, collection, value_method, text_method, options = {}, html_options = {}, &block)","<p>Wraps ActionView::Helpers::FormOptionsHelper#collection_check_boxes for form builders:\n\n<pre><code>&lt;%= form_for @post ...\n</code></pre>\n"],["collection_check_boxes","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-collection_check_boxes","(object, method, collection, value_method, text_method, options = {}, html_options = {}, &block)","<p>Returns check box tags for the collection of existing return values of <code>method</code> for <code>object</code>&#39;s class. â€¦\n"],["collection_radio_buttons","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-collection_radio_buttons","(method, collection, value_method, text_method, options = {}, html_options = {}, &block)","<p>Wraps ActionView::Helpers::FormOptionsHelper#collection_radio_buttons for form builders:\n\n<pre><code>&lt;%= form_for ...\n</code></pre>\n"],["collection_radio_buttons","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-collection_radio_buttons","(object, method, collection, value_method, text_method, options = {}, html_options = {}, &block)","<p>Returns radio button tags for the collection of existing return values of <code>method</code> for <code>object</code>&#39;s class. â€¦\n"],["collection_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-collection_select","(method, collection, value_method, text_method, options = {}, html_options = {})","<p>Wraps ActionView::Helpers::FormOptionsHelper#collection_select for form builders:\n\n<pre><code>&lt;%= form_for @post do ...\n</code></pre>\n"],["collection_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-collection_select","(object, method, collection, value_method, text_method, options = {}, html_options = {})","<p>Returns <code>&lt;select&gt;</code> and <code>&lt;option&gt;</code> tags for the collection of existing return values of <code>method</code> â€¦\n"],["color","ActiveSupport::LogSubscriber","classes/ActiveSupport/LogSubscriber.html#method-i-color","(text, color, bold = false)","<p>Set color by using a symbol or one of the defined constants. If a third option is set to <code>true</code>, it also â€¦\n"],["color_field","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-color_field","","<p>Wraps ActionView::Helpers::FormHelper#color_field for form builders:\n\n<pre><code>&lt;%= form_with model: @user do |f| ...\n</code></pre>\n"],["color_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-color_field","(object_name, method, options = {})","<p>Returns a text_field of type â€œcolorâ€.\n\n<pre><code>color_field(&quot;car&quot;, &quot;color&quot;)\n# =&gt; &lt;input id=&quot;car_color&quot; ...\n</code></pre>\n"],["color_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-color_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type â€œcolorâ€.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],["colorize_logging","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-colorize_logging","()",""],["colorize_logging=","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-colorize_logging-3D","(val)",""],["column","ActiveRecord::ConnectionAdapters::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/ColumnMethods.html#method-i-column","","<p>Appends a column or columns of a specified type.\n\n<pre><code>t.string(:goat)\nt.string(:goat, :sheep)\n</code></pre>\n<p>See TableDefinition#column â€¦\n"],["column","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-column","(column_name, type, index: nil, **options)","<p>Adds a new column to the named table.\n\n<pre><code>t.column(:name, :string)\n</code></pre>\n<p>See TableDefinition#column for details of â€¦\n"],["column","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-column","(name, type, index: nil, **options)","<p>Instantiates a new column for the table. See connection.add_column for available options.\n<p>Additional options â€¦\n"],["column_defaults","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-column_defaults","()","<p>Returns a hash where the keys are column names and the values are default values when instantiating the â€¦\n"],["column_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-column_exists-3F","(table_name, column_name, type = nil, **options)","<p>Checks to see if a column exists in a given table.\n\n<pre><code># Check a column exists\ncolumn_exists?(:suppliers, ...\n</code></pre>\n"],["column_exists?","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-column_exists-3F","(column_name, type = nil, **options)","<p>Checks to see if a column exists.\n\n<pre><code>t.string(:name) unless t.column_exists?(:name, :string)\n</code></pre>\n<p>See connection.column_exists? â€¦\n"],["column_for_attribute","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-column_for_attribute","(name)","<p>Returns the column object for the named attribute. Returns an <code>ActiveRecord::ConnectionAdapters::NullColumn</code> â€¦\n"],["column_name_matcher","ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/Quoting.html#method-i-column_name_matcher","()",""],["column_name_with_order_matcher","ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/Quoting.html#method-i-column_name_with_order_matcher","()",""],["column_names","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-column_names","()","<p>Returns an array of column names as strings.\n"],["columns","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-columns","(table_name)","<p>Get the columns for a table\n"],["columns","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-columns","(table_name)","<p>Returns an array of <code>Column</code> objects for the table specified by <code>table_name</code>.\n"],["columns","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-columns","()","<p>Returns an array of ColumnDefinition objects for the columns of the table.\n"],["columns","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-columns","()",""],["columns_hash","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-columns_hash","(table_name)","<p>Get the columns for a table as a hash, key is the column name value is the column object.\n"],["columns_hash?","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-columns_hash-3F","(table_name)","<p>Checks whether the columns hash is already cached for a table.\n"],["combined_fragment_cache_key","AbstractController::Caching::Fragments","classes/AbstractController/Caching/Fragments.html#method-i-combined_fragment_cache_key","(key)","<p>Given a key (as described in <code>expire_fragment</code>), returns a key array suitable for use in reading, writing, â€¦\n"],["command_name","Rails::Command::Base","classes/Rails/Command/Base.html#method-c-command_name","()","<p>Return command name without namespaces.\n\n<pre><code>Rails::Command::TestCommand.command_name # =&gt; &#39;test&#39;\n</code></pre>\n"],["command_type","Rails::Command","classes/Rails/Command.html#method-c-command_type","()",""],["command_type","Rails::Generators","classes/Rails/Generators.html#method-c-command_type","()",""],["commit","ActiveRecord::ConnectionAdapters::RealTransaction","classes/ActiveRecord/ConnectionAdapters/RealTransaction.html#method-i-commit","()",""],["commit","ActiveRecord::ConnectionAdapters::SavepointTransaction","classes/ActiveRecord/ConnectionAdapters/SavepointTransaction.html#method-i-commit","()",""],["commit!","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-commit-21","()",""],["commit!","ActiveRecord::ConnectionAdapters::TransactionState","classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-commit-21","()",""],["commit_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-commit_db_transaction","()","<p>Commits the transaction (and turns on auto-committing).\n"],["commit_flash","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-commit_flash","()",""],["committed?","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-committed-3F","()",""],["committed?","ActiveRecord::ConnectionAdapters::TransactionState","classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-committed-3F","()",""],["compact","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-compact","()","<p>Returns a new instance of <code>ActionController::Parameters</code> with <code>nil</code> values removed.\n"],["compact","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-compact","()",""],["compact","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-compact","()",""],["compact!","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-compact-21","()","<p>Removes all <code>nil</code> values in place and returns <code>self</code>, or <code>nil</code> if no changes were made.\n"],["compact_blank","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-compact_blank","()","<p>Returns a new instance of <code>ActionController::Parameters</code> without the blank values. Uses Object#blank? for â€¦\n"],["compact_blank","Enumerable","classes/Enumerable.html#method-i-compact_blank","()","<p>Returns a new <code>Array</code> without the blank items. Uses Object#blank? for determining if an item is blank. â€¦\n"],["compact_blank!","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-compact_blank-21","()","<p>Removes all blank values in place and returns self. Uses Object#blank? for determining if a value is â€¦\n"],["compact_blank!","Hash","classes/Hash.html#method-i-compact_blank-21","()","<p>Removes all blank values from the <code>Hash</code> in place and returns self. Uses Object#blank? for determining â€¦\n"],["comparable_time","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-comparable_time","()",""],["compare_with_coercion","Date","classes/Date.html#method-i-compare_with_coercion","(other)","<p>Allow Date to be compared with Time by converting to DateTime and relying on the &lt;=&gt; from there. â€¦\n"],["compare_with_coercion","Time","classes/Time.html#method-i-compare_with_coercion","(other)","<p>Layers additional behavior on Time#&lt;=&gt; so that DateTime and ActiveSupport::TimeWithZone instances â€¦\n"],["compare_with_global_token","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-compare_with_global_token","(token, session)",""],["compare_with_real_token","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-compare_with_real_token","(token, session)",""],["compare_without_coercion","Date","classes/Date.html#method-i-compare_without_coercion","(other)",""],["compare_without_coercion","Time","classes/Time.html#method-i-compare_without_coercion","(other)",""],["compile_methods!","ActiveSupport::Configurable::Configuration","classes/ActiveSupport/Configurable/Configuration.html#method-i-compile_methods-21","()",""],["compile_methods!","ActiveSupport::Configurable::Configuration","classes/ActiveSupport/Configurable/Configuration.html#method-c-compile_methods-21","(keys)","<p>Compiles reader methods so we don&#39;t have to go through method_missing.\n"],["compiled_method_container","ActionView::Base","classes/ActionView/Base.html#method-i-compiled_method_container","()",""],["complete","ActionView::CacheExpiry::Executor","classes/ActionView/CacheExpiry/Executor.html#method-i-complete","(_)",""],["complete","ActiveRecord::QueryCache","classes/ActiveRecord/QueryCache.html#method-c-complete","(pools)",""],["complete","Rails::Application::Finisher::InterlockHook","classes/Rails/Application/Finisher/InterlockHook.html#method-c-complete","(_state)",""],["complete","Rails::Application::Finisher::MutexHook","classes/Rails/Application/Finisher/MutexHook.html#method-i-complete","(_state)",""],["complete!","ActiveSupport::ExecutionWrapper","classes/ActiveSupport/ExecutionWrapper.html#method-i-complete-21","()","<p>Complete this in-flight execution. This method <strong>must</strong> be called exactly once on the result of any call â€¦\n"],["completed?","ActiveRecord::ConnectionAdapters::TransactionState","classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-completed-3F","()",""],["component_root_dir","Rails::API::RepoTask","classes/Rails/API/RepoTask.html#method-i-component_root_dir","(component)",""],["compose","ActiveStorage::Blob","classes/ActiveStorage/Blob.html#method-c-compose","(blobs, filename:, content_type: nil, metadata: nil)","<p>Concatenate multiple blobs into a single â€œcomposedâ€ blob.\n"],["compose","ActiveStorage::Service","classes/ActiveStorage/Service.html#method-i-compose","(source_keys, destination_key, filename: nil, content_type: nil, disposition: nil, custom_metadata: {})","<p>Concatenate multiple files into a single â€œcomposedâ€ file.\n"],["compose","ActiveStorage::Service::AzureStorageService","classes/ActiveStorage/Service/AzureStorageService.html#method-i-compose","(source_keys, destination_key, filename: nil, content_type: nil, disposition: nil, custom_metadata: {})",""],["compose","ActiveStorage::Service::DiskService","classes/ActiveStorage/Service/DiskService.html#method-i-compose","(source_keys, destination_key, **)",""],["compose","ActiveStorage::Service::GCSService","classes/ActiveStorage/Service/GCSService.html#method-i-compose","(source_keys, destination_key, filename: nil, content_type: nil, disposition: nil, custom_metadata: {})",""],["compose","ActiveStorage::Service::S3Service","classes/ActiveStorage/Service/S3Service.html#method-i-compose","(source_keys, destination_key, filename: nil, content_type: nil, disposition: nil, custom_metadata: {})",""],["compose","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-compose","()","<p>Performs composition on all the characters.\n\n<pre><code>&#39;Ã©&#39;.length                       # =&gt; 1\n&#39;Ã©&#39;.mb_chars.compose.to_s.length ...\n</code></pre>\n"],["compose","ActiveSupport::Multibyte::Unicode","classes/ActiveSupport/Multibyte/Unicode.html#method-i-compose","(codepoints)","<p>Compose decomposed characters to the composed form.\n"],["composed_of","ActiveRecord::Aggregations::ClassMethods","classes/ActiveRecord/Aggregations/ClassMethods.html#method-i-composed_of","(part_id, options = {})","<p>Adds reader and writer methods for manipulating a value object: <code>composed_of :address</code> adds <code>address</code> and â€¦\n"],["compress","ActiveSupport::Gzip","classes/ActiveSupport/Gzip.html#method-c-compress","(source, level = Zlib::DEFAULT_COMPRESSION, strategy = Zlib::DEFAULT_STRATEGY)","<p>Compresses a string using gzip.\n"],["compute_asset_extname","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-compute_asset_extname","(source, options = {})","<p>Compute extname to append to asset path. Returns <code>nil</code> if nothing should be added.\n"],["compute_asset_host","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-compute_asset_host","(source = \"\", options = {})","<p>Pick an asset host for this source. Returns <code>nil</code> if no host is set, the host if no wildcard is set, the â€¦\n"],["compute_asset_path","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-compute_asset_path","(source, options = {})","<p>Computes asset path to public directory. Plugins and extensions can override this method to point to â€¦\n"],["compute_class","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-i-compute_class","(name)",""],["compute_tags","Rails::Rack::Logger","classes/Rails/Rack/Logger.html#method-i-compute_tags","(request)",""],["compute_type","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-compute_type","(type_name)","<p>Returns the class type of the record using the current module as a prefix. So descendants of MyApp::Business::Account â€¦\n"],["concat","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-concat","(string)","<p>The preferred method of outputting text in your views is to use the &lt;%= â€œtextâ€ %&gt; eRuby â€¦\n"],["concat","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-concat","(*records)",""],["concat","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-concat","(value)",""],["concat","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-concat","(paths)",""],["concern","ActionDispatch::Routing::Mapper::Concerns","classes/ActionDispatch/Routing/Mapper/Concerns.html#method-i-concern","(name, callable = nil, &block)","<p>Define a routing concern using a name.\n<p>Concerns may be defined inline, using a block, or handled by another â€¦\n"],["concern","Kernel","classes/Kernel.html#method-i-concern","(topic, &module_definition)","<p>A shortcut to define a toplevel concern, not within a module.\n<p>See Module::Concerning for more.\n"],["concern","Module::Concerning","classes/Module/Concerning.html#method-i-concern","(topic, &module_definition)","<p>A low-cruft shortcut to define a concern.\n\n<pre><code>concern :EventTracking do\n  ...\nend\n</code></pre>\n<p>is equivalent to\n"],["concerning","Module::Concerning","classes/Module/Concerning.html#method-i-concerning","(topic, prepend: false, &block)","<p>Define a new concern and mix it in.\n"],["concerns","ActionDispatch::Routing::Mapper::Concerns","classes/ActionDispatch/Routing/Mapper/Concerns.html#method-i-concerns","(*args)","<p>Use the named concerns\n\n<pre><code>resources :posts do\n  concerns :commentable\nend\n</code></pre>\n<p>Concerns also work in any routes â€¦\n"],["config","ActionView::TestCase::Behavior","classes/ActionView/TestCase/Behavior.html#method-i-config","()",""],["config","ActiveSupport::Configurable","classes/ActiveSupport/Configurable.html#method-i-config","()","<p>Reads and writes attributes from a configuration OrderedOptions.\n\n<pre><code>require &quot;active_support/configurable&quot; ...\n</code></pre>\n"],["config","ActiveSupport::Configurable::ClassMethods","classes/ActiveSupport/Configurable/ClassMethods.html#method-i-config","()",""],["config","ActiveSupport::EncryptedConfiguration","classes/ActiveSupport/EncryptedConfiguration.html#method-i-config","()",""],["config","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-config","()",""],["config","Rails::Engine","classes/Rails/Engine.html#method-i-config","()","<p>Define the configuration object for the engine.\n"],["config","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-config","()",""],["config","Rails::Railtie","classes/Rails/Railtie.html#method-i-config","()","<p>This is used to create the <code>config</code> object on Railties, an instance of Railtie::Configuration, that is â€¦\n"],["config_accessor","ActiveSupport::Configurable::ClassMethods","classes/ActiveSupport/Configurable/ClassMethods.html#method-i-config_accessor","(*names, instance_reader: true, instance_writer: true, instance_accessor: true, default: nil)","<p>Allows you to add shortcut so that you don&#39;t have to refer to attribute through config. Also look â€¦\n"],["config_for","Rails::Application","classes/Rails/Application.html#method-i-config_for","(name, env: Rails.env)","<p>Convenience for loading config/foo.yml for the current Rails env.\n<p>Examples:\n\n<pre><code># config/exception_notification.yml: ...\n</code></pre>\n"],["config_target_version","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-config_target_version","()",""],["config_when_updating","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-config_when_updating","()",""],["configru","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-configru","()",""],["configs_for","ActiveRecord::DatabaseConfigurations","classes/ActiveRecord/DatabaseConfigurations.html#method-i-configs_for","(env_name: nil, name: nil, include_replicas: false, include_hidden: false)","<p>Collects the configs for the environment and optionally the specification name passed in. To include â€¦\n"],["configuration","Rails","classes/Rails.html#method-c-configuration","()","<p>The Configuration instance used to configure the Rails environment\n"],["configurations","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-c-configurations","()","<p>Returns fully resolved ActiveRecord::DatabaseConfigurations object\n"],["configurations","Rails::DBConsole","classes/Rails/DBConsole.html#method-i-configurations","()",""],["configurations=","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-c-configurations-3D","(config)","<p>Contains the database configuration - as is typically stored in config/database.yml - as an ActiveRecord::DatabaseConfigurations â€¦\n"],["configure","ActiveStorage::Service","classes/ActiveStorage/Service.html#method-c-configure","(service_name, configurations)","<p>Configure an Active Storage service by name from a set of configurations, typically loaded from a YAML â€¦\n"],["configure","ActiveSupport::Configurable::ClassMethods","classes/ActiveSupport/Configurable/ClassMethods.html#method-i-configure","()",""],["configure","Rails::Railtie","classes/Rails/Railtie.html#method-c-configure","(&block)","<p>Allows you to configure the railtie. This is the same method seen in Railtie::Configurable, but this â€¦\n"],["configure","Rails::Railtie::Configurable::ClassMethods","classes/Rails/Railtie/Configurable/ClassMethods.html#method-i-configure","(&block)",""],["configure_rdoc_files","Rails::API::Task","classes/Rails/API/Task.html#method-i-configure_rdoc_files","()",""],["configure_sdoc","Rails::API::RepoTask","classes/Rails/API/RepoTask.html#method-i-configure_sdoc","()",""],["configure_sdoc","Rails::API::Task","classes/Rails/API/Task.html#method-i-configure_sdoc","()",""],["confirmed?","ActionCable::Channel::ChannelStub","classes/ActionCable/Channel/ChannelStub.html#method-i-confirmed-3F","()",""],["connect","ActionCable::Connection::TestCase::Behavior","classes/ActionCable/Connection/TestCase/Behavior.html#method-i-connect","(path = ActionCable.server.config.mount_path, **request_params)","<p>Performs connection attempt to exert #connect on the connection under test.\n<p>Accepts request path as the â€¦\n"],["connected?","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-connected-3F","(spec_name, role: ActiveRecord::Base.current_role, shard: ActiveRecord::Base.current_shard)","<p>Returns true if a connection that&#39;s accessible to this class has already been opened.\n"],["connected?","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-connected-3F","()","<p>Returns true if a connection has already been opened.\n"],["connected?","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-connected-3F","()","<p>Returns <code>true</code> if Active Record is connected.\n"],["connected_to","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-connected_to","(role: nil, shard: nil, prevent_writes: false, &blk)","<p>Connects to a role (e.g. writing, reading, or a custom role) and/or shard for the duration of the block. â€¦\n"],["connected_to?","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-connected_to-3F","(role:, shard: ActiveRecord::Base.default_shard)","<p>Returns true if role is the current connected role.\n\n<pre><code>ActiveRecord::Base.connected_to(role: :writing) do ...\n</code></pre>\n"],["connected_to_many","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-connected_to_many","(*classes, role:, shard: nil, prevent_writes: false)","<p>Connects a role and/or shard to the provided connection names. Optionally <code>prevent_writes</code> can be passed â€¦\n"],["connecting_to","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-connecting_to","(role: default_role, shard: default_shard, prevent_writes: false)","<p>Use a specified connection.\n<p>This method is useful for ensuring that a specific connection is being used. â€¦\n"],["connection","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-connection","()","<p>Retrieve the connection associated with the current thread, or call #checkout to obtain one if necessary. â€¦\n"],["connection","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-connection","()","<p>Returns the connection currently associated with the class. This can also be used to â€œborrowâ€ â€¦\n"],["connection","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-connection","()",""],["connection_class","ActionCable::Connection::TestCase::Behavior::ClassMethods","classes/ActionCable/Connection/TestCase/Behavior/ClassMethods.html#method-i-connection_class","()",""],["connection_db_config","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-connection_db_config","()","<p>Returns the db_config object from the associated connection:\n\n<pre><code>ActiveRecord::Base.connection_db_config\n ...\n</code></pre>\n"],["connection_handler","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-c-connection_handler","()",""],["connection_handler","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-connection_handler","()",""],["connection_handler=","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-c-connection_handler-3D","(handler)",""],["connection_handlers","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-c-connection_handlers","()",""],["connection_handlers=","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-c-connection_handlers-3D","(handlers)",""],["connection_identifier","ActionCable::Channel::ConnectionStub","classes/ActionCable/Channel/ConnectionStub.html#method-i-connection_identifier","()",""],["connection_identifier","ActionCable::Connection::Identification","classes/ActionCable/Connection/Identification.html#method-i-connection_identifier","()","<p>Return a single connection identifier that combines the value of all the registered identifiers into â€¦\n"],["connection_identifiers","ActionCable::Server::Base","classes/ActionCable/Server/Base.html#method-i-connection_identifiers","()","<p>All of the identifiers applied to the connection class associated with this server.\n"],["connection_pool","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-connection_pool","()",""],["connection_pool_list","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-connection_pool_list","(role = ActiveRecord::Base.current_role)",""],["connection_pools","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-connection_pools","(role = ActiveRecord::Base.current_role)",""],["connection_specification_name","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-connection_specification_name","()","<p>Return the connection specification name from the current class or its parent.\n"],["connections","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-connections","()","<p>Returns an array containing the connections currently in the pool. Access to the array does not require â€¦\n"],["connects_to","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-connects_to","(database: {}, shards: {})","<p>Connects a model to the databases specified. The <code>database</code> keyword takes a hash consisting of a <code>role</code> and â€¦\n"],["console","Rails::Application","classes/Rails/Application.html#method-i-console","(&blk)","<p>Sends any console called in the instance of a new application up to the <code>console</code> method defined in Rails::Railtie â€¦\n"],["console","Rails::Railtie","classes/Rails/Railtie.html#method-c-console","(&blk)",""],["const_missing","ActiveSupport::Deprecation::DeprecatedConstantAccessor","classes/ActiveSupport/Deprecation/DeprecatedConstantAccessor.html#method-i-const_missing","(missing_const_name)",""],["constantize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-constantize","(camel_cased_word)","<p>Tries to find a constant with the name specified in the argument string.\n\n<pre><code>constantize(&#39;Module&#39;)   # =&gt; ...\n</code></pre>\n"],["constantize","String","classes/String.html#method-i-constantize","()","<p><code>constantize</code> tries to find a declared constant with the name specified in the string. It raises a NameError â€¦\n"],["constraints","ActionDispatch::Routing::Mapper::Scoping","classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-constraints","(constraints = {}, &block)","<p>Parameter Restriction\n<p>Allows you to constrain the nested routes based on a set of rules. For instance, â€¦\n"],["content_columns","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-content_columns","()","<p>Returns an array of column objects where the primary id, all columns ending in â€œ_idâ€ or â€œ_countâ€, â€¦\n"],["content_for","ActionView::Helpers::CaptureHelper","classes/ActionView/Helpers/CaptureHelper.html#method-i-content_for","(name, content = nil, options = {}, &block)","<p>Calling <code>content_for</code> stores a block of markup in an identifier for later use. In order to access this â€¦\n"],["content_for?","ActionView::Helpers::CaptureHelper","classes/ActionView/Helpers/CaptureHelper.html#method-i-content_for-3F","(name)","<p><code>content_for?</code> checks whether any content has been captured yet using <code>content_for</code>. Useful to render parts â€¦\n"],["content_length","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-content_length","()","<p>Returns the content length of the request as an integer.\n"],["content_mime_type","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-content_mime_type","()","<p>The MIME type of the HTTP request, such as Mime.\n"],["content_security_policy","ActionController::ContentSecurityPolicy::ClassMethods","classes/ActionController/ContentSecurityPolicy/ClassMethods.html#method-i-content_security_policy","(enabled = true, **options, &block)","<p>Overrides parts of the globally configured Content-Security-Policy header:\n\n<pre><code>class PostsController &lt; ApplicationController ...\n</code></pre>\n"],["content_security_policy","ActionDispatch::ContentSecurityPolicy::Request","classes/ActionDispatch/ContentSecurityPolicy/Request.html#method-i-content_security_policy","()",""],["content_security_policy","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-content_security_policy","(&block)","<p>Configures the ActionDispatch::ContentSecurityPolicy.\n"],["content_security_policy=","ActionDispatch::ContentSecurityPolicy::Request","classes/ActionDispatch/ContentSecurityPolicy/Request.html#method-i-content_security_policy-3D","(policy)",""],["content_security_policy_nonce","ActionDispatch::ContentSecurityPolicy::Request","classes/ActionDispatch/ContentSecurityPolicy/Request.html#method-i-content_security_policy_nonce","()",""],["content_security_policy_nonce_directives","ActionDispatch::ContentSecurityPolicy::Request","classes/ActionDispatch/ContentSecurityPolicy/Request.html#method-i-content_security_policy_nonce_directives","()",""],["content_security_policy_nonce_directives=","ActionDispatch::ContentSecurityPolicy::Request","classes/ActionDispatch/ContentSecurityPolicy/Request.html#method-i-content_security_policy_nonce_directives-3D","(generator)",""],["content_security_policy_nonce_generator","ActionDispatch::ContentSecurityPolicy::Request","classes/ActionDispatch/ContentSecurityPolicy/Request.html#method-i-content_security_policy_nonce_generator","()",""],["content_security_policy_nonce_generator=","ActionDispatch::ContentSecurityPolicy::Request","classes/ActionDispatch/ContentSecurityPolicy/Request.html#method-i-content_security_policy_nonce_generator-3D","(generator)",""],["content_security_policy_report_only","ActionController::ContentSecurityPolicy::ClassMethods","classes/ActionController/ContentSecurityPolicy/ClassMethods.html#method-i-content_security_policy_report_only","(report_only = true, **options)","<p>Overrides the globally configured Content-Security-Policy-Report-Only header:\n\n<pre><code>class PostsController &lt; ...\n</code></pre>\n"],["content_security_policy_report_only","ActionDispatch::ContentSecurityPolicy::Request","classes/ActionDispatch/ContentSecurityPolicy/Request.html#method-i-content_security_policy_report_only","()",""],["content_security_policy_report_only=","ActionDispatch::ContentSecurityPolicy::Request","classes/ActionDispatch/ContentSecurityPolicy/Request.html#method-i-content_security_policy_report_only-3D","(value)",""],["content_tag","ActionView::Helpers::ActiveModelInstanceTag","classes/ActionView/Helpers/ActiveModelInstanceTag.html#method-i-content_tag","(type, options, *)",""],["content_tag","ActionView::Helpers::TagHelper","classes/ActionView/Helpers/TagHelper.html#method-i-content_tag","(name, content_or_options_with_block = nil, options = nil, escape = true, &block)","<p>Returns an HTML block tag of type <code>name</code> surrounding the <code>content</code>. Add HTML attributes by passing an attributes â€¦\n"],["content_type","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-content_type","()",""],["content_type","ActionDispatch::RequestEncoder::IdentityEncoder","classes/ActionDispatch/RequestEncoder/IdentityEncoder.html#method-i-content_type","()",""],["content_type","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-content_type","()","<p>Content type of response.\n"],["content_type","ActiveStorage::Variation","classes/ActiveStorage/Variation.html#method-i-content_type","()",""],["content_type=","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-content_type-3D","(content_type)","<p>Sets the HTTP response&#39;s content MIME type. For example, in the controller you could write this: â€¦\n"],["content_type=","ActiveStorage::Blob","classes/ActiveStorage/Blob.html#method-i-content_type-3D","(value)",""],["context","ActiveRecord::Encryption::Contexts","classes/ActiveRecord/Encryption/Contexts.html#method-i-context","()","<p>Returns the current context. By default it will return the current context.\n"],["context_class","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-context_class","()","<p>Superclass for the evaluation contexts used by ERB fixtures.\n"],["context_class","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-i-context_class","()",""],["controller","ActionDispatch::Routing::Mapper::Scoping","classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-controller","(controller)","<p>Scopes routes to a specific controller\n\n<pre><code>controller &quot;food&quot; do\n  match &quot;bacon&quot;, action: :bacon, via: :get ...\n</code></pre>\n"],["controller","Rails::ConsoleMethods","classes/Rails/ConsoleMethods.html#method-i-controller","()","<p>Gets a new instance of a controller object.\n<p>This method assumes an <code>ApplicationController</code> exists, and that â€¦\n"],["controller_class","ActionController::TestCase::Behavior::ClassMethods","classes/ActionController/TestCase/Behavior/ClassMethods.html#method-i-controller_class","()",""],["controller_class","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-controller_class","()",""],["controller_class=","ActionController::TestCase::Behavior::ClassMethods","classes/ActionController/TestCase/Behavior/ClassMethods.html#method-i-controller_class-3D","(new_class)",""],["controller_class_for","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-controller_class_for","(name)",""],["controller_class_name","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-controller_class_name","()",""],["controller_name","ActionController::Metal","classes/ActionController/Metal.html#method-c-controller_name","()","<p>Returns the last part of the controller&#39;s name, underscored, without the ending <code>Controller</code>. For instance, â€¦\n"],["controller_name","ActionController::Metal","classes/ActionController/Metal.html#method-i-controller_name","()","<p>Delegates to the class&#39;s ::controller_name.\n"],["controller_name","ActionView::TestCase::TestController","classes/ActionView/TestCase/TestController.html#method-c-controller_name","()",""],["controller_path","AbstractController::Base","classes/AbstractController/Base.html#method-c-controller_path","()","<p>Returns the full controller name, underscored, without the ending Controller.\n\n<pre><code>class MyApp::MyPostsController ...\n</code></pre>\n"],["controller_path","AbstractController::Base","classes/AbstractController/Base.html#method-i-controller_path","()","<p>Delegates to the class&#39;s ::controller_path.\n"],["controller_path","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-controller_path","()",""],["controller_path=","ActionView::TestCase::TestController","classes/ActionView/TestCase/TestController.html#method-i-controller_path-3D","(path)",""],["converted_arrays","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-converted_arrays","()","<p>Attribute that keeps track of converted arrays, if any, to avoid double looping in the common use case â€¦\n"],["cookie_jar","ActionDispatch::RequestCookieMethods","classes/ActionDispatch/RequestCookieMethods.html#method-i-cookie_jar","()",""],["cookies","ActionCable::Connection::Base","classes/ActionCable/Connection/Base.html#method-i-cookies","()","<p>The cookies of the request that initiated the WebSocket connection. Useful for performing authorization â€¦\n"],["cookies","ActionCable::Connection::TestCase::Behavior","classes/ActionCable/Connection/TestCase/Behavior.html#method-i-cookies","()",""],["cookies","ActionController::Cookies","classes/ActionController/Cookies.html#method-i-cookies","()","<p>The cookies for the current request. See ActionDispatch::Cookies for more information.\n"],["cookies","ActionDispatch::Integration::Session","classes/ActionDispatch/Integration/Session.html#method-i-cookies","()","<p>A map of the cookies returned by the last response, and which will be sent with the next request.\n"],["cookies","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-cookies","()","<p>Returns the response cookies, converted to a Hash of (name =&gt; value) pairs\n\n<pre><code>assert_equal &#39;AuthorOfNewPage&#39;, ...\n</code></pre>\n"],["cookies","ActionDispatch::TestProcess","classes/ActionDispatch/TestProcess.html#method-i-cookies","()",""],["copy","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-copy","(destination, sources, options = {})",""],["count","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-count","","<p>Count all records.\n\n<pre><code>class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\n# This will perform the count ...\n</code></pre>\n"],["count","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-count","(column_name = nil)","<p>Count the records.\n\n<pre><code>Person.count\n# =&gt; the total count of all people\n\nPerson.count(:age)\n# =&gt; returns the ...\n</code></pre>\n"],["count_by_sql","ActiveRecord::Querying","classes/ActiveRecord/Querying.html#method-i-count_by_sql","(sql)","<p>Returns the result of an SQL statement that should only include a COUNT(*) in the SELECT part. The use â€¦\n"],["country_zones","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-country_zones","(country_code)","<p>A convenience method for returning a collection of TimeZone objects for time zones in the country specified â€¦\n"],["cpu_time","ActiveSupport::Notifications::Event","classes/ActiveSupport/Notifications/Event.html#method-i-cpu_time","()","<p>Returns the CPU time (in milliseconds) passed since the call to <code>start!</code> and the call to <code>finish!</code>\n"],["create","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-c-create","(status = 200, header = {}, body = [], default_headers: self.default_headers)",""],["create","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-c-create","(env = {})","<p>Create a new test request with default <code>env</code> values.\n"],["create","ActionMailbox::Ingresses::Mailgun::InboundEmailsController","classes/ActionMailbox/Ingresses/Mailgun/InboundEmailsController.html#method-i-create","()",""],["create","ActionMailbox::Ingresses::Mandrill::InboundEmailsController","classes/ActionMailbox/Ingresses/Mandrill/InboundEmailsController.html#method-i-create","()",""],["create","ActionMailbox::Ingresses::Postmark::InboundEmailsController","classes/ActionMailbox/Ingresses/Postmark/InboundEmailsController.html#method-i-create","()",""],["create","ActionMailbox::Ingresses::Relay::InboundEmailsController","classes/ActionMailbox/Ingresses/Relay/InboundEmailsController.html#method-i-create","()",""],["create","ActionMailbox::Ingresses::Sendgrid::InboundEmailsController","classes/ActionMailbox/Ingresses/Sendgrid/InboundEmailsController.html#method-i-create","()",""],["create","ActionView::Digestor::Node","classes/ActionView/Digestor/Node.html#method-c-create","(name, logical_name, template, partial)",""],["create","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-create","(attributes = {}, &block)","<p>Returns a new object of the collection type that has been instantiated with attributes, linked to this â€¦\n"],["create","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-create","(arel, name = nil, pk = nil, id_value = nil, sequence_name = nil, binds = [])",""],["create","ActiveRecord::Persistence::ClassMethods","classes/ActiveRecord/Persistence/ClassMethods.html#method-i-create","(attributes = nil, &block)","<p>Creates an object (or multiple objects) and saves it to the database, if validations pass. The resulting â€¦\n"],["create","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-create","(attributes = nil, &block)","<p>Tries to create a new record with the same scoped attributes defined in the relation. Returns the initialized â€¦\n"],["create","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-create","(configuration, *arguments)",""],["create","ActiveStorage::DirectUploadsController","classes/ActiveStorage/DirectUploadsController.html#method-i-create","()",""],["create","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-create","(name)",""],["create","Rails::Application","classes/Rails/Application.html#method-c-create","(initial_variable_values = {}, &block)",""],["create","Rails::Rails::Conductor::ActionMailbox::InboundEmails::SourcesController","classes/Rails/Rails/Conductor/ActionMailbox/InboundEmails/SourcesController.html#method-i-create","()",""],["create","Rails::Rails::Conductor::ActionMailbox::InboundEmailsController","classes/Rails/Rails/Conductor/ActionMailbox/InboundEmailsController.html#method-i-create","()",""],["create","Rails::Rails::Conductor::ActionMailbox::IncineratesController","classes/Rails/Rails/Conductor/ActionMailbox/IncineratesController.html#method-i-create","()",""],["create","Rails::Rails::Conductor::ActionMailbox::ReroutesController","classes/Rails/Rails/Conductor/ActionMailbox/ReroutesController.html#method-i-create","()",""],["create!","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-create-21","(attributes = {}, &block)","<p>Like #create, except that if the record is invalid, raises an exception.\n\n<pre><code>class Person\n  has_many :pets ...\n</code></pre>\n"],["create!","ActiveRecord::Persistence::ClassMethods","classes/ActiveRecord/Persistence/ClassMethods.html#method-i-create-21","(attributes = nil, &block)","<p>Creates an object (or multiple objects) and saves it to the database, if validations pass. Raises a  â€¦\n"],["create!","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-create-21","(attributes = nil, &block)","<p>Similar to #create, but calls create! on the base class. Raises an exception if a validation error occurs. â€¦\n"],["create_all","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-create_all","()",""],["create_and_extract_message_id!","ActionMailbox::InboundEmail::MessageId","classes/ActionMailbox/InboundEmail/MessageId.html#method-i-create_and_extract_message_id-21","(source, **options)","<p>Create a new <code>InboundEmail</code> from the raw <code>source</code> of the email, which is uploaded as an Active Storage attachment â€¦\n"],["create_and_upload!","ActiveStorage::Blob","classes/ActiveStorage/Blob.html#method-c-create_and_upload-21","(key: nil, io:, filename:, content_type: nil, metadata: nil, service_name: nil, identify: true, record: nil)","<p>Creates a new blob instance and then uploads the contents of the given <code>io</code> to the service. The blob instance â€¦\n"],["create_and_upload_raw_email!","ActionMailbox::InboundEmail::MessageId","classes/ActionMailbox/InboundEmail/MessageId.html#method-i-create_and_upload_raw_email-21","(source)",""],["create_before_direct_upload!","ActiveStorage::Blob","classes/ActiveStorage/Blob.html#method-c-create_before_direct_upload-21","(key: nil, filename:, byte_size:, checksum:, content_type: nil, metadata: nil, service_name: nil, record: nil)","<p>Returns a saved blob <em>without</em> uploading a file to the service. This blob will point to a key where there â€¦\n"],["create_current","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-create_current","(environment = env, name = nil)",""],["create_database","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-create_database","(name, options = {})","<p>Create a new MySQL database with optional <code>:charset</code> and <code>:collation</code>. Charset defaults to utf8mb4.\n<p>Example: â€¦\n"],["create_database","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-create_database","(name, options = {})","<p>Create a new PostgreSQL database. Options include <code>:owner</code>, <code>:template</code>, <code>:encoding</code> (defaults to utf8), <code>:collation</code> â€¦\n"],["create_element","ActionText::HtmlConversion","classes/ActionText/HtmlConversion.html#method-i-create_element","(tag_name, attributes = {})",""],["create_enum","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-create_enum","(name, values)","<p>Given a name and an array of values, creates an enum type.\n"],["create_fixtures","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-create_fixtures","(fixtures_directory, fixture_set_names, class_names = {}, config = ActiveRecord::Base, &block)",""],["create_generated_attribute","Rails::Generators::Testing::Behaviour","classes/Rails/Generators/Testing/Behaviour.html#method-i-create_generated_attribute","(attribute_type, name = \"test\", index = nil)","<p>Create a Rails::Generators::GeneratedAttribute by supplying the attribute type and, optionally, the attribute â€¦\n"],["create_inbound_email_from_fixture","ActionMailbox::TestHelper","classes/ActionMailbox/TestHelper.html#method-i-create_inbound_email_from_fixture","(fixture_name, status: :processing)","<p>Create an InboundEmail record using an eml fixture in the format of message/rfc822 referenced with <code>fixture_name</code> â€¦\n"],["create_inbound_email_from_mail","ActionMailbox::TestHelper","classes/ActionMailbox/TestHelper.html#method-i-create_inbound_email_from_mail","(status: :processing, **mail_options, &block)","<p>Creates an InboundEmail by specifying through options or a block.\n<p>Options\n<p><code>:status</code> - The <code>status</code> to set for â€¦\n"],["create_inbound_email_from_source","ActionMailbox::TestHelper","classes/ActionMailbox/TestHelper.html#method-i-create_inbound_email_from_source","(source, status: :processing)","<p>Create an InboundEmail using the raw rfc822 <code>source</code> as text.\n"],["create_join_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-create_join_table","(table_1, table_2, column_options: {}, **options)","<p>Creates a new join table with the name created using the lexical order of the first two arguments. These â€¦\n"],["create_migration","Rails::Generators::Migration","classes/Rails/Generators/Migration.html#method-i-create_migration","(destination, data, config = {}, &block)",""],["create_or_find_by","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-create_or_find_by","(attributes, &block)","<p>Attempts to create a record with the given attributes in a table that has a unique database constraint â€¦\n"],["create_or_find_by!","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-create_or_find_by-21","(attributes, &block)","<p>Like #create_or_find_by, but calls create! so an exception is raised if the created record is invalid. â€¦\n"],["create_savepoint","ActiveRecord::ConnectionAdapters::Savepoints","classes/ActiveRecord/ConnectionAdapters/Savepoints.html#method-i-create_savepoint","(name = current_savepoint_name)",""],["create_schema","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-create_schema","(schema_name)","<p>Creates a schema for the given schema name.\n"],["create_session","ActionDispatch::Integration::Runner","classes/ActionDispatch/Integration/Runner.html#method-i-create_session","(app)",""],["create_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-create_table","(table_name, id: :primary_key, primary_key: nil, force: nil, **options)","<p>Creates a new table with the name <code>table_name</code>. <code>table_name</code> may either be a String or a Symbol.\n<p>There are â€¦\n"],["create_unlogged_tables","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-c-create_unlogged_tables","","<p>PostgreSQL allows the creation of â€œunloggedâ€ tables, which do not record data in the PostgreSQL â€¦\n"],["create_with","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-create_with","(value)","<p>Sets attributes to be used when creating new records from a relation object.\n\n<pre><code>users = User.where(name: ...\n</code></pre>\n"],["credentials","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-credentials","()",""],["credentials","Rails::Application","classes/Rails/Application.html#method-i-credentials","()","<p>Decrypts the credentials hash as kept in <code>config/credentials.yml.enc</code>. This file is encrypted with the â€¦\n"],["csp_meta_tag","ActionView::Helpers::CspHelper","classes/ActionView/Helpers/CspHelper.html#method-i-csp_meta_tag","(**options)","<p>Returns a meta tag â€œcsp-nonceâ€ with the per-session nonce value for allowing inline &lt;script&gt; â€¦\n"],["csrf_meta_tag","ActionView::Helpers::CsrfHelper","classes/ActionView/Helpers/CsrfHelper.html#method-i-csrf_meta_tag","()","<p>For backwards compatibility.\n"],["csrf_meta_tags","ActionView::Helpers::CsrfHelper","classes/ActionView/Helpers/CsrfHelper.html#method-i-csrf_meta_tags","()","<p>Returns meta tags â€œcsrf-paramâ€ and â€œcsrf-tokenâ€ with the name of the cross-site request â€¦\n"],["csrf_token_hmac","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-csrf_token_hmac","(session, identifier)",""],["ctype","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-ctype","()","<p>Returns the current database ctype.\n"],["current","Date","classes/Date.html#method-c-current","()","<p>Returns Time.zone.today when <code>Time.zone</code> or <code>config.time_zone</code> are set, otherwise just returns Date.today â€¦\n"],["current","DateTime","classes/DateTime.html#method-c-current","()","<p>Returns <code>Time.zone.now.to_datetime</code> when <code>Time.zone</code> or <code>config.time_zone</code> are set, otherwise returns <code>Time.now.to_datetime</code> â€¦\n"],["current","Time","classes/Time.html#method-c-current","()","<p>Returns <code>Time.zone.now</code> when <code>Time.zone</code> or <code>config.time_zone</code> are set, otherwise just returns <code>Time.now</code>.\n"],["current_custom_context","ActiveRecord::Encryption::Contexts","classes/ActiveRecord/Encryption/Contexts.html#method-i-current_custom_context","()",""],["current_cycle","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-current_cycle","(name = \"default\")","<p>Returns the current cycle string after a cycle has been started. Useful for complex table highlighting â€¦\n"],["current_database","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-current_database","()",""],["current_database","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-current_database","()","<p>Returns the current database name.\n"],["current_hash","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-current_hash","()",""],["current_hash","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-current_hash","()",""],["current_page?","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-current_page-3F","(options = nil, check_parameters: false, **options_as_kwargs)","<p>True if the current request URI was generated by the given <code>options</code>.\n<p>Examples\n<p>Let&#39;s say we&#39;re in â€¦\n"],["current_preventing_writes","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-c-current_preventing_writes","()","<p>Returns the symbol representing the current setting for preventing writes.\n\n<pre><code>ActiveRecord::Base.connected_to(role: ...\n</code></pre>\n"],["current_role","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-c-current_role","()","<p>Returns the symbol representing the current connected role.\n\n<pre><code>ActiveRecord::Base.connected_to(role: :writing) ...\n</code></pre>\n"],["current_savepoint_name","ActiveRecord::ConnectionAdapters::Savepoints","classes/ActiveRecord/ConnectionAdapters/Savepoints.html#method-i-current_savepoint_name","()",""],["current_schema","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-current_schema","()","<p>Returns the current schema name.\n"],["current_shard","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-c-current_shard","()","<p>Returns the symbol representing the current connected shard.\n\n<pre><code>ActiveRecord::Base.connected_to(role: :reading) ...\n</code></pre>\n"],["current_version","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-c-current_version","()",""],["custom","ActionController::MimeResponds::Collector","classes/ActionController/MimeResponds/Collector.html#method-i-custom","(mime_type, &block)",""],["custom","ActionMailer::Collector","classes/ActionMailer/Collector.html#method-i-custom","(mime, options = {})",""],["custom_metadata","ActiveStorage::Blob","classes/ActiveStorage/Blob.html#method-i-custom_metadata","()",""],["custom_metadata=","ActiveStorage::Blob","classes/ActiveStorage/Blob.html#method-i-custom_metadata-3D","(metadata)",""],["cycle","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-cycle","(first_value, *values)","<p>Creates a Cycle object whose <em>to_s</em> method cycles through elements of an array every time it is called. â€¦\n"],["dangerous_attribute_method?","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-dangerous_attribute_method-3F","(method_name)",""],["dangerous_class_method?","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-dangerous_class_method-3F","(method_name)","<p>A class method is &#39;dangerous&#39; if it is already (re)defined by Active Record, but not by any ancestors. â€¦\n"],["dasherize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-dasherize","(underscored_word)","<p>Replaces underscores with dashes in the string.\n\n<pre><code>dasherize(&#39;puni_puni&#39;) # =&gt; &quot;puni-puni&quot;\n</code></pre>\n"],["dasherize","String","classes/String.html#method-i-dasherize","()","<p>Replaces underscores with dashes in the string.\n\n<pre><code>&#39;puni_puni&#39;.dasherize # =&gt; &quot;puni-puni&quot;\n</code></pre>\n<p>See ActiveSupport::Inflector.dasherize â€¦\n"],["data","ActionView::FixtureResolver","classes/ActionView/FixtureResolver.html#method-i-data","()",""],["data_source_exists?","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-data_source_exists-3F","(name)","<p>A cached lookup for table existence.\n"],["data_source_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-data_source_exists-3F","(name)","<p>Checks to see if the data source <code>name</code> exists on the database.\n\n<pre><code>data_source_exists?(:ebooks)\n</code></pre>\n"],["data_sources","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-data_sources","(name)",""],["data_sources","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-data_sources","()","<p>Returns the relation names usable to back Active Record models. For most adapters this means all #tables â€¦\n"],["database","ActiveRecord::DatabaseConfigurations::HashConfig","classes/ActiveRecord/DatabaseConfigurations/HashConfig.html#method-i-database","()",""],["database","Rails::DBConsole","classes/Rails/DBConsole.html#method-i-database","()",""],["database_configuration","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-database_configuration","()","<p>Loads and returns the entire raw configuration of database from values stored in <code>config/database.yml</code> â€¦\n"],["database_exists?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-c-database_exists-3F","(config)","<p>Does the database for this adapter exist?\n"],["database_exists?","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-c-database_exists-3F","(config)",""],["database_exists?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-c-database_exists-3F","(config)",""],["database_exists?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-c-database_exists-3F","(config)",""],["database_yml","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-database_yml","()",""],["date","ActionDispatch::Http::Cache::Response","classes/ActionDispatch/Http/Cache/Response.html#method-i-date","()",""],["date=","ActionDispatch::Http::Cache::Response","classes/ActionDispatch/Http/Cache/Response.html#method-i-date-3D","(utc_time)",""],["date?","ActionDispatch::Http::Cache::Response","classes/ActionDispatch/Http/Cache/Response.html#method-i-date-3F","()",""],["date_field","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-date_field","","<p>Wraps ActionView::Helpers::FormHelper#date_field for form builders:\n\n<pre><code>&lt;%= form_with model: @user do |f| ...\n</code></pre>\n"],["date_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-date_field","(object_name, method, options = {})","<p>Returns a text_field of type â€œdateâ€.\n\n<pre><code>date_field(&quot;user&quot;, &quot;born_on&quot;)\n# =&gt; &lt;input id=&quot;user_born_on&quot; ...\n</code></pre>\n"],["date_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-date_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type â€œdateâ€.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],["date_select","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-date_select","(object_name, method, options = {}, html_options = {})","<p>Returns a set of select tags (one for year, month, and day) pre-selected for accessing a specified date-based â€¦\n"],["date_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-date_select","(method, options = {}, html_options = {})","<p>Wraps ActionView::Helpers::DateHelper#date_select for form builders:\n\n<pre><code>&lt;%= form_for @person do |f| %&gt;\n  ...\n</code></pre>\n"],["daterange","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-daterange","",""],["datetime_field","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-datetime_field","","<p>Wraps ActionView::Helpers::FormHelper#datetime_field for form builders:\n\n<pre><code>&lt;%= form_with model: @user do ...\n</code></pre>\n"],["datetime_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-datetime_field","(object_name, method, options = {})","<p>Returns a text_field of type â€œdatetime-localâ€.\n\n<pre><code>datetime_field(&quot;user&quot;, &quot;born_on&quot;)\n# =&gt; &lt;input ...\n</code></pre>\n"],["datetime_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-datetime_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type â€œdatetime-localâ€.\n<p>Options\n<p><code>:min</code> - The minimum acceptable value.\n"],["datetime_local_field","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-datetime_local_field","","<p>Wraps ActionView::Helpers::FormHelper#datetime_local_field for form builders:\n\n<pre><code>&lt;%= form_with model: @user ...\n</code></pre>\n"],["datetime_local_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-datetime_local_field","(object_name, method, options = {})",""],["datetime_local_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-datetime_local_field_tag","(name, value = nil, options = {})",""],["datetime_select","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-datetime_select","(object_name, method, options = {}, html_options = {})","<p>Returns a set of select tags (one for year, month, day, hour, and minute) pre-selected for accessing â€¦\n"],["datetime_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-datetime_select","(method, options = {}, html_options = {})","<p>Wraps ActionView::Helpers::DateHelper#datetime_select for form builders:\n\n<pre><code>&lt;%= form_for @person do |f| %&gt; ...\n</code></pre>\n"],["datetime_type","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-c-datetime_type","","<p>PostgreSQL supports multiple types for DateTimes. By default, if you use <code>datetime</code> in migrations, Rails â€¦\n"],["day","Numeric","classes/Numeric.html#method-i-day","()",""],["days","Numeric","classes/Numeric.html#method-i-days","()","<p>Returns a Duration instance matching the number of days provided.\n\n<pre><code>2.days # =&gt; 2 days\n</code></pre>\n"],["days_ago","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-days_ago","(days)","<p>Returns a new date/time the specified number of days ago.\n"],["days_in_month","Time","classes/Time.html#method-c-days_in_month","(month, year = current.year)","<p>Returns the number of days in the given month. If no year is specified, it will use the current year. â€¦\n"],["days_in_year","Time","classes/Time.html#method-c-days_in_year","(year = current.year)","<p>Returns the number of days in the given year. If no year is specified, it will use the current year. â€¦\n"],["days_since","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-days_since","(days)","<p>Returns a new date/time the specified number of days in the future.\n"],["days_to_week_start","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-days_to_week_start","(start_day = Date.beginning_of_week)","<p>Returns the number of days to the start of the week on the given day. Week is assumed to start on <code>start_day</code> â€¦\n"],["db","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-db","()",""],["db_config","Rails::DBConsole","classes/Rails/DBConsole.html#method-i-db_config","()",""],["db_dir","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-db_dir","()",""],["db_error","ActiveRecord::NoDatabaseError","classes/ActiveRecord/NoDatabaseError.html#method-c-db_error","(db_name)",""],["db_when_updating","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-db_when_updating","()",""],["debug","ActionView::Digestor::NullLogger","classes/ActionView/Digestor/NullLogger.html#method-c-debug","(_)",""],["debug","ActionView::Helpers::DebugHelper","classes/ActionView/Helpers/DebugHelper.html#method-i-debug","(object)","<p>Returns a YAML representation of <code>object</code> wrapped with &lt;pre&gt; and &lt;/pre&gt;. If the object cannot â€¦\n"],["debug_exception_response_format","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-debug_exception_response_format","()",""],["decode","ActiveStorage::Variation","classes/ActiveStorage/Variation.html#method-c-decode","(key)","<p>Returns a Variation instance with the transformations that were encoded by <code>encode</code>.\n"],["decode","ActiveSupport::JSON","classes/ActiveSupport/JSON.html#method-c-decode","(json)","<p>Parses a JSON string (JavaScript Object Notation) into a hash. See www.json.org for more info.\n\n<pre><code>ActiveSupport::JSON.decode(&quot;{\\&quot;team\\&quot;:\\&quot;rails\\&quot;,\\&quot;players\\&quot;:\\&quot;36\\&quot;}&quot;) ...\n</code></pre>\n"],["decode_credentials","ActionController::HttpAuthentication::Basic","classes/ActionController/HttpAuthentication/Basic.html#method-i-decode_credentials","(request)",""],["decode_credentials","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-decode_credentials","(header)",""],["decode_credentials_header","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-decode_credentials_header","(request)",""],["decompose","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-decompose","()","<p>Performs canonical decomposition on all the characters.\n\n<pre><code>&#39;Ã©&#39;.length                         # =&gt; 1\n&#39;Ã©&#39;.mb_chars.decompose.to_s.length ...\n</code></pre>\n"],["decompose","ActiveSupport::Multibyte::Unicode","classes/ActiveSupport/Multibyte/Unicode.html#method-i-decompose","(type, codepoints)","<p>Decompose composed characters to the decomposed form.\n"],["decompress","ActiveSupport::Gzip","classes/ActiveSupport/Gzip.html#method-c-decompress","(source)","<p>Decompresses a gzipped string.\n"],["deconstantize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-deconstantize","(path)","<p>Removes the rightmost segment from the constant expression in the string.\n\n<pre><code>deconstantize(&#39;Net::HTTP&#39;)  ...\n</code></pre>\n"],["deconstantize","String","classes/String.html#method-i-deconstantize","()","<p>Removes the rightmost segment from the constant expression in the string.\n\n<pre><code>&#39;Net::HTTP&#39;.deconstantize   ...\n</code></pre>\n"],["decrement","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-decrement","(attribute, by = 1)","<p>Initializes <code>attribute</code> to zero if <code>nil</code> and subtracts the value passed as <code>by</code> (default is 1). The decrement â€¦\n"],["decrement","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-decrement","(name, amount = 1, options = nil)","<p>Decrements an already existing integer value that is stored in the cache. If the key is not found nothing â€¦\n"],["decrement","ActiveSupport::Cache::MemCacheStore","classes/ActiveSupport/Cache/MemCacheStore.html#method-i-decrement","(name, amount = 1, options = nil)","<p>Decrement a cached value. This method uses the memcached decr atomic operator and can only be used on â€¦\n"],["decrement","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-decrement","(name, amount = 1, options = nil)","<p>Decrement an integer value in the cache.\n"],["decrement","ActiveSupport::Cache::NullStore","classes/ActiveSupport/Cache/NullStore.html#method-i-decrement","(name, amount = 1, options = nil)",""],["decrement","ActiveSupport::Cache::RedisCacheStore","classes/ActiveSupport/Cache/RedisCacheStore.html#method-i-decrement","(name, amount = 1, options = nil)","<p>Cache Store API implementation.\n<p>Decrement a cached value. This method uses the Redis decr atomic operator â€¦\n"],["decrement","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-decrement","(name, amount = 1, options = nil)","<p>Decrements an integer value in the cache.\n<p>Options are passed to the underlying cache implementation.\n<p>Some â€¦\n"],["decrement!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-decrement-21","(attribute, by = 1, touch: nil)","<p>Wrapper around #decrement that writes the update to the database. Only <code>attribute</code> is updated; the record â€¦\n"],["decrement_counter","ActiveRecord::CounterCache::ClassMethods","classes/ActiveRecord/CounterCache/ClassMethods.html#method-i-decrement_counter","(counter_name, id, touch: nil)","<p>Decrement a numeric field by one, via a direct SQL update.\n<p>This works the same as #increment_counter but â€¦\n"],["decrypt","ActionText::Encryption","classes/ActionText/Encryption.html#method-i-decrypt","()",""],["decrypt","ActiveRecord::Encryption::Cipher","classes/ActiveRecord/Encryption/Cipher.html#method-i-decrypt","(encrypted_message, key:)","<p>Decrypt the provided <code>Message</code>.\n<p>When <code>key</code> is an Array, it will try all the keys raising a <code>ActiveRecord::Encryption::Errors::Decryption</code> â€¦\n"],["decrypt","ActiveRecord::Encryption::Cipher::Aes256Gcm","classes/ActiveRecord/Encryption/Cipher/Aes256Gcm.html#method-i-decrypt","(encrypted_message)",""],["decrypt","ActiveRecord::Encryption::EncryptableRecord","classes/ActiveRecord/Encryption/EncryptableRecord.html#method-i-decrypt","()","<p>Decrypts all the encryptable attributes and saves the changes.\n"],["decrypt","ActiveRecord::Encryption::EncryptingOnlyEncryptor","classes/ActiveRecord/Encryption/EncryptingOnlyEncryptor.html#method-i-decrypt","(encrypted_text, key_provider: nil, cipher_options: {})",""],["decrypt","ActiveRecord::Encryption::Encryptor","classes/ActiveRecord/Encryption/Encryptor.html#method-i-decrypt","(encrypted_text, key_provider: default_key_provider, cipher_options: {})","<p>Decrypts a <code>clean_text</code> and returns the result as clean text\n<p>Options\n<p>:key_provider &mdash; Key provider to use for â€¦\n"],["decrypt","ActiveRecord::Encryption::NullEncryptor","classes/ActiveRecord/Encryption/NullEncryptor.html#method-i-decrypt","(encrypted_text, key_provider: nil, cipher_options: {})",""],["decrypt","ActiveRecord::Encryption::ReadOnlyNullEncryptor","classes/ActiveRecord/Encryption/ReadOnlyNullEncryptor.html#method-i-decrypt","(encrypted_text, key_provider: nil, cipher_options: {})",""],["decrypt_and_verify","ActiveSupport::MessageEncryptor","classes/ActiveSupport/MessageEncryptor.html#method-i-decrypt_and_verify","(data, purpose: nil, **)","<p>Decrypt and verify a message. We need to verify the message in order to avoid padding attacks. Reference: â€¦\n"],["decrypt_and_verify","ActiveSupport::Messages::Rotator::Encryptor","classes/ActiveSupport/Messages/Rotator/Encryptor.html#method-i-decrypt_and_verify","(*args, on_rotation: @on_rotation, **options)",""],["decryption_keys","ActiveRecord::Encryption::EnvelopeEncryptionKeyProvider","classes/ActiveRecord/Encryption/EnvelopeEncryptionKeyProvider.html#method-i-decryption_keys","(encrypted_message)",""],["decryption_keys","ActiveRecord::Encryption::KeyProvider","classes/ActiveRecord/Encryption/KeyProvider.html#method-i-decryption_keys","(encrypted_message)","<p>Returns the list of decryption keys\n<p>When the message holds a reference to its encryption key, it will â€¦\n"],["deduplicate","ActiveRecord::ConnectionAdapters::Deduplicable","classes/ActiveRecord/ConnectionAdapters/Deduplicable.html#method-i-deduplicate","()",""],["deep_dup","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-deep_dup","()","<p>Returns duplicate of object including all parameters.\n"],["deep_dup","Array","classes/Array.html#method-i-deep_dup","()","<p>Returns a deep copy of array.\n\n<pre><code>array = [1, [2, 3]]\ndup   = array.deep_dup\ndup[1][2] = 4\n\narray[1][2] # ...\n</code></pre>\n"],["deep_dup","Hash","classes/Hash.html#method-i-deep_dup","()","<p>Returns a deep copy of hash.\n\n<pre><code>hash = { a: { b: &#39;b&#39; } }\ndup  = hash.deep_dup\ndup[:a][:c] = &#39;c&#39;\n\nhash[:a][:c] ...\n</code></pre>\n"],["deep_dup","Object","classes/Object.html#method-i-deep_dup","()","<p>Returns a deep copy of object if it&#39;s duplicable. If it&#39;s not duplicable, returns <code>self</code>.\n\n<pre><code>object ...\n</code></pre>\n"],["deep_merge","Hash","classes/Hash.html#method-i-deep_merge","(other_hash, &block)","<p>Returns a new hash with <code>self</code> and <code>other_hash</code> merged recursively.\n\n<pre><code>h1 = { a: true, b: { c: [1, 2, 3] } } ...\n</code></pre>\n"],["deep_merge!","Hash","classes/Hash.html#method-i-deep_merge-21","(other_hash, &block)","<p>Same as <code>deep_merge</code>, but modifies <code>self</code>.\n"],["deep_stringify_keys","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-deep_stringify_keys","()",""],["deep_stringify_keys","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-deep_stringify_keys","()",""],["deep_stringify_keys","Hash","classes/Hash.html#method-i-deep_stringify_keys","()","<p>Returns a new hash with all keys converted to strings. This includes the keys from the root hash and â€¦\n"],["deep_stringify_keys!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-deep_stringify_keys-21","()",""],["deep_stringify_keys!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-deep_stringify_keys-21","()",""],["deep_stringify_keys!","Hash","classes/Hash.html#method-i-deep_stringify_keys-21","()","<p>Destructively converts all keys to strings. This includes the keys from the root hash and from all nested â€¦\n"],["deep_symbolize_keys","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-deep_symbolize_keys","()",""],["deep_symbolize_keys","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-deep_symbolize_keys","()",""],["deep_symbolize_keys","Hash","classes/Hash.html#method-i-deep_symbolize_keys","()","<p>Returns a new hash with all keys converted to symbols, as long as they respond to <code>to_sym</code>. This includes â€¦\n"],["deep_symbolize_keys!","Hash","classes/Hash.html#method-i-deep_symbolize_keys-21","()","<p>Destructively converts all keys to symbols, as long as they respond to <code>to_sym</code>. This includes the keys â€¦\n"],["deep_transform_keys","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-deep_transform_keys","(&block)","<p>Returns a new <code>ActionController::Parameters</code> instance with the results of running <code>block</code> once for every â€¦\n"],["deep_transform_keys","Hash","classes/Hash.html#method-i-deep_transform_keys","(&block)","<p>Returns a new hash with all keys converted by the block operation. This includes the keys from the root â€¦\n"],["deep_transform_keys!","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-deep_transform_keys-21","(&block)","<p>Returns the <code>ActionController::Parameters</code> instance changing its keys. This includes the keys from the â€¦\n"],["deep_transform_keys!","Hash","classes/Hash.html#method-i-deep_transform_keys-21","(&block)","<p>Destructively converts all keys by using the block operation. This includes the keys from the root hash â€¦\n"],["deep_transform_values","Hash","classes/Hash.html#method-i-deep_transform_values","(&block)","<p>Returns a new hash with all values converted by the block operation. This includes the values from the â€¦\n"],["deep_transform_values!","Hash","classes/Hash.html#method-i-deep_transform_values-21","(&block)","<p>Destructively converts all values by using the block operation. This includes the values from the root â€¦\n"],["default","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-default","(value = nil)","<p>Sets the defaults through app configuration:\n\n<pre><code>config.action_mailer.default(from: &quot;no-reply@example.org&quot;)\n</code></pre>\n"],["default","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-default","(*args)","<p>Same as <code>Hash#default</code> where the key passed as argument can be either a string or a symbol:\n\n<pre><code>hash = ActiveSupport::HashWithIndifferentAccess.new(1) ...\n</code></pre>\n"],["default","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-default","(*args)","<p>Same as <code>Hash#default</code> where the key passed as argument can be either a string or a symbol:\n\n<pre><code>hash = ActiveSupport::HashWithIndifferentAccess.new(1) ...\n</code></pre>\n"],["default_aliases_for_option","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-default_aliases_for_option","(name, options)","<p>Returns default aliases for the option name given doing a lookup in Rails::Generators.aliases.\n"],["default_command_root","Rails::Command::Base","classes/Rails/Command/Base.html#method-c-default_command_root","()","<p>Default file root to place extra files a command might need, placed one folder above the command file. â€¦\n"],["default_for_option","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-default_for_option","(config, name, options, default)","<p>Returns default for the option name given doing a lookup in config.\n"],["default_form_builder","ActionController::FormBuilder","classes/ActionController/FormBuilder.html#method-i-default_form_builder","()","<p>Default form builder for the controller\n"],["default_form_builder","ActionController::FormBuilder::ClassMethods","classes/ActionController/FormBuilder/ClassMethods.html#method-i-default_form_builder","(builder)","<p>Set the form builder to be used as the default for all forms in the views rendered by this controller â€¦\n"],["default_generator_root","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-default_generator_root","()",""],["default_i18n_subject","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-default_i18n_subject","(interpolations = {})","<p>Translates the <code>subject</code> using Rails I18n class under <code>[mailer_scope, action_name]</code> scope. If it does not â€¦\n"],["default_inspect","Date","classes/Date.html#method-i-default_inspect","()",""],["default_inspect","DateTime","classes/DateTime.html#method-i-default_inspect","()",""],["default_log_file","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-default_log_file","()",""],["default_options","Rails::Server","classes/Rails/Server.html#method-i-default_options","()",""],["default_options=","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-default_options-3D","(value = nil)","<p>Allows to set defaults through app configuration:\n\n<pre><code>config.action_mailer.default_options = { from: &quot;no-reply@example.org&quot; ...\n</code></pre>\n"],["default_schema_cache_path","ActiveRecord::DatabaseConfigurations::HashConfig","classes/ActiveRecord/DatabaseConfigurations/HashConfig.html#method-i-default_schema_cache_path","()",""],["default_scope","ActiveRecord::Scoping::Default::ClassMethods","classes/ActiveRecord/Scoping/Default/ClassMethods.html#method-i-default_scope","(scope = nil, all_queries: nil, &block)","<p>Use this macro in your model to set a default scope for all operations on the model.\n\n<pre><code>class Article &lt; ActiveRecord::Base ...\n</code></pre>\n"],["default_scoped","ActiveRecord::Scoping::Named::ClassMethods","classes/ActiveRecord/Scoping/Named/ClassMethods.html#method-i-default_scoped","(scope = relation, all_queries: nil)","<p>Returns a scope for the model with default scopes.\n"],["default_scopes?","ActiveRecord::Scoping::Default::ClassMethods","classes/ActiveRecord/Scoping/Default/ClassMethods.html#method-i-default_scopes-3F","(all_queries: false)","<p>Checks if the model has any default scopes. If all_queries is set to true, the method will check if there â€¦\n"],["default_sequence_name","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-default_sequence_name","(table, column)",""],["default_source_root","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-default_source_root","()","<p>Returns the default source root for a given generator. This is used internally by rails to set its generators â€¦\n"],["default_timezone","ActiveRecord::Type::Internal::Timezone","classes/ActiveRecord/Type/Internal/Timezone.html#method-i-default_timezone","()",""],["default_to","ActiveStorage::Variation","classes/ActiveStorage/Variation.html#method-i-default_to","(defaults)",""],["default_url_options","ActionDispatch::Integration::Runner","classes/ActionDispatch/Integration/Runner.html#method-i-default_url_options","()",""],["default_url_options","ActionDispatch::Routing::Mapper::Base","classes/ActionDispatch/Routing/Mapper/Base.html#method-i-default_url_options","(options)",""],["default_url_options=","ActionDispatch::Integration::Runner","classes/ActionDispatch/Integration/Runner.html#method-i-default_url_options-3D","(options)",""],["default_url_options=","ActionDispatch::Routing::Mapper::Base","classes/ActionDispatch/Routing/Mapper/Base.html#method-i-default_url_options-3D","(options)",""],["default_value_for_option","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-default_value_for_option","(name, options)","<p>Returns the default value for the option name given doing a lookup in Rails::Generators.options.\n"],["defaults","ActionDispatch::Routing::Mapper::Scoping","classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-defaults","(defaults = {})","<p>Allows you to set default parameters for a route, such as this:\n\n<pre><code>defaults id: &#39;home&#39; do\n  match &#39;scoped_pages/(:id)&#39;, ...\n</code></pre>\n"],["defer_subscription_confirmation!","ActionCable::Channel::Base","classes/ActionCable/Channel/Base.html#method-i-defer_subscription_confirmation-21","()",""],["defer_subscription_confirmation?","ActionCable::Channel::Base","classes/ActionCable/Channel/Base.html#method-i-defer_subscription_confirmation-3F","()",""],["define","ActiveRecord::DynamicMatchers::Method","classes/ActiveRecord/DynamicMatchers/Method.html#method-i-define","()",""],["define","ActiveRecord::Schema::Definition::ClassMethods","classes/ActiveRecord/Schema/Definition/ClassMethods.html#method-i-define","(info = {}, &block)","<p>Eval the given block. All methods available to the current connection adapter are available within the â€¦\n"],["define_attribute","ActiveRecord::Attributes::ClassMethods","classes/ActiveRecord/Attributes/ClassMethods.html#method-i-define_attribute","( name, cast_type, default: NO_DEFAULT_PROVIDED, user_provided_default: true )","<p>This is the low level API which sits beneath <code>attribute</code>. It only accepts type objects, and will do its â€¦\n"],["define_attribute_method","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-define_attribute_method","(attr_name, _owner: generated_attribute_methods)","<p>Declares an attribute that should be prefixed and suffixed by <code>ActiveModel::AttributeMethods</code>.\n<p>To use, pass â€¦\n"],["define_attribute_methods","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-define_attribute_methods","(*attr_names)","<p>Declares the attributes that should be prefixed and suffixed by <code>ActiveModel::AttributeMethods</code>.\n<p>To use, â€¦\n"],["define_cached_method","ActiveSupport::CodeGenerator::MethodSet","classes/ActiveSupport/CodeGenerator/MethodSet.html#method-i-define_cached_method","(name, as: name)",""],["define_callbacks","ActiveSupport::Callbacks::ClassMethods","classes/ActiveSupport/Callbacks/ClassMethods.html#method-i-define_callbacks","(*names)","<p>Define sets of events in the object life cycle that support callbacks.\n\n<pre><code>define_callbacks :validate\ndefine_callbacks ...\n</code></pre>\n"],["define_model_callbacks","ActiveModel::Callbacks","classes/ActiveModel/Callbacks.html#method-i-define_model_callbacks","(*callbacks)","<p>define_model_callbacks accepts the same options <code>define_callbacks</code> does, in case you want to overwrite â€¦\n"],["define_on","ActiveModel::Validations::AcceptanceValidator::LazilyDefineAttributes","classes/ActiveModel/Validations/AcceptanceValidator/LazilyDefineAttributes.html#method-i-define_on","(klass)",""],["delegate","Module","classes/Module.html#method-i-delegate","(*methods, to: nil, prefix: nil, allow_nil: nil, private: nil)","<p>Provides a <code>delegate</code> class method to easily expose contained objects&#39; public methods as your own. â€¦\n"],["delegate_missing_to","Module","classes/Module.html#method-i-delegate_missing_to","(target, allow_nil: nil)","<p>When building decorators, a common pattern may emerge:\n\n<pre><code>class Partition\n  def initialize(event)\n    @event ...\n</code></pre>\n"],["delegate_to","ActionView::Template::Types","classes/ActionView/Template/Types.html#method-c-delegate_to","(klass)",""],["delegated_type","ActiveRecord::DelegatedType","classes/ActiveRecord/DelegatedType.html#method-i-delegated_type","(role, types:, **options)","<p>Defines this as a class that&#39;ll delegate its type for the passed <code>role</code> to the class references in â€¦\n"],["delete","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-delete","(key, &block)","<p>Deletes a key-value pair from <code>Parameters</code> and returns the value. If <code>key</code> is not found, returns <code>nil</code> (or, â€¦\n"],["delete","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-delete","(action, **args)","<p>Simulate a DELETE request with the given parameters and set/volley the response. See <code>get</code> for more details. â€¦\n"],["delete","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-delete","(key)",""],["delete","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-delete","(path, **args)","<p>Performs a DELETE request with the given parameters. See ActionDispatch::Integration::Session#process â€¦\n"],["delete","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-delete","(target)","<p>Deletes a middleware from the middleware stack.\n<p>Returns the array of middlewares not including the deleted â€¦\n"],["delete","ActionDispatch::Routing::Mapper::HttpHelpers","classes/ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-delete","(*args, &block)","<p>Define a route that only recognizes HTTP DELETE. For supported arguments, see match\n\n<pre><code>delete &#39;broccoli&#39;, ...\n</code></pre>\n"],["delete","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-delete","(attribute, type = nil, **options)","<p>Delete messages for <code>key</code>. Returns the deleted messages.\n\n<pre><code>person.errors[:name]        # =&gt; [&quot;cannot be nil&quot;] ...\n</code></pre>\n"],["delete","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-delete","(*records)","<p>Deletes the <code>records</code> supplied from the collection according to the strategy specified by the <code>:dependent</code> â€¦\n"],["delete","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-delete","(element)","<p>If <code>element</code> is in the queue, remove and return it, or <code>nil</code>.\n"],["delete","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-delete","(arel, name = nil, binds = [])","<p>Executes the delete statement and returns the number of rows affected.\n"],["delete","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-delete","()","<p>Deletes the record in the database and freezes this instance to reflect that no changes should be made â€¦\n"],["delete","ActiveRecord::Persistence::ClassMethods","classes/ActiveRecord/Persistence/ClassMethods.html#method-i-delete","(id_or_array)","<p>Deletes the row with a primary key matching the <code>id</code> argument, using an SQL <code>DELETE</code> statement, and returns â€¦\n"],["delete","ActiveStorage::Blob","classes/ActiveStorage/Blob.html#method-i-delete","()","<p>Deletes the files on the service associated with the blob. This should only be done if the blob is going â€¦\n"],["delete","ActiveStorage::Service","classes/ActiveStorage/Service.html#method-i-delete","(key)","<p>Delete the file at the <code>key</code>.\n"],["delete","ActiveStorage::Service::AzureStorageService","classes/ActiveStorage/Service/AzureStorageService.html#method-i-delete","(key)",""],["delete","ActiveStorage::Service::DiskService","classes/ActiveStorage/Service/DiskService.html#method-i-delete","(key)",""],["delete","ActiveStorage::Service::GCSService","classes/ActiveStorage/Service/GCSService.html#method-i-delete","(key)",""],["delete","ActiveStorage::Service::MirrorService","classes/ActiveStorage/Service/MirrorService.html#method-i-delete","(key)","<p>Delete the file at the <code>key</code> on all services.\n"],["delete","ActiveStorage::Service::S3Service","classes/ActiveStorage/Service/S3Service.html#method-i-delete","(key)",""],["delete","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-delete","(name, options = nil)","<p>Deletes an entry in the cache. Returns <code>true</code> if an entry is deleted.\n<p>Options are passed to the underlying â€¦\n"],["delete","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-delete","(key)","<p>Removes the specified key from the hash.\n"],["delete","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-delete","(key)","<p>Removes the specified key from the hash.\n"],["delete","ActiveSupport::Inflector::Inflections::Uncountables","classes/ActiveSupport/Inflector/Inflections/Uncountables.html#method-i-delete","(entry)",""],["delete","Rails::Configuration::MiddlewareStackProxy","classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-delete","(...)",""],["delete!","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-delete-21","(target)","<p>Deletes a middleware from the middleware stack.\n<p>Returns the array of middlewares not including the deleted â€¦\n"],["delete_all","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-delete_all","(dependent = nil)","<p>Deletes all the records from the collection according to the strategy specified by the <code>:dependent</code> option. â€¦\n"],["delete_all","ActiveRecord::Batches::BatchEnumerator","classes/ActiveRecord/Batches/BatchEnumerator.html#method-i-delete_all","()","<p>Deletes records in batches. Returns the total number of rows affected.\n\n<pre><code>Person.in_batches.delete_all\n</code></pre>\n<p>See â€¦\n"],["delete_all","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-delete_all","()","<p>Deletes the records without instantiating the records first, and hence not calling the #destroy method â€¦\n"],["delete_by","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-delete_by","(*args)","<p>Finds and deletes all records matching the specified conditions. This is short-hand for <code>relation.where(condition).delete_all</code> â€¦\n"],["delete_entry","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","classes/ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-delete_entry","(key)",""],["delete_header","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-delete_header","(key)",""],["delete_if","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-delete_if","(&block)",""],["delete_if","Mime::Mimes","classes/Mime/Mimes.html#method-i-delete_if","()",""],["delete_matched","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-delete_matched","(matcher, options = nil)",""],["delete_matched","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-delete_matched","(matcher, options = nil)","<p>Deletes cache entries if the cache key matches a given pattern.\n"],["delete_matched","ActiveSupport::Cache::NullStore","classes/ActiveSupport/Cache/NullStore.html#method-i-delete_matched","(matcher, options = nil)",""],["delete_matched","ActiveSupport::Cache::RedisCacheStore","classes/ActiveSupport/Cache/RedisCacheStore.html#method-i-delete_matched","(matcher, options = nil)","<p>Cache Store API implementation.\n<p>Supports Redis KEYS glob patterns:\n\n<pre><code>h?llo matches hello, hallo and hxllo ...\n</code></pre>\n"],["delete_matched","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-delete_matched","(matcher, options = nil)","<p>Deletes all entries with keys matching the pattern.\n<p>Options are passed to the underlying cache implementation. â€¦\n"],["delete_multi","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-delete_multi","(names, options = nil)","<p>Deletes multiple entries in the cache.\n<p>Options are passed to the underlying cache implementation.\n"],["delete_prefixed","ActiveStorage::Service","classes/ActiveStorage/Service.html#method-i-delete_prefixed","(prefix)","<p>Delete files at keys starting with the <code>prefix</code>.\n"],["delete_prefixed","ActiveStorage::Service::AzureStorageService","classes/ActiveStorage/Service/AzureStorageService.html#method-i-delete_prefixed","(prefix)",""],["delete_prefixed","ActiveStorage::Service::DiskService","classes/ActiveStorage/Service/DiskService.html#method-i-delete_prefixed","(prefix)",""],["delete_prefixed","ActiveStorage::Service::GCSService","classes/ActiveStorage/Service/GCSService.html#method-i-delete_prefixed","(prefix)",""],["delete_prefixed","ActiveStorage::Service::MirrorService","classes/ActiveStorage/Service/MirrorService.html#method-i-delete_prefixed","(prefix)","<p>Delete files at keys starting with the <code>prefix</code> on all services.\n"],["delete_prefixed","ActiveStorage::Service::S3Service","classes/ActiveStorage/Service/S3Service.html#method-i-delete_prefixed","(prefix)",""],["delete_session","ActionDispatch::Session::CacheStore","classes/ActionDispatch/Session/CacheStore.html#method-i-delete_session","(env, sid, options)","<p>Remove a session from the cache.\n"],["delete_session","ActionDispatch::Session::CookieStore","classes/ActionDispatch/Session/CookieStore.html#method-i-delete_session","(req, session_id, options)",""],["deliver","ActionMailer::LogSubscriber","classes/ActionMailer/LogSubscriber.html#method-i-deliver","(event)","<p>An email was delivered.\n"],["deliver_later","ActionMailer::MessageDelivery","classes/ActionMailer/MessageDelivery.html#method-i-deliver_later","(options = {})","<p>Enqueues the email to be delivered through Active Job. When the job runs it will send the email using â€¦\n"],["deliver_later!","ActionMailer::MessageDelivery","classes/ActionMailer/MessageDelivery.html#method-i-deliver_later-21","(options = {})","<p>Enqueues the email to be delivered through Active Job. When the job runs it will send the email using â€¦\n"],["deliver_now","ActionMailer::MessageDelivery","classes/ActionMailer/MessageDelivery.html#method-i-deliver_now","()","<p>Delivers an email:\n\n<pre><code>Notifier.welcome(User.first).deliver_now\n</code></pre>\n"],["deliver_now!","ActionMailer::MessageDelivery","classes/ActionMailer/MessageDelivery.html#method-i-deliver_now-21","()","<p>Delivers an email without checking <code>perform_deliveries</code> and <code>raise_delivery_errors</code>, so use with caution. â€¦\n"],["demodulize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-demodulize","(path)","<p>Removes the module part from the expression in the string.\n\n<pre><code>demodulize(&#39;ActiveSupport::Inflector::Inflections&#39;) ...\n</code></pre>\n"],["demodulize","String","classes/String.html#method-i-demodulize","()","<p>Removes the module part from the constant expression in the string.\n\n<pre><code>&#39;ActiveSupport::Inflector::Inflections&#39;.demodulize ...\n</code></pre>\n"],["dependency_digest","ActionView::Digestor::Node","classes/ActionView/Digestor/Node.html#method-i-dependency_digest","(finder, stack)",""],["deprecate","ActiveStorage::Attached::Model","classes/ActiveStorage/Attached/Model.html#method-i-deprecate","(action)",""],["deprecate","Module","classes/Module.html#method-i-deprecate","(*method_names)","\n<pre><code>deprecate :foo\ndeprecate bar: &#39;message&#39;\ndeprecate :foo, :bar, baz: &#39;warning!&#39;, qux: &#39;gone!&#39;\n</code></pre>\n<p>You can also â€¦\n"],["deprecate_constant","ActiveSupport::Deprecation::DeprecatedConstantAccessor","classes/ActiveSupport/Deprecation/DeprecatedConstantAccessor.html#method-i-deprecate_constant","(const_name, new_constant, message: nil, deprecator: ActiveSupport::Deprecation.instance)",""],["deprecate_methods","ActiveSupport::Deprecation::MethodWrapper","classes/ActiveSupport/Deprecation/MethodWrapper.html#method-i-deprecate_methods","(target_module, *method_names)","<p>Declare that a method has been deprecated.\n\n<pre><code>class Fred\n  def aaa; end\n  def bbb; end\n  def ccc; end\n  def ...\n</code></pre>\n"],["deprecation_warning","ActiveSupport::Deprecation::Reporting","classes/ActiveSupport/Deprecation/Reporting.html#method-i-deprecation_warning","(deprecated_method_name, message = nil, caller_backtrace = nil)",""],["derive_from","ActiveRecord::Encryption::Key","classes/ActiveRecord/Encryption/Key.html#method-c-derive_from","(password)",""],["derive_key_from","ActiveRecord::Encryption::KeyGenerator","classes/ActiveRecord/Encryption/KeyGenerator.html#method-i-derive_key_from","(password, length: key_length)","<p>Derives a key from the given password. The key will have a size in bytes of <code>:length</code> (configured <code>Cipher</code> â€¦\n"],["desc","Rails::API::Task","classes/Rails/API/Task.html#method-i-desc","(description)","<p>Hack, ignore the desc calls performed by the original initializer.\n"],["desc","Rails::Command::Base","classes/Rails/Command/Base.html#method-c-desc","(usage = nil, description = nil, options = {})","<p>Tries to get the description from a USAGE file one folder above the command root.\n"],["desc","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-desc","(description = nil)","<p>Tries to get the description from a USAGE file one folder above the source root otherwise uses a default â€¦\n"],["descendants","ActiveSupport::DescendantsTracker","classes/ActiveSupport/DescendantsTracker.html#method-c-descendants","(klass)",""],["descendants","ActiveSupport::DescendantsTracker","classes/ActiveSupport/DescendantsTracker.html#method-i-descendants","()",""],["descendants","Class","classes/Class.html#method-i-descendants","()","<p>Returns an array with all classes that are &lt; than its receiver.\n\n<pre><code>class C; end\nC.descendants # =&gt; [] ...\n</code></pre>\n"],["descends_from_active_record?","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-descends_from_active_record-3F","()","<p>Returns <code>true</code> if this does not need STI type condition. Returns <code>false</code> if STI type condition needs to be â€¦\n"],["deserialize","ActiveJob::Arguments","classes/ActiveJob/Arguments.html#method-i-deserialize","(arguments)","<p>Deserializes a set of arguments. Intrinsic types that can safely be deserialized without mutation are â€¦\n"],["deserialize","ActiveJob::Core","classes/ActiveJob/Core.html#method-i-deserialize","(job_data)","<p>Attaches the stored job data to the current instance. Receives a hash returned from <code>serialize</code>\n<p>Examples â€¦\n"],["deserialize","ActiveJob::Core::ClassMethods","classes/ActiveJob/Core/ClassMethods.html#method-i-deserialize","(job_data)","<p>Creates a new job instance from a hash created with <code>serialize</code>\n"],["deserialize","ActiveJob::Serializers::ObjectSerializer","classes/ActiveJob/Serializers/ObjectSerializer.html#method-i-deserialize","(json)","<p>Deserializes an argument from a JSON primitive type.\n"],["deserialize","ActiveJob::Serializers::RangeSerializer","classes/ActiveJob/Serializers/RangeSerializer.html#method-i-deserialize","(hash)",""],["deserialize","ActiveModel::Type::Value","classes/ActiveModel/Type/Value.html#method-i-deserialize","(value)","<p>Converts a value from database input to the appropriate ruby type. The return value of this method will â€¦\n"],["deserialize","ActiveModel::Type::Value","classes/ActiveModel/Type/Value.html#method-i-deserialize","(value)","<p>Converts a value from database input to the appropriate ruby type. The return value of this method will â€¦\n"],["deserialize","ActiveRecord::Encryption::EncryptedAttributeType","classes/ActiveRecord/Encryption/EncryptedAttributeType.html#method-i-deserialize","(value)",""],["deserialize","ActiveRecord::Type::Json","classes/ActiveRecord/Type/Json.html#method-i-deserialize","(value)",""],["destination","Rails::Generators::Testing::Behaviour::ClassMethods","classes/Rails/Generators/Testing/Behaviour/ClassMethods.html#method-i-destination","(path)","<p>Sets the destination of generator files:\n\n<pre><code>destination File.expand_path(&quot;../tmp&quot;, __dir__)\n</code></pre>\n"],["destroy","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-destroy","(*records)","<p>Destroys the <code>records</code> supplied and removes them from the collection. This method will <em>always</em> remove record â€¦\n"],["destroy","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-destroy","()","<p>Deletes the record in the database and freezes this instance to reflect that no changes should be made â€¦\n"],["destroy","ActiveRecord::Persistence::ClassMethods","classes/ActiveRecord/Persistence/ClassMethods.html#method-i-destroy","(id)","<p>Destroy an object (or multiple objects) that has the given id. The object is instantiated first, therefore â€¦\n"],["destroy","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-i-destroy","()","<p>DELETE destroy\n"],["destroy!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-destroy-21","()","<p>Deletes the record in the database and freezes this instance to reflect that no changes should be made â€¦\n"],["destroy_all","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-destroy_all","()","<p>Deletes the records of the collection directly from the database ignoring the <code>:dependent</code> option. Records â€¦\n"],["destroy_all","ActiveRecord::Batches::BatchEnumerator","classes/ActiveRecord/Batches/BatchEnumerator.html#method-i-destroy_all","()","<p>Destroys records in batches.\n\n<pre><code>Person.where(&quot;age &lt; 10&quot;).in_batches.destroy_all\n</code></pre>\n<p>See Relation#destroy_all for â€¦\n"],["destroy_all","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-destroy_all","()","<p>Destroys the records by instantiating each record and calling its #destroy method. Each object&#39;s â€¦\n"],["destroy_by","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-destroy_by","(*args)","<p>Finds and destroys all records matching the specified conditions. This is short-hand for <code>relation.where(condition).destroy_all</code> â€¦\n"],["destroyed?","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-destroyed-3F","()","<p>Returns true if this object has been destroyed, otherwise returns false.\n"],["destroyed_by_association","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-destroyed_by_association","()","<p>Returns the association for the parent being destroyed.\n<p>Used to avoid updating the counter cache unnecessarily. â€¦\n"],["destroyed_by_association=","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-destroyed_by_association-3D","(reflection)","<p>Records the association that is being destroyed and destroying this record in the process.\n"],["detach","ActionCable::Connection::StreamEventLoop","classes/ActionCable/Connection/StreamEventLoop.html#method-i-detach","(io, stream)",""],["detach","ActiveStorage::Attached::Many","classes/ActiveStorage/Attached/Many.html#method-i-detach","","<p>Deletes associated attachments without purging them, leaving their respective blobs in place.\n"],["detach","ActiveStorage::Attached::One","classes/ActiveStorage/Attached/One.html#method-i-detach","","<p>Deletes the attachment without purging it, leaving its blob in place.\n"],["detach_from","ActiveSupport::Subscriber","classes/ActiveSupport/Subscriber.html#method-c-detach_from","(namespace, notifier = ActiveSupport::Notifications)","<p>Detach the subscriber from a namespace.\n"],["detail","ActiveModel::Error","classes/ActiveModel/Error.html#method-i-detail","()",""],["detail_args_for","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-detail_args_for","(options)","<p>Compute details hash and key according to user options (e.g. passed from #render).\n"],["details","ActiveModel::Error","classes/ActiveModel/Error.html#method-i-details","()","<p>Returns the error details.\n\n<pre><code>error = ActiveModel::Error.new(person, :name, :too_short, count: 5)\nerror.details ...\n</code></pre>\n"],["details","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-details","()","<p>Returns a Hash of attributes with an array of their error details.\n"],["details_for_lookup","ActionView::ViewPaths","classes/ActionView/ViewPaths.html#method-i-details_for_lookup","()",""],["determine_default_channel","ActionCable::Channel::TestCase::Behavior::ClassMethods","classes/ActionCable/Channel/TestCase/Behavior/ClassMethods.html#method-i-determine_default_channel","(name)",""],["determine_default_connection","ActionCable::Connection::TestCase::Behavior::ClassMethods","classes/ActionCable/Connection/TestCase/Behavior/ClassMethods.html#method-i-determine_default_connection","(name)",""],["determine_default_controller_class","ActionController::TestCase::Behavior::ClassMethods","classes/ActionController/TestCase/Behavior/ClassMethods.html#method-i-determine_default_controller_class","(name)",""],["determine_default_helper_class","ActionView::TestCase::Behavior::ClassMethods","classes/ActionView/TestCase/Behavior/ClassMethods.html#method-i-determine_default_helper_class","(name)",""],["determine_default_mailer","ActionMailer::TestCase::Behavior::ClassMethods","classes/ActionMailer/TestCase/Behavior/ClassMethods.html#method-i-determine_default_mailer","(name)",""],["deterministic?","ActiveRecord::Encryption::Scheme","classes/ActiveRecord/Encryption/Scheme.html#method-i-deterministic-3F","()",""],["deterministic_encrypted_attributes","ActiveRecord::Encryption::EncryptableRecord","classes/ActiveRecord/Encryption/EncryptableRecord.html#method-i-deterministic_encrypted_attributes","()","<p>Returns the list of deterministic encryptable attributes in the model class.\n"],["dig","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-dig","(*keys)","<p>Extracts the nested parameter from the given <code>keys</code> by calling <code>dig</code> at each step. Returns <code>nil</code> if any intermediate â€¦\n"],["dig","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-dig","(*args)","<p>Same as <code>Hash#dig</code> where the key passed as argument can be either a string or a symbol:\n\n<pre><code>counters = ActiveSupport::HashWithIndifferentAccess.new ...\n</code></pre>\n"],["dig","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-dig","(*args)","<p>Same as <code>Hash#dig</code> where the key passed as argument can be either a string or a symbol:\n\n<pre><code>counters = ActiveSupport::HashWithIndifferentAccess.new ...\n</code></pre>\n"],["digest","ActionView::Digestor","classes/ActionView/Digestor.html#method-c-digest","(name:, format: nil, finder:, dependencies: nil)","<p>Supported options:\n<p><code>name</code>         - Template name\n<p><code>format</code>       - Template format\n"],["digest","ActionView::Digestor::Injected","classes/ActionView/Digestor/Injected.html#method-i-digest","(finder, _ = [])",""],["digest","ActionView::Digestor::Missing","classes/ActionView/Digestor/Missing.html#method-i-digest","(finder, _ = [])",""],["digest","ActionView::Digestor::Node","classes/ActionView/Digestor/Node.html#method-i-digest","(finder, stack = [])",""],["digest","ActiveStorage::Variation","classes/ActiveStorage/Variation.html#method-i-digest","()",""],["direct","ActionDispatch::Routing::Mapper::CustomUrls","classes/ActionDispatch/Routing/Mapper/CustomUrls.html#method-i-direct","(name, options = {}, &block)","<p>Define custom URL helpers that will be added to the application&#39;s routes. This allows you to override â€¦\n"],["direct_descendants","ActiveSupport::DescendantsTracker","classes/ActiveSupport/DescendantsTracker.html#method-c-direct_descendants","(klass)",""],["direct_descendants","ActiveSupport::DescendantsTracker","classes/ActiveSupport/DescendantsTracker.html#method-i-direct_descendants","()",""],["directories","Rails::SourceAnnotationExtractor::Annotation","classes/Rails/SourceAnnotationExtractor/Annotation.html#method-c-directories","()",""],["dirties_query_cache","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-c-dirties_query_cache","(base, *method_names)",""],["disable_cache","ActionView::LookupContext::DetailsCache","classes/ActionView/LookupContext/DetailsCache.html#method-i-disable_cache","()","<p>Temporary skip passing the details_key forward.\n"],["disable_ddl_transaction!","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-c-disable_ddl_transaction-21","()","<p>Disable the transaction wrapping this migration. You can still create your own transactions even after â€¦\n"],["disable_extension","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-disable_extension","(name)","<p>This is meant to be implemented by the adapters that support extensions\n"],["disable_extension","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-disable_extension","(name)",""],["disable_query_cache!","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-disable_query_cache-21","()",""],["disable_query_cache!","ActiveRecord::ConnectionAdapters::QueryCache::ConnectionPoolConfiguration","classes/ActiveRecord/ConnectionAdapters/QueryCache/ConnectionPoolConfiguration.html#method-i-disable_query_cache-21","()",""],["disable_referential_integrity","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-disable_referential_integrity","()","<p>Override to turn off referential integrity while executing <code>&amp;block</code>.\n"],["disable_test_adapter","ActiveJob::TestHelper::TestQueueAdapter::ClassMethods","classes/ActiveJob/TestHelper/TestQueueAdapter/ClassMethods.html#method-i-disable_test_adapter","()",""],["disallowed_behavior","ActiveSupport::Deprecation::Behavior","classes/ActiveSupport/Deprecation/Behavior.html#method-i-disallowed_behavior","()","<p>Returns the current behavior for disallowed deprecations or if one isn&#39;t set, defaults to <code>:raise</code> â€¦\n"],["disallowed_behavior=","ActiveSupport::Deprecation::Behavior","classes/ActiveSupport/Deprecation/Behavior.html#method-i-disallowed_behavior-3D","(behavior)","<p>Sets the behavior for disallowed deprecations (those configured by ActiveSupport::Deprecation.disallowed_warnings= â€¦\n"],["disallowed_warnings","ActiveSupport::Deprecation::Disallowed","classes/ActiveSupport/Deprecation/Disallowed.html#method-i-disallowed_warnings","()","<p>Returns the configured criteria used to identify deprecation messages which should be treated as disallowed. â€¦\n"],["discard","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-discard","(k = nil)","<p>Marks the entire flash or a single flash entry to be discarded by the end of the current action:\n\n<pre><code>flash.discard ...\n</code></pre>\n"],["discard!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-discard-21","()","<p>Immediately forget this connection ever existed. Unlike disconnect!, this will not communicate with the â€¦\n"],["discard_on","ActiveJob::Exceptions::ClassMethods","classes/ActiveJob/Exceptions/ClassMethods.html#method-i-discard_on","(*exceptions)","<p>Discard the job with no attempts to retry, if the exception is raised. This is useful when the subject â€¦\n"],["disconnect","ActionCable::Connection::TestCase::Behavior","classes/ActionCable/Connection/TestCase/Behavior.html#method-i-disconnect","()","<p>Exert #disconnect on the connection under test.\n"],["disconnect","ActionCable::RemoteConnections::RemoteConnection","classes/ActionCable/RemoteConnections/RemoteConnection.html#method-i-disconnect","()","<p>Uses the internal channel to disconnect the connection.\n"],["disconnect","ActionCable::Server::Base","classes/ActionCable/Server/Base.html#method-i-disconnect","(identifiers)","<p>Disconnect all the connections identified by <code>identifiers</code> on this server or any others via RemoteConnections â€¦\n"],["disconnect","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-disconnect","(raise_on_acquisition_timeout = true)","<p>Disconnects all connections in the pool, and clears the pool.\n<p>Raises:\n<p>ActiveRecord::ExclusiveConnectionTimeoutError â€¦\n"],["disconnect!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method does nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-disconnect-21","()","<p>Disconnects all connections in the pool, and clears the pool.\n<p>The pool first tries to gain ownership of â€¦\n"],["disconnect!","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method does nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method does nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method does nothing.\n"],["dispatch","ActionController::Metal","classes/ActionController/Metal.html#method-c-dispatch","(name, req, res)","<p>Direct dispatch to the controller. Instantiates the controller, then executes the action named <code>name</code>. â€¦\n"],["display","Rails::SourceAnnotationExtractor","classes/Rails/SourceAnnotationExtractor.html#method-i-display","(results, options = {})","<p>Prints the mapping from filenames to annotations in <code>results</code> ordered by filename. The <code>options</code> hash is â€¦\n"],["distance_of_time_in_words","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-distance_of_time_in_words","(from_time, to_time = 0, options = {})","<p>Reports the approximate distance in time between two Time, Date, or DateTime objects or integers as seconds. â€¦\n"],["distance_of_time_in_words_to_now","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-distance_of_time_in_words_to_now","(from_time, options = {})",""],["distinct","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-distinct","","<p>Specifies whether the records should be unique or not.\n\n<pre><code>class Person &lt; ActiveRecord::Base\n  has_many :pets ...\n</code></pre>\n"],["distinct","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-distinct","(value = true)","<p>Specifies whether the records should be unique or not. For example:\n\n<pre><code>User.select(:name)\n# Might return ...\n</code></pre>\n"],["document_root_element","ActionDispatch::IntegrationTest::Behavior","classes/ActionDispatch/IntegrationTest/Behavior.html#method-i-document_root_element","()",""],["dom_class","ActionView::RecordIdentifier","classes/ActionView/RecordIdentifier.html#method-i-dom_class","(record_or_class, prefix = nil)","<p>The DOM class convention is to use the singular form of an object or class.\n\n<pre><code>dom_class(post)   # =&gt; &quot;post&quot; ...\n</code></pre>\n"],["dom_id","ActionView::RecordIdentifier","classes/ActionView/RecordIdentifier.html#method-i-dom_id","(record, prefix = nil)","<p>The DOM id convention is to use the singular form of an object or class with the id following an underscore. â€¦\n"],["domain","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-domain","(tld_length = @@tld_length)","<p>Returns the domain part of a host, such as â€œrubyonrails.orgâ€ in â€œwww.rubyonrails.orgâ€. â€¦\n"],["done_running","ActiveSupport::Dependencies::Interlock","classes/ActiveSupport/Dependencies/Interlock.html#method-i-done_running","()",""],["done_unloading","ActiveSupport::Dependencies::Interlock","classes/ActiveSupport/Dependencies/Interlock.html#method-i-done_unloading","()",""],["down","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-down","()",""],["downcase?","ActiveRecord::Encryption::Scheme","classes/ActiveRecord/Encryption/Scheme.html#method-i-downcase-3F","()",""],["download","ActiveStorage::Blob","classes/ActiveStorage/Blob.html#method-i-download","(&block)","<p>Downloads the file associated with this blob. If no block is given, the entire file is read into memory â€¦\n"],["download","ActiveStorage::Preview","classes/ActiveStorage/Preview.html#method-i-download","(&block)","<p>Downloads the file associated with this preview&#39;s variant. If no block is given, the entire file â€¦\n"],["download","ActiveStorage::Service","classes/ActiveStorage/Service.html#method-i-download","(key)","<p>Return the content of the file at the <code>key</code>.\n"],["download","ActiveStorage::Service::AzureStorageService","classes/ActiveStorage/Service/AzureStorageService.html#method-i-download","(key, &block)",""],["download","ActiveStorage::Service::DiskService","classes/ActiveStorage/Service/DiskService.html#method-i-download","(key, &block)",""],["download","ActiveStorage::Service::GCSService","classes/ActiveStorage/Service/GCSService.html#method-i-download","(key, &block)",""],["download","ActiveStorage::Service::S3Service","classes/ActiveStorage/Service/S3Service.html#method-i-download","(key, &block)",""],["download","ActiveStorage::Variant","classes/ActiveStorage/Variant.html#method-i-download","(&block)","<p>Downloads the file associated with this variant. If no block is given, the entire file is read into memory â€¦\n"],["download_blob_to_tempfile","ActiveStorage::Analyzer","classes/ActiveStorage/Analyzer.html#method-i-download_blob_to_tempfile","(&block)","<p>Downloads the blob to a tempfile on disk. Yields the tempfile.\n"],["download_blob_to_tempfile","ActiveStorage::Previewer","classes/ActiveStorage/Previewer.html#method-i-download_blob_to_tempfile","(&block)","<p>Downloads the blob to a tempfile on disk. Yields the tempfile.\n"],["download_chunk","ActiveStorage::Blob","classes/ActiveStorage/Blob.html#method-i-download_chunk","(range)","<p>Downloads a part of the file associated with this blob.\n"],["download_chunk","ActiveStorage::Service","classes/ActiveStorage/Service.html#method-i-download_chunk","(key, range)","<p>Return the partial content in the byte <code>range</code> of the file at the <code>key</code>.\n"],["download_chunk","ActiveStorage::Service::AzureStorageService","classes/ActiveStorage/Service/AzureStorageService.html#method-i-download_chunk","(key, range)",""],["download_chunk","ActiveStorage::Service::DiskService","classes/ActiveStorage/Service/DiskService.html#method-i-download_chunk","(key, range)",""],["download_chunk","ActiveStorage::Service::GCSService","classes/ActiveStorage/Service/GCSService.html#method-i-download_chunk","(key, range)",""],["download_chunk","ActiveStorage::Service::S3Service","classes/ActiveStorage/Service/S3Service.html#method-i-download_chunk","(key, range)",""],["draw","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-draw","(name)",""],["draw","ActiveStorage::Previewer","classes/ActiveStorage/Previewer.html#method-i-draw","(*argv)","<p>Executes a system command, capturing its binary output in a tempfile. Yields the tempfile.\n<p>Use this method â€¦\n"],["driven_by","ActionDispatch::SystemTestCase","classes/ActionDispatch/SystemTestCase.html#method-c-driven_by","(driver, using: :chrome, screen_size: [1400, 1400], options: {}, &capabilities)","<p>System Test configuration options\n<p>The default settings are Selenium, using Chrome, with a screen size â€¦\n"],["drop","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-drop","(configuration, *arguments)",""],["drop_all","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-drop_all","()",""],["drop_current","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-drop_current","(environment = env)",""],["drop_join_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-drop_join_table","(table_1, table_2, **options)","<p>Drops the join table specified by the given arguments. See #create_join_table for details.\n<p>Although this â€¦\n"],["drop_schema","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-drop_schema","(schema_name, **options)","<p>Drops the schema for the given schema name.\n"],["drop_table","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-drop_table","(table_name, **options)","<p>Drops a table from the database.\n<p><code>:force</code> &mdash; Set to <code>:cascade</code> to drop dependent objects as well. Defaults to â€¦\n"],["drop_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-drop_table","(table_name, **options)","<p>Drops a table from the database.\n<p><code>:force</code> &mdash; Set to <code>:cascade</code> to drop dependent objects as well. Defaults to â€¦\n"],["dst?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-dst-3F","()","<p>Returns true if the current time is within Daylight Savings Time for the specified time zone.\n\n<pre><code>Time.zone ...\n</code></pre>\n"],["dump","ActionText::Serialization","classes/ActionText/Serialization.html#method-i-dump","(content)",""],["dump","ActiveRecord::Encryption::MessageSerializer","classes/ActiveRecord/Encryption/MessageSerializer.html#method-i-dump","(message)",""],["dump","ActiveSupport::Cache::Coders::Rails61Coder","classes/ActiveSupport/Cache/Coders/Rails61Coder.html#method-i-dump","(entry)",""],["dump","ActiveSupport::Cache::Coders::Rails70Coder","classes/ActiveSupport/Cache/Coders/Rails70Coder.html#method-i-dump","(entry)",""],["dump","ActiveSupport::Cache::MemCacheStore::Coders::Rails61Coder","classes/ActiveSupport/Cache/MemCacheStore/Coders/Rails61Coder.html#method-i-dump","(entry)",""],["dump_compressed","ActiveSupport::Cache::Coders::Rails61Coder","classes/ActiveSupport/Cache/Coders/Rails61Coder.html#method-i-dump_compressed","(entry, threshold)",""],["dump_compressed","ActiveSupport::Cache::Coders::Rails70Coder","classes/ActiveSupport/Cache/Coders/Rails70Coder.html#method-i-dump_compressed","(entry, threshold)",""],["dump_compressed","ActiveSupport::Cache::MemCacheStore::Coders::Rails61Coder","classes/ActiveSupport/Cache/MemCacheStore/Coders/Rails61Coder.html#method-i-dump_compressed","(entry, threshold)",""],["dump_schema_cache","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-dump_schema_cache","(conn, filename)","<p>Dumps the schema cache in YAML format for the connection into the file\n<p>Examples:\n\n<pre><code>ActiveRecord::Tasks::DatabaseTasks.dump_schema_cache(ActiveRecord::Base.connection, ...\n</code></pre>\n"],["dump_to","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-dump_to","(filename)",""],["dup","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-dup","","<p>Duped objects have no id assigned and are treated as new records. Note that this is a â€œshallowâ€ â€¦\n"],["dup","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-dup","()","<p>Returns a shallow copy of the hash.\n\n<pre><code>hash = ActiveSupport::HashWithIndifferentAccess.new({ a: { b: &#39;b&#39; ...\n</code></pre>\n"],["dup","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-dup","()","<p>Returns a shallow copy of the hash.\n\n<pre><code>hash = ActiveSupport::HashWithIndifferentAccess.new({ a: { b: &#39;b&#39; ...\n</code></pre>\n"],["duplicable?","Method","classes/Method.html#method-i-duplicable-3F","()","<p>Methods are not duplicable:\n\n<pre><code>method(:puts).duplicable? # =&gt; false\nmethod(:puts).dup         # =&gt; TypeError: ...\n</code></pre>\n"],["duplicable?","Object","classes/Object.html#method-i-duplicable-3F","()","<p>Can you safely dup this object?\n<p>False for method objects; true otherwise.\n"],["duplicable?","Singleton","classes/Singleton.html#method-i-duplicable-3F","()","<p>Singleton instances are not duplicable:\n<p>Class.new.include(Singleton).instance.dup # TypeError (can&#39;t â€¦\n"],["duplicable?","UnboundMethod","classes/UnboundMethod.html#method-i-duplicable-3F","()","<p>Unbound methods are not duplicable:\n\n<pre><code>method(:puts).unbind.duplicable? # =&gt; false\nmethod(:puts).unbind.dup ...\n</code></pre>\n"],["duration","ActiveSupport::Notifications::Event","classes/ActiveSupport/Notifications/Event.html#method-i-duration","()","<p>Returns the difference in milliseconds between when the execution of the event started and when it ended. â€¦\n"],["each","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-each","(&block)",""],["each","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-each","(&block)",""],["each","ActionDispatch::Http::Headers","classes/ActionDispatch/Http/Headers.html#method-i-each","(&block)",""],["each","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-each","(&block)",""],["each","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-each","(&block)",""],["each","ActionDispatch::Response::RackBody","classes/ActionDispatch/Response/RackBody.html#method-i-each","(*args, &block)",""],["each","ActiveRecord::Batches::BatchEnumerator","classes/ActiveRecord/Batches/BatchEnumerator.html#method-i-each","(&block)","<p>Yields an ActiveRecord::Relation object for each batch of records.\n\n<pre><code>Person.in_batches.each do |relation| ...\n</code></pre>\n"],["each","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-i-each","(&block)",""],["each","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-i-each","(&block)","<p>Calls the given block once for each element in row collection, passing row as parameter.\n<p>Returns an <code>Enumerator</code> â€¦\n"],["each","Mime::Mimes","classes/Mime/Mimes.html#method-i-each","(&block)",""],["each","Rails::Engine::Railties","classes/Rails/Engine/Railties.html#method-i-each","(*args, &block)",""],["each","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-each","(&block)",""],["each_key","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-each_key","","<p>Calls block once for each key in the parameters, passing the key. If no block is given, an enumerator â€¦\n"],["each_nested_attribute","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-each_nested_attribute","()",""],["each_pair","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-each_pair","(&block)","<p>Convert all hashes in values into parameters, then yield each pair in the same way as <code>Hash#each_pair</code> â€¦\n"],["each_record","ActiveRecord::Batches::BatchEnumerator","classes/ActiveRecord/Batches/BatchEnumerator.html#method-i-each_record","(&block)","<p>Looping through a collection of records from the database (using the <code>all</code> method, for example) is very â€¦\n"],["each_value","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-each_value","(&block)","<p>Convert all hashes in values into parameters, then yield each value in the same way as <code>Hash#each_value</code> â€¦\n"],["eager_autoload","ActiveSupport::Autoload","classes/ActiveSupport/Autoload.html#method-i-eager_autoload","()",""],["eager_load","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-eager_load","(*args)","<p>Forces eager loading by performing a LEFT OUTER JOIN on <code>args</code>:\n\n<pre><code>User.eager_load(:posts)\n# SELECT &quot;users&quot;.&quot;id&quot; ...\n</code></pre>\n"],["eager_load","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-eager_load","()",""],["eager_load!","ActiveRecord::Encryption","classes/ActiveRecord/Encryption.html#method-c-eager_load-21","()",""],["eager_load!","ActiveSupport::Autoload","classes/ActiveSupport/Autoload.html#method-i-eager_load-21","()",""],["eager_load!","Rails::Application","classes/Rails/Application.html#method-i-eager_load-21","()","<p>Eager loads the application code.\n"],["eager_load!","Rails::Engine","classes/Rails/Engine.html#method-i-eager_load-21","()",""],["eager_load_namespaces","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-eager_load_namespaces","()","<p>All namespaces that are eager loaded\n"],["eager_load_paths","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-eager_load_paths","()",""],["eager_loading?","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-eager_loading-3F","()","<p>Returns true if relation needs eager loading.\n"],["edit_helper","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-edit_helper","(...)",""],["email_address_with_name","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-email_address_with_name","(address, name)","<p>Returns an email in the format â€œName &lt;email@example.com&gt;â€.\n<p>If the name is a blank string, â€¦\n"],["email_address_with_name","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-email_address_with_name","(address, name)","<p>Returns an email in the format â€œName &lt;email@example.com&gt;â€.\n<p>If the name is a blank string, â€¦\n"],["email_exists?","ActionMailer::Preview","classes/ActionMailer/Preview.html#method-c-email_exists-3F","(email)","<p>Returns <code>true</code> if the email exists.\n"],["email_field","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-email_field","","<p>Wraps ActionView::Helpers::FormHelper#email_field for form builders:\n\n<pre><code>&lt;%= form_with model: @user do |f| ...\n</code></pre>\n"],["email_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-email_field","(object_name, method, options = {})","<p>Returns a text_field of type â€œemailâ€.\n\n<pre><code>email_field(&quot;user&quot;, &quot;address&quot;)\n# =&gt; &lt;input id=&quot;user_address&quot; ...\n</code></pre>\n"],["email_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-email_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type â€œemailâ€.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],["emails","ActionMailer::Preview","classes/ActionMailer/Preview.html#method-c-emails","()","<p>Returns all of the available email previews.\n"],["empty","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-c-empty","()",""],["empty?","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-empty-3F","","<p>Returns true if the parameters have no key/value pairs.\n"],["empty?","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-empty-3F","()",""],["empty?","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-empty-3F","()","<p>Returns <code>true</code> if the collection is empty. If the collection has been loaded it is equivalent to <code>collection.size.zero?</code> â€¦\n"],["empty?","ActiveRecord::DatabaseConfigurations","classes/ActiveRecord/DatabaseConfigurations.html#method-i-empty-3F","()","<p>Checks if the application&#39;s configurations are empty.\n<p>Aliased to blank?\n"],["empty?","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-empty-3F","()","<p>Returns true if there are no records.\n"],["empty?","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-i-empty-3F","()","<p>Returns true if there are no records, otherwise false.\n"],["empty_insert_statement_value","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-empty_insert_statement_value","(primary_key = nil)",""],["emulate_booleans","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-c-emulate_booleans","","<p>By default, the Mysql2Adapter will consider all columns of type <code>tinyint(1)</code> as boolean. If you wish to â€¦\n"],["enable_extension","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-enable_extension","(name)","<p>This is meant to be implemented by the adapters that support extensions\n"],["enable_extension","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-enable_extension","(name)",""],["enable_query_cache!","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-enable_query_cache-21","()",""],["enable_query_cache!","ActiveRecord::ConnectionAdapters::QueryCache::ConnectionPoolConfiguration","classes/ActiveRecord/ConnectionAdapters/QueryCache/ConnectionPoolConfiguration.html#method-i-enable_query_cache-21","()",""],["enable_test_adapter","ActiveJob::TestHelper::TestQueueAdapter::ClassMethods","classes/ActiveJob/TestHelper/TestQueueAdapter/ClassMethods.html#method-i-enable_test_adapter","(test_adapter)",""],["enable_warnings","Kernel","classes/Kernel.html#method-i-enable_warnings","(&block)","<p>Sets $VERBOSE to <code>true</code> for the duration of the block and back to its original value afterwards.\n"],["encode","ActiveStorage::Variation","classes/ActiveStorage/Variation.html#method-c-encode","(transformations)","<p>Returns a signed key for the <code>transformations</code>, which can be used to refer to a specific variation in a â€¦\n"],["encode","ActiveSupport::JSON","classes/ActiveSupport/JSON.html#method-c-encode","(value, options = nil)","<p>Dumps objects in JSON (JavaScript Object Notation). See www.json.org for more info.\n\n<pre><code>ActiveSupport::JSON.encode({ ...\n</code></pre>\n"],["encode!","ActionView::Template","classes/ActionView/Template.html#method-i-encode-21","()","<p>This method is responsible for properly setting the encoding of the source. Until this point, we assume â€¦\n"],["encode_credentials","ActionController::HttpAuthentication::Basic","classes/ActionController/HttpAuthentication/Basic.html#method-i-encode_credentials","(user_name, password)",""],["encode_credentials","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-encode_credentials","(http_method, credentials, password, password_is_ha1)",""],["encode_credentials","ActionController::HttpAuthentication::Token","classes/ActionController/HttpAuthentication/Token.html#method-i-encode_credentials","(token, options = {})","<p>Encodes the given token and options into an Authorization header value.\n<p>Returns String.\n<p>Parameters\n"],["encode_params","ActionDispatch::RequestEncoder::IdentityEncoder","classes/ActionDispatch/RequestEncoder/IdentityEncoder.html#method-i-encode_params","(params)",""],["encode_with","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-encode_with","(coder)",""],["encode_with","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-encode_with","(coder)","<p>Populate <code>coder</code> with attributes about this record that should be serialized. The structure of <code>coder</code> defined â€¦\n"],["encode_with","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-encode_with","(coder)","<p>Serializes the relation objects Array.\n"],["encode_with","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-encode_with","(coder)",""],["encoding","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-encoding","()","<p>Returns the current database encoding format.\n"],["encoding","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-encoding","()","<p>Returns the current database encoding format as a string, e.g. &#39;UTF-8&#39;\n"],["encoding=","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-encoding-3D","(value)",""],["encrypt","ActionText::Encryption","classes/ActionText/Encryption.html#method-i-encrypt","()",""],["encrypt","ActiveRecord::Encryption::Cipher","classes/ActiveRecord/Encryption/Cipher.html#method-i-encrypt","(clean_text, key:, deterministic: false)","<p>Encrypts the provided text and return an encrypted <code>Message</code>.\n"],["encrypt","ActiveRecord::Encryption::Cipher::Aes256Gcm","classes/ActiveRecord/Encryption/Cipher/Aes256Gcm.html#method-i-encrypt","(clear_text)",""],["encrypt","ActiveRecord::Encryption::EncryptableRecord","classes/ActiveRecord/Encryption/EncryptableRecord.html#method-i-encrypt","()","<p>Encrypts all the encryptable attributes and saves the changes.\n"],["encrypt","ActiveRecord::Encryption::Encryptor","classes/ActiveRecord/Encryption/Encryptor.html#method-i-encrypt","(clear_text, key_provider: default_key_provider, cipher_options: {})","<p>Encrypts <code>clean_text</code> and returns the encrypted result\n<p>Internally, it will:\n<p>Create a new ActiveRecord::Encryption::Message â€¦\n"],["encrypt","ActiveRecord::Encryption::NullEncryptor","classes/ActiveRecord/Encryption/NullEncryptor.html#method-i-encrypt","(clean_text, key_provider: nil, cipher_options: {})",""],["encrypt","ActiveRecord::Encryption::ReadOnlyNullEncryptor","classes/ActiveRecord/Encryption/ReadOnlyNullEncryptor.html#method-i-encrypt","(clean_text, key_provider: nil, cipher_options: {})",""],["encrypt_and_sign","ActiveSupport::MessageEncryptor","classes/ActiveSupport/MessageEncryptor.html#method-i-encrypt_and_sign","(value, expires_at: nil, expires_in: nil, purpose: nil)","<p>Encrypt and sign a message. We need to sign the message in order to avoid padding attacks. Reference: â€¦\n"],["encrypt_attribute","ActiveRecord::Encryption::EncryptableRecord","classes/ActiveRecord/Encryption/EncryptableRecord.html#method-i-encrypt_attribute","(name, attribute_scheme)",""],["encrypted","ActionCable::Connection::TestCookieJar","classes/ActionCable/Connection/TestCookieJar.html#method-i-encrypted","()",""],["encrypted","ActionDispatch::Cookies::ChainedCookieJars","classes/ActionDispatch/Cookies/ChainedCookieJars.html#method-i-encrypted","()","<p>Returns a jar that&#39;ll automatically encrypt cookie values before sending them to the client and will â€¦\n"],["encrypted","Rails::Application","classes/Rails/Application.html#method-i-encrypted","(path, key_path: \"config/master.key\", env_key: \"RAILS_MASTER_KEY\")","<p>Shorthand to decrypt any encrypted configurations or files.\n<p>For any file added with <code>rails encrypted:edit</code> â€¦\n"],["encrypted?","ActiveRecord::Encryption::Encryptor","classes/ActiveRecord/Encryption/Encryptor.html#method-i-encrypted-3F","(text)","<p>Returns whether the text is encrypted or not\n"],["encrypted?","ActiveRecord::Encryption::NullEncryptor","classes/ActiveRecord/Encryption/NullEncryptor.html#method-i-encrypted-3F","(text)",""],["encrypted?","ActiveRecord::Encryption::ReadOnlyNullEncryptor","classes/ActiveRecord/Encryption/ReadOnlyNullEncryptor.html#method-i-encrypted-3F","(text)",""],["encrypted_attribute?","ActiveRecord::Encryption::EncryptableRecord","classes/ActiveRecord/Encryption/EncryptableRecord.html#method-i-encrypted_attribute-3F","(attribute_name)","<p>Returns whether a given attribute is encrypted or not.\n"],["encryption_aware_type_caster","ActiveRecord::Encryption::ExtendedDeterministicQueries::InWithAdditionalValues","classes/ActiveRecord/Encryption/ExtendedDeterministicQueries/InWithAdditionalValues.html#method-i-encryption_aware_type_caster","()",""],["encryption_key","ActiveRecord::Encryption::EnvelopeEncryptionKeyProvider","classes/ActiveRecord/Encryption/EnvelopeEncryptionKeyProvider.html#method-i-encryption_key","()",""],["encryption_key","ActiveRecord::Encryption::KeyProvider","classes/ActiveRecord/Encryption/KeyProvider.html#method-i-encryption_key","()","<p>Returns the first key in the list as the active key to perform encryptions\n<p>When <code>ActiveRecord::Encryption.config.store_key_references</code> â€¦\n"],["encrypts","ActiveRecord::Encryption::EncryptableRecord","classes/ActiveRecord/Encryption/EncryptableRecord.html#method-i-encrypts","(*names, key_provider: nil, key: nil, deterministic: false, downcase: false, ignore_case: false, previous: [], **context_properties)","<p>Encrypts the <code>name</code> attribute.\n<p>Options\n<p><code>:key_provider</code> - A key provider to provide encryption and decryption â€¦\n"],["end_document","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-end_document","()",""],["end_element","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-end_element","(name)",""],["end_of_day","Date","classes/Date.html#method-i-end_of_day","()","<p>Converts Date to a Time (or DateTime if necessary) with the time portion set to the end of the day (23:59:59) â€¦\n"],["end_of_day","DateTime","classes/DateTime.html#method-i-end_of_day","()","<p>Returns a new DateTime representing the end of the day (23:59:59).\n"],["end_of_day","Time","classes/Time.html#method-i-end_of_day","()","<p>Returns a new Time representing the end of the day, 23:59:59.999999\n"],["end_of_hour","DateTime","classes/DateTime.html#method-i-end_of_hour","()","<p>Returns a new DateTime representing the end of the hour (hh:59:59).\n"],["end_of_hour","Time","classes/Time.html#method-i-end_of_hour","()","<p>Returns a new Time representing the end of the hour, x:59:59.999999\n"],["end_of_minute","DateTime","classes/DateTime.html#method-i-end_of_minute","()","<p>Returns a new DateTime representing the end of the minute (hh:mm:59).\n"],["end_of_minute","Time","classes/Time.html#method-i-end_of_minute","()","<p>Returns a new Time representing the end of the minute, x:xx:59.999999\n"],["end_of_month","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-end_of_month","()","<p>Returns a new date/time representing the end of the month. DateTime objects will have a time set to 23:59:59. â€¦\n"],["end_of_quarter","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-end_of_quarter","()","<p>Returns a new date/time at the end of the quarter.\n\n<pre><code>today = Date.today # =&gt; Fri, 10 Jul 2015\ntoday.end_of_quarter ...\n</code></pre>\n"],["end_of_week","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-end_of_week","(start_day = Date.beginning_of_week)","<p>Returns a new date/time representing the end of this week on the given day. Week is assumed to start â€¦\n"],["end_of_year","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-end_of_year","()","<p>Returns a new date/time representing the end of the year. DateTime objects will have a time set to 23:59:59. â€¦\n"],["endpoint","Rails::Engine","classes/Rails/Engine.html#method-c-endpoint","(endpoint = nil)",""],["endpoint","Rails::Engine","classes/Rails/Engine.html#method-i-endpoint","()","<p>Returns the endpoint for this engine. If none is registered, defaults to an ActionDispatch::Routing::RouteSet â€¦\n"],["engine?","Rails::Command::Base","classes/Rails/Command/Base.html#method-c-engine-3F","()","<p>Returns true when the app is a Rails engine.\n"],["enlist_fixture_connections","ActiveRecord::TestFixtures","classes/ActiveRecord/TestFixtures.html#method-i-enlist_fixture_connections","()",""],["enqueue","ActiveJob::Enqueuing","classes/ActiveJob/Enqueuing.html#method-i-enqueue","(options = {})","<p>Enqueues the job to be performed by the queue adapter.\n<p>Options\n<p><code>:wait</code> - Enqueues the job with the specified â€¦\n"],["enqueued_jobs","ActiveJob::QueueAdapters::TestAdapter","classes/ActiveJob/QueueAdapters/TestAdapter.html#method-i-enqueued_jobs","()","<p>Provides a store of all the enqueued jobs with the TestAdapter so you can check them.\n"],["ensure_confirmation_sent","ActionCable::Channel::Base","classes/ActionCable/Channel/Base.html#method-i-ensure_confirmation_sent","()",""],["enum","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-enum","",""],["enum","ActiveRecord::Enum","classes/ActiveRecord/Enum.html#method-i-enum","(name = nil, values = nil, **options)",""],["enum_types","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-enum_types","()","<p>Returns a list of defined enum types, and their values.\n"],["enumerate","Rails::SourceAnnotationExtractor","classes/Rails/SourceAnnotationExtractor.html#method-c-enumerate","(tag = nil, options = {})","<p>Prints all annotations with tag <code>tag</code> under the root directories <code>app</code>, <code>config</code>, <code>db</code>, <code>lib</code>, and <code>test</code> (recursively). â€¦\n"],["env","ActionDispatch::Http::Headers","classes/ActionDispatch/Http/Headers.html#method-i-env","()",""],["env","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-env","()",""],["env","Rails","classes/Rails.html#method-c-env","()","<p>Returns the current Rails environment.\n\n<pre><code>Rails.env # =&gt; &quot;development&quot;\nRails.env.development? # =&gt; true\nRails.env.production? ...\n</code></pre>\n"],["env=","Rails","classes/Rails.html#method-c-env-3D","(environment)","<p>Sets the Rails environment.\n\n<pre><code>Rails.env = &quot;staging&quot; # =&gt; &quot;staging&quot;\n</code></pre>\n"],["env_config","Rails::Application","classes/Rails/Application.html#method-i-env_config","()","<p>Stores some of the Rails initial environment parameters which will be used by middlewares and engines â€¦\n"],["env_config","Rails::Engine","classes/Rails/Engine.html#method-i-env_config","()","<p>Defines additional Rack env configuration that is added on each call.\n"],["env_filter","ActionDispatch::Http::FilterParameters","classes/ActionDispatch/Http/FilterParameters.html#method-i-env_filter","()",""],["environment","Rails::Console","classes/Rails/Console.html#method-i-environment","()",""],["environment","Rails::DBConsole","classes/Rails/DBConsole.html#method-i-environment","()",""],["environment","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-environment","(data = nil, options = {})","<p>Adds a line inside the Application class for <code>config/application.rb</code>.\n<p>If options <code>:env</code> is specified, the â€¦\n"],["environment?","Rails::Console","classes/Rails/Console.html#method-i-environment-3F","()",""],["eof?","ActionDispatch::Http::UploadedFile","classes/ActionDispatch/Http/UploadedFile.html#method-i-eof-3F","()","<p>Shortcut for <code>tempfile.eof?</code>.\n"],["eql?","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-eql-3F","(other)",""],["eql?","ActionView::FileSystemResolver","classes/ActionView/FileSystemResolver.html#method-i-eql-3F","(resolver)",""],["eql?","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-eql-3F","","<p>Equivalent to <code>String#eql?</code>. Returns <code>true</code> if the class name and <code>other</code> have the same length and content, â€¦\n"],["eql?","ActiveModel::Type::Value","classes/ActiveModel/Type/Value.html#method-i-eql-3F","(other)",""],["eql?","ActiveModel::Type::Value","classes/ActiveModel/Type/Value.html#method-i-eql-3F","(other)",""],["eql?","ActiveRecord::Associations::Preloader::Association::LoaderQuery","classes/ActiveRecord/Associations/Preloader/Association/LoaderQuery.html#method-i-eql-3F","(other)",""],["eql?","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-eql-3F","(comparison_object)",""],["eql?","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-eql-3F","(other)","<p>Returns <code>true</code> if <code>other</code> is also a Duration instance, which has the same parts as this one.\n"],["eql?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-eql-3F","(other)","<p>Returns <code>true</code> if <code>other</code> is equal to current object.\n"],["eql?","Mime::Type","classes/Mime/Type.html#method-i-eql-3F","(other)",""],["eql?","Time","classes/Time.html#method-i-eql-3F","(other)",""],["eql_with_coercion","Time","classes/Time.html#method-i-eql_with_coercion","(other)","<p>Layers additional behavior on Time#eql? so that ActiveSupport::TimeWithZone instances can be eql? to â€¦\n"],["eql_without_coercion","Time","classes/Time.html#method-i-eql_without_coercion","(other)",""],["error","ActionView::Digestor::NullLogger","classes/ActionView/Digestor/NullLogger.html#method-c-error","(_)",""],["error","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-error","(error_message)",""],["error","Rails","classes/Rails.html#method-c-error","()",""],["error_message","ActionView::Helpers::ActiveModelInstanceTag","classes/ActionView/Helpers/ActiveModelInstanceTag.html#method-i-error_message","()",""],["error_number","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-error_number","(exception)",""],["error_reporter","ActiveSupport::ExecutionWrapper","classes/ActiveSupport/ExecutionWrapper.html#method-c-error_reporter","()",""],["error_wrapping","ActionView::Helpers::ActiveModelInstanceTag","classes/ActionView/Helpers/ActiveModelInstanceTag.html#method-i-error_wrapping","(html_tag)",""],["errors","ActiveModel::Validations","classes/ActiveModel/Validations.html#method-i-errors","()","<p>Returns the <code>Errors</code> object that holds all information about attribute error messages.\n\n<pre><code>class Person\n  include ...\n</code></pre>\n"],["errors","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-i-errors","()","<p>POST create PATCH/PUT update\n"],["escape_bytea","ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/Quoting.html#method-i-escape_bytea","(value)","<p>Escapes binary strings for bytea input to the database.\n"],["escape_javascript","ActionView::Helpers::JavaScriptHelper","classes/ActionView/Helpers/JavaScriptHelper.html#method-i-escape_javascript","(javascript)","<p>Escapes carriage returns and single and double quotes for JavaScript segments.\n<p>Also available through â€¦\n"],["escape_once","ActionView::Helpers::TagHelper","classes/ActionView/Helpers/TagHelper.html#method-i-escape_once","(html)","<p>Returns an escaped version of <code>html</code> without affecting existing escaped entities.\n\n<pre><code>escape_once(&quot;1 &lt; 2 &amp;amp; ...\n</code></pre>\n"],["establish_connection","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-establish_connection","(config, owner_name: Base, role: ActiveRecord::Base.current_role, shard: Base.current_shard)",""],["establish_connection","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-establish_connection","(config_or_env = nil)","<p>Establishes the connection to the database. Accepts a hash as input where the <code>:adapter</code> key must be specified â€¦\n"],["etag","ActionController::ConditionalGet::ClassMethods","classes/ActionController/ConditionalGet/ClassMethods.html#method-i-etag","(&etagger)","<p>Allows you to consider additional controller-wide information when generating an ETag. For example, if â€¦\n"],["etag=","ActionDispatch::Http::Cache::Response","classes/ActionDispatch/Http/Cache/Response.html#method-i-etag-3D","(weak_validators)","<p>This method sets a weak ETag validator on the response so browsers and proxies may cache the response, â€¦\n"],["etag?","ActionDispatch::Http::Cache::Response","classes/ActionDispatch/Http/Cache/Response.html#method-i-etag-3F","()",""],["etag_matches?","ActionDispatch::Http::Cache::Request","classes/ActionDispatch/Http/Cache/Request.html#method-i-etag_matches-3F","(etag)",""],["event_loop","ActionCable::Server::Base","classes/ActionCable/Server/Base.html#method-i-event_loop","()",""],["exabyte","Numeric","classes/Numeric.html#method-i-exabyte","()",""],["exabytes","Numeric","classes/Numeric.html#method-i-exabytes","()","<p>Returns the number of bytes equivalent to the exabytes provided.\n\n<pre><code>2.exabytes # =&gt; 2_305_843_009_213_693_952\n</code></pre>\n"],["except","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-except","(*keys)","<p>Returns a new <code>ActionController::Parameters</code> instance that filters out the given <code>keys</code>.\n\n<pre><code>params = ActionController::Parameters.new(a: ...\n</code></pre>\n"],["except","ActiveRecord::SpawnMethods","classes/ActiveRecord/SpawnMethods.html#method-i-except","(*skips)","<p>Removes from the query the condition(s) specified in <code>skips</code>.\n\n<pre><code>Post.order(&#39;id asc&#39;).except(:order)       ...\n</code></pre>\n"],["except","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-except","(*keys)","<p>Returns a hash with indifferent access that includes everything except given keys.\n\n<pre><code>hash = { a: &quot;x&quot;, b: ...\n</code></pre>\n"],["except","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-except","(*keys)","<p>Returns a hash with indifferent access that includes everything except given keys.\n\n<pre><code>hash = { a: &quot;x&quot;, b: ...\n</code></pre>\n"],["except","Hash","classes/Hash.html#method-i-except","(*keys)","<p>Returns a hash that includes everything except given keys.\n\n<pre><code>hash = { a: true, b: false, c: nil }\nhash.except(:c) ...\n</code></pre>\n"],["except!","Hash","classes/Hash.html#method-i-except-21","(*keys)","<p>Removes the given keys from hash and returns it.\n\n<pre><code>hash = { a: true, b: false, c: nil }\nhash.except!(:c) ...\n</code></pre>\n"],["exception_trace","ActionDispatch::ExceptionWrapper","classes/ActionDispatch/ExceptionWrapper.html#method-i-exception_trace","()",""],["excerpt","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-excerpt","(text, phrase, options = {})","<p>Extracts an excerpt from <code>text</code> that matches the first instance of <code>phrase</code>. The <code>:radius</code> option expands the â€¦\n"],["exclude?","Enumerable","classes/Enumerable.html#method-i-exclude-3F","(object)","<p>The negative of the <code>Enumerable#include?</code>. Returns <code>true</code> if the collection does not include the object. â€¦\n"],["exclude?","String","classes/String.html#method-i-exclude-3F","(string)","<p>The inverse of <code>String#include?</code>. Returns true if the string does not include the other string.\n\n<pre><code>&quot;hello&quot;.exclude? ...\n</code></pre>\n"],["excluded_from_filter_parameters?","ActiveRecord::Encryption::Configurable","classes/ActiveRecord/Encryption/Configurable.html#method-i-excluded_from_filter_parameters-3F","(filter_parameter)",""],["excluding","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-excluding","(*records)","<p>Excludes the specified record (or collection of records) from the resulting relation. For example:\n\n<pre><code>Post.excluding(post) ...\n</code></pre>\n"],["excluding","Array","classes/Array.html#method-i-excluding","(*elements)","<p>Returns a copy of the Array excluding the specified elements.\n\n<pre><code>[&quot;David&quot;, &quot;Rafael&quot;, &quot;Aaron&quot;, &quot;Todd&quot;].excluding(&quot;Aaron&quot;, ...\n</code></pre>\n"],["excluding","Enumerable","classes/Enumerable.html#method-i-excluding","(*elements)","<p>Returns a copy of the enumerable excluding the specified elements.\n\n<pre><code>[&quot;David&quot;, &quot;Rafael&quot;, &quot;Aaron&quot;, &quot;Todd&quot;].excluding ...\n</code></pre>\n"],["exclusive","ActiveSupport::Concurrency::ShareLock","classes/ActiveSupport/Concurrency/ShareLock.html#method-i-exclusive","(purpose: nil, compatible: [], after_compatible: [], no_wait: false)","<p>Execute the supplied block while holding the Exclusive lock. If <code>no_wait</code> is set and the lock is not immediately â€¦\n"],["exec_delete","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_delete","(sql, name = nil, binds = [])","<p>Executes delete <code>sql</code> statement in the context of this connection using <code>binds</code> as the bind substitutes. â€¦\n"],["exec_insert","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_insert","(sql, name = nil, binds = [], pk = nil, sequence_name = nil)","<p>Executes insert <code>sql</code> statement in the context of this connection using <code>binds</code> as the bind substitutes. â€¦\n"],["exec_migration","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-exec_migration","(conn, direction)",""],["exec_queries","ActiveRecord::Relation::RecordFetchWarning","classes/ActiveRecord/Relation/RecordFetchWarning.html#method-i-exec_queries","()","<p>When this module is prepended to ActiveRecord::Relation and <code>config.active_record.warn_on_records_fetched_greater_than</code> â€¦\n"],["exec_query","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_query","(sql, name = \"SQL\", binds = [], prepare: false)","<p>Executes <code>sql</code> statement in the context of this connection using <code>binds</code> as the bind substitutes. <code>name</code> is â€¦\n"],["exec_rollback_to_savepoint","ActiveRecord::ConnectionAdapters::Savepoints","classes/ActiveRecord/ConnectionAdapters/Savepoints.html#method-i-exec_rollback_to_savepoint","(name = current_savepoint_name)",""],["exec_update","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_update","(sql, name = nil, binds = [])","<p>Executes update <code>sql</code> statement in the context of this connection using <code>binds</code> as the bind substitutes. â€¦\n"],["executable","Rails::Command::Base","classes/Rails/Command/Base.html#method-c-executable","()",""],["execute","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-execute","(sql, name = nil, async: false)","<p>Executes the SQL statement in the context of this connection.\n"],["execute","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-execute","(sql, name = nil)","<p>Executes the SQL statement in the context of this connection and returns the raw result from the connection â€¦\n"],["execute","ActiveRecord::ConnectionAdapters::MySQL::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/MySQL/DatabaseStatements.html#method-i-execute","(sql, name = nil, async: false)","<p>Executes the SQL statement in the context of this connection.\n"],["execute","ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-execute","(sql, name = nil)","<p>Executes an SQL statement, returning a PG::Result object on success or raising a PG::Error exception â€¦\n"],["execute","ActiveSupport::FileUpdateChecker","classes/ActiveSupport/FileUpdateChecker.html#method-i-execute","()","<p>Executes the given block and updates the latest watched files and timestamp.\n"],["execute_command","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-execute_command","(executor, command, options = {})","<p>Runs the supplied command using either â€œrake â€¦â€ or â€œrails â€¦â€ based on the executor â€¦\n"],["execute_if_updated","ActionView::CacheExpiry::ViewModificationWatcher","classes/ActionView/CacheExpiry/ViewModificationWatcher.html#method-i-execute_if_updated","()",""],["execute_if_updated","ActiveSupport::FileUpdateChecker","classes/ActiveSupport/FileUpdateChecker.html#method-i-execute_if_updated","()","<p>Execute the block given if updated.\n"],["exist?","ActionDispatch::RailsEntityStore","classes/ActionDispatch/RailsEntityStore.html#method-i-exist-3F","(key)",""],["exist?","ActiveStorage::Service","classes/ActiveStorage/Service.html#method-i-exist-3F","(key)","<p>Return <code>true</code> if a file exists at the <code>key</code>.\n"],["exist?","ActiveStorage::Service::AzureStorageService","classes/ActiveStorage/Service/AzureStorageService.html#method-i-exist-3F","(key)",""],["exist?","ActiveStorage::Service::DiskService","classes/ActiveStorage/Service/DiskService.html#method-i-exist-3F","(key)",""],["exist?","ActiveStorage::Service::GCSService","classes/ActiveStorage/Service/GCSService.html#method-i-exist-3F","(key)",""],["exist?","ActiveStorage::Service::S3Service","classes/ActiveStorage/Service/S3Service.html#method-i-exist-3F","(key)",""],["exist?","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-exist-3F","(name, options = nil)","<p>Returns <code>true</code> if the cache contains an entry for the given key.\n<p>Options are passed to the underlying cache â€¦\n"],["existence","Pathname","classes/Pathname.html#method-i-existence","()","<p>Returns the receiver if the named file exists otherwise returns <code>nil</code>. <code>pathname.existence</code> is equivalent â€¦\n"],["existent","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-existent","()","<p>Returns all expanded paths but only if they exist in the filesystem.\n"],["existent_directories","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-existent_directories","()",""],["exists?","ActionMailer::Preview","classes/ActionMailer/Preview.html#method-c-exists-3F","(preview)","<p>Returns <code>true</code> if the preview exists.\n"],["exists?","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-exists-3F","(name, prefixes = [], partial = false, keys = [], **options)",""],["exists?","ActiveRecord::Encryption::ExtendedDeterministicQueries::RelationQueries","classes/ActiveRecord/Encryption/ExtendedDeterministicQueries/RelationQueries.html#method-i-exists-3F","(*args)",""],["exists?","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-exists-3F","(conditions = :none)","<p>Returns true if a record exists in the table that matches the <code>id</code> or conditions given, or false otherwise. â€¦\n"],["expand","ActiveSupport::Callbacks::CallTemplate::InstanceExec0","classes/ActiveSupport/Callbacks/CallTemplate/InstanceExec0.html#method-i-expand","(target, value, block)",""],["expand","ActiveSupport::Callbacks::CallTemplate::InstanceExec1","classes/ActiveSupport/Callbacks/CallTemplate/InstanceExec1.html#method-i-expand","(target, value, block)",""],["expand","ActiveSupport::Callbacks::CallTemplate::InstanceExec2","classes/ActiveSupport/Callbacks/CallTemplate/InstanceExec2.html#method-i-expand","(target, value, block)",""],["expand","ActiveSupport::Callbacks::CallTemplate::MethodCall","classes/ActiveSupport/Callbacks/CallTemplate/MethodCall.html#method-i-expand","(target, value, block)","<p>Return the parts needed to make this call, with the given input values.\n<p>Returns an array of the form: â€¦\n"],["expand","ActiveSupport::Callbacks::CallTemplate::ObjectCall","classes/ActiveSupport/Callbacks/CallTemplate/ObjectCall.html#method-i-expand","(target, value, block)",""],["expand","ActiveSupport::Callbacks::CallTemplate::ProcCall","classes/ActiveSupport/Callbacks/CallTemplate/ProcCall.html#method-i-expand","(target, value, block)",""],["expand_cache_key","ActiveSupport::Cache","classes/ActiveSupport/Cache.html#method-c-expand_cache_key","(key, namespace = nil)","<p>Expands out the <code>key</code> argument into a key that can be used for the cache store. Optionally accepts a namespace, â€¦\n"],["expanded","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-expanded","()","<p>Expands all paths against the root and return all unique values.\n"],["expected_response","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-expected_response","(http_method, uri, credentials, password, password_is_ha1 = true)","<p>Returns the expected response for a request of <code>http_method</code> to <code>uri</code> with the decoded <code>credentials</code> and the â€¦\n"],["expire","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-expire","()","<p>this method must only be called while holding connection pool&#39;s mutex\n"],["expire_fragment","AbstractController::Caching::Fragments","classes/AbstractController/Caching/Fragments.html#method-i-expire_fragment","(key, options = nil)","<p>Removes fragments from the cache.\n<p><code>key</code> can take one of three forms:\n<p>String - This would normally take the â€¦\n"],["expires_in","ActionController::ConditionalGet","classes/ActionController/ConditionalGet.html#method-i-expires_in","(seconds, options = {})","<p>Sets an HTTP 1.1 Cache-Control header. Defaults to issuing a <code>private</code> instruction, so that intermediate â€¦\n"],["expires_now","ActionController::ConditionalGet","classes/ActionController/ConditionalGet.html#method-i-expires_now","()","<p>Sets an HTTP 1.1 Cache-Control header of <code>no-cache</code>. This means the resource will be marked as stale, so â€¦\n"],["explain","ActiveRecord::ConnectionAdapters::MySQL::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/MySQL/DatabaseStatements.html#method-i-explain","(arel, binds = [])",""],["explain","ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-explain","(arel, binds = [])",""],["explain","ActiveRecord::ConnectionAdapters::SQLite3::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/SQLite3/DatabaseStatements.html#method-i-explain","(arel, binds = [])",""],["explain","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-explain","()","<p>Runs EXPLAIN on the query or queries triggered by this relation and returns the result as a string.  â€¦\n"],["extended","ActiveSupport::PerThreadRegistry","classes/ActiveSupport/PerThreadRegistry.html#method-c-extended","(object)",""],["extending","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-extending","(*modules, &block)","<p>Used to extend a scope with additional methods, either through a module or through a block provided. â€¦\n"],["extension","ActiveStorage::Filename","classes/ActiveStorage/Filename.html#method-i-extension","()",""],["extension_available?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-extension_available-3F","(name)",""],["extension_enabled?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-extension_enabled-3F","(name)",""],["extension_with_delimiter","ActiveStorage::Filename","classes/ActiveStorage/Filename.html#method-i-extension_with_delimiter","()","<p>Returns the extension of the filename (i.e. the substring following the last dot, excluding a dot at â€¦\n"],["extension_without_delimiter","ActiveStorage::Filename","classes/ActiveStorage/Filename.html#method-i-extension_without_delimiter","()","<p>Returns the extension of the filename (i.e. the substring following the last dot, excluding a dot at â€¦\n"],["extensions","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-extensions","()","<p>A list of extensions, to be filled in by adapters that support them.\n"],["extensions","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-extensions","()",""],["extensions","Rails::SourceAnnotationExtractor::Annotation","classes/Rails/SourceAnnotationExtractor/Annotation.html#method-c-extensions","()",""],["extify","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-extify","(name)","<p>Add an extension to the given name based on the platform.\n"],["extract!","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-extract-21","(*keys)","<p>Removes and returns the key/value pairs matching the given keys.\n\n<pre><code>params = ActionController::Parameters.new(a: ...\n</code></pre>\n"],["extract!","Array","classes/Array.html#method-i-extract-21","()","<p>Removes and returns the elements for which the block returns a true value. If no block is given, an  â€¦\n"],["extract!","Hash","classes/Hash.html#method-i-extract-21","(*keys)","<p>Removes and returns the key/value pairs matching the given keys.\n\n<pre><code>hash = { a: 1, b: 2, c: 3, d: 4 }\nhash.extract!(:a, ...\n</code></pre>\n"],["extract_annotations_from","Rails::SourceAnnotationExtractor","classes/Rails/SourceAnnotationExtractor.html#method-i-extract_annotations_from","(file, pattern)","<p>If <code>file</code> is the filename of a file that contains annotations this method returns a hash with a single â€¦\n"],["extract_associated","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-extract_associated","(association)","<p>Extracts a named <code>association</code> from the relation. The named association is first preloaded, then the individual â€¦\n"],["extract_domain","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-c-extract_domain","(host, tld_length)","<p>Returns the domain part of a host given the domain level.\n\n<pre><code># Top-level domain example\nextract_domain(&#39;www.example.com&#39;, ...\n</code></pre>\n"],["extract_last_module","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-i-extract_last_module","(nesting)","<p>Takes in an array of nested modules and extracts the last module\n"],["extract_message_id","ActionMailbox::InboundEmail::MessageId","classes/ActionMailbox/InboundEmail/MessageId.html#method-i-extract_message_id","(source)",""],["extract_options!","Array","classes/Array.html#method-i-extract_options-21","()","<p>Extracts options from a set of arguments. Removes and returns the last element in the array if it&#39;s â€¦\n"],["extract_session_id","ActionDispatch::Session::StaleSessionCheck","classes/ActionDispatch/Session/StaleSessionCheck.html#method-i-extract_session_id","(env)",""],["extract_subdomain","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-c-extract_subdomain","(host, tld_length)","<p>Returns the subdomains of a host as a String given the domain level.\n\n<pre><code># Top-level domain example\nextract_subdomain(&#39;www.example.com&#39;, ...\n</code></pre>\n"],["extract_subdomains","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-c-extract_subdomains","(host, tld_length)","<p>Returns the subdomains of a host as an Array given the domain level.\n\n<pre><code># Top-level domain example\nextract_subdomains(&#39;www.example.com&#39;, ...\n</code></pre>\n"],["extractable_options?","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-extractable_options-3F","()","<p>Returns <code>true</code> so that <code>Array#extract_options!</code> finds members of this class.\n"],["extractable_options?","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-extractable_options-3F","()","<p>Returns <code>true</code> so that <code>Array#extract_options!</code> finds members of this class.\n"],["extractable_options?","ActiveSupport::OrderedOptions","classes/ActiveSupport/OrderedOptions.html#method-i-extractable_options-3F","()",""],["extractable_options?","Hash","classes/Hash.html#method-i-extractable_options-3F","()","<p>By default, only instances of Hash itself are extractable. Subclasses of Hash may implement this method â€¦\n"],["failure?","ActionMailbox::Relayer::Result","classes/ActionMailbox/Relayer/Result.html#method-i-failure-3F","()",""],["fallbacks","Rails::Generators","classes/Rails/Generators.html#method-c-fallbacks","()","<p>Hold configured generators fallbacks. If a plugin developer wants a generator group to fallback to another â€¦\n"],["favicon_link_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-favicon_link_tag","(source = \"favicon.ico\", options = {})","<p>Returns a link tag for a favicon managed by the asset pipeline.\n<p>If a page has no link like the one generated â€¦\n"],["fetch","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-fetch","(key, *args)","<p>Returns a parameter for the given <code>key</code>. If the <code>key</code> can&#39;t be found, there are several options: With â€¦\n"],["fetch","ActionDispatch::Http::Headers","classes/ActionDispatch/Http/Headers.html#method-i-fetch","(key, default = DEFAULT)","<p>Returns the value for the given key mapped to @env.\n<p>If the key is not found and an optional code block â€¦\n"],["fetch","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-fetch","(name, options = nil, &block)","<p>Fetches data from the cache, using the given key. If there is data in the cache with the given key, then â€¦\n"],["fetch","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-fetch","(key, *extras)","<p>Same as <code>Hash#fetch</code> where the key passed as argument can be either a string or a symbol:\n\n<pre><code>counters = ActiveSupport::HashWithIndifferentAccess.new ...\n</code></pre>\n"],["fetch","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-fetch","(key, *extras)","<p>Same as <code>Hash#fetch</code> where the key passed as argument can be either a string or a symbol:\n\n<pre><code>counters = ActiveSupport::HashWithIndifferentAccess.new ...\n</code></pre>\n"],["fetch","Mime","classes/Mime.html#method-c-fetch","(type, &block)",""],["fetch_entry","ActiveSupport::Cache::MemCacheStore::DupLocalCache::DupLocalStore","classes/ActiveSupport/Cache/MemCacheStore/DupLocalCache/DupLocalStore.html#method-i-fetch_entry","(key)",""],["fetch_multi","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-fetch_multi","(*names)","<p>Fetches data from the cache, using the given keys. If there is data in the cache with the given keys, â€¦\n"],["fetch_values","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-fetch_values","(*indices, &block)","<p>Returns an array of the values at the specified indices, but also raises an exception when one of the â€¦\n"],["fetch_values","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-fetch_values","(*indices, &block)","<p>Returns an array of the values at the specified indices, but also raises an exception when one of the â€¦\n"],["ffmpeg_exists?","ActiveStorage::Previewer::VideoPreviewer","classes/ActiveStorage/Previewer/VideoPreviewer.html#method-c-ffmpeg_exists-3F","()",""],["ffmpeg_path","ActiveStorage::Previewer::VideoPreviewer","classes/ActiveStorage/Previewer/VideoPreviewer.html#method-c-ffmpeg_path","()",""],["field_id","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-field_id","(method, *suffixes, namespace: @options[:namespace], index: @index)","<p>Generate an HTML <code>id</code> attribute value for the given field\n<p>Return the value generated by the <code>FormBuilder</code> â€¦\n"],["field_id","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-field_id","(object_name, method_name, *suffixes, index: nil, namespace: nil)","<p>Generate an HTML <code>id</code> attribute value for the given name and field combination\n<p>Return the value generated â€¦\n"],["field_name","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-field_name","(method, *methods, multiple: false, index: @index)","<p>Generate an HTML <code>name</code> attribute value for the given name and field combination\n<p>Return the value generated â€¦\n"],["field_name","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-field_name","(object_name, method_name, *method_names, multiple: false, index: nil)","<p>Generate an HTML <code>name</code> attribute value for the given name and field combination\n<p>Return the value generated â€¦\n"],["field_set_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-field_set_tag","(legend = nil, options = nil, &block)","<p>Creates a field set for grouping HTML form elements.\n<p><code>legend</code> will become the fieldset&#39;s title (optional â€¦\n"],["fields","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-fields","(scope = nil, model: nil, **options, &block)","<p>See the docs for the ActionView::Helpers::FormHelper#fields helper method.\n"],["fields","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-fields","(scope = nil, model: nil, **options, &block)","<p>Scopes input fields with either an explicit scope or model. Like <code>form_with</code> does with <code>:scope</code> or <code>:model</code> â€¦\n"],["fields_for","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-fields_for","(record_name, record_object = nil, fields_options = {}, &block)","<p>Creates a scope around a specific model object like form_for, but doesn&#39;t create the form tags themselves. â€¦\n"],["fields_for","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-fields_for","(record_name, record_object = nil, options = {}, &block)","<p>Creates a scope around a specific model object like form_for, but doesn&#39;t create the form tags themselves. â€¦\n"],["fifth","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-fifth","","<p>Same as #first except returns only the fifth record.\n"],["fifth","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-fifth","()","<p>Find the fifth record. If no order is defined it will order by primary key.\n\n<pre><code>Person.fifth # returns the ...\n</code></pre>\n"],["fifth","Array","classes/Array.html#method-i-fifth","()","<p>Equal to <code>self[4]</code>.\n\n<pre><code>%w( a b c d e ).fifth # =&gt; &quot;e&quot;\n</code></pre>\n"],["fifth!","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-fifth-21","()","<p>Same as #fifth but raises ActiveRecord::RecordNotFound if no record is found.\n"],["file_field","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-file_field","(method, options = {})","<p>Returns a file upload input tag tailored for accessing a specified attribute (identified by <code>method</code>) on â€¦\n"],["file_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-file_field","(object_name, method, options = {})","<p>Returns a file upload input tag tailored for accessing a specified attribute (identified by <code>method</code>) on â€¦\n"],["file_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-file_field_tag","(name, options = {})","<p>Creates a file upload field. If you are using file uploads then you will also need to set the multipart â€¦\n"],["file_fixture","ActiveSupport::Testing::FileFixtures","classes/ActiveSupport/Testing/FileFixtures.html#method-i-file_fixture","(fixture_name)","<p>Returns a <code>Pathname</code> to the fixture file named <code>fixture_name</code>.\n<p>Raises <code>ArgumentError</code> if <code>fixture_name</code> can&#39;t â€¦\n"],["file_lookup_paths","Rails::Command","classes/Rails/Command.html#method-c-file_lookup_paths","()",""],["file_lookup_paths","Rails::Generators","classes/Rails/Generators.html#method-c-file_lookup_paths","()",""],["file_path","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-file_path","()",""],["filename","ActiveStorage::Blob","classes/ActiveStorage/Blob.html#method-i-filename","()","<p>Returns an ActiveStorage::Filename instance of the filename that can be queried for basename, extension, â€¦\n"],["filename","ActiveStorage::Variant","classes/ActiveStorage/Variant.html#method-i-filename","()",""],["fill_in_rich_text_area","ActionText::SystemTestHelper","classes/ActionText/SystemTestHelper.html#method-i-fill_in_rich_text_area","(locator = nil, with:)","<p>Locates a Trix editor and fills it in with the given HTML.\n<p>The editor can be found by:\n<p>its <code>id</code>\n"],["filter","ActiveSupport::BacktraceCleaner","classes/ActiveSupport/BacktraceCleaner.html#method-i-filter","(backtrace, kind = :silent)",""],["filter","ActiveSupport::ParameterFilter","classes/ActiveSupport/ParameterFilter.html#method-i-filter","(params)","<p>Mask value of <code>params</code> if key matches one of filters.\n"],["filter","Minitest::BacktraceFilterWithFallback","classes/Minitest/BacktraceFilterWithFallback.html#method-i-filter","(backtrace)",""],["filter_attributes","ActiveRecord::Core::ClassMethods","classes/ActiveRecord/Core/ClassMethods.html#method-i-filter_attributes","()","<p>Returns columns which shouldn&#39;t be exposed while calling <code>#inspect</code>.\n"],["filter_attributes=","ActiveRecord::Core::ClassMethods","classes/ActiveRecord/Core/ClassMethods.html#method-i-filter_attributes-3D","(filter_attributes)","<p>Specifies columns which shouldn&#39;t be exposed while calling <code>#inspect</code>.\n"],["filter_backtrace","Rails::Console::BacktraceCleaner","classes/Rails/Console/BacktraceCleaner.html#method-i-filter_backtrace","(bt)",""],["filter_param","ActiveSupport::ParameterFilter","classes/ActiveSupport/ParameterFilter.html#method-i-filter_param","(key, value)","<p>Returns filtered value for given key. For <code>Proc</code> filters, third block argument is not populated.\n"],["filter_proxies","ActionDispatch::RemoteIp::GetIp","classes/ActionDispatch/RemoteIp/GetIp.html#method-i-filter_proxies","(ips)",""],["filtered_env","ActionDispatch::Http::FilterParameters","classes/ActionDispatch/Http/FilterParameters.html#method-i-filtered_env","()","<p>Returns a hash of request.env with all sensitive data replaced.\n"],["filtered_parameters","ActionDispatch::Http::FilterParameters","classes/ActionDispatch/Http/FilterParameters.html#method-i-filtered_parameters","()","<p>Returns a hash of parameters with all sensitive data replaced.\n"],["filtered_path","ActionDispatch::Http::FilterParameters","classes/ActionDispatch/Http/FilterParameters.html#method-i-filtered_path","()","<p>Reconstructs a path with all sensitive GET parameters replaced.\n"],["filtered_query_string","ActionDispatch::Http::FilterParameters","classes/ActionDispatch/Http/FilterParameters.html#method-i-filtered_query_string","()",""],["finalized?","ActiveRecord::ConnectionAdapters::TransactionState","classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-finalized-3F","()",""],["find","ActionMailer::Preview","classes/ActionMailer/Preview.html#method-c-find","(preview)","<p>Find a mailer preview by its underscored class name.\n"],["find","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-find","(name, prefixes = [], partial = false, keys = [], options = {})",""],["find","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-find","(*args)","<p>Finds an object in the collection responding to the <code>id</code>. Uses the same rules as ActiveRecord::Base.find â€¦\n"],["find","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find","(*args)","<p>Find by id - This can either be a specific id (1), a list of ids (1, 5, 6), or an array of ids ([5, 6, â€¦\n"],["find","Rails::Engine","classes/Rails/Engine.html#method-c-find","(path)","<p>Finds engine with given path.\n"],["find","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-c-find","(klass, params = nil)","<p>GET show GET edit PATCH/PUT update DELETE destroy\n"],["find","Rails::SourceAnnotationExtractor","classes/Rails/SourceAnnotationExtractor.html#method-i-find","(dirs)","<p>Returns a hash that maps filenames under <code>dirs</code> (recursively) to arrays with their annotations.\n"],["find_all","ActionText::Fragment","classes/ActionText/Fragment.html#method-i-find_all","(selector)",""],["find_all","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-find_all","(name, prefixes = [], partial = false, keys = [], options = {})",""],["find_all","ActionView::Resolver","classes/ActionView/Resolver.html#method-i-find_all","(name, prefix = nil, partial = false, details = {}, key = nil, locals = [])","<p>Normalizes the arguments and passes it on to find_templates.\n"],["find_attachment_gallery_nodes","ActionText::AttachmentGallery","classes/ActionText/AttachmentGallery.html#method-c-find_attachment_gallery_nodes","(content)",""],["find_beginning_of_week!","Date","classes/Date.html#method-c-find_beginning_of_week-21","(week_start)","<p>Returns week start day symbol (e.g. <code>:monday</code>), or raises an <code>ArgumentError</code> for invalid day symbol.\n"],["find_by","ActiveRecord::Encryption::ExtendedDeterministicQueries::CoreQueries","classes/ActiveRecord/Encryption/ExtendedDeterministicQueries/CoreQueries.html#method-i-find_by","(*args)",""],["find_by","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_by","(arg, *args)","<p>Finds the first record matching the specified conditions. There is no implied ordering so if order matters, â€¦\n"],["find_by!","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_by-21","(arg, *args)","<p>Like #find_by, except that if no record is found, raises an ActiveRecord::RecordNotFound error.\n"],["find_by_sql","ActiveRecord::Querying","classes/ActiveRecord/Querying.html#method-i-find_by_sql","(sql, binds = [], preparable: nil, &block)","<p>Executes a custom SQL query against your database and returns all the results. The results will be returned â€¦\n"],["find_cmd_and_exec","Rails::DBConsole","classes/Rails/DBConsole.html#method-i-find_cmd_and_exec","(commands, *args)",""],["find_db_config","ActiveRecord::DatabaseConfigurations","classes/ActiveRecord/DatabaseConfigurations.html#method-i-find_db_config","(env)","<p>Returns a single DatabaseConfig object based on the requested environment.\n<p>If the application has multiple â€¦\n"],["find_each","ActiveRecord::Batches","classes/ActiveRecord/Batches.html#method-i-find_each","(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block)","<p>Looping through a collection of records from the database (using the Scoping::Named::ClassMethods.all â€¦\n"],["find_in","Rails::SourceAnnotationExtractor","classes/Rails/SourceAnnotationExtractor.html#method-i-find_in","(dir)","<p>Returns a hash that maps filenames under <code>dir</code> (recursively) to arrays with their annotations. Files with â€¦\n"],["find_in_batches","ActiveRecord::Batches","classes/ActiveRecord/Batches.html#method-i-find_in_batches","(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc)","<p>Yields each batch of records that was found by the find options as an array.\n\n<pre><code>Person.where(&quot;age &gt; 21&quot;).find_in_batches ...\n</code></pre>\n"],["find_or_create_by","ActiveRecord::Encryption::ExtendedDeterministicQueries::RelationQueries","classes/ActiveRecord/Encryption/ExtendedDeterministicQueries/RelationQueries.html#method-i-find_or_create_by","(attributes, &block)",""],["find_or_create_by","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-find_or_create_by","(attributes, &block)","<p>Finds the first record with the given attributes, or creates a record with the attributes if one is not â€¦\n"],["find_or_create_by!","ActiveRecord::Encryption::ExtendedDeterministicQueries::RelationQueries","classes/ActiveRecord/Encryption/ExtendedDeterministicQueries/RelationQueries.html#method-i-find_or_create_by-21","(attributes, &block)",""],["find_or_create_by!","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-find_or_create_by-21","(attributes, &block)","<p>Like #find_or_create_by, but calls create! so an exception is raised if the created record is invalid. â€¦\n"],["find_or_initialize_by","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-find_or_initialize_by","(attributes, &block)","<p>Like #find_or_create_by, but calls new instead of create.\n"],["find_root","Rails::Application","classes/Rails/Application.html#method-c-find_root","(from)",""],["find_root","Rails::Engine","classes/Rails/Engine.html#method-c-find_root","(from)",""],["find_session","ActionDispatch::Session::CacheStore","classes/ActionDispatch/Session/CacheStore.html#method-i-find_session","(env, sid)","<p>Get a session from the cache.\n"],["find_signed","ActiveRecord::SignedId::ClassMethods","classes/ActiveRecord/SignedId/ClassMethods.html#method-i-find_signed","(signed_id, purpose: nil)","<p>Lets you find a record based on a signed id that&#39;s safe to put into the world without risk of tampering. â€¦\n"],["find_signed","ActiveStorage::Blob","classes/ActiveStorage/Blob.html#method-c-find_signed","(id, record: nil, purpose: :blob_id)","<p>You can use the signed ID of a blob to refer to it on the client side without fear of tampering. This â€¦\n"],["find_signed!","ActiveRecord::SignedId::ClassMethods","classes/ActiveRecord/SignedId/ClassMethods.html#method-i-find_signed-21","(signed_id, purpose: nil)","<p>Works like find_signed, but will raise an <code>ActiveSupport::MessageVerifier::InvalidSignature</code> exception â€¦\n"],["find_signed!","ActiveStorage::Blob","classes/ActiveStorage/Blob.html#method-c-find_signed-21","(id, record: nil, purpose: :blob_id)","<p>Works like <code>find_signed</code>, but will raise an <code>ActiveSupport::MessageVerifier::InvalidSignature</code> exception â€¦\n"],["find_sole_by","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_sole_by","(arg, *args)","<p>Finds the sole matching record. Raises ActiveRecord::RecordNotFound if no record is found. Raises ActiveRecord::SoleRecordExceeded â€¦\n"],["find_template","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-find_template","(name, prefixes = [], partial = false, keys = [], options = {})",""],["find_templates","ActionView::NullResolver","classes/ActionView/NullResolver.html#method-i-find_templates","(name, prefix, partial, details, locals = [])",""],["find_tzinfo","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-find_tzinfo","(name)",""],["find_zone","Time","classes/Time.html#method-c-find_zone","(time_zone)","<p>Returns a TimeZone instance matching the time zone provided. Accepts the time zone in any format supported â€¦\n"],["find_zone!","Time","classes/Time.html#method-c-find_zone-21","(time_zone)","<p>Returns a TimeZone instance matching the time zone provided. Accepts the time zone in any format supported â€¦\n"],["finder","ActiveRecord::DynamicMatchers::FindBy","classes/ActiveRecord/DynamicMatchers/FindBy.html#method-i-finder","()",""],["finder","ActiveRecord::DynamicMatchers::FindByBang","classes/ActiveRecord/DynamicMatchers/FindByBang.html#method-i-finder","()",""],["finish","ActiveSupport::LogSubscriber","classes/ActiveSupport/LogSubscriber.html#method-i-finish","(name, id, payload)",""],["finish","ActiveSupport::Notifications::Fanout","classes/ActiveSupport/Notifications/Fanout.html#method-i-finish","(name, id, payload, listeners = listeners_for(name))",""],["finish","ActiveSupport::Notifications::Fanout::Subscribers::EventObject","classes/ActiveSupport/Notifications/Fanout/Subscribers/EventObject.html#method-i-finish","(name, id, payload)",""],["finish","ActiveSupport::Notifications::Instrumenter","classes/ActiveSupport/Notifications/Instrumenter.html#method-i-finish","(name, payload)","<p>Send a finish notification with <code>name</code> and <code>payload</code>.\n"],["finish","ActiveSupport::Subscriber","classes/ActiveSupport/Subscriber.html#method-i-finish","(name, id, payload)",""],["finish!","ActiveSupport::Notifications::Event","classes/ActiveSupport/Notifications/Event.html#method-i-finish-21","()","<p>Record information at the time this event finishes\n"],["finish_with_state","ActiveSupport::Notifications::Instrumenter","classes/ActiveSupport/Notifications/Instrumenter.html#method-i-finish_with_state","(listeners_state, name, payload)",""],["first","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-first","","<p>Returns the first record, or the first <code>n</code> records, from the collection. If the collection is empty, the â€¦\n"],["first","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-first","(limit = nil)","<p>Find the first record (or first N records if a parameter is supplied). If no order is defined it will â€¦\n"],["first","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-first","()",""],["first","String","classes/String.html#method-i-first","(limit = 1)","<p>Returns the first character. If a limit is supplied, returns a substring from the beginning of the string â€¦\n"],["first!","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-first-21","()","<p>Same as #first but raises ActiveRecord::RecordNotFound if no record is found. Note that #first! accepts â€¦\n"],["first?","ActionView::PartialIteration","classes/ActionView/PartialIteration.html#method-i-first-3F","()","<p>Check if this is the first iteration of the partial.\n"],["fixed?","ActiveRecord::Encryption::Scheme","classes/ActiveRecord/Encryption/Scheme.html#method-i-fixed-3F","()",""],["fixed_length_secure_compare","ActiveSupport::SecurityUtils","classes/ActiveSupport/SecurityUtils.html#method-c-fixed_length_secure_compare","(a, b)",""],["fixture_file_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-fixture_file_name","()",""],["fixture_file_upload","ActionDispatch::TestProcess::FixtureFile","classes/ActionDispatch/TestProcess/FixtureFile.html#method-i-fixture_file_upload","(path, mime_type = nil, binary = false)","<p>Shortcut for <code>Rack::Test::UploadedFile.new(File.join(ActionDispatch::IntegrationTest.file_fixture_path,</code> â€¦\n"],["fixture_is_cached?","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-fixture_is_cached-3F","(connection, table_name)",""],["fixtures","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-fixtures","(*fixture_set_names)",""],["fixtures_path","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-fixtures_path","()",""],["flash","ActionDispatch::Flash::RequestMethods","classes/ActionDispatch/Flash/RequestMethods.html#method-i-flash","()","<p>Access the contents of the flash. Returns a ActionDispatch::Flash::FlashHash.\n<p>See ActionDispatch::Flash â€¦\n"],["flash","ActionDispatch::TestProcess","classes/ActionDispatch/TestProcess.html#method-i-flash","()",""],["flash=","ActionDispatch::Flash::RequestMethods","classes/ActionDispatch/Flash/RequestMethods.html#method-i-flash-3D","(flash)",""],["floats","Rails::Generators::AppBase::GemfileEntry","classes/Rails/Generators/AppBase/GemfileEntry.html#method-c-floats","(name, comment = nil)",""],["floor","Time","classes/Time.html#method-i-floor","(precision = 0)",""],["flush","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-flush","(minimum_idle = @idle_timeout)","<p>Disconnect all connections that have been idle for at least <code>minimum_idle</code> seconds. Connections currently â€¦\n"],["flush","ActiveRecord::FutureResult::EventBuffer","classes/ActiveRecord/FutureResult/EventBuffer.html#method-i-flush","()",""],["flush","ActiveSupport::LogSubscriber::TestHelper::MockLogger","classes/ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-i-flush","()",""],["flush","ActiveSupport::TaggedLogging","classes/ActiveSupport/TaggedLogging.html#method-i-flush","()",""],["flush!","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-flush-21","()","<p>Disconnect all currently idle connections. Connections currently checked out are unaffected.\n"],["flush_all!","ActiveSupport::LogSubscriber","classes/ActiveSupport/LogSubscriber.html#method-c-flush_all-21","()","<p>Flush all log_subscribers&#39; logger.\n"],["flush_idle_connections!","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-flush_idle_connections-21","(role = ActiveRecord::Base.current_role)","<p>Disconnects all currently idle connections.\n<p>See ConnectionPool#flush! for details.\n"],["follow_redirect!","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-follow_redirect-21","(**args)","<p>Follow a single redirect response. If the last response was not a redirect, an exception will be raised. â€¦\n"],["font_path","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-font_path","(source, options = {})","<p>Computes the path to a font asset. Full paths from the document root will be passed through.\n\n<pre><code>font_path(&quot;font&quot;) ...\n</code></pre>\n"],["font_url","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-font_url","(source, options = {})","<p>Computes the full URL to a font asset. This will use <code>font_path</code> internally, so most of their behaviors â€¦\n"],["for","ActionController::Renderer","classes/ActionController/Renderer.html#method-c-for","(controller, env = {}, defaults = DEFAULTS.dup)","<p>Create a new renderer instance for a specific controller class.\n"],["for_each","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-for_each","(databases)",""],["foreign_key","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-foreign_key","(*args, **options)","<p>Adds a foreign key to the table using a supplied table name.\n\n<pre><code>t.foreign_key(:authors)\nt.foreign_key(:authors, ...\n</code></pre>\n"],["foreign_key","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-foreign_key","(to_table, **options)",""],["foreign_key","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-foreign_key","(class_name, separate_class_name_and_id_with_underscore = true)","<p>Creates a foreign key name from a class name. <code>separate_class_name_and_id_with_underscore</code> sets whether â€¦\n"],["foreign_key","String","classes/String.html#method-i-foreign_key","(separate_class_name_and_id_with_underscore = true)","<p>Creates a foreign key name from a class name. <code>separate_class_name_and_id_with_underscore</code> sets whether â€¦\n"],["foreign_key_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-foreign_key_exists-3F","(from_table, to_table = nil, **options)","<p>Checks to see if a foreign key exists on a table for a given foreign key definition.\n\n<pre><code># Checks to see if ...\n</code></pre>\n"],["foreign_key_exists?","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-foreign_key_exists-3F","(*args, **options)","<p>Checks to see if a foreign key exists.\n\n<pre><code>t.foreign_key(:authors) unless t.foreign_key_exists?(:authors)\n</code></pre>\n"],["foreign_keys","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-foreign_keys","(table_name)",""],["foreign_keys","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-foreign_keys","(table_name)",""],["foreign_keys","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-foreign_keys","(table_name)",""],["foreign_keys","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-foreign_keys","(table_name)","<p>Returns an array of foreign keys for the given table. The foreign keys are represented as ForeignKeyDefinition â€¦\n"],["foreign_table_exists?","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-foreign_table_exists-3F","(table_name)",""],["foreign_tables","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-foreign_tables","()",""],["forking_env?","ActiveSupport::Testing::Isolation","classes/ActiveSupport/Testing/Isolation.html#method-c-forking_env-3F","()",""],["form_authenticity_param","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-form_authenticity_param","()","<p>The form&#39;s authenticity parameter. Override to provide your own.\n"],["form_authenticity_token","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-form_authenticity_token","(form_options: {})","<p>Creates the authenticity token for the current request.\n"],["form_data?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-form_data-3F","()","<p>Determine whether the request body contains form-data by checking the request Content-Type for one of â€¦\n"],["form_for","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-form_for","(record, options = {}, &block)","<p>Creates a form that allows the user to create or update the attributes of a specific model object.\n<p>The â€¦\n"],["form_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-form_tag","(url_for_options = {}, options = {}, &block)","<p>Starts a form tag that points the action to a URL configured with <code>url_for_options</code> just like ActionController::Base#url_for â€¦\n"],["form_with","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-form_with","(model: nil, scope: nil, url: nil, format: nil, **options, &block)","<p>Creates a form tag based on mixing URLs, scopes, or models.\n\n<pre><code># Using just a URL:\n&lt;%= form_with url: posts_path ...\n</code></pre>\n"],["format","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-format","(view_path = [])","<p>Returns the MIME type for the format used in the request.\n\n<pre><code>GET /posts/5.xml   | request.format =&gt; Mime[:xml] ...\n</code></pre>\n"],["format","ActiveStorage::Variation","classes/ActiveStorage/Variation.html#method-i-format","()",""],["format=","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-format-3D","(extension)","<p>Sets the format by string extension, which can be used to force custom formats that are not controlled â€¦\n"],["format_from_path_extension","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-format_from_path_extension","()",""],["format_paragraph","ActionMailer::MailHelper","classes/ActionMailer/MailHelper.html#method-i-format_paragraph","(text, len = 72, indent = 2)","<p>Returns <code>text</code> wrapped at <code>len</code> columns and indented <code>indent</code> spaces. By default column length <code>len</code> equals 72 â€¦\n"],["formats","AbstractController::Base","classes/AbstractController/Base.html#method-i-formats","","<p>Returns the formats that can be processed by the controller.\n"],["formats","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-formats","()",""],["formats=","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-formats-3D","(extensions)","<p>Sets the formats by string extensions. This differs from #format= by allowing you to set multiple, ordered â€¦\n"],["formatted_offset","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-formatted_offset","(colon = true, alternate_utc_string = nil)","<p>Returns a formatted string of the offset from UTC, or an alternative string if the time zone is already â€¦\n"],["formatted_offset","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-formatted_offset","(colon = true, alternate_utc_string = nil)","<p>Returns a formatted string of the offset from UTC, or an alternative string if the time zone is already â€¦\n"],["formatted_offset","DateTime","classes/DateTime.html#method-i-formatted_offset","(colon = true, alternate_utc_string = nil)","<p>Returns a formatted string of the offset from UTC, or an alternative string if the time zone is already â€¦\n"],["formatted_offset","Time","classes/Time.html#method-i-formatted_offset","(colon = true, alternate_utc_string = nil)","<p>Returns a formatted string of the offset from UTC, or an alternative string if the time zone is already â€¦\n"],["fortnight","Numeric","classes/Numeric.html#method-i-fortnight","()",""],["fortnights","Numeric","classes/Numeric.html#method-i-fortnights","()","<p>Returns a Duration instance matching the number of fortnights provided.\n\n<pre><code>2.fortnights # =&gt; 4 weeks\n</code></pre>\n"],["forty_two","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-forty_two","","<p>Same as #first except returns only the forty second record. Also known as accessing â€œthe redditâ€. â€¦\n"],["forty_two","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-forty_two","()","<p>Find the forty-second record. Also known as accessing â€œthe redditâ€. If no order is defined â€¦\n"],["forty_two","Array","classes/Array.html#method-i-forty_two","()","<p>Equal to <code>self[41]</code>. Also known as accessing â€œthe redditâ€.\n\n<pre><code>(1..42).to_a.forty_two # =&gt; 42\n</code></pre>\n"],["forty_two!","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-forty_two-21","()","<p>Same as #forty_two but raises ActiveRecord::RecordNotFound if no record is found.\n"],["fourth","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-fourth","","<p>Same as #first except returns only the fourth record.\n"],["fourth","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-fourth","()","<p>Find the fourth record. If no order is defined it will order by primary key.\n\n<pre><code>Person.fourth # returns the ...\n</code></pre>\n"],["fourth","Array","classes/Array.html#method-i-fourth","()","<p>Equal to <code>self[3]</code>.\n\n<pre><code>%w( a b c d e ).fourth # =&gt; &quot;d&quot;\n</code></pre>\n"],["fourth!","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-fourth-21","()","<p>Same as #fourth but raises ActiveRecord::RecordNotFound if no record is found.\n"],["fragment_by_canonicalizing_attachment_galleries","ActionText::AttachmentGallery","classes/ActionText/AttachmentGallery.html#method-c-fragment_by_canonicalizing_attachment_galleries","(content)",""],["fragment_by_canonicalizing_attachments","ActionText::Attachment","classes/ActionText/Attachment.html#method-c-fragment_by_canonicalizing_attachments","(content)",""],["fragment_by_canonicalizing_content","ActionText::Content","classes/ActionText/Content.html#method-c-fragment_by_canonicalizing_content","(content)",""],["fragment_by_converting_trix_attachments","ActionText::Attachments::TrixConversion","classes/ActionText/Attachments/TrixConversion.html#method-i-fragment_by_converting_trix_attachments","(content)",""],["fragment_by_minifying_attachments","ActionText::Attachments::Minification","classes/ActionText/Attachments/Minification.html#method-i-fragment_by_minifying_attachments","(content)",""],["fragment_by_replacing_attachment_gallery_nodes","ActionText::AttachmentGallery","classes/ActionText/AttachmentGallery.html#method-c-fragment_by_replacing_attachment_gallery_nodes","(content)",""],["fragment_cache_key","AbstractController::Caching::Fragments::ClassMethods","classes/AbstractController/Caching/Fragments/ClassMethods.html#method-i-fragment_cache_key","(value = nil, &key)","<p>Allows you to specify controller-wide key prefixes for cache fragments. Pass either a constant <code>value</code> â€¦\n"],["fragment_exist?","AbstractController::Caching::Fragments","classes/AbstractController/Caching/Fragments.html#method-i-fragment_exist-3F","(key, options = nil)","<p>Check if a cached fragment from the location signified by <code>key</code> exists (see <code>expire_fragment</code> for acceptable â€¦\n"],["fragment_for_html","ActionText::HtmlConversion","classes/ActionText/HtmlConversion.html#method-i-fragment_for_html","(html)",""],["framework_trace","ActionDispatch::ExceptionWrapper","classes/ActionDispatch/ExceptionWrapper.html#method-i-framework_trace","()",""],["freeze","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-freeze","()","<p>Clone and freeze the attributes hash such that associations are still accessible, even on destroyed records, â€¦\n"],["freeze","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-freeze","()",""],["freeze_time","ActiveSupport::Testing::TimeHelpers","classes/ActiveSupport/Testing/TimeHelpers.html#method-i-freeze_time","(&block)","<p>Calls <code>travel_to</code> with <code>Time.now</code>.\n\n<pre><code>Time.current # =&gt; Sun, 09 Jul 2017 15:34:49 EST -05:00\nfreeze_time\nsleep(1) ...\n</code></pre>\n"],["fresh?","ActionDispatch::Http::Cache::Request","classes/ActionDispatch/Http/Cache/Request.html#method-i-fresh-3F","(response)","<p>Check response freshness (Last-Modified and ETag) against request If-Modified-Since and If-None-Match â€¦\n"],["fresh_when","ActionController::ConditionalGet","classes/ActionController/ConditionalGet.html#method-i-fresh_when","(object = nil, etag: nil, weak_etag: nil, strong_etag: nil, last_modified: nil, public: false, cache_control: {}, template: nil)","<p>Sets the <code>etag</code>, <code>last_modified</code>, or both on the response and renders a <code>304 Not Modified</code> response if the â€¦\n"],["from","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-from","(value, subquery_name = nil)","<p>Specifies the table from which the records will be fetched. For example:\n\n<pre><code>Topic.select(&#39;title&#39;).from(&#39;posts&#39;) ...\n</code></pre>\n"],["from","Array","classes/Array.html#method-i-from","(position)","<p>Returns the tail of the array from <code>position</code>.\n\n<pre><code>%w( a b c d ).from(0)  # =&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]\n%w( a b ...\n</code></pre>\n"],["from","String","classes/String.html#method-i-from","(position)","<p>Returns a substring from the given position to the end of the string. If the position is negative, it â€¦\n"],["from_address","Mail::Message","classes/Mail/Message.html#method-i-from_address","()",""],["from_attachable","ActionText::Attachment","classes/ActionText/Attachment.html#method-c-from_attachable","(attachable, attributes = {})",""],["from_attachable_sgid","ActionText::Attachable","classes/ActionText/Attachable.html#method-c-from_attachable_sgid","(sgid, options = {})",""],["from_attachable_sgid","ActionText::Attachable","classes/ActionText/Attachable.html#method-i-from_attachable_sgid","(sgid)",""],["from_attachables","ActionText::Attachment","classes/ActionText/Attachment.html#method-c-from_attachables","(attachables)",""],["from_attributes","ActionText::Attachment","classes/ActionText/Attachment.html#method-c-from_attributes","(attributes, attachable = nil)",""],["from_attributes","ActionText::TrixAttachment","classes/ActionText/TrixAttachment.html#method-c-from_attributes","(attributes)",""],["from_hash","ActionDispatch::Http::Headers","classes/ActionDispatch/Http/Headers.html#method-c-from_hash","(hash)",""],["from_html","ActionText::Fragment","classes/ActionText/Fragment.html#method-c-from_html","(html)",""],["from_json","ActiveModel::Serializers::JSON","classes/ActiveModel/Serializers/JSON.html#method-i-from_json","(json, include_root = include_root_in_json)","<p>Sets the model <code>attributes</code> from a JSON string. Returns <code>self</code>.\n\n<pre><code>class Person\n  include ActiveModel::Serializers::JSON ...\n</code></pre>\n"],["from_node","ActionText::Attachable","classes/ActionText/Attachable.html#method-c-from_node","(node)",""],["from_node","ActionText::Attachables::ContentAttachment","classes/ActionText/Attachables/ContentAttachment.html#method-c-from_node","(node)",""],["from_node","ActionText::Attachables::RemoteImage","classes/ActionText/Attachables/RemoteImage.html#method-c-from_node","(node)",""],["from_node","ActionText::Attachment","classes/ActionText/Attachment.html#method-c-from_node","(node, attachable = nil)",""],["from_node","ActionText::AttachmentGallery","classes/ActionText/AttachmentGallery.html#method-c-from_node","(node)",""],["from_now","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-from_now","(time = ::Time.current)",""],["from_rails_root","ActionView::LogSubscriber","classes/ActionView/LogSubscriber.html#method-i-from_rails_root","(string)",""],["from_response","ActionDispatch::TestResponse","classes/ActionDispatch/TestResponse.html#method-c-from_response","(response)",""],["from_source","Mail","classes/Mail.html#method-c-from_source","(source)",""],["from_trix_attachment","ActionText::Attachments::TrixConversion","classes/ActionText/Attachments/TrixConversion.html#method-i-from_trix_attachment","(trix_attachment)",""],["from_trusted_xml","Hash","classes/Hash.html#method-c-from_trusted_xml","(xml)","<p>Builds a Hash from XML just like <code>Hash.from_xml</code>, but also allows Symbol and YAML.\n"],["from_xml","Hash","classes/Hash.html#method-c-from_xml","(xml, disallowed_types = nil)","<p>Returns a Hash containing a collection of pairs when the key is the node name and the value is its content â€¦\n"],["frozen?","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-frozen-3F","()","<p>Returns <code>true</code> if the attributes hash has been frozen.\n"],["full_attributes","ActionText::Attachment","classes/ActionText/Attachment.html#method-i-full_attributes","()",""],["full_commit!","ActiveRecord::ConnectionAdapters::TransactionState","classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-full_commit-21","()",""],["full_message","ActiveModel::Error","classes/ActiveModel/Error.html#method-i-full_message","()","<p>Returns the full error message.\n\n<pre><code>error = ActiveModel::Error.new(person, :name, :too_short, count: 5)\nerror.full_message ...\n</code></pre>\n"],["full_message","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-full_message","(attribute, message)","<p>Returns a full message for a given attribute.\n\n<pre><code>person.errors.full_message(:name, &#39;is invalid&#39;) # =&gt; &quot;Name ...\n</code></pre>\n"],["full_messages","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-full_messages","()","<p>Returns all the full error messages in an array.\n\n<pre><code>class Person\n  validates_presence_of :name, :address, ...\n</code></pre>\n"],["full_messages_for","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-full_messages_for","(attribute)","<p>Returns all the full error messages for a given attribute in an array.\n\n<pre><code>class Person\n  validates_presence_of ...\n</code></pre>\n"],["full_rollback!","ActiveRecord::ConnectionAdapters::TransactionState","classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-full_rollback-21","()",""],["full_rollback?","ActiveRecord::ConnectionAdapters::SavepointTransaction","classes/ActiveRecord/ConnectionAdapters/SavepointTransaction.html#method-i-full_rollback-3F","()",""],["full_trace","ActionDispatch::ExceptionWrapper","classes/ActionDispatch/ExceptionWrapper.html#method-i-full_trace","()",""],["full_url_for","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-c-full_url_for","(options)",""],["fullpath","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-fullpath","()","<p>Returns the <code>String</code> full path including params of the last URL requested.\n\n<pre><code># get &quot;/articles&quot;\nrequest.fullpath ...\n</code></pre>\n"],["fully_committed?","ActiveRecord::ConnectionAdapters::TransactionState","classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-fully_committed-3F","()",""],["fully_completed?","ActiveRecord::ConnectionAdapters::TransactionState","classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-fully_completed-3F","()",""],["fully_rolledback?","ActiveRecord::ConnectionAdapters::TransactionState","classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-fully_rolledback-3F","()",""],["future?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-future-3F","()","<p>Returns true if the current object&#39;s time is in the future.\n"],["future?","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-future-3F","()","<p>Returns true if the date/time is in the future.\n"],["gallery_attachments","ActionText::Content","classes/ActionText/Content.html#method-i-gallery_attachments","()",""],["gem","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-gem","(*args)","<p>Adds an entry into <code>Gemfile</code> for the supplied gem.\n\n<pre><code>gem &quot;rspec&quot;, group: :test\ngem &quot;technoweenie-restful-authentication&quot;, ...\n</code></pre>\n"],["gem_group","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-gem_group","(*names, &block)","<p>Wraps gem entries inside a group.\n\n<pre><code>gem_group :development, :test do\n  gem &quot;rspec-rails&quot;\nend\n</code></pre>\n"],["gem_version","ActionCable","classes/ActionCable.html#method-c-gem_version","()","<p>Returns the currently loaded version of Action Cable as a <code>Gem::Version</code>.\n"],["gem_version","ActionMailbox","classes/ActionMailbox.html#method-c-gem_version","()","<p>Returns the currently loaded version of Action Mailbox as a <code>Gem::Version</code>.\n"],["gem_version","ActionMailer","classes/ActionMailer.html#method-c-gem_version","()","<p>Returns the currently loaded version of Action Mailer as a <code>Gem::Version</code>.\n"],["gem_version","ActionText","classes/ActionText.html#method-c-gem_version","()","<p>Returns the currently loaded version of Action Text as a <code>Gem::Version</code>.\n"],["gem_version","ActionView","classes/ActionView.html#method-c-gem_version","()","<p>Returns the currently loaded version of Action View as a <code>Gem::Version</code>.\n"],["gem_version","ActiveJob","classes/ActiveJob.html#method-c-gem_version","()","<p>Returns the currently loaded version of Active Job as a <code>Gem::Version</code>.\n"],["gem_version","ActiveModel","classes/ActiveModel.html#method-c-gem_version","()","<p>Returns the currently loaded version of Active Model as a <code>Gem::Version</code>.\n"],["gem_version","ActiveRecord","classes/ActiveRecord.html#method-c-gem_version","()","<p>Returns the currently loaded version of Active Record as a <code>Gem::Version</code>.\n"],["gem_version","ActiveStorage","classes/ActiveStorage.html#method-c-gem_version","()","<p>Returns the currently loaded version of Active Storage as a <code>Gem::Version</code>.\n"],["gem_version","ActiveSupport","classes/ActiveSupport.html#method-c-gem_version","()","<p>Returns the currently loaded version of Active Support as a <code>Gem::Version</code>.\n"],["gem_version","Rails","classes/Rails.html#method-c-gem_version","()","<p>Returns the currently loaded version of Rails as a <code>Gem::Version</code>.\n"],["gemfile","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-gemfile","()",""],["gemfile","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-gemfile","()",""],["gemfile_entry","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-gemfile_entry","()",""],["gemspec","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-gemspec","()",""],["generate","ActiveSupport::MessageVerifier","classes/ActiveSupport/MessageVerifier.html#method-i-generate","(value, expires_at: nil, expires_in: nil, purpose: nil)","<p>Generates a signed message for the provided value.\n<p>The message is signed with the <code>MessageVerifier</code>&#39;s â€¦\n"],["generate","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-generate","(what, *args)","<p>Generate something using a generator from Rails or a plugin. The second parameter is the argument string â€¦\n"],["generate_key","ActiveSupport::CachingKeyGenerator","classes/ActiveSupport/CachingKeyGenerator.html#method-i-generate_key","(*args)","<p>Returns a derived key suitable for use.\n"],["generate_key","ActiveSupport::EncryptedFile","classes/ActiveSupport/EncryptedFile.html#method-c-generate_key","()",""],["generate_key","ActiveSupport::KeyGenerator","classes/ActiveSupport/KeyGenerator.html#method-i-generate_key","(salt, key_size = 64)","<p>Returns a derived key suitable for use.  The default <code>key_size</code> is chosen to be compatible with the default â€¦\n"],["generate_layout","Rails::Generators::BenchmarkGenerator","classes/Rails/Generators/BenchmarkGenerator.html#method-i-generate_layout","()",""],["generate_message","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-generate_message","(attribute, type = :invalid, options = {})","<p>Translates an error message in its default scope (<code>activemodel.errors.messages</code>).\n<p>Error messages are first â€¦\n"],["generate_method_for_mime","AbstractController::Collector","classes/AbstractController/Collector.html#method-c-generate_method_for_mime","(mime)",""],["generate_missing_message_id","ActionMailbox::InboundEmail::MessageId","classes/ActionMailbox/InboundEmail/MessageId.html#method-i-generate_missing_message_id","(message_checksum)",""],["generate_random_hex_key","ActiveRecord::Encryption::KeyGenerator","classes/ActiveRecord/Encryption/KeyGenerator.html#method-i-generate_random_hex_key","(length: key_length)","<p>Returns a random key in hexadecimal format. The key will have a size in bytes of <code>:length</code> (configured â€¦\n"],["generate_random_key","ActiveRecord::Encryption::KeyGenerator","classes/ActiveRecord/Encryption/KeyGenerator.html#method-i-generate_random_key","(length: key_length)","<p>Returns a random key. The key will have a size in bytes of <code>:length</code> (configured <code>Cipher</code>&#39;s length by â€¦\n"],["generate_sid","ActionDispatch::Session::AbstractSecureStore","classes/ActionDispatch/Session/AbstractSecureStore.html#method-i-generate_sid","()",""],["generate_sid","ActionDispatch::Session::Compatibility","classes/ActionDispatch/Session/Compatibility.html#method-i-generate_sid","()",""],["generate_test_dummy","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-generate_test_dummy","(force = false)",""],["generate_unique_secure_token","ActiveRecord::SecureToken::ClassMethods","classes/ActiveRecord/SecureToken/ClassMethods.html#method-i-generate_unique_secure_token","(length: MINIMUM_TOKEN_LENGTH)",""],["generate_unique_secure_token","ActiveStorage::Blob","classes/ActiveStorage/Blob.html#method-c-generate_unique_secure_token","(length: MINIMUM_TOKEN_LENGTH)","<p>To prevent problems with case-insensitive filesystems, especially in combination with databases which â€¦\n"],["generated_path","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-generated_path","(generated_extras)",""],["generator","Rails::Engine::Updater","classes/Rails/Engine/Updater.html#method-c-generator","()",""],["generator","Rails::Generators::Testing::Behaviour","classes/Rails/Generators/Testing/Behaviour.html#method-i-generator","(args = default_arguments, options = {}, config = {})","<p>Instantiate the generator.\n"],["generator_name","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-generator_name","()","<p>Removes the namespaces and get the generator name. For example, Rails::Generators::ModelGenerator will â€¦\n"],["generators","Rails::Application","classes/Rails/Application.html#method-i-generators","(&blk)","<p>Sends any generators called in the instance of a new application up to the <code>generators</code> method defined â€¦\n"],["generators","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-generators","()","<p>Holds generators configuration:\n\n<pre><code>config.generators do |g|\n  g.orm             :data_mapper, migration: ...\n</code></pre>\n"],["generators","Rails::Railtie","classes/Rails/Railtie.html#method-c-generators","(&blk)",""],["get","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-get","(action, **args)","<p>Simulate a GET request with the given parameters.\n<p><code>action</code>: The controller action to call.\n<p><code>params</code>: The hash â€¦\n"],["get","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-get","(path, **args)","<p>Performs a GET request with the given parameters. See ActionDispatch::Integration::Session#process for â€¦\n"],["get","ActionDispatch::Routing::Mapper::HttpHelpers","classes/ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-get","(*args, &block)","<p>Define a route that only recognizes HTTP GET. For supported arguments, see match\n\n<pre><code>get &#39;bacon&#39;, to: &#39;food#bacon&#39;\n</code></pre>\n"],["get_header","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-get_header","(key)",""],["getgm","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-getgm","()",""],["getgm","DateTime","classes/DateTime.html#method-i-getgm","()",""],["getlocal","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-getlocal","(utc_offset = nil)",""],["getlocal","DateTime","classes/DateTime.html#method-i-getlocal","(utc_offset = nil)",""],["getutc","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-getutc","()",""],["getutc","DateTime","classes/DateTime.html#method-i-getutc","()",""],["gigabyte","Numeric","classes/Numeric.html#method-i-gigabyte","()",""],["gigabytes","Numeric","classes/Numeric.html#method-i-gigabytes","()","<p>Returns the number of bytes equivalent to the gigabytes provided.\n\n<pre><code>2.gigabytes # =&gt; 2_147_483_648\n</code></pre>\n"],["git","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-git","(commands = {})","<p>Run a command in git.\n\n<pre><code>git :init\ngit add: &quot;this.file that.rb&quot;\ngit add: &quot;onefile.rb&quot;, rm: &quot;badfile.cxx&quot;\n</code></pre>\n"],["gitattributes","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-gitattributes","()",""],["github","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-github","(repo, options = {}, &block)",""],["github","Rails::Generators::AppBase::GemfileEntry","classes/Rails/Generators/AppBase/GemfileEntry.html#method-c-github","(name, github, branch = nil, comment = nil)",""],["gitignore","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-gitignore","()",""],["gitignore","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-gitignore","()",""],["global_csrf_token","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-global_csrf_token","(session)",""],["global_previous_schemes_for","ActiveRecord::Encryption::EncryptableRecord","classes/ActiveRecord/Encryption/EncryptableRecord.html#method-i-global_previous_schemes_for","(scheme)",""],["gmt?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-gmt-3F","()",""],["gmt_offset","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-gmt_offset","()",""],["gmtime","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-gmtime","()",""],["gmtime","DateTime","classes/DateTime.html#method-i-gmtime","()",""],["gmtoff","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-gmtoff","()",""],["grapheme_length","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-grapheme_length","()","<p>Returns the number of grapheme clusters in the string.\n\n<pre><code>&#39;à¤•à¥à¤·à¤¿&#39;.mb_chars.length   # =&gt; 4\n&#39;à¤•à¥à¤·à¤¿&#39;.mb_chars.grapheme_length ...\n</code></pre>\n"],["group","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-group","(*args)","<p>Allows to specify a group attribute:\n\n<pre><code>User.group(:name)\n# SELECT &quot;users&quot;.* FROM &quot;users&quot; GROUP BY name\n</code></pre>\n<p>Returns â€¦\n"],["group_by_attribute","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-group_by_attribute","()","<p>Returns a Hash of attributes with an array of their Error objects.\n\n<pre><code>person.errors.group_by_attribute\n# ...\n</code></pre>\n"],["grouped_collection_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-grouped_collection_select","(method, collection, group_method, group_label_method, option_key_method, option_value_method, options = {}, html_options = {})","<p>Wraps ActionView::Helpers::FormOptionsHelper#grouped_collection_select for form builders:\n\n<pre><code>&lt;%= form_for ...\n</code></pre>\n"],["grouped_collection_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-grouped_collection_select","(object, method, collection, group_method, group_label_method, option_key_method, option_value_method, options = {}, html_options = {})","<p>Returns <code>&lt;select&gt;</code>, <code>&lt;optgroup&gt;</code> and <code>&lt;option&gt;</code> tags for the collection of existing return â€¦\n"],["grouped_options_for_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-grouped_options_for_select","(grouped_options, selected_key = nil, options = {})","<p>Returns a string of <code>&lt;option&gt;</code> tags, like <code>options_for_select</code>, but wraps them with <code>&lt;optgroup&gt;</code> â€¦\n"],["groups","Rails","classes/Rails.html#method-c-groups","(*groups)","<p>Returns all Rails groups for loading based on:\n<p>The Rails environment;\n<p>The environment variable RAILS_GROUPS â€¦\n"],["h","ERB::Util","classes/ERB/Util.html#method-c-h","(s)",""],["ha1","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-ha1","(credentials, password)",""],["halted_callback","ActionController::LogSubscriber","classes/ActionController/LogSubscriber.html#method-i-halted_callback","(event)",""],["handle","ActiveSupport::ErrorReporter","classes/ActiveSupport/ErrorReporter.html#method-i-handle","(error_class = StandardError, severity: :warning, context: {}, fallback: nil)","<p>Report any unhandled exception, and swallow it.\n\n<pre><code>Rails.error.handle do\n  1 + &#39;1&#39;\nend\n</code></pre>\n"],["handle_unverified_request","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-handle_unverified_request","()",""],["handle_unverified_request","ActionController::RequestForgeryProtection::ProtectionMethods::Exception","classes/ActionController/RequestForgeryProtection/ProtectionMethods/Exception.html#method-i-handle_unverified_request","()",""],["handle_unverified_request","ActionController::RequestForgeryProtection::ProtectionMethods::NullSession","classes/ActionController/RequestForgeryProtection/ProtectionMethods/NullSession.html#method-i-handle_unverified_request","()","<p>This is the method that defines the application behavior when a request is found to be unverified.\n"],["handle_unverified_request","ActionController::RequestForgeryProtection::ProtectionMethods::ResetSession","classes/ActionController/RequestForgeryProtection/ProtectionMethods/ResetSession.html#method-i-handle_unverified_request","()",""],["handles_encoding?","ActionView::Template::Handlers::ERB","classes/ActionView/Template/Handlers/ERB.html#method-i-handles_encoding-3F","()",""],["has_and_belongs_to_many","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_and_belongs_to_many","(name, scope = nil, **options, &extension)","<p>Specifies a many-to-many relationship with another class. This associates two classes via an intermediate â€¦\n"],["has_attribute?","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-has_attribute-3F","(attr_name)","<p>Returns <code>true</code> if the given attribute is in the attributes hash, otherwise <code>false</code>.\n\n<pre><code>class Person &lt; ActiveRecord::Base ...\n</code></pre>\n"],["has_attribute?","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-has_attribute-3F","(attr_name)","<p>Returns true if the given attribute exists, otherwise false.\n\n<pre><code>class Person &lt; ActiveRecord::Base\n  alias_attribute ...\n</code></pre>\n"],["has_basic_credentials?","ActionController::HttpAuthentication::Basic","classes/ActionController/HttpAuthentication/Basic.html#method-i-has_basic_credentials-3F","(request)",""],["has_changes_to_save?","ActiveRecord::AttributeMethods::Dirty","classes/ActiveRecord/AttributeMethods/Dirty.html#method-i-has_changes_to_save-3F","()","<p>Will the next call to <code>save</code> have any changes to persist?\n"],["has_header?","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-has_header-3F","(key)",""],["has_key?","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-has_key-3F","","<p>Returns true if the given key is present in the parameters.\n"],["has_key?","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-has_key-3F","(attribute)",""],["has_key?","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-has_key-3F","(key)",""],["has_key?","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-has_key-3F","(key)",""],["has_many","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_many","(name, scope = nil, **options, &extension)","<p>Specifies a one-to-many association. The following methods for retrieval and query of collections of â€¦\n"],["has_many_attached","ActiveStorage::Attached::Model","classes/ActiveStorage/Attached/Model.html#method-i-has_many_attached","(name, dependent: :purge_later, service: nil, strict_loading: false)","<p>Specifies the relation between multiple attachments and the model.\n\n<pre><code>class Gallery &lt; ApplicationRecord\n ...\n</code></pre>\n"],["has_named_route?","ActionDispatch::Routing::Mapper::Base","classes/ActionDispatch/Routing/Mapper/Base.html#method-i-has_named_route-3F","(name)","<p>Query if the following named route was already defined.\n"],["has_one","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_one","(name, scope = nil, **options)","<p>Specifies a one-to-one association with another class. This method should only be used if the other class â€¦\n"],["has_one_attached","ActiveStorage::Attached::Model","classes/ActiveStorage/Attached/Model.html#method-i-has_one_attached","(name, dependent: :purge_later, service: nil, strict_loading: false)","<p>Specifies the relation between a single attachment and the model.\n\n<pre><code>class User &lt; ApplicationRecord\n  has_one_attached ...\n</code></pre>\n"],["has_rich_text","ActionText::Attribute","classes/ActionText/Attribute.html#method-i-has_rich_text","(name, encrypted: false)","<p>Provides access to a dependent RichText model that holds the body and attachments for a single named â€¦\n"],["has_secure_password","ActiveModel::SecurePassword::ClassMethods","classes/ActiveModel/SecurePassword/ClassMethods.html#method-i-has_secure_password","(attribute = :password, validations: true)","<p>Adds methods to set and authenticate against a BCrypt password. This mechanism requires you to have a â€¦\n"],["has_secure_token","ActiveRecord::SecureToken::ClassMethods","classes/ActiveRecord/SecureToken/ClassMethods.html#method-i-has_secure_token","(attribute = :token, length: MINIMUM_TOKEN_LENGTH)","<p>Example using #has_secure_token\n\n<pre><code># Schema: User(token:string, auth_token:string)\nclass User &lt; ActiveRecord::Base ...\n</code></pre>\n"],["has_value?","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-has_value-3F","","<p>Returns true if the given value is present for some key in the parameters.\n"],["hash","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-hash","()",""],["hash","ActiveModel::Type::Value","classes/ActiveModel/Type/Value.html#method-i-hash","()",""],["hash","ActiveModel::Type::Value","classes/ActiveModel/Type/Value.html#method-i-hash","()",""],["hash","ActiveRecord::Associations::Preloader::Association::LoaderQuery","classes/ActiveRecord/Associations/Preloader/Association/LoaderQuery.html#method-i-hash","()",""],["hash","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-hash","()","<p>Delegates to id in order to allow two records of the same type and id to work with something like:\n\n<pre><code>[ Person.find(1), ...\n</code></pre>\n"],["hash","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-hash","()",""],["hash","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-hash","()",""],["hash_digest_class","ActiveSupport::KeyGenerator","classes/ActiveSupport/KeyGenerator.html#method-c-hash_digest_class","()",""],["hash_digest_class=","ActiveSupport::KeyGenerator","classes/ActiveSupport/KeyGenerator.html#method-c-hash_digest_class-3D","(klass)",""],["having","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-having","(opts, *rest)","<p>Allows to specify a HAVING clause. Note that you can&#39;t use HAVING without also specifying a GROUP â€¦\n"],["head","ActionController::Head","classes/ActionController/Head.html#method-i-head","(status, options = {})","<p>Returns a response that has no content (merely headers). The options argument is interpreted to be a â€¦\n"],["head","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-head","(action, **args)","<p>Simulate a HEAD request with the given parameters and set/volley the response. See <code>get</code> for more details. â€¦\n"],["head","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-head","(path, **args)","<p>Performs a HEAD request with the given parameters. See ActionDispatch::Integration::Session#process for â€¦\n"],["header","ActionDispatch::Routing::ConsoleFormatter::Base","classes/ActionDispatch/Routing/ConsoleFormatter/Base.html#method-i-header","(routes)",""],["header","ActionDispatch::Routing::ConsoleFormatter::Sheet","classes/ActionDispatch/Routing/ConsoleFormatter/Sheet.html#method-i-header","(routes)",""],["header","ActionDispatch::Routing::HtmlTableFormatter","classes/ActionDispatch/Routing/HtmlTableFormatter.html#method-i-header","(routes)","<p>The header is part of the HTML page, so we don&#39;t construct it here.\n"],["headers","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-headers","()","<p>Provides access to the request&#39;s HTTP headers, for example:\n\n<pre><code>request.headers[&quot;Content-Type&quot;] # =&gt; &quot;text/plain&quot;\n</code></pre>\n"],["headers","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-headers","(args = nil)","<p>Allows you to pass random and unusual headers to the new <code>Mail::Message</code> object which will add them to â€¦\n"],["headers_for_direct_upload","ActiveStorage::Service","classes/ActiveStorage/Service.html#method-i-headers_for_direct_upload","(key, filename:, content_type:, content_length:, checksum:, custom_metadata: {})","<p>Returns a Hash of headers for <code>url_for_direct_upload</code> requests.\n"],["headers_for_direct_upload","ActiveStorage::Service::AzureStorageService","classes/ActiveStorage/Service/AzureStorageService.html#method-i-headers_for_direct_upload","(key, content_type:, checksum:, filename: nil, disposition: nil, custom_metadata: {}, **)",""],["headers_for_direct_upload","ActiveStorage::Service::DiskService","classes/ActiveStorage/Service/DiskService.html#method-i-headers_for_direct_upload","(key, content_type:, **)",""],["headers_for_direct_upload","ActiveStorage::Service::GCSService","classes/ActiveStorage/Service/GCSService.html#method-i-headers_for_direct_upload","(key, checksum:, filename: nil, disposition: nil, custom_metadata: {}, **)",""],["headers_for_direct_upload","ActiveStorage::Service::S3Service","classes/ActiveStorage/Service/S3Service.html#method-i-headers_for_direct_upload","(key, content_type:, checksum:, filename: nil, disposition: nil, custom_metadata: {}, **)",""],["health_check","ActionMailbox::Ingresses::Mandrill::InboundEmailsController","classes/ActionMailbox/Ingresses/Mandrill/InboundEmailsController.html#method-i-health_check","()",""],["help","Rails::Command::Base","classes/Rails/Command/Base.html#method-i-help","()",""],["help","Rails::Generators","classes/Rails/Generators.html#method-c-help","(command = \"generate\")","<p>Show help message with available generators.\n"],["helper","AbstractController::Helpers::ClassMethods","classes/AbstractController/Helpers/ClassMethods.html#method-i-helper","(*args, &block)","<p>Includes the given modules in the template class.\n<p>Modules can be specified in different ways. All of the â€¦\n"],["helper","Rails::ConsoleMethods","classes/Rails/ConsoleMethods.html#method-i-helper","()","<p>Gets the helper methods available to the controller.\n<p>This method assumes an <code>ApplicationController</code> exists, â€¦\n"],["helper_attr","ActionController::Helpers::ClassMethods","classes/ActionController/Helpers/ClassMethods.html#method-i-helper_attr","(*attrs)","<p>Declares helper accessors for controller attributes. For example, the following adds new <code>name</code> and <code>name=</code> â€¦\n"],["helper_class","ActionView::TestCase::Behavior::ClassMethods","classes/ActionView/TestCase/Behavior/ClassMethods.html#method-i-helper_class","()",""],["helper_method","AbstractController::Helpers::ClassMethods","classes/AbstractController/Helpers/ClassMethods.html#method-i-helper_method","(*methods)","<p>Declare a controller method as a helper. For example, the following makes the <code>current_user</code> and <code>logged_in?</code> â€¦\n"],["helper_method","ActionView::TestCase::Behavior::ClassMethods","classes/ActionView/TestCase/Behavior/ClassMethods.html#method-i-helper_method","(*methods)",""],["helpers","ActionController::Helpers","classes/ActionController/Helpers.html#method-i-helpers","()","<p>Provides a proxy to access helper methods from outside the view.\n"],["helpers","ActionController::Helpers::ClassMethods","classes/ActionController/Helpers/ClassMethods.html#method-i-helpers","()","<p>Provides a proxy to access helper methods from outside the view.\n<p>Note that the proxy is rendered under â€¦\n"],["helpers","Rails::Engine","classes/Rails/Engine.html#method-i-helpers","()","<p>Returns a module with all the helpers defined for the engine.\n"],["helpers_paths","Rails::Engine","classes/Rails/Engine.html#method-i-helpers_paths","()","<p>Returns all registered helpers paths.\n"],["hex?","ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit::Data","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Bit/Data.html#method-i-hex-3F","()",""],["hidden_field","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-hidden_field","(method, options = {})","<p>Returns a hidden input tag tailored for accessing a specified attribute (identified by <code>method</code>) on an â€¦\n"],["hidden_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-hidden_field","(object_name, method, options = {})","<p>Returns a hidden input tag tailored for accessing a specified attribute (identified by <code>method</code>) on an â€¦\n"],["hidden_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-hidden_field_tag","(name, value = nil, options = {})","<p>Creates a hidden form input field used to transmit data that would be lost due to HTTP&#39;s statelessness â€¦\n"],["hidden_namespaces","Rails::Generators","classes/Rails/Generators.html#method-c-hidden_namespaces","()","<p>Returns an array of generator namespaces that are hidden. Generator namespaces may be hidden for a variety â€¦\n"],["hide!","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-hide-21","()","<p>Convenience method to hide this generator from the available ones when running rails generator command. â€¦\n"],["hide_command!","Rails::Command::Base","classes/Rails/Command/Base.html#method-c-hide_command-21","()","<p>Convenience method to hide this command from the available ones when running rails command.\n"],["hide_namespace","Rails::Generators","classes/Rails/Generators.html#method-c-hide_namespace","(*namespaces)",""],["hide_namespaces","Rails::Generators","classes/Rails/Generators.html#method-c-hide_namespaces","(*namespaces)",""],["high_precision_current_timestamp","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-high_precision_current_timestamp","()","<p>Returns an Arel SQL literal for the CURRENT_TIMESTAMP for usage with arbitrary precision date/time columns. â€¦\n"],["high_precision_current_timestamp","ActiveRecord::ConnectionAdapters::MySQL::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/MySQL/DatabaseStatements.html#method-i-high_precision_current_timestamp","()",""],["high_precision_current_timestamp","ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-high_precision_current_timestamp","()",""],["high_precision_current_timestamp","ActiveRecord::ConnectionAdapters::SQLite3::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/SQLite3/DatabaseStatements.html#method-i-high_precision_current_timestamp","()",""],["highlight","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-highlight","(text, phrases, options = {}, &block)","<p>Highlights one or more <code>phrases</code> everywhere in <code>text</code> by inserting it into a <code>:highlighter</code> string. The highlighter â€¦\n"],["hook_for","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-hook_for","(*names, &block)","<p>Invoke a generator based on the value supplied by the user to the given option named â€œnameâ€. â€¦\n"],["host","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-host","()","<p>Returns the host for this request, such as â€œexample.comâ€.\n\n<pre><code>req = ActionDispatch::Request.new ...\n</code></pre>\n"],["host","ActionDispatch::Integration::Session","classes/ActionDispatch/Integration/Session.html#method-i-host","()","<p>The hostname used in the last request.\n"],["host","ActiveRecord::DatabaseConfigurations::HashConfig","classes/ActiveRecord/DatabaseConfigurations/HashConfig.html#method-i-host","()",""],["host=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-host-3D","(host)",""],["host_with_port","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-host_with_port","()","<p>Returns a host:port string for this request, such as â€œexample.comâ€ or â€œexample.com:8080â€. â€¦\n"],["hostname_error","ActiveRecord::DatabaseConnectionError","classes/ActiveRecord/DatabaseConnectionError.html#method-c-hostname_error","(hostname)",""],["hour","Numeric","classes/Numeric.html#method-i-hour","()",""],["hours","Numeric","classes/Numeric.html#method-i-hours","()","<p>Returns a Duration instance matching the number of hours provided.\n\n<pre><code>2.hours # =&gt; 2 hours\n</code></pre>\n"],["hstore","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-hstore","",""],["html?","Mime::AllType","classes/Mime/AllType.html#method-i-html-3F","()",""],["html?","Mime::Type","classes/Mime/Type.html#method-i-html-3F","()",""],["html_document","ActionDispatch::Assertions","classes/ActionDispatch/Assertions.html#method-i-html_document","()",""],["html_escape","ERB::Util","classes/ERB/Util.html#method-c-html_escape","(s)","<p>A utility method for escaping HTML tag characters. This method is also aliased as <code>h</code>.\n\n<pre><code>puts html_escape(&#39;is ...\n</code></pre>\n"],["html_escape_once","ERB::Util","classes/ERB/Util.html#method-c-html_escape_once","(s)","<p>A utility method for escaping HTML without affecting existing escaped entities.\n\n<pre><code>html_escape_once(&#39;1 &lt; ...\n</code></pre>\n"],["html_safe","String","classes/String.html#method-i-html_safe","()","<p>Marks a string as trusted safe. It will be inserted into HTML with no additional escaping performed. â€¦\n"],["html_safe?","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-html_safe-3F","()",""],["html_safe?","Numeric","classes/Numeric.html#method-i-html_safe-3F","()",""],["html_safe?","Object","classes/Object.html#method-i-html_safe-3F","()",""],["http_auth_salt","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-http_auth_salt","()",""],["http_basic_authenticate_or_request_with","ActionController::HttpAuthentication::Basic::ControllerMethods","classes/ActionController/HttpAuthentication/Basic/ControllerMethods.html#method-i-http_basic_authenticate_or_request_with","(name:, password:, realm: nil, message: nil)",""],["http_basic_authenticate_with","ActionController::HttpAuthentication::Basic::ControllerMethods::ClassMethods","classes/ActionController/HttpAuthentication/Basic/ControllerMethods/ClassMethods.html#method-i-http_basic_authenticate_with","(name:, password:, realm: nil, **options)","<p>Enables HTTP Basic authentication.\n<p>See ActionController::HttpAuthentication::Basic for example usage. â€¦\n"],["http_cache_forever","ActionController::ConditionalGet","classes/ActionController/ConditionalGet.html#method-i-http_cache_forever","(public: false)","<p>Cache or yield the block. The cache is supposed to never expire.\n<p>You can use this method when you have â€¦\n"],["httpdate","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-httpdate","()","<p>Returns a string of the object&#39;s date and time in the format used by HTTP requests.\n\n<pre><code>Time.zone.now.httpdate ...\n</code></pre>\n"],["https!","ActionDispatch::Integration::Session","classes/ActionDispatch/Integration/Session.html#method-i-https-21","(flag = true)","<p>Specify whether or not the session should mimic a secure HTTPS request.\n\n<pre><code>session.https!\nsession.https!(false)\n</code></pre>\n"],["https?","ActionDispatch::Integration::Session","classes/ActionDispatch/Integration/Session.html#method-i-https-3F","()","<p>Returns <code>true</code> if the session is mimicking a secure HTTPS request.\n\n<pre><code>if session.https?\n  ...\nend\n</code></pre>\n"],["human","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-human","(options = {})","<p>Transform the model name into a more human format, using I18n. By default, it will underscore then humanize â€¦\n"],["human","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-i-human","(rule, replacement)","<p>Specifies a humanized form of a string by a regular expression rule or by a string mapping. When using â€¦\n"],["human_attribute_name","ActiveModel::Translation","classes/ActiveModel/Translation.html#method-i-human_attribute_name","(attribute, options = {})","<p>Transforms attribute names into a more human format, such as â€œFirst nameâ€ instead of â€œfirst_nameâ€. â€¦\n"],["human_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-human_name","()",""],["humanize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-humanize","(lower_case_and_underscored_word, capitalize: true, keep_id_suffix: false)","<p>Tweaks an attribute name for display to end users.\n<p>Specifically, performs these transformations:\n<p>Applies â€¦\n"],["humanize","String","classes/String.html#method-i-humanize","(capitalize: true, keep_id_suffix: false)","<p>Capitalizes the first word, turns underscores into spaces, and (by default)strips a trailing &#39;_id&#39; â€¦\n"],["i18n_scope","ActiveModel::Translation","classes/ActiveModel/Translation.html#method-i-i18n_scope","()","<p>Returns the <code>i18n_scope</code> for the class. Override if you want custom lookup.\n"],["i18n_scope","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-i18n_scope","()",""],["id","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-id","()","<p>Generate an HTML <code>id</code> attribute value.\n<p>return the <code>&lt;form&gt;</code> element&#39;s <code>id</code> attribute.\n\n<pre><code>&lt;%= form_for @post ...\n</code></pre>\n"],["id","ActiveRecord::AttributeMethods::PrimaryKey","classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id","()","<p>Returns the primary key column&#39;s value.\n"],["id","ActiveRecord::Encryption::Key","classes/ActiveRecord/Encryption/Key.html#method-i-id","()",""],["id=","ActiveRecord::AttributeMethods::PrimaryKey","classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id-3D","(value)","<p>Sets the primary key column&#39;s value.\n"],["id?","ActiveRecord::AttributeMethods::PrimaryKey","classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id-3F","()","<p>Queries the primary key column&#39;s value.\n"],["id_before_type_cast","ActiveRecord::AttributeMethods::PrimaryKey","classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id_before_type_cast","()","<p>Returns the primary key column&#39;s value before type cast.\n"],["id_in_database","ActiveRecord::AttributeMethods::PrimaryKey","classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id_in_database","()","<p>Returns the primary key column&#39;s value from the database.\n"],["id_was","ActiveRecord::AttributeMethods::PrimaryKey","classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id_was","()","<p>Returns the primary key column&#39;s previous value.\n"],["identified?","ActiveStorage::Blob::Identifiable","classes/ActiveStorage/Blob/Identifiable.html#method-i-identified-3F","()",""],["identified_by","ActionCable::Connection::Identification::ClassMethods","classes/ActionCable/Connection/Identification/ClassMethods.html#method-i-identified_by","(*identifiers)","<p>Mark a key as being a connection identifier index that can then be used to find the specific connection â€¦\n"],["identifier","ActionCable::SubscriptionAdapter::Base","classes/ActionCable/SubscriptionAdapter/Base.html#method-i-identifier","()",""],["identify","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-identify","(label, column_type = :integer)","<p>Returns a consistent, platform-independent identifier for <code>label</code>. Integer identifiers are values less â€¦\n"],["identify","ActiveStorage::Blob::Identifiable","classes/ActiveStorage/Blob/Identifiable.html#method-i-identify","()",""],["identify_without_saving","ActiveStorage::Blob::Identifiable","classes/ActiveStorage/Blob/Identifiable.html#method-i-identify_without_saving","()",""],["idle_time","ActiveSupport::Notifications::Event","classes/ActiveSupport/Notifications/Event.html#method-i-idle_time","()","<p>Returns the idle time time (in milliseconds) passed since the call to <code>start!</code> and the call to <code>finish!</code> â€¦\n"],["idle_timeout","ActiveRecord::DatabaseConfigurations::HashConfig","classes/ActiveRecord/DatabaseConfigurations/HashConfig.html#method-i-idle_timeout","()",""],["ids","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-ids","()","<p>Pluck all the ID&#39;s for the relation using the table&#39;s primary key\n\n<pre><code>Person.ids # SELECT people.id ...\n</code></pre>\n"],["if_modified_since","ActionDispatch::Http::Cache::Request","classes/ActionDispatch/Http/Cache/Request.html#method-i-if_modified_since","()",""],["if_modified_since=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-if_modified_since-3D","(last_modified)",""],["if_none_match","ActionDispatch::Http::Cache::Request","classes/ActionDispatch/Http/Cache/Request.html#method-i-if_none_match","()",""],["if_none_match=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-if_none_match-3D","(etag)",""],["if_none_match_etags","ActionDispatch::Http::Cache::Request","classes/ActionDispatch/Http/Cache/Request.html#method-i-if_none_match_etags","()",""],["ignore_case?","ActiveRecord::Encryption::Scheme","classes/ActiveRecord/Encryption/Scheme.html#method-i-ignore_case-3F","()",""],["ignored_columns","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-ignored_columns","()","<p>The list of columns names the model should ignore. Ignored columns won&#39;t have attribute accessors â€¦\n"],["ignored_columns=","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-ignored_columns-3D","(columns)","<p>Sets the columns names the model should ignore. Ignored columns won&#39;t have attribute accessors defined, â€¦\n"],["image","ActiveStorage::Preview","classes/ActiveStorage/Preview.html#method-i-image","()","<p>Returns the blob&#39;s attached preview image.\n"],["image","ActiveStorage::Variant","classes/ActiveStorage/Variant.html#method-i-image","()","<p>Returns the receiving variant. Allows ActiveStorage::Variant and ActiveStorage::Preview instances to â€¦\n"],["image","ActiveStorage::VariantWithRecord","classes/ActiveStorage/VariantWithRecord.html#method-i-image","()",""],["image?","ActiveStorage::Blob","classes/ActiveStorage/Blob.html#method-i-image-3F","()","<p>Returns true if the content_type of this blob is in the image range, like image/png.\n"],["image_path","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-image_path","(source, options = {})","<p>Computes the path to an image asset. Full paths from the document root will be passed through. Used internally â€¦\n"],["image_submit_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-image_submit_tag","(source, options = {})","<p>Displays an image which when clicked will submit the form.\n<p><code>source</code> is passed to AssetTagHelper#path_to_image â€¦\n"],["image_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-image_tag","(source, options = {})","<p>Returns an HTML image tag for the <code>source</code>. The <code>source</code> can be a full path, a file, or an Active Storage â€¦\n"],["image_url","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-image_url","(source, options = {})","<p>Computes the full URL to an image asset. This will use <code>image_path</code> internally, so most of their behaviors â€¦\n"],["immutable_strings_by_default=","ActiveRecord::ModelSchema","classes/ActiveRecord/ModelSchema.html#method-c-immutable_strings_by_default-3D","","<p>Determines whether columns should infer their type as <code>:string</code> or <code>:immutable_string</code>. This setting does â€¦\n"],["implicit_order_column","ActiveRecord::ModelSchema","classes/ActiveRecord/ModelSchema.html#method-c-implicit_order_column","","<p>The name of the column records are ordered by if no explicit order clause is used during an ordered finder â€¦\n"],["implicit_order_column=","ActiveRecord::ModelSchema","classes/ActiveRecord/ModelSchema.html#method-c-implicit_order_column-3D","","<p>Sets the column to sort records by when no explicit order clause is used during an ordered finder call. â€¦\n"],["import","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-import","(error, override_options = {})","<p>Imports one error. Imported errors are wrapped as a NestedError, providing access to original error object. â€¦\n"],["in","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-in","(other)",""],["in","Date","classes/Date.html#method-i-in","(seconds)",""],["in","DateTime","classes/DateTime.html#method-i-in","(seconds)",""],["in","Time","classes/Time.html#method-i-in","(seconds)",""],["in?","Object","classes/Object.html#method-i-in-3F","(another_object)","<p>Returns true if this object is included in the argument. Argument must be any object which responds to â€¦\n"],["in_batches","ActiveRecord::Batches","classes/ActiveRecord/Batches.html#method-i-in_batches","(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc)","<p>Yields ActiveRecord::Relation objects to work with a batch of records.\n\n<pre><code>Person.where(&quot;age &gt; 21&quot;).in_batches ...\n</code></pre>\n"],["in_days","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-in_days","()","<p>Returns the amount of days a duration covers as a float\n\n<pre><code>12.hours.in_days # =&gt; 0.5\n</code></pre>\n"],["in_groups","Array","classes/Array.html#method-i-in_groups","(number, fill_with = nil, &block)","<p>Splits or iterates over the array in <code>number</code> of groups, padding any remaining slots with <code>fill_with</code> unless â€¦\n"],["in_groups_of","Array","classes/Array.html#method-i-in_groups_of","(number, fill_with = nil, &block)","<p>Splits or iterates over the array in groups of size <code>number</code>, padding any remaining slots with <code>fill_with</code> â€¦\n"],["in_hours","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-in_hours","()","<p>Returns the amount of hours a duration covers as a float\n\n<pre><code>1.day.in_hours # =&gt; 24.0\n</code></pre>\n"],["in_milliseconds","Numeric","classes/Numeric.html#method-i-in_milliseconds","()","<p>Returns the number of milliseconds equivalent to the seconds provided. Used with the standard time durations. â€¦\n"],["in_minutes","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-in_minutes","()","<p>Returns the amount of minutes a duration covers as a float\n\n<pre><code>1.day.in_minutes # =&gt; 1440.0\n</code></pre>\n"],["in_months","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-in_months","()","<p>Returns the amount of months a duration covers as a float\n\n<pre><code>9.weeks.in_months # =&gt; 2.07\n</code></pre>\n"],["in_order_of","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-in_order_of","(column, values)","<p>Allows to specify an order by a specific set of values. Depending on your adapter this will either use â€¦\n"],["in_order_of","Enumerable","classes/Enumerable.html#method-i-in_order_of","(key, series)","<p>Returns a new <code>Array</code> where the order has been set to that provided in the <code>series</code>, based on the <code>key</code> of â€¦\n"],["in_rendering_context","ActionView::Base","classes/ActionView/Base.html#method-i-in_rendering_context","(options)",""],["in_seconds","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-in_seconds","()",""],["in_time_zone","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-in_time_zone","(new_zone = ::Time.zone)","<p>Returns the simultaneous time in <code>Time.zone</code>, or the specified zone.\n"],["in_time_zone","DateAndTime::Zones","classes/DateAndTime/Zones.html#method-i-in_time_zone","(zone = ::Time.zone)","<p>Returns the simultaneous time in <code>Time.zone</code> if a zone is given or if Time.zone_default is set. Otherwise â€¦\n"],["in_time_zone","String","classes/String.html#method-i-in_time_zone","(zone = ::Time.zone)","<p>Converts String to a TimeWithZone in the current zone if Time.zone or Time.zone_default is set, otherwise â€¦\n"],["in_weeks","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-in_weeks","()","<p>Returns the amount of weeks a duration covers as a float\n\n<pre><code>2.months.in_weeks # =&gt; 8.696\n</code></pre>\n"],["in_years","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-in_years","()","<p>Returns the amount of years a duration covers as a float\n\n<pre><code>30.days.in_years # =&gt; 0.082\n</code></pre>\n"],["incinerate","ActionMailbox::InboundEmail::Incineratable","classes/ActionMailbox/InboundEmail/Incineratable.html#method-i-incinerate","()",""],["incinerate_later","ActionMailbox::InboundEmail::Incineratable","classes/ActionMailbox/InboundEmail/Incineratable.html#method-i-incinerate_later","()",""],["include?","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-include-3F","","<p>Returns true if the given key is present in the parameters.\n"],["include?","ActionDispatch::Http::Headers","classes/ActionDispatch/Http/Headers.html#method-i-include-3F","(key)",""],["include?","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-include-3F","(attribute)","<p>Returns <code>true</code> if the error messages include an error for the given key <code>attribute</code>, <code>false</code> otherwise.\n\n<pre><code>person.errors.messages ...\n</code></pre>\n"],["include?","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-include-3F","(record)","<p>Returns <code>true</code> if the given <code>record</code> is present in the collection.\n\n<pre><code>class Person &lt; ActiveRecord::Base\n  has_many ...\n</code></pre>\n"],["include?","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-include-3F","(record)","<p>Returns true if the relation contains the given record or false otherwise.\n<p>No query is performed if the â€¦\n"],["include?","ActiveSupport::CompareWithRange","classes/ActiveSupport/CompareWithRange.html#method-i-include-3F","(value)","<p>Extends the default Range#include? to support range comparisons.\n\n<pre><code>(1..5).include?(1..5)  # =&gt; true\n(1..5).include?(2..3) ...\n</code></pre>\n"],["include?","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-include-3F","(key)",""],["include?","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-include-3F","(key)",""],["included","ActiveModel::Validations::AcceptanceValidator::LazilyDefineAttributes","classes/ActiveModel/Validations/AcceptanceValidator/LazilyDefineAttributes.html#method-i-included","(klass)",""],["included","ActiveSupport::Concern","classes/ActiveSupport/Concern.html#method-i-included","(base = nil, &block)","<p>Evaluate given block in context of base class, so that you can write class macros here. When you define â€¦\n"],["included","ActiveSupport::Deprecation::DeprecatedConstantAccessor","classes/ActiveSupport/Deprecation/DeprecatedConstantAccessor.html#method-c-included","(base)",""],["includes","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-includes","(*args)","<p>Specify relationships to be included in the result set. For example:\n\n<pre><code>users = User.includes(:address)\nusers.each ...\n</code></pre>\n"],["includes_column?","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-i-includes_column-3F","(name)","<p>Returns true if this result set includes the column named <code>name</code>\n"],["including","Array","classes/Array.html#method-i-including","(*elements)","<p>Returns a new array that includes the passed elements.\n\n<pre><code>[ 1, 2, 3 ].including(4, 5) # =&gt; [ 1, 2, 3, 4, ...\n</code></pre>\n"],["including","Enumerable","classes/Enumerable.html#method-i-including","(*elements)","<p>Returns a new array that includes the passed elements.\n\n<pre><code>[ 1, 2, 3 ].including(4, 5)\n# =&gt; [ 1, 2, 3, 4, ...\n</code></pre>\n"],["increment","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-increment","(attribute, by = 1)","<p>Initializes <code>attribute</code> to zero if <code>nil</code> and adds the value passed as <code>by</code> (default is 1). The increment is â€¦\n"],["increment","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-increment","(name, amount = 1, options = nil)","<p>Increments an already existing integer value that is stored in the cache. If the key is not found nothing â€¦\n"],["increment","ActiveSupport::Cache::MemCacheStore","classes/ActiveSupport/Cache/MemCacheStore.html#method-i-increment","(name, amount = 1, options = nil)","<p>Increment a cached value. This method uses the memcached incr atomic operator and can only be used on â€¦\n"],["increment","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-increment","(name, amount = 1, options = nil)","<p>Increment an integer value in the cache.\n"],["increment","ActiveSupport::Cache::NullStore","classes/ActiveSupport/Cache/NullStore.html#method-i-increment","(name, amount = 1, options = nil)",""],["increment","ActiveSupport::Cache::RedisCacheStore","classes/ActiveSupport/Cache/RedisCacheStore.html#method-i-increment","(name, amount = 1, options = nil)","<p>Cache Store API implementation.\n<p>Increment a cached value. This method uses the Redis incr atomic operator â€¦\n"],["increment","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-increment","(name, amount = 1, options = nil)","<p>Increments an integer value in the cache.\n<p>Options are passed to the underlying cache implementation.\n<p>Some â€¦\n"],["increment!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-increment-21","(attribute, by = 1, touch: nil)","<p>Wrapper around #increment that writes the update to the database. Only <code>attribute</code> is updated; the record â€¦\n"],["increment_counter","ActiveRecord::CounterCache::ClassMethods","classes/ActiveRecord/CounterCache/ClassMethods.html#method-i-increment_counter","(counter_name, id, touch: nil)","<p>Increment a numeric field by one, via a direct SQL update.\n<p>This method is used primarily for maintaining â€¦\n"],["increment_load_index","Rails::Railtie","classes/Rails/Railtie.html#method-c-increment_load_index","()",""],["indent","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-i-indent","(content, multiplier = 2)",""],["indent","String","classes/String.html#method-i-indent","(amount, indent_string = nil, indent_empty_lines = false)","<p>Indents the lines in the receiver:\n\n<pre><code>&lt;&lt;EOS.indent(2)\ndef some_method\n  some_code\nend\nEOS\n# =&gt;\n  def some_method ...\n</code></pre>\n"],["indent!","String","classes/String.html#method-i-indent-21","(amount, indent_string = nil, indent_empty_lines = false)","<p>Same as <code>indent</code>, except it indents the receiver in-place.\n<p>Returns the indented string, or <code>nil</code> if there â€¦\n"],["indentation","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-indentation","()","<p>Indent the <code>Gemfile</code> to the depth of @indentation\n"],["index","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-index","(column_name, **options)","<p>Adds a new index to the table. <code>column_name</code> can be a single Symbol, or an Array of Symbols.\n\n<pre><code>t.index(:name) ...\n</code></pre>\n"],["index","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-index","(column_name, **options)","<p>Adds index options to the indexes hash, keyed by column name This is primarily used to track indexes â€¦\n"],["index","Rails::Rails::Conductor::ActionMailbox::InboundEmailsController","classes/Rails/Rails/Conductor/ActionMailbox/InboundEmailsController.html#method-i-index","()",""],["index_algorithms","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-index_algorithms","()","<p>A list of index algorithms, to be filled by adapters that support them.\n"],["index_algorithms","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-index_algorithms","()",""],["index_algorithms","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-index_algorithms","()",""],["index_by","Enumerable","classes/Enumerable.html#method-i-index_by","()","<p>Convert an enumerable to a hash, using the block result as the key and the element as the value.\n\n<pre><code>people.index_by(&amp;:login) ...\n</code></pre>\n"],["index_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-index_exists-3F","(table_name, column_name, **options)","<p>Checks to see if an index exists on a table for a given index definition.\n\n<pre><code># Check an index exists\nindex_exists?(:suppliers, ...\n</code></pre>\n"],["index_exists?","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-index_exists-3F","(column_name, options = {})","<p>Checks to see if an index exists.\n\n<pre><code>unless t.index_exists?(:branch_id)\n  t.index(:branch_id)\nend\n</code></pre>\n<p>See connection.index_exists? â€¦\n"],["index_helper","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-index_helper","(type: nil)",""],["index_name_exists?","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-index_name_exists-3F","(table_name, index_name)","<p>Verifies existence of an index with a given name.\n"],["index_name_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-index_name_exists-3F","(table_name, index_name)","<p>Verifies the existence of an index with a given name.\n"],["index_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-index_name_length","()","<p>Returns the maximum length of an index name.\n"],["index_with","Enumerable","classes/Enumerable.html#method-i-index_with","(default = (no_default = true))","<p>Convert an enumerable to a hash, using the element as the key and the block result as the value.\n\n<pre><code>post ...\n</code></pre>\n"],["indexes","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-indexes","(table_name)",""],["indexes","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-indexes","(table_name)","<p>Returns an array of indexes for the given table.\n"],["inet","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-inet","",""],["inflections","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-inflections","(locale = :en)","<p>Yields a singleton instance of Inflector::Inflections so you can specify additional inflector rules. â€¦\n"],["inheritable_copy","ActiveSupport::InheritableOptions","classes/ActiveSupport/InheritableOptions.html#method-i-inheritable_copy","()",""],["inherited","AbstractController::Helpers::ClassMethods","classes/AbstractController/Helpers/ClassMethods.html#method-i-inherited","(klass)","<p>When a class is inherited, wrap its helper module in a new module. This ensures that the parent class&#39;s â€¦\n"],["inherited","ActionController::ParamsWrapper::Options::ClassMethods","classes/ActionController/ParamsWrapper/Options/ClassMethods.html#method-i-inherited","(klass)","<p>Sets the default wrapper key or model which will be used to determine wrapper key and attribute names. â€¦\n"],["inherited","ActionController::Railties::Helpers","classes/ActionController/Railties/Helpers.html#method-i-inherited","(klass)",""],["inherited","ActionController::Rendering::ClassMethods","classes/ActionController/Rendering/ClassMethods.html#method-i-inherited","(klass)",""],["inherited","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-inherited","(subclass)",""],["inherited","ActiveSupport::DescendantsTracker","classes/ActiveSupport/DescendantsTracker.html#method-i-inherited","(base)",""],["inherited","Rails::Application","classes/Rails/Application.html#method-c-inherited","(base)",""],["inherited","Rails::Engine","classes/Rails/Engine.html#method-c-inherited","(base)",""],["inherited","Rails::Railtie","classes/Rails/Railtie.html#method-c-inherited","(subclass)",""],["inherited","Rails::Railtie::Configurable::ClassMethods","classes/Rails/Railtie/Configurable/ClassMethods.html#method-i-inherited","(base)",""],["init_with","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-init_with","(coder)",""],["init_with","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-init_with","(coder, &block)","<p>Initialize an empty model object from <code>coder</code>. <code>coder</code> should be the result of previously encoding an Active â€¦\n"],["initialize_copy","ActionDispatch::ContentSecurityPolicy","classes/ActionDispatch/ContentSecurityPolicy.html#method-i-initialize_copy","(other)",""],["initialize_copy","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-initialize_copy","(other)",""],["initialize_copy","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-initialize_copy","(other)",""],["initialize_copy","ActionDispatch::PermissionsPolicy","classes/ActionDispatch/PermissionsPolicy.html#method-i-initialize_copy","(other)",""],["initialize_copy","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-initialize_copy","(other)",""],["initialize_copy","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-i-initialize_copy","(other)",""],["initialize_copy","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-initialize_copy","(other)",""],["initialize_dup","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-initialize_dup","(other)",""],["initialize_dup","ActiveRecord::Inheritance","classes/ActiveRecord/Inheritance.html#method-i-initialize_dup","(other)",""],["initialize_load_schema_monitor","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-initialize_load_schema_monitor","()",""],["initialize_sid","ActionDispatch::Session::Compatibility","classes/ActionDispatch/Session/Compatibility.html#method-i-initialize_sid","()",""],["initialized?","Rails::Application","classes/Rails/Application.html#method-i-initialized-3F","()","<p>Returns true if the application is initialized.\n"],["initializer","Rails::Application","classes/Rails/Application.html#method-i-initializer","(name, opts = {}, &block)","<p>Sends the initializers to the <code>initializer</code> method defined in the Rails::Initializable module. Each Rails::Application â€¦\n"],["initializer","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-initializer","(filename, data = nil)","<p>Create a new initializer with the provided code (either in a block or a string).\n\n<pre><code>initializer(&quot;globals.rb&quot;) ...\n</code></pre>\n"],["initializer","Rails::Initializable::ClassMethods","classes/Rails/Initializable/ClassMethods.html#method-i-initializer","(name, opts = {}, &blk)",""],["initializers","Rails::Initializable","classes/Rails/Initializable.html#method-i-initializers","()",""],["initializers","Rails::Initializable::ClassMethods","classes/Rails/Initializable/ClassMethods.html#method-i-initializers","()",""],["initializers_chain","Rails::Initializable::ClassMethods","classes/Rails/Initializable/ClassMethods.html#method-i-initializers_chain","()",""],["initializers_for","Rails::Initializable::ClassMethods","classes/Rails/Initializable/ClassMethods.html#method-i-initializers_for","(binding)",""],["inline","ActionMailer::Base::LateAttachmentsProxy","classes/ActionMailer/Base/LateAttachmentsProxy.html#method-i-inline","()",""],["inquiry","Array","classes/Array.html#method-i-inquiry","()","<p>Wraps the array in an ActiveSupport::ArrayInquirer object, which gives a friendlier way to check its â€¦\n"],["inquiry","String","classes/String.html#method-i-inquiry","()","<p>Wraps the current string in the ActiveSupport::StringInquirer class, which gives you a prettier way to â€¦\n"],["insert","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-insert","(index, klass, *args, &block)",""],["insert","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-insert","(arel, name = nil, pk = nil, id_value = nil, sequence_name = nil, binds = [])","<p>Executes an INSERT query and returns the new record&#39;s ID\n<p><code>id_value</code> will be returned unless the value â€¦\n"],["insert","ActiveRecord::Persistence::ClassMethods","classes/ActiveRecord/Persistence/ClassMethods.html#method-i-insert","(attributes, returning: nil, unique_by: nil, record_timestamps: nil)","<p>Inserts a single record into the database in a single SQL INSERT statement. It does not instantiate any â€¦\n"],["insert","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-insert","(index, value)",""],["insert","Rails::Configuration::MiddlewareStackProxy","classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-insert","(...)",""],["insert!","ActiveRecord::Persistence::ClassMethods","classes/ActiveRecord/Persistence/ClassMethods.html#method-i-insert-21","(attributes, returning: nil, record_timestamps: nil)","<p>Inserts a single record into the database in a single SQL INSERT statement. It does not instantiate any â€¦\n"],["insert_after","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-insert_after","(index, *args, &block)",""],["insert_after","Rails::Configuration::MiddlewareStackProxy","classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-insert_after","(...)",""],["insert_all","ActiveRecord::Persistence::ClassMethods","classes/ActiveRecord/Persistence/ClassMethods.html#method-i-insert_all","(attributes, returning: nil, unique_by: nil, record_timestamps: nil)","<p>Inserts multiple records into the database in a single SQL INSERT statement. It does not instantiate â€¦\n"],["insert_all!","ActiveRecord::Persistence::ClassMethods","classes/ActiveRecord/Persistence/ClassMethods.html#method-i-insert_all-21","(attributes, returning: nil, record_timestamps: nil)","<p>Inserts multiple records into the database in a single SQL INSERT statement. It does not instantiate â€¦\n"],["insert_before","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-insert_before","(index, klass, *args, &block)",""],["insert_before","Rails::Configuration::MiddlewareStackProxy","classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-insert_before","(...)",""],["insert_fixture","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-insert_fixture","(fixture, table_name)","<p>Inserts the given fixture into the table. Overridden in adapters that require something beyond a simple â€¦\n"],["insert_fixtures_set","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-insert_fixtures_set","(fixture_set, tables_to_delete = [])",""],["inside_template","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-inside_template","()",""],["inside_template?","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-inside_template-3F","()",""],["inspect","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-inspect","()",""],["inspect","ActionDispatch::MiddlewareStack::Middleware","classes/ActionDispatch/MiddlewareStack/Middleware.html#method-i-inspect","()",""],["inspect","ActionDispatch::Routing::PathRedirect","classes/ActionDispatch/Routing/PathRedirect.html#method-i-inspect","()",""],["inspect","ActionText::Attachment","classes/ActionText/Attachment.html#method-i-inspect","()",""],["inspect","ActionText::AttachmentGallery","classes/ActionText/AttachmentGallery.html#method-i-inspect","()",""],["inspect","ActionText::Content","classes/ActionText/Content.html#method-i-inspect","()",""],["inspect","ActionView::Base","classes/ActionView/Base.html#method-c-inspect","()",""],["inspect","ActionView::Template","classes/ActionView/Template.html#method-i-inspect","()",""],["inspect","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-inspect","()","<p>Returns the contents of the record as a nicely formatted string.\n"],["inspect","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-inspect","()",""],["inspect","ActiveSupport::Cache::RedisCacheStore","classes/ActiveSupport/Cache/RedisCacheStore.html#method-i-inspect","()",""],["inspect","ActiveSupport::Deprecation::DeprecatedConstantProxy","classes/ActiveSupport/Deprecation/DeprecatedConstantProxy.html#method-i-inspect","()","<p>Don&#39;t give a deprecation warning on inspect since test/unit and error logs rely on it for diagnostics. â€¦\n"],["inspect","ActiveSupport::OrderedOptions","classes/ActiveSupport/OrderedOptions.html#method-i-inspect","()",""],["inspect","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-inspect","()","<p>Returns a string of the object&#39;s date, time, zone, and offset from UTC.\n\n<pre><code>Time.zone.now.inspect # =&gt; ...\n</code></pre>\n"],["inspect","Date","classes/Date.html#method-i-inspect","()",""],["inspect","DateTime","classes/DateTime.html#method-i-inspect","()",""],["inspect","Rails::Info","classes/Rails/Info.html#method-c-inspect","()",""],["install_executor_hooks","ActiveRecord::QueryCache","classes/ActiveRecord/QueryCache.html#method-c-install_executor_hooks","(executor = ActiveSupport::Executor)",""],["install_support","ActiveRecord::Encryption::ExtendedDeterministicQueries","classes/ActiveRecord/Encryption/ExtendedDeterministicQueries.html#method-c-install_support","()",""],["install_support","ActiveRecord::Encryption::ExtendedDeterministicUniquenessValidator","classes/ActiveRecord/Encryption/ExtendedDeterministicUniquenessValidator.html#method-c-install_support","()",""],["instance","ActiveSupport::CurrentAttributes","classes/ActiveSupport/CurrentAttributes.html#method-c-instance","()","<p>Returns singleton instance for this class in this thread. If none exists, one is created.\n"],["instance","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-c-instance","(locale = :en)",""],["instance","ActiveSupport::PerThreadRegistry","classes/ActiveSupport/PerThreadRegistry.html#method-i-instance","()",""],["instance","Rails::Application","classes/Rails/Application.html#method-c-instance","()",""],["instance","Rails::Railtie","classes/Rails/Railtie.html#method-c-instance","()","<p>Since Rails::Railtie cannot be instantiated, any methods that call <code>instance</code> are intended to be called â€¦\n"],["instance","Rails::Railtie::Configurable::ClassMethods","classes/Rails/Railtie/Configurable/ClassMethods.html#method-i-instance","()",""],["instance_method_already_implemented?","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-instance_method_already_implemented-3F","(method_name)","<p>Raises an ActiveRecord::DangerousAttributeError exception when an Active Record method is defined in â€¦\n"],["instance_method_already_implemented?","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-instance_method_already_implemented-3F","(method_name)",""],["instance_or_fallback","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-c-instance_or_fallback","(locale)",""],["instance_values","Object","classes/Object.html#method-i-instance_values","()","<p>Returns a hash with string keys that maps instance variable names without â€œ@â€ to their corresponding â€¦\n"],["instance_variable_names","Object","classes/Object.html#method-i-instance_variable_names","()","<p>Returns an array of instance variable names as strings including â€œ@â€.\n\n<pre><code>class C\n  def initialize(x, ...\n</code></pre>\n"],["instantiate","ActiveRecord::Persistence::ClassMethods","classes/ActiveRecord/Persistence/ClassMethods.html#method-i-instantiate","(attributes, column_types = {}, &block)","<p>Given an attributes hash, <code>instantiate</code> returns a new instance of the appropriate class. Accepts only keys â€¦\n"],["instantiate_all_loaded_fixtures","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-instantiate_all_loaded_fixtures","(object, load_instances = true)",""],["instantiate_fixtures","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-instantiate_fixtures","(object, fixture_set, load_instances = true)",""],["instrument","ActionView::Template","classes/ActionView/Template.html#method-i-instrument","(action, &block)",""],["instrument","ActiveRecord::FutureResult::EventBuffer","classes/ActiveRecord/FutureResult/EventBuffer.html#method-i-instrument","(name, payload = {}, &block)",""],["instrument","ActiveStorage::Analyzer","classes/ActiveStorage/Analyzer.html#method-i-instrument","(analyzer, &block)",""],["instrument","ActiveSupport::Notifications","classes/ActiveSupport/Notifications.html#method-c-instrument","(name, payload = {})",""],["instrument","ActiveSupport::Notifications::Instrumenter","classes/ActiveSupport/Notifications/Instrumenter.html#method-i-instrument","(name, payload = {})","<p>Given a block, instrument it by measuring the time taken to execute and publish it. Without a block, â€¦\n"],["instrumenter","ActiveSupport::Notifications","classes/ActiveSupport/Notifications.html#method-c-instrumenter","()",""],["int4range","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-int4range","",""],["int8range","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-int8range","",""],["integration_session","ActionDispatch::Integration::Runner","classes/ActionDispatch/Integration/Runner.html#method-i-integration_session","()",""],["internal_metadata_table_name","ActiveRecord::ModelSchema","classes/ActiveRecord/ModelSchema.html#method-c-internal_metadata_table_name","","<p>The name of the internal metadata table. By default, the value is <code>&quot;ar_internal_metadata&quot;</code>.\n"],["internal_metadata_table_name=","ActiveRecord::ModelSchema","classes/ActiveRecord/ModelSchema.html#method-c-internal_metadata_table_name-3D","","<p>Sets the name of the internal metadata table.\n"],["internal_methods","AbstractController::Base","classes/AbstractController/Base.html#method-c-internal_methods","()","<p>A list of all internal methods for a controller. This finds the first abstract superclass of a controller, â€¦\n"],["interrupt","ActiveSupport::Testing::Parallelization::Server","classes/ActiveSupport/Testing/Parallelization/Server.html#method-i-interrupt","()",""],["interval","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-interval","",""],["invalid?","ActiveModel::Validations","classes/ActiveModel/Validations.html#method-i-invalid-3F","(context = nil)","<p>Performs the opposite of <code>valid?</code>. Returns <code>true</code> if errors were added, <code>false</code> otherwise.\n\n<pre><code>class Person\n  include ...\n</code></pre>\n"],["invalidate!","ActiveRecord::ConnectionAdapters::TransactionState","classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-invalidate-21","()",""],["invalidated?","ActiveRecord::ConnectionAdapters::TransactionState","classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-invalidated-3F","()",""],["inverse_of","ActiveRecord::Migration::CommandRecorder","classes/ActiveRecord/Migration/CommandRecorder.html#method-i-inverse_of","(command, args, &block)","<p>Returns the inverse of the given command. For example:\n\n<pre><code>recorder.inverse_of(:rename_table, [:old, :new]) ...\n</code></pre>\n"],["invert_where","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-invert_where","()","<p>Allows you to invert an entire where clause instead of manually applying conditions.\n\n<pre><code>class User\n  scope ...\n</code></pre>\n"],["inverted_lambda","ActiveSupport::Callbacks::CallTemplate::InstanceExec0","classes/ActiveSupport/Callbacks/CallTemplate/InstanceExec0.html#method-i-inverted_lambda","()",""],["inverted_lambda","ActiveSupport::Callbacks::CallTemplate::InstanceExec1","classes/ActiveSupport/Callbacks/CallTemplate/InstanceExec1.html#method-i-inverted_lambda","()",""],["inverted_lambda","ActiveSupport::Callbacks::CallTemplate::InstanceExec2","classes/ActiveSupport/Callbacks/CallTemplate/InstanceExec2.html#method-i-inverted_lambda","()",""],["inverted_lambda","ActiveSupport::Callbacks::CallTemplate::MethodCall","classes/ActiveSupport/Callbacks/CallTemplate/MethodCall.html#method-i-inverted_lambda","()",""],["inverted_lambda","ActiveSupport::Callbacks::CallTemplate::ObjectCall","classes/ActiveSupport/Callbacks/CallTemplate/ObjectCall.html#method-i-inverted_lambda","()",""],["inverted_lambda","ActiveSupport::Callbacks::CallTemplate::ProcCall","classes/ActiveSupport/Callbacks/CallTemplate/ProcCall.html#method-i-inverted_lambda","()",""],["invoke","Rails::Command","classes/Rails/Command.html#method-c-invoke","(full_namespace, args = [], **config)","<p>Receives a namespace, arguments, and the behavior to invoke the command.\n"],["invoke","Rails::Generators","classes/Rails/Generators.html#method-c-invoke","(namespace, args = ARGV, config = {})","<p>Receives a namespace, arguments, and the behavior to invoke the generator. It&#39;s used as the default â€¦\n"],["invoke_callback","ActionCable::SubscriptionAdapter::Async::AsyncSubscriberMap","classes/ActionCable/SubscriptionAdapter/Async/AsyncSubscriberMap.html#method-i-invoke_callback","(*)",""],["invoke_callback","ActionCable::SubscriptionAdapter::PostgreSQL::Listener","classes/ActionCable/SubscriptionAdapter/PostgreSQL/Listener.html#method-i-invoke_callback","(*)",""],["invoke_callback","ActionCable::SubscriptionAdapter::Redis::Listener","classes/ActionCable/SubscriptionAdapter/Redis/Listener.html#method-i-invoke_callback","(*)",""],["invoke_callback","ActionCable::SubscriptionAdapter::SubscriberMap","classes/ActionCable/SubscriptionAdapter/SubscriberMap.html#method-i-invoke_callback","(callback, message)",""],["ip","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-ip","()","<p>Returns the IP address of client as a <code>String</code>.\n"],["ips_from","ActionDispatch::RemoteIp::GetIp","classes/ActionDispatch/RemoteIp/GetIp.html#method-i-ips_from","(header)",""],["irregular","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-i-irregular","(singular, plural)","<p>Specifies a new irregular that applies to both pluralization and singularization at the same time. This â€¦\n"],["is_a?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-is_a-3F","(klass)","<p>Say we&#39;re a Time to thwart type checking.\n"],["is_missing?","LoadError","classes/LoadError.html#method-i-is_missing-3F","(location)","<p>Returns true if the given path name (except perhaps for the â€œ.rbâ€ extension) is the missing â€¦\n"],["is_utc?","ActiveRecord::Type::Internal::Timezone","classes/ActiveRecord/Type/Internal/Timezone.html#method-i-is_utc-3F","()",""],["is_utf8?","String","classes/String.html#method-i-is_utf8-3F","()","<p>Returns <code>true</code> if string has utf_8 encoding.\n\n<pre><code>utf_8_str = &quot;some string&quot;.encode &quot;UTF-8&quot;\niso_str = &quot;some string&quot;.encode ...\n</code></pre>\n"],["isdst","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-isdst","()",""],["iso8601","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-iso8601","(precision: nil)","<p>Build ISO 8601 Duration string for this duration. The <code>precision</code> parameter can be used to limit seconds&#39; â€¦\n"],["iso8601","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-iso8601","(fraction_digits = 0)",""],["iso8601","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-iso8601","(str)","<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone of <code>self</code> from an ISO 8601 string. â€¦\n"],["isolate_namespace","Rails::Application","classes/Rails/Application.html#method-i-isolate_namespace","(mod)","<p>Sends the <code>isolate_namespace</code> method up to the class method.\n"],["isolate_namespace","Rails::Engine","classes/Rails/Engine.html#method-c-isolate_namespace","(mod)",""],["iterate_guarding_exceptions","ActiveSupport::Notifications::Fanout","classes/ActiveSupport/Notifications/Fanout.html#method-i-iterate_guarding_exceptions","(listeners)",""],["iv_length","ActiveRecord::Encryption::Cipher","classes/ActiveRecord/Encryption/Cipher.html#method-i-iv_length","()",""],["iv_length","ActiveRecord::Encryption::Cipher::Aes256Gcm","classes/ActiveRecord/Encryption/Cipher/Aes256Gcm.html#method-c-iv_length","()",""],["j","ActionView::Helpers::JavaScriptHelper","classes/ActionView/Helpers/JavaScriptHelper.html#method-i-j","(javascript)",""],["javascript_include_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-javascript_include_tag","(*sources)","<p>Returns an HTML script tag for each of the <code>sources</code> provided.\n<p>Sources may be paths to JavaScript files. â€¦\n"],["javascript_path","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-javascript_path","(source, options = {})","<p>Computes the path to a JavaScript asset in the public javascripts directory. If the <code>source</code> filename has â€¦\n"],["javascript_tag","ActionView::Helpers::JavaScriptHelper","classes/ActionView/Helpers/JavaScriptHelper.html#method-i-javascript_tag","(content_or_options_with_block = nil, html_options = {}, &block)","<p>Returns a JavaScript tag with the <code>content</code> inside. Example:\n\n<pre><code>javascript_tag &quot;alert(&#39;All is good&#39;)&quot;\n</code></pre>\n<p>Returns: â€¦\n"],["javascript_url","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-javascript_url","(source, options = {})","<p>Computes the full URL to a JavaScript asset in the public javascripts directory. This will use <code>javascript_path</code> â€¦\n"],["job_or_instantiate","ActiveJob::Enqueuing::ClassMethods","classes/ActiveJob/Enqueuing/ClassMethods.html#method-i-job_or_instantiate","(*args)",""],["joined_includes_values","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-joined_includes_values","()","<p>Joins that are also marked for preloading. In which case we should just eager load them. Note that this â€¦\n"],["joins","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-joins","(*args)","<p>Performs JOINs on <code>args</code>. The given symbol(s) should match the name of the association(s).\n\n<pre><code>User.joins(:posts) ...\n</code></pre>\n"],["js_template","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-js_template","(source, destination)",""],["json_escape","ERB::Util","classes/ERB/Util.html#method-c-json_escape","(s)","<p>A utility method for escaping HTML entities in JSON strings. Specifically, the &amp;, &gt; and &lt; characters â€¦\n"],["jsonb","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-jsonb","",""],["keep","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-keep","(k = nil)","<p>Keeps either the entire current flash or a specific flash entry available for the next action:\n\n<pre><code>flash.keep ...\n</code></pre>\n"],["keep_if","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-keep_if","(&block)",""],["key","ActiveStorage::Blob","classes/ActiveStorage/Blob.html#method-i-key","()","<p>Returns the key pointing to the file on the service that&#39;s associated with this blob. The key is â€¦\n"],["key","ActiveStorage::Preview","classes/ActiveStorage/Preview.html#method-i-key","()","<p>Returns a combination key of the blob and the variation that together identifies a specific variant. â€¦\n"],["key","ActiveStorage::Variant","classes/ActiveStorage/Variant.html#method-i-key","()","<p>Returns a combination key of the blob and the variation that together identifies a specific variant. â€¦\n"],["key","ActiveStorage::Variation","classes/ActiveStorage/Variation.html#method-i-key","()","<p>Returns a signed key for all the <code>transformations</code> that this variation was instantiated with.\n"],["key","ActiveSupport::EncryptedFile","classes/ActiveSupport/EncryptedFile.html#method-i-key","()",""],["key?","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-key-3F","","<p>Returns true if the given key is present in the parameters.\n"],["key?","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-key-3F","(name)",""],["key?","ActionDispatch::Http::Headers","classes/ActionDispatch/Http/Headers.html#method-i-key-3F","(key)",""],["key?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-key-3F","(key)","<p>Returns true if the request has a header matching the given key parameter.\n\n<pre><code>request.key? :ip_spoofing_check ...\n</code></pre>\n"],["key?","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-key-3F","(attribute)",""],["key?","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-key-3F","(key)","<p>Checks the hash for a key matching the argument passed in:\n\n<pre><code>hash = ActiveSupport::HashWithIndifferentAccess.new ...\n</code></pre>\n"],["key?","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-key-3F","(key)","<p>Checks the hash for a key matching the argument passed in:\n\n<pre><code>hash = ActiveSupport::HashWithIndifferentAccess.new ...\n</code></pre>\n"],["key_generator","Rails::Application","classes/Rails/Application.html#method-i-key_generator","()","<p>Returns the application&#39;s KeyGenerator\n"],["key_len","ActiveSupport::MessageEncryptor","classes/ActiveSupport/MessageEncryptor.html#method-c-key_len","(cipher = default_cipher)","<p>Given a cipher, returns the key length of the cipher to help generate the key of desired size\n"],["key_length","ActiveRecord::Encryption::Cipher","classes/ActiveRecord/Encryption/Cipher.html#method-i-key_length","()",""],["key_length","ActiveRecord::Encryption::Cipher::Aes256Gcm","classes/ActiveRecord/Encryption/Cipher/Aes256Gcm.html#method-c-key_length","()",""],["key_matcher","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-key_matcher","(pattern, options)","<p>Adds the namespace defined in the options to a pattern designed to match keys. Implementations that support â€¦\n"],["key_provider","ActiveRecord::Encryption::Scheme","classes/ActiveRecord/Encryption/Scheme.html#method-i-key_provider","()",""],["keys","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-keys","","<p>Returns a new array of the keys of the parameters.\n"],["keys","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-keys","()",""],["keys","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-keys","()",""],["kilobyte","Numeric","classes/Numeric.html#method-i-kilobyte","()",""],["kilobytes","Numeric","classes/Numeric.html#method-i-kilobytes","()","<p>Returns the number of bytes equivalent to the kilobytes provided.\n\n<pre><code>2.kilobytes # =&gt; 2048\n</code></pre>\n"],["kind","ActiveModel::Validator","classes/ActiveModel/Validator.html#method-c-kind","()","<p>Returns the kind of the validator.\n\n<pre><code>PresenceValidator.kind   # =&gt; :presence\nAcceptanceValidator.kind # ...\n</code></pre>\n"],["kind","ActiveModel::Validator","classes/ActiveModel/Validator.html#method-i-kind","()","<p>Returns the kind for this validator.\n\n<pre><code>PresenceValidator.new(attributes: [:username]).kind # =&gt; :presence ...\n</code></pre>\n"],["kind_of?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-kind_of-3F","(klass)",""],["klass","ActiveJob::Serializers::ObjectSerializer","classes/ActiveJob/Serializers/ObjectSerializer.html#method-i-klass","()","<p>The class of the object that will be serialized.\n"],["klass","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-i-klass","()","<p>Returns the class for the macro.\n<p><code>composed_of :balance, class_name: &#39;Money&#39;</code> returns the Money class â€¦\n"],["l","AbstractController::Translation","classes/AbstractController/Translation.html#method-i-l","(object, **options)",""],["l","ActionView::Helpers::TranslationHelper","classes/ActionView/Helpers/TranslationHelper.html#method-i-l","(object, **options)",""],["label","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-label","(method, text = nil, options = {}, &block)","<p>Returns a label tag tailored for labelling an input field for a specified attribute (identified by <code>method</code> â€¦\n"],["label","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-label","(object_name, method, content_or_options = nil, options = nil, &block)","<p>Returns a label tag tailored for labelling an input field for a specified attribute (identified by <code>method</code> â€¦\n"],["label_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-label_tag","(name = nil, content_or_options = nil, options = nil, &block)","<p>Creates a label element. Accepts a block.\n<p>Options\n<p>Creates standard HTML attributes for the tag.\n"],["last","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-last","()",""],["last","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-last","(limit = nil)","<p>Returns the last record, or the last <code>n</code> records, from the collection. If the collection is empty, the â€¦\n"],["last","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-last","(limit = nil)","<p>Find the last record (or last N records if a parameter is supplied). If no order is defined it will order â€¦\n"],["last","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-i-last","(n = nil)","<p>Returns the last record from the rows collection.\n"],["last","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-last","()",""],["last","String","classes/String.html#method-i-last","(limit = 1)","<p>Returns the last character of the string. If a limit is supplied, returns a substring from the end of â€¦\n"],["last!","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-last-21","()","<p>Same as #last but raises ActiveRecord::RecordNotFound if no record is found. Note that #last! accepts â€¦\n"],["last?","ActionView::PartialIteration","classes/ActionView/PartialIteration.html#method-i-last-3F","()","<p>Check if this is the last iteration of the partial.\n"],["last_modified","ActionDispatch::Http::Cache::Response","classes/ActionDispatch/Http/Cache/Response.html#method-i-last_modified","()",""],["last_modified=","ActionDispatch::Http::Cache::Response","classes/ActionDispatch/Http/Cache/Response.html#method-i-last_modified-3D","(utc_time)",""],["last_modified?","ActionDispatch::Http::Cache::Response","classes/ActionDispatch/Http/Cache/Response.html#method-i-last_modified-3F","()",""],["last_month","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-last_month","()","<p>Short-hand for <code>months_ago(1)</code>.\n"],["last_quarter","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-last_quarter","()",""],["last_week","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-last_week","(start_day = Date.beginning_of_week, same_time: false)",""],["last_weekday","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-last_weekday","()",""],["last_year","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-last_year","()","<p>Short-hand for <code>years_ago(1)</code>.\n"],["layout","ActionView::Layouts::ClassMethods","classes/ActionView/Layouts/ClassMethods.html#method-i-layout","(layout, conditions = {})","<p>Specify the layout to use for this class.\n<p>If the specified layout is a:\n<p>String &mdash; the String is the template â€¦\n"],["lazy_schema_cache_path","ActiveRecord::DatabaseConfigurations::HashConfig","classes/ActiveRecord/DatabaseConfigurations/HashConfig.html#method-i-lazy_schema_cache_path","()",""],["lease","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-lease","()","<p>this method must only be called while holding connection pool&#39;s mutex\n"],["left_joins","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-left_joins","(*args)",""],["left_outer_joins","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-left_outer_joins","(*args)","<p>Performs LEFT OUTER JOINs on <code>args</code>:\n\n<pre><code>User.left_outer_joins(:posts)\n=&gt; SELECT &quot;users&quot;.* FROM &quot;users&quot; LEFT ...\n</code></pre>\n"],["length","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-length","","<p>Returns the size of the collection calling <code>size</code> on the target. If the collection has been already loaded, â€¦\n"],["length","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-i-length","()","<p>Returns the number of elements in the rows array.\n"],["lib","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-lib","()",""],["lib","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-lib","(filename, data = nil)","<p>Create a new file in the <code>lib/</code> directory. Code can be specified in a block or a data string can be given. â€¦\n"],["lib","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-lib","()",""],["license","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-license","()",""],["limit","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-limit","(value)","<p>Specifies a limit for the number of records to retrieve.\n\n<pre><code>User.limit(10) # generated SQL has &#39;LIMIT 10&#39; ...\n</code></pre>\n"],["limit","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-limit","(limit)","<p>Limits the byte size of the string to a number of bytes without breaking characters. Usable when the â€¦\n"],["line","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-line","",""],["link_to","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-link_to","(name = nil, options = nil, html_options = nil, &block)","<p>Creates an anchor element of the given <code>name</code> using a URL created by the set of <code>options</code>. See the valid â€¦\n"],["link_to_if","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-link_to_if","(condition, name, options = {}, html_options = {}, &block)","<p>Creates a link tag of the given <code>name</code> using a URL created by the set of <code>options</code> if <code>condition</code> is true, â€¦\n"],["link_to_unless","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-link_to_unless","(condition, name, options = {}, html_options = {}, &block)","<p>Creates a link tag of the given <code>name</code> using a URL created by the set of <code>options</code> unless <code>condition</code> is true, â€¦\n"],["link_to_unless_current","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-link_to_unless_current","(name, options = {}, html_options = {}, &block)","<p>Creates a link tag of the given <code>name</code> using a URL created by the set of <code>options</code> unless the current request â€¦\n"],["links","ActionText::Content","classes/ActionText/Content.html#method-i-links","()",""],["listen","ActionCable::SubscriptionAdapter::PostgreSQL::Listener","classes/ActionCable/SubscriptionAdapter/PostgreSQL/Listener.html#method-i-listen","()",""],["listen","ActionCable::SubscriptionAdapter::Redis::Listener","classes/ActionCable/SubscriptionAdapter/Redis/Listener.html#method-i-listen","(conn)",""],["listeners_for","ActiveSupport::Notifications::Fanout","classes/ActiveSupport/Notifications/Fanout.html#method-i-listeners_for","(name)",""],["listening?","ActiveSupport::Notifications::Fanout","classes/ActiveSupport/Notifications/Fanout.html#method-i-listening-3F","(name)",""],["load","ActionText::Serialization","classes/ActionText/Serialization.html#method-i-load","(content)",""],["load","ActiveRecord::Encryption::MessageSerializer","classes/ActiveRecord/Encryption/MessageSerializer.html#method-i-load","(serialized_content)",""],["load","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-load","(&block)","<p>Causes the records to be loaded from the database if they have not been loaded already. You can use this â€¦\n"],["load","ActiveSupport::Cache::Coders::Loader","classes/ActiveSupport/Cache/Coders/Loader.html#method-i-load","(payload)",""],["load","ActiveSupport::Cache::MemCacheStore::Coders::Loader","classes/ActiveSupport/Cache/MemCacheStore/Coders/Loader.html#method-i-load","(payload)",""],["load_async","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-load_async","()","<p>Schedule the query to be performed from a background thread pool.\n\n<pre><code>Post.where(published: true).load_async ...\n</code></pre>\n"],["load_config_initializer","Rails::Engine","classes/Rails/Engine.html#method-i-load_config_initializer","(initializer)",""],["load_console","Rails::Engine","classes/Rails/Engine.html#method-i-load_console","(app = self)","<p>Load console and invoke the registered hooks. Check Rails::Railtie.console for more info.\n"],["load_defaults","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-load_defaults","(target_version)","<p>Loads default configuration values for a target version. This includes defaults for versions prior to â€¦\n"],["load_from","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-c-load_from","(filename)",""],["load_generators","Rails::Command::Actions","classes/Rails/Command/Actions.html#method-i-load_generators","()",""],["load_generators","Rails::Engine","classes/Rails/Engine.html#method-i-load_generators","(app = self)","<p>Load Rails generators and invoke the registered hooks. Check Rails::Railtie.generators for more info. â€¦\n"],["load_interlock","ActiveSupport::Dependencies","classes/ActiveSupport/Dependencies.html#method-c-load_interlock","(&block)","<p>Execute the supplied block while holding an exclusive lock, preventing any other thread from being inside â€¦\n"],["load_paths","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-load_paths","()",""],["load_records","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-load_records","(records)",""],["load_records_for_keys","ActiveRecord::Associations::Preloader::Association::LoaderQuery","classes/ActiveRecord/Associations/Preloader/Association/LoaderQuery.html#method-i-load_records_for_keys","(keys, &block)",""],["load_records_in_batch","ActiveRecord::Associations::Preloader::Association::LoaderQuery","classes/ActiveRecord/Associations/Preloader/Association/LoaderQuery.html#method-i-load_records_in_batch","(loaders)",""],["load_runner","Rails::Engine","classes/Rails/Engine.html#method-i-load_runner","(app = self)","<p>Load Rails runner and invoke the registered hooks. Check Rails::Railtie.runner for more info.\n"],["load_schema!","ActiveRecord::Encryption::EncryptableRecord","classes/ActiveRecord/Encryption/EncryptableRecord.html#method-i-load_schema-21","()",""],["load_schema_current","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-load_schema_current","(format = ActiveRecord.schema_format, file = nil, environment = env)",""],["load_schema_if_pending!","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-c-load_schema_if_pending-21","()",""],["load_seed","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-load_seed","()",""],["load_seed","Rails::Engine","classes/Rails/Engine.html#method-i-load_seed","()","<p>Load data from db/seeds.rb file. It can be used in to load engines&#39; seeds, e.g.:\n<p>Blog::Engine.load_seed â€¦\n"],["load_server","Rails::Engine","classes/Rails/Engine.html#method-i-load_server","(app = self)","<p>Invoke the server registered hooks. Check Rails::Railtie.server for more info.\n"],["load_session","ActionDispatch::Session::CookieStore","classes/ActionDispatch/Session/CookieStore.html#method-i-load_session","(req)",""],["load_session","ActionDispatch::Session::StaleSessionCheck","classes/ActionDispatch/Session/StaleSessionCheck.html#method-i-load_session","(env)",""],["load_target","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-load_target","()",""],["load_tasks","Rails::Command::Actions","classes/Rails/Command/Actions.html#method-i-load_tasks","()",""],["load_tasks","Rails::Engine","classes/Rails/Engine.html#method-i-load_tasks","(app = self)","<p>Load Rake and railties tasks, and invoke the registered hooks. Check Rails::Railtie.rake_tasks for more â€¦\n"],["loaded","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-loaded","()",""],["loaded?","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-loaded-3F","()","<p>Returns <code>true</code> if the association has been loaded, otherwise <code>false</code>.\n\n<pre><code>person.pets.loaded? # =&gt; false\nperson.pets.records ...\n</code></pre>\n"],["loading","ActiveSupport::Dependencies::Interlock","classes/ActiveSupport/Dependencies/Interlock.html#method-i-loading","(&block)",""],["local","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-local","(*args)","<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone of <code>self</code> from given values. â€¦\n"],["local?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-local-3F","()","<p>True if the request came from localhost, 127.0.0.1, or ::1.\n"],["local_assigns","ActionView::Template","classes/ActionView/Template.html#method-i-local_assigns","","<p>Returns a hash with the defined local variables.\n<p>Given this sub template rendering:\n\n<pre><code>&lt;%= render &quot;shared/header&quot;, ...\n</code></pre>\n"],["local_to_utc","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-local_to_utc","(time, dst = true)","<p>Adjust the given time to the simultaneous time in UTC. Returns a Time.utc() instance.\n"],["localize","AbstractController::Translation","classes/AbstractController/Translation.html#method-i-localize","(object, **options)","<p>Delegates to <code>I18n.localize</code>. Also aliased as <code>l</code>.\n"],["localize","ActionView::Helpers::TranslationHelper","classes/ActionView/Helpers/TranslationHelper.html#method-i-localize","(object, **options)","<p>Delegates to <code>I18n.localize</code> with no additional functionality.\n<p>See www.rubydoc.info/github/svenfuchs/i18n/master/I18n/Backend/Base:localize â€¦\n"],["locals_for","ActionView::TestCase::Behavior::RenderedViewsCollection","classes/ActionView/TestCase/Behavior/RenderedViewsCollection.html#method-i-locals_for","(view)",""],["localtime","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-localtime","(utc_offset = nil)","<p>Returns a <code>Time</code> instance of the simultaneous time in the system timezone.\n"],["localtime","DateTime","classes/DateTime.html#method-i-localtime","(utc_offset = nil)","<p>Returns a <code>Time</code> instance of the simultaneous time in the system timezone.\n"],["lock","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-lock","(locks = true)","<p>Specifies locking settings (default to <code>true</code>). For more information on locking, please see ActiveRecord::Locking â€¦\n"],["lock!","ActiveRecord::Locking::Pessimistic","classes/ActiveRecord/Locking/Pessimistic.html#method-i-lock-21","(lock = true)","<p>Obtain a row lock on this record. Reloads the record to obtain the requested lock. Pass an SQL locking â€¦\n"],["lock_thread=","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-lock_thread-3D","(lock_thread)",""],["locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-locking_column","()","<p>The version column used for optimistic locking. Defaults to <code>lock_version</code>.\n"],["locking_column=","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-locking_column-3D","(value)","<p>Set the column to use for optimistic locking. Defaults to <code>lock_version</code>.\n"],["locking_enabled?","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-locking_enabled-3F","()","<p>Returns true if the <code>lock_optimistically</code> flag is set to true (which it is, by default) and the table includes â€¦\n"],["log","ActionCable::Connection::TaggedLoggerProxy","classes/ActionCable/Connection/TaggedLoggerProxy.html#method-i-log","(type, message)",""],["log","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-log","(sql, name = \"SQL\", binds = [], type_casted_binds = [], statement_name = nil, async: false, &block)",""],["log","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-log","()",""],["log","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-log","(*args)","<p>Define log for backwards compatibility. If just one argument is sent, invoke say, otherwise invoke say_status. â€¦\n"],["log_at","ActionController::Logging::ClassMethods","classes/ActionController/Logging/ClassMethods.html#method-i-log_at","(level, **options)","<p>Set a different log level per request.\n\n<pre><code># Use the debug log level if a particular cookie is set.\nclass ...\n</code></pre>\n"],["log_subscribers","ActiveSupport::LogSubscriber","classes/ActiveSupport/LogSubscriber.html#method-c-log_subscribers","()",""],["logged","ActiveSupport::LogSubscriber::TestHelper::MockLogger","classes/ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-i-logged","(level)",""],["logger","ActionCable::Server::Base","classes/ActionCable/Server/Base.html#method-c-logger","()",""],["logger","ActionController::LogSubscriber","classes/ActionController/LogSubscriber.html#method-i-logger","()",""],["logger","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-logger","()",""],["logger","ActionMailer::LogSubscriber","classes/ActionMailer/LogSubscriber.html#method-i-logger","()","<p>Use the logger configured for ActionMailer::Base.\n"],["logger","ActionView::Digestor","classes/ActionView/Digestor.html#method-c-logger","()",""],["logger","ActionView::LogSubscriber","classes/ActionView/LogSubscriber.html#method-i-logger","()",""],["logger","ActiveStorage::Analyzer","classes/ActiveStorage/Analyzer.html#method-i-logger","()",""],["logger","ActiveStorage::LogSubscriber","classes/ActiveStorage/LogSubscriber.html#method-i-logger","()",""],["logger","ActiveStorage::Previewer","classes/ActiveStorage/Previewer.html#method-i-logger","()",""],["logger","ActiveSupport::LogSubscriber","classes/ActiveSupport/LogSubscriber.html#method-c-logger","()",""],["logger","ActiveSupport::LogSubscriber","classes/ActiveSupport/LogSubscriber.html#method-i-logger","()",""],["logger_outputs_to?","ActiveSupport::Logger","classes/ActiveSupport/Logger.html#method-c-logger_outputs_to-3F","(logger, *sources)","<p>Returns true if the logger destination matches one of the sources\n\n<pre><code>logger = Logger.new(STDOUT)\nActiveSupport::Logger.logger_outputs_to?(logger, ...\n</code></pre>\n"],["longblob","ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-longblob","",""],["longtext","ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-longtext","",""],["lookup","ActiveJob::QueueAdapters","classes/ActiveJob/QueueAdapters.html#method-c-lookup","(name)","<p>Returns adapter for specified name.\n\n<pre><code>ActiveJob::QueueAdapters.lookup(:sidekiq)\n# =&gt; ActiveJob::QueueAdapters::SidekiqAdapter\n</code></pre>\n"],["lookup","Mime::Type","classes/Mime/Type.html#method-c-lookup","(string)",""],["lookup_ancestors","ActiveModel::Translation","classes/ActiveModel/Translation.html#method-i-lookup_ancestors","()","<p>When localizing a string, it goes through the lookup returned by this method, which is used in ActiveModel::Name#human â€¦\n"],["lookup_by_extension","Mime::Type","classes/Mime/Type.html#method-c-lookup_by_extension","(extension)",""],["lookup_context","ActionView::ViewPaths","classes/ActionView/ViewPaths.html#method-i-lookup_context","()","<p>LookupContext is the object responsible for holding all information required for looking up templates, â€¦\n"],["lookup_paths","Rails::Command","classes/Rails/Command.html#method-c-lookup_paths","()",""],["lookup_paths","Rails::Generators","classes/Rails/Generators.html#method-c-lookup_paths","()",""],["lookup_store","ActiveSupport::Cache","classes/ActiveSupport/Cache.html#method-c-lookup_store","(store = nil, *parameters)","<p>Creates a new Store object according to the given options.\n<p>If no arguments are passed to this method, â€¦\n"],["lseg","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-lseg","",""],["ltree","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-ltree","",""],["macaddr","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-macaddr","",""],["mail","ActionMailbox::InboundEmail","classes/ActionMailbox/InboundEmail.html#method-i-mail","()",""],["mail","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-mail","(headers = {}, &block)","<p>The main method that creates the message and renders the email templates. There are two ways to call â€¦\n"],["mail_to","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-mail_to","(email_address, name = nil, html_options = {}, &block)","<p>Creates a mailto link tag to the specified <code>email_address</code>, which is also used as the name of the link â€¦\n"],["mailbox_class","ActionMailbox::Router::Route","classes/ActionMailbox/Router/Route.html#method-i-mailbox_class","()",""],["mailbox_for","ActionMailbox::Router","classes/ActionMailbox/Router.html#method-i-mailbox_for","(inbound_email)",""],["mailbox_for","ActionMailbox::Routing","classes/ActionMailbox/Routing.html#method-i-mailbox_for","(inbound_email)",""],["mailer","ActionMailer::MailHelper","classes/ActionMailer/MailHelper.html#method-i-mailer","()","<p>Access the mailer instance.\n"],["mailer_class","ActionMailer::TestCase::Behavior::ClassMethods","classes/ActionMailer/TestCase/Behavior/ClassMethods.html#method-i-mailer_class","()",""],["mailer_name","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-mailer_name","()","<p>Returns the name of the current mailer. This method is also being used as a path for a view lookup.  â€¦\n"],["mailer_name","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-mailer_name","()","<p>Returns the name of the mailer object.\n"],["make_lambda","ActiveSupport::Callbacks::CallTemplate::InstanceExec0","classes/ActiveSupport/Callbacks/CallTemplate/InstanceExec0.html#method-i-make_lambda","()",""],["make_lambda","ActiveSupport::Callbacks::CallTemplate::InstanceExec1","classes/ActiveSupport/Callbacks/CallTemplate/InstanceExec1.html#method-i-make_lambda","()",""],["make_lambda","ActiveSupport::Callbacks::CallTemplate::InstanceExec2","classes/ActiveSupport/Callbacks/CallTemplate/InstanceExec2.html#method-i-make_lambda","()",""],["make_lambda","ActiveSupport::Callbacks::CallTemplate::MethodCall","classes/ActiveSupport/Callbacks/CallTemplate/MethodCall.html#method-i-make_lambda","()",""],["make_lambda","ActiveSupport::Callbacks::CallTemplate::ObjectCall","classes/ActiveSupport/Callbacks/CallTemplate/ObjectCall.html#method-i-make_lambda","()",""],["make_lambda","ActiveSupport::Callbacks::CallTemplate::ProcCall","classes/ActiveSupport/Callbacks/CallTemplate/ProcCall.html#method-i-make_lambda","()",""],["make_response!","ActionController::DefaultHeaders::ClassMethods","classes/ActionController/DefaultHeaders/ClassMethods.html#method-i-make_response-21","(request)",""],["make_response!","ActionController::Live::ClassMethods","classes/ActionController/Live/ClassMethods.html#method-i-make_response-21","(request)",""],["make_response!","ActionController::Metal","classes/ActionController/Metal.html#method-c-make_response-21","(request)",""],["many?","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-many-3F","","<p>Returns true if the collection has more than one record. Equivalent to <code>collection.size &gt; 1</code>.\n\n<pre><code>class Person ...\n</code></pre>\n"],["many?","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-many-3F","()","<p>Returns true if there is more than one record.\n"],["many?","Enumerable","classes/Enumerable.html#method-i-many-3F","()","<p>Returns <code>true</code> if the enumerable has more than 1 element. Functionally equivalent to <code>enum.to_a.size &gt;</code> â€¦\n"],["mark_for_destruction","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-mark_for_destruction","()","<p>Marks this record to be destroyed as part of the parent&#39;s save transaction. This does <em>not</em> actually â€¦\n"],["mark_for_same_origin_verification!","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-mark_for_same_origin_verification-21","()","<p>GET requests are checked for cross-origin JavaScript after rendering.\n"],["marked_for_destruction?","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-marked_for_destruction-3F","()","<p>Returns whether or not this record will be destroyed as part of the parent&#39;s save transaction.\n<p>Only â€¦\n"],["marked_for_same_origin_verification?","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-marked_for_same_origin_verification-3F","()","<p>If the <code>verify_authenticity_token</code> before_action ran, verify that JavaScript responses are only served â€¦\n"],["marshal_dump","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-marshal_dump","()",""],["marshal_dump","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-marshal_dump","()",""],["marshal_load","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-marshal_load","(array)",""],["marshal_load","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-marshal_load","(variables)",""],["mask_token","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-mask_token","(raw_token)",""],["master_key","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-master_key","()",""],["match","ActionDispatch::Routing::Mapper::Base","classes/ActionDispatch/Routing/Mapper/Base.html#method-i-match","(path, options = nil)","<p>Matches a URL pattern to one or more routes.\n<p>You should not use the <code>match</code> method in your router without â€¦\n"],["match","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-match","(path, *rest, &block)","<p>Matches a URL pattern to one or more routes. For more information, see match.\n\n<pre><code>match &#39;path&#39; =&gt; &#39;controller#action&#39;, ...\n</code></pre>\n"],["match","ActiveRecord::DynamicMatchers::Method","classes/ActiveRecord/DynamicMatchers/Method.html#method-c-match","(model, name)",""],["match?","ActionMailbox::Router::Route","classes/ActionMailbox/Router/Route.html#method-i-match-3F","(inbound_email)",""],["match?","ActiveModel::Error","classes/ActiveModel/Error.html#method-i-match-3F","(attribute, type = nil, **options)","<p>See if error matches provided <code>attribute</code>, <code>type</code>, and <code>options</code>.\n<p>Omitted params are not checked for a match. â€¦\n"],["match?","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-match-3F","","<p>Equivalent to <code>String#match?</code>. Match the class name against the given regexp. Returns <code>true</code> if there is â€¦\n"],["match?","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-match-3F","(re)","<p>Compare #name and TZInfo identifier to a supplied regexp, returning <code>true</code> if a match is found.\n"],["match?","Mime::Type","classes/Mime/Type.html#method-i-match-3F","(mime_type)",""],["matches?","ActiveModel::Validations::AcceptanceValidator::LazilyDefineAttributes","classes/ActiveModel/Validations/AcceptanceValidator/LazilyDefineAttributes.html#method-i-matches-3F","(method_name)",""],["materialize!","ActiveRecord::ConnectionAdapters::RealTransaction","classes/ActiveRecord/ConnectionAdapters/RealTransaction.html#method-i-materialize-21","()",""],["materialize!","ActiveRecord::ConnectionAdapters::SavepointTransaction","classes/ActiveRecord/ConnectionAdapters/SavepointTransaction.html#method-i-materialize-21","()",""],["mattr_accessor","Module","classes/Module.html#method-i-mattr_accessor","(*syms, instance_reader: true, instance_writer: true, instance_accessor: true, default: nil, &blk)","<p>Defines both class and instance accessors for class attributes. All class and instance methods created â€¦\n"],["mattr_reader","Module","classes/Module.html#method-i-mattr_reader","(*syms, instance_reader: true, instance_accessor: true, default: nil, location: nil)","<p>Defines a class attribute and creates a class and instance reader methods. The underlying class variable â€¦\n"],["mattr_writer","Module","classes/Module.html#method-i-mattr_writer","(*syms, instance_writer: true, instance_accessor: true, default: nil, location: nil)","<p>Defines a class attribute and creates a class and instance writer methods to allow assignment to the â€¦\n"],["max_identifier_length","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-max_identifier_length","()","<p>Returns the configured supported identifier length supported by PostgreSQL\n"],["max_queue","ActiveRecord::DatabaseConfigurations::HashConfig","classes/ActiveRecord/DatabaseConfigurations/HashConfig.html#method-i-max_queue","()",""],["max_threads","ActiveRecord::DatabaseConfigurations::HashConfig","classes/ActiveRecord/DatabaseConfigurations/HashConfig.html#method-i-max_threads","()",""],["maximum","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-maximum","(column_name)","<p>Calculates the maximum value on a given column. The value is returned with the same data type of the â€¦\n"],["maximum","Enumerable","classes/Enumerable.html#method-i-maximum","(key)","<p>Calculates the maximum from the extracted elements.\n\n<pre><code>payments = [Payment.new(5), Payment.new(15), Payment.new(10)] ...\n</code></pre>\n"],["mb_chars","String","classes/String.html#method-i-mb_chars","()","<p>Multibyte proxy\n<p><code>mb_chars</code> is a multibyte safe proxy for string methods.\n<p>It creates and returns an instance â€¦\n"],["media_type","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-media_type","()","<p>The <code>String</code> MIME type of the request.\n\n<pre><code># get &quot;/articles&quot;\nrequest.media_type # =&gt; &quot;application/x-www-form-urlencoded&quot;\n</code></pre>\n"],["media_type","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-media_type","()","<p>Media type of response.\n"],["mediumblob","ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-mediumblob","",""],["mediumtext","ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-mediumtext","",""],["megabyte","Numeric","classes/Numeric.html#method-i-megabyte","()",""],["megabytes","Numeric","classes/Numeric.html#method-i-megabytes","()","<p>Returns the number of bytes equivalent to the megabytes provided.\n\n<pre><code>2.megabytes # =&gt; 2_097_152\n</code></pre>\n"],["member","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-member","(&block)","<p>To add a member route, add a member block into the resource block:\n\n<pre><code>resources :photos do\n  member do\n  ...\n</code></pre>\n"],["member?","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-member-3F","","<p>Returns true if the given key is present in the parameters.\n"],["member?","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-member-3F","(record)",""],["member?","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-member-3F","(key)",""],["member?","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-member-3F","(key)",""],["merge","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-merge","(other_hash)","<p>Returns a new <code>ActionController::Parameters</code> with all keys from <code>other_hash</code> merged into current hash.\n"],["merge","ActionDispatch::Http::Headers","classes/ActionDispatch/Http/Headers.html#method-i-merge","(headers_or_env)","<p>Returns a new Http::Headers instance containing the contents of <code>headers_or_env</code> and the original instance. â€¦\n"],["merge","ActiveRecord::Encryption::Scheme","classes/ActiveRecord/Encryption/Scheme.html#method-i-merge","(other_scheme)",""],["merge","ActiveRecord::SpawnMethods","classes/ActiveRecord/SpawnMethods.html#method-i-merge","(other, *rest)","<p>Merges in the conditions from <code>other</code>, if <code>other</code> is an ActiveRecord::Relation. Returns an array representing â€¦\n"],["merge","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-merge","(*hashes, &block)","<p>This method has the same semantics of <code>update</code>, except it does not modify the receiver but rather returns â€¦\n"],["merge","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-merge","(*hashes, &block)","<p>This method has the same semantics of <code>update</code>, except it does not modify the receiver but rather returns â€¦\n"],["merge!","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-merge-21","(other_hash)","<p>Returns current <code>ActionController::Parameters</code> instance with <code>other_hash</code> merged into current hash.\n"],["merge!","ActionDispatch::Http::Headers","classes/ActionDispatch/Http/Headers.html#method-i-merge-21","(headers_or_env)","<p>Adds the contents of <code>headers_or_env</code> to original instance entries; duplicate keys are overwritten with â€¦\n"],["merge!","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-merge-21","(other)","<p>Merges the errors from <code>other</code>, each Error wrapped as NestedError.\n<p>Parameters\n<p><code>other</code> - The ActiveModel::Errors â€¦\n"],["merge!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-merge-21","(*other_hashes, &block)",""],["merge!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-merge-21","(*other_hashes, &block)",""],["merge_default_headers","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-c-merge_default_headers","(original, default)",""],["message","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-message","()","<p>Returns the corresponding message for the current HTTP status code:\n\n<pre><code>response.status = 200\nresponse.message ...\n</code></pre>\n"],["message","ActionMailer::MailHelper","classes/ActionMailer/MailHelper.html#method-i-message","()","<p>Access the message instance.\n"],["message","ActionMailer::MessageDelivery","classes/ActionMailer/MessageDelivery.html#method-i-message","()","<p>Returns the resulting Mail::Message\n"],["message","ActiveModel::Error","classes/ActiveModel/Error.html#method-i-message","()","<p>Returns the error message.\n\n<pre><code>error = ActiveModel::Error.new(person, :name, :too_short, count: 5)\nerror.message ...\n</code></pre>\n"],["message_verifier","Rails::Application","classes/Rails/Application.html#method-i-message_verifier","(verifier_name)","<p>Returns a message verifier object.\n<p>This verifier can be used to generate and verify signed messages in â€¦\n"],["messages","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-messages","()","<p>Returns a Hash of attributes with an array of their error messages.\n"],["messages_for","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-messages_for","(attribute)","<p>Returns all the error messages for a given attribute in an array.\n\n<pre><code>class Person\n  validates_presence_of ...\n</code></pre>\n"],["metadata","ActiveStorage::Analyzer","classes/ActiveStorage/Analyzer.html#method-i-metadata","()","<p>Override this method in a concrete subclass. Have it return a Hash of metadata.\n"],["metadata","ActiveStorage::Analyzer::AudioAnalyzer","classes/ActiveStorage/Analyzer/AudioAnalyzer.html#method-i-metadata","()",""],["metadata","ActiveStorage::Analyzer::ImageAnalyzer","classes/ActiveStorage/Analyzer/ImageAnalyzer.html#method-i-metadata","()",""],["metadata","ActiveStorage::Analyzer::VideoAnalyzer","classes/ActiveStorage/Analyzer/VideoAnalyzer.html#method-i-metadata","()",""],["method","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-method","()","<p>Returns the original value of the environment&#39;s REQUEST_METHOD, even if it was overridden by middleware. â€¦\n"],["method_added","AbstractController::Base","classes/AbstractController/Base.html#method-c-method_added","(name)","<p>Refresh the cached action_methods when a new action_method is added.\n"],["method_added","ActionCable::Channel::Base","classes/ActionCable/Channel/Base.html#method-c-method_added","(name)","<p>Refresh the cached action_methods when a new action_method is added.\n"],["method_added","ActiveSupport::Subscriber","classes/ActiveSupport/Subscriber.html#method-c-method_added","(event)","<p>Adds event subscribers for all new methods added to the class.\n"],["method_missing","ActionDispatch::Assertions::RoutingAssertions","classes/ActionDispatch/Assertions/RoutingAssertions.html#method-i-method_missing","(selector, *args, &block)","<p>ROUTES TODO: These assertions should really work in an integration context\n"],["method_missing","ActiveModel::AttributeMethods","classes/ActiveModel/AttributeMethods.html#method-i-method_missing","(method, *args, &block)","<p>Allows access to the object attributes, which are held in the hash returned by <code>attributes</code>, as though â€¦\n"],["method_missing","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-method_missing","(method, *arguments, &block)",""],["method_missing","ActiveSupport::LogSubscriber::TestHelper::MockLogger","classes/ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-i-method_missing","(level, message = nil)",""],["method_missing","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-method_missing","(method, *args, &block)","<p>Forward all undefined methods to the wrapped string.\n"],["method_missing","ActiveSupport::OrderedOptions","classes/ActiveSupport/OrderedOptions.html#method-i-method_missing","(name, *args)",""],["method_missing","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-method_missing","(sym, *args, &block)","<p>Send the missing method to <code>time</code> instance, and wrap result in a new TimeWithZone with the existing <code>time_zone</code> â€¦\n"],["method_symbol","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-method_symbol","()","<p>Returns a symbol form of the #method.\n"],["midday","Date","classes/Date.html#method-i-midday","()",""],["midday","DateTime","classes/DateTime.html#method-i-midday","()",""],["midday","Time","classes/Time.html#method-i-midday","()",""],["middle_of_day","Date","classes/Date.html#method-i-middle_of_day","()","<p>Converts Date to a Time (or DateTime if necessary) with the time portion set to the middle of the day â€¦\n"],["middle_of_day","DateTime","classes/DateTime.html#method-i-middle_of_day","()","<p>Returns a new DateTime representing the middle of the day (12:00)\n"],["middle_of_day","Time","classes/Time.html#method-i-middle_of_day","()","<p>Returns a new Time representing the middle of the day (12:00)\n"],["middleware","ActionController::Metal","classes/ActionController/Metal.html#method-c-middleware","()","<p>Alias for <code>middleware_stack</code>.\n"],["middleware","ActiveSupport::Cache::Strategy::LocalCache","classes/ActiveSupport/Cache/Strategy/LocalCache.html#method-i-middleware","()","<p>Middleware class can be inserted as a Rack handler to be local cache for the duration of request.\n"],["middleware","Rails::Server","classes/Rails/Server.html#method-i-middleware","()",""],["midnight","Date","classes/Date.html#method-i-midnight","()",""],["midnight","DateTime","classes/DateTime.html#method-i-midnight","()",""],["midnight","Time","classes/Time.html#method-i-midnight","()",""],["migrate","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-c-migrate","(direction)",""],["migrate","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-migrate","(direction)","<p>Execute this migration in the named direction\n"],["migrate","ActiveRecord::MigrationContext","classes/ActiveRecord/MigrationContext.html#method-i-migrate","(target_version = nil, &block)","<p>Runs the migrations in the <code>migrations_path</code>.\n<p>If <code>target_version</code> is <code>nil</code>, <code>migrate</code> will run <code>up</code>.\n<p>If the <code>current_version</code> â€¦\n"],["migrate","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-migrate","(version = nil)",""],["migrate_status","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-migrate_status","()",""],["migration_template","Rails::Generators::Migration","classes/Rails/Generators/Migration.html#method-i-migration_template","(source, destination, config = {})","<p>Creates a migration template at the given destination. The difference to the default template method â€¦\n"],["migrations_paths","ActiveRecord::DatabaseConfigurations::HashConfig","classes/ActiveRecord/DatabaseConfigurations/HashConfig.html#method-i-migrations_paths","()","<p>The migrations paths for a database configuration. If the <code>migrations_paths</code> key is present in the config, â€¦\n"],["migrations_paths","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-migrations_paths","()",""],["min_threads","ActiveRecord::DatabaseConfigurations::HashConfig","classes/ActiveRecord/DatabaseConfigurations/HashConfig.html#method-i-min_threads","()",""],["minimum","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-minimum","(column_name)","<p>Calculates the minimum value on a given column. The value is returned with the same data type of the â€¦\n"],["minimum","Enumerable","classes/Enumerable.html#method-i-minimum","(key)","<p>Calculates the minimum from the extracted elements.\n\n<pre><code>payments = [Payment.new(5), Payment.new(15), Payment.new(10)] ...\n</code></pre>\n"],["minus_with_coercion","Time","classes/Time.html#method-i-minus_with_coercion","(other)","<p>Time#- can also be used to determine the number of seconds between two Time instances. We&#39;re layering â€¦\n"],["minus_without_coercion","Time","classes/Time.html#method-i-minus_without_coercion","(other)",""],["minus_without_duration","Time","classes/Time.html#method-i-minus_without_duration","(other)",""],["minute","Numeric","classes/Numeric.html#method-i-minute","()",""],["minutes","Numeric","classes/Numeric.html#method-i-minutes","()","<p>Returns a Duration instance matching the number of minutes provided.\n\n<pre><code>2.minutes # =&gt; 2 minutes\n</code></pre>\n"],["mirror","ActiveStorage::Service::MirrorService","classes/ActiveStorage/Service/MirrorService.html#method-i-mirror","(key, checksum:)","<p>Copy the file at the <code>key</code> from the primary service to each of the mirrors where it doesn&#39;t already â€¦\n"],["missing","ActiveRecord::QueryMethods::WhereChain","classes/ActiveRecord/QueryMethods/WhereChain.html#method-i-missing","(*associations)","<p>Returns a new relation with left outer joins and where clause to identify missing relations.\n<p>For example, â€¦\n"],["missing_name","NameError","classes/NameError.html#method-i-missing_name","()","<p>Extract the name of the missing constant from the exception message.\n\n<pre><code>begin\n  HelloWorld\nrescue NameError ...\n</code></pre>\n"],["missing_name?","NameError","classes/NameError.html#method-i-missing_name-3F","(name)","<p>Was this exception raised because the given name was missing?\n\n<pre><code>begin\n  HelloWorld\nrescue NameError =&gt; e ...\n</code></pre>\n"],["model_name","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-i-model_name","()","<p>Returns an ActiveModel::Name object for module. It can be used to retrieve all kinds of naming-related â€¦\n"],["model_resource_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-model_resource_name","(base_name = singular_table_name, prefix: \"\")",""],["module_namespacing","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-i-module_namespacing","(&block)","<p>Wrap block with namespace of current application if namespace exists and is not skipped\n"],["module_parent","Module","classes/Module.html#method-i-module_parent","()","<p>Returns the module which contains this one according to its name.\n\n<pre><code>module M\n  module N\n  end\nend\nX = M::N ...\n</code></pre>\n"],["module_parent_name","Module","classes/Module.html#method-i-module_parent_name","()","<p>Returns the name of the module containing this one.\n\n<pre><code>M::N.module_parent_name # =&gt; &quot;M&quot;\n</code></pre>\n"],["module_parents","Module","classes/Module.html#method-i-module_parents","()","<p>Returns all the parents of this module according to its name, ordered from nested outwards. The receiver â€¦\n"],["modules_for_helpers","AbstractController::Helpers::ClassMethods","classes/AbstractController/Helpers/ClassMethods.html#method-i-modules_for_helpers","(modules_or_helper_prefixes)","<p>Given an array of values like the ones accepted by <code>helper</code>, this method returns an array with the corresponding â€¦\n"],["modules_for_helpers","ActionController::Helpers::ClassMethods","classes/ActionController/Helpers/ClassMethods.html#method-i-modules_for_helpers","(args)","<p>Override modules_for_helpers to accept <code>:all</code> as argument, which loads all helpers in helpers_path.\n<p>Parameters â€¦\n"],["mon_enter","ActiveSupport::Concurrency::LoadInterlockAwareMonitor","classes/ActiveSupport/Concurrency/LoadInterlockAwareMonitor.html#method-i-mon_enter","()","<p>Enters an exclusive section, but allows dependency loading while blocked\n"],["monday","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-monday","()","<p>Returns Monday of this week assuming that week starts on Monday. <code>DateTime</code> objects have their time set â€¦\n"],["money","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-money","",""],["monotonic_subscribe","ActiveSupport::Notifications","classes/ActiveSupport/Notifications.html#method-c-monotonic_subscribe","(pattern = nil, callback = nil, &block)",""],["month","Integer","classes/Integer.html#method-i-month","()",""],["month_field","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-month_field","","<p>Wraps ActionView::Helpers::FormHelper#month_field for form builders:\n\n<pre><code>&lt;%= form_with model: @user do |f| ...\n</code></pre>\n"],["month_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-month_field","(object_name, method, options = {})","<p>Returns a text_field of type â€œmonthâ€.\n\n<pre><code>month_field(&quot;user&quot;, &quot;born_on&quot;)\n# =&gt; &lt;input id=&quot;user_born_on&quot; ...\n</code></pre>\n"],["month_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-month_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type â€œmonthâ€.\n<p>Options\n<p><code>:min</code> - The minimum acceptable value.\n"],["months","Integer","classes/Integer.html#method-i-months","()","<p>Returns a Duration instance matching the number of months provided.\n\n<pre><code>2.months # =&gt; 2 months\n</code></pre>\n"],["months_ago","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-months_ago","(months)","<p>Returns a new date/time the specified number of months ago.\n"],["months_since","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-months_since","(months)","<p>Returns a new date/time the specified number of months in the future.\n"],["mount","ActionDispatch::Routing::Mapper::Base","classes/ActionDispatch/Routing/Mapper/Base.html#method-i-mount","(app, options = nil)","<p>Mount a Rack-based application to be used within the application.\n\n<pre><code>mount SomeRackApp, at: &quot;some_route&quot;\n</code></pre>\n"],["mountable_engine?","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-mountable_engine-3F","()",""],["move","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-move","(target, source)",""],["move","Rails::Configuration::MiddlewareStackProxy","classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-move","(...)",""],["move_after","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-move_after","(target, source)",""],["move_after","Rails::Configuration::MiddlewareStackProxy","classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-move_after","(...)",""],["move_before","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-move_before","(target, source)",""],["move_before","Rails::Configuration::MiddlewareStackProxy","classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-move_before","(...)",""],["ms","Benchmark","classes/Benchmark.html#method-c-ms","(&block)","<p>Benchmark realtime in milliseconds.\n\n<pre><code>Benchmark.realtime { User.all }\n# =&gt; 8.0e-05\n\nBenchmark.ms { User.all ...\n</code></pre>\n"],["multiline?","Regexp","classes/Regexp.html#method-i-multiline-3F","()","<p>Returns <code>true</code> if the regexp has the multiline flag set.\n\n<pre><code>(/./).multiline?  # =&gt; false\n(/./m).multiline? ...\n</code></pre>\n"],["multipart=","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-multipart-3D","(multipart)",""],["multiple_of?","Integer","classes/Integer.html#method-i-multiple_of-3F","(number)","<p>Check whether the integer is evenly divisible by the argument.\n\n<pre><code>0.multiple_of?(0)  # =&gt; true\n6.multiple_of?(5) ...\n</code></pre>\n"],["mute","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-mute","()","<p>Silences the logger within a block.\n"],["mutool_exists?","ActiveStorage::Previewer::MuPDFPreviewer","classes/ActiveStorage/Previewer/MuPDFPreviewer.html#method-c-mutool_exists-3F","()",""],["mutool_path","ActiveStorage::Previewer::MuPDFPreviewer","classes/ActiveStorage/Previewer/MuPDFPreviewer.html#method-c-mutool_path","()",""],["name","ActionDispatch::MiddlewareStack::Middleware","classes/ActionDispatch/MiddlewareStack/Middleware.html#method-i-name","()",""],["name","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-name","()",""],["name","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-c-name","()","<p>Report class name as &#39;Time&#39; to thwart type checking.\n"],["namespace","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-namespace","(path, options = {})","<p>See ActionDispatch::Routing::Mapper::Scoping#namespace.\n"],["namespace","ActionDispatch::Routing::Mapper::Scoping","classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-namespace","(path, options = {}, &block)","<p>Scopes routes to a specific namespace. For example:\n\n<pre><code>namespace :admin do\n  resources :posts\nend\n</code></pre>\n<p>This generates â€¦\n"],["namespace","Rails::Command::Base","classes/Rails/Command/Base.html#method-c-namespace","(name = nil)","<p>Convenience method to get the namespace from the class name. It&#39;s the same as Thor default except â€¦\n"],["namespace","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-namespace","(name = nil)","<p>Convenience method to get the namespace from the class name. It&#39;s the same as Thor default except â€¦\n"],["namespace","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-i-namespace","()",""],["namespaced?","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-i-namespaced-3F","()",""],["namespaced_class_path","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-namespaced_class_path","()",""],["namespaced_path","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-i-namespaced_path","()",""],["native_database_types","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-native_database_types","()",""],["native_database_types","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-native_database_types","()","<p>Returns a hash of mappings from the abstract data types to the native database types. See TableDefinition#column â€¦\n"],["negotiate_format","ActionController::MimeResponds::Collector","classes/ActionController/MimeResponds/Collector.html#method-i-negotiate_format","(request)",""],["negotiate_mime","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-negotiate_mime","(order)","<p>Returns the first MIME type that matches the provided array of MIME types.\n"],["nested","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-nested","(&block)",""],["nested_attributes?","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-nested_attributes-3F","()",""],["nested_under_indifferent_access","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-nested_under_indifferent_access","()",""],["nested_under_indifferent_access","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-nested_under_indifferent_access","()",""],["nested_under_indifferent_access","Hash","classes/Hash.html#method-i-nested_under_indifferent_access","()","<p>Called when object is nested under an object that receives #with_indifferent_access. This method will â€¦\n"],["new","AbstractController::DoubleRenderError","classes/AbstractController/DoubleRenderError.html#method-c-new","(message = nil)",""],["new","AbstractController::Helpers::MissingHelperError","classes/AbstractController/Helpers/MissingHelperError.html#method-c-new","(error, path)",""],["new","ActionCable::Channel::Base","classes/ActionCable/Channel/Base.html#method-c-new","(connection, identifier, params = {})",""],["new","ActionCable::Channel::ConnectionStub","classes/ActionCable/Channel/ConnectionStub.html#method-c-new","(identifiers = {})",""],["new","ActionCable::Channel::NonInferrableChannelError","classes/ActionCable/Channel/NonInferrableChannelError.html#method-c-new","(name)",""],["new","ActionCable::Connection::Base","classes/ActionCable/Connection/Base.html#method-c-new","(server, env, coder: ActiveSupport::JSON)",""],["new","ActionCable::Connection::NonInferrableConnectionError","classes/ActionCable/Connection/NonInferrableConnectionError.html#method-c-new","(name)",""],["new","ActionCable::Connection::StreamEventLoop","classes/ActionCable/Connection/StreamEventLoop.html#method-c-new","()",""],["new","ActionCable::Connection::TaggedLoggerProxy","classes/ActionCable/Connection/TaggedLoggerProxy.html#method-c-new","(logger, tags:)",""],["new","ActionCable::Connection::TestConnection","classes/ActionCable/Connection/TestConnection.html#method-c-new","(request)",""],["new","ActionCable::RemoteConnections","classes/ActionCable/RemoteConnections.html#method-c-new","(server)",""],["new","ActionCable::RemoteConnections::RemoteConnection","classes/ActionCable/RemoteConnections/RemoteConnection.html#method-c-new","(server, ids)",""],["new","ActionCable::Server::Base","classes/ActionCable/Server/Base.html#method-c-new","(config: self.class.config)",""],["new","ActionCable::Server::Broadcasting::Broadcaster","classes/ActionCable/Server/Broadcasting/Broadcaster.html#method-c-new","(server, broadcasting, coder:)",""],["new","ActionCable::Server::Configuration","classes/ActionCable/Server/Configuration.html#method-c-new","()",""],["new","ActionCable::SubscriptionAdapter::Async::AsyncSubscriberMap","classes/ActionCable/SubscriptionAdapter/Async/AsyncSubscriberMap.html#method-c-new","(event_loop)",""],["new","ActionCable::SubscriptionAdapter::Base","classes/ActionCable/SubscriptionAdapter/Base.html#method-c-new","(server)",""],["new","ActionCable::SubscriptionAdapter::PostgreSQL::Listener","classes/ActionCable/SubscriptionAdapter/PostgreSQL/Listener.html#method-c-new","(adapter, event_loop)",""],["new","ActionCable::SubscriptionAdapter::Redis::Listener","classes/ActionCable/SubscriptionAdapter/Redis/Listener.html#method-c-new","(adapter, event_loop)",""],["new","ActionCable::SubscriptionAdapter::SubscriberMap","classes/ActionCable/SubscriptionAdapter/SubscriberMap.html#method-c-new","()",""],["new","ActionController::Live::SSE","classes/ActionController/Live/SSE.html#method-c-new","(stream, options = {})",""],["new","ActionController::Metal","classes/ActionController/Metal.html#method-c-new","()",""],["new","ActionController::MimeResponds::Collector","classes/ActionController/MimeResponds/Collector.html#method-c-new","(mimes, variant = nil)",""],["new","ActionController::MissingRenderer","classes/ActionController/MissingRenderer.html#method-c-new","(format)",""],["new","ActionController::Parameters","classes/ActionController/Parameters.html#method-c-new","(parameters = {}, logging_context = {})","<p>Returns a new instance of <code>ActionController::Parameters</code>. Also, sets the <code>permitted</code> attribute to the default â€¦\n"],["new","ActionController::Renderer","classes/ActionController/Renderer.html#method-i-new","(env = {})","<p>Create a new renderer for the same controller but with a new env.\n"],["new","ActionController::Renderer","classes/ActionController/Renderer.html#method-c-new","(controller, env, defaults)","<p>Accepts a custom Rack environment to render templates in. It will be merged with the default Rack environment â€¦\n"],["new","ActionController::RequestForgeryProtection::ProtectionMethods::Exception","classes/ActionController/RequestForgeryProtection/ProtectionMethods/Exception.html#method-c-new","(controller)",""],["new","ActionController::RequestForgeryProtection::ProtectionMethods::NullSession","classes/ActionController/RequestForgeryProtection/ProtectionMethods/NullSession.html#method-c-new","(controller)",""],["new","ActionController::RequestForgeryProtection::ProtectionMethods::ResetSession","classes/ActionController/RequestForgeryProtection/ProtectionMethods/ResetSession.html#method-c-new","(controller)",""],["new","ActionController::RespondToMismatchError","classes/ActionController/RespondToMismatchError.html#method-c-new","(message = nil)",""],["new","ActionDispatch::AssertionResponse","classes/ActionDispatch/AssertionResponse.html#method-c-new","(code_or_name)","<p>Accepts a specific response status code as an Integer (404) or String (&#39;404&#39;) or a response status â€¦\n"],["new","ActionDispatch::Callbacks","classes/ActionDispatch/Callbacks.html#method-c-new","(app)",""],["new","ActionDispatch::ContentSecurityPolicy","classes/ActionDispatch/ContentSecurityPolicy.html#method-c-new","()",""],["new","ActionDispatch::ContentSecurityPolicy::Middleware","classes/ActionDispatch/ContentSecurityPolicy/Middleware.html#method-c-new","(app)",""],["new","ActionDispatch::Cookies","classes/ActionDispatch/Cookies.html#method-c-new","(app)",""],["new","ActionDispatch::DebugExceptions","classes/ActionDispatch/DebugExceptions.html#method-c-new","(app, routes_app = nil, response_format = :default, interceptors = self.class.interceptors)",""],["new","ActionDispatch::DebugLocks","classes/ActionDispatch/DebugLocks.html#method-c-new","(app, path = \"/rails/locks\")",""],["new","ActionDispatch::ExceptionWrapper","classes/ActionDispatch/ExceptionWrapper.html#method-c-new","(backtrace_cleaner, exception)",""],["new","ActionDispatch::Executor","classes/ActionDispatch/Executor.html#method-c-new","(app, executor)",""],["new","ActionDispatch::FileHandler","classes/ActionDispatch/FileHandler.html#method-c-new","(root, index: \"index\", headers: {}, precompressed: %i[ br gzip ], compressible_content_types: /\\A(?:text\\/|application\\/javascript)/)",""],["new","ActionDispatch::Flash","classes/ActionDispatch/Flash.html#method-c-new","(app)",""],["new","ActionDispatch::HostAuthorization","classes/ActionDispatch/HostAuthorization.html#method-c-new","(app, hosts, exclude: nil, response_app: nil)",""],["new","ActionDispatch::Http::FilterParameters","classes/ActionDispatch/Http/FilterParameters.html#method-c-new","()",""],["new","ActionDispatch::Http::Parameters::ParseError","classes/ActionDispatch/Http/Parameters/ParseError.html#method-c-new","(message = $!.message)",""],["new","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-c-new","()",""],["new","ActionDispatch::Integration::Runner","classes/ActionDispatch/Integration/Runner.html#method-c-new","(*args, &blk)",""],["new","ActionDispatch::Integration::Session","classes/ActionDispatch/Integration/Session.html#method-c-new","(app)","<p>Create and initialize a new Session instance.\n"],["new","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-c-new","(*args)",""],["new","ActionDispatch::MiddlewareStack::InstrumentationProxy","classes/ActionDispatch/MiddlewareStack/InstrumentationProxy.html#method-c-new","(middleware, class_name)",""],["new","ActionDispatch::MiddlewareStack::Middleware","classes/ActionDispatch/MiddlewareStack/Middleware.html#method-c-new","(klass, args, block)",""],["new","ActionDispatch::PermissionsPolicy","classes/ActionDispatch/PermissionsPolicy.html#method-c-new","()",""],["new","ActionDispatch::PermissionsPolicy::Middleware","classes/ActionDispatch/PermissionsPolicy/Middleware.html#method-c-new","(app)",""],["new","ActionDispatch::PublicExceptions","classes/ActionDispatch/PublicExceptions.html#method-c-new","(public_path)",""],["new","ActionDispatch::RailsEntityStore","classes/ActionDispatch/RailsEntityStore.html#method-c-new","(store = Rails.cache)",""],["new","ActionDispatch::RailsMetaStore","classes/ActionDispatch/RailsMetaStore.html#method-c-new","(store = Rails.cache)",""],["new","ActionDispatch::RemoteIp","classes/ActionDispatch/RemoteIp.html#method-c-new","(app, ip_spoofing_check = true, custom_proxies = nil)","<p>Create a new <code>RemoteIp</code> middleware instance.\n<p>The <code>ip_spoofing_check</code> option is on by default. When on, an â€¦\n"],["new","ActionDispatch::RemoteIp::GetIp","classes/ActionDispatch/RemoteIp/GetIp.html#method-c-new","(req, check_ip, proxies)",""],["new","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-c-new","(env)",""],["new","ActionDispatch::RequestId","classes/ActionDispatch/RequestId.html#method-c-new","(app, header:)",""],["new","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-c-new","(status = 200, header = {}, body = [])",""],["new","ActionDispatch::Response::RackBody","classes/ActionDispatch/Response/RackBody.html#method-c-new","(response)",""],["new","ActionDispatch::Routing::ConsoleFormatter::Base","classes/ActionDispatch/Routing/ConsoleFormatter/Base.html#method-c-new","()",""],["new","ActionDispatch::Routing::ConsoleFormatter::Expanded","classes/ActionDispatch/Routing/ConsoleFormatter/Expanded.html#method-c-new","(width: IO.console_size[1])",""],["new","ActionDispatch::Routing::HtmlTableFormatter","classes/ActionDispatch/Routing/HtmlTableFormatter.html#method-c-new","(view)",""],["new","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-new","(&block)",""],["new","ActionDispatch::Routing::UrlFor","classes/ActionDispatch/Routing/UrlFor.html#method-c-new","(...)",""],["new","ActionDispatch::ServerTiming","classes/ActionDispatch/ServerTiming.html#method-c-new","(app)",""],["new","ActionDispatch::Session::CacheStore","classes/ActionDispatch/Session/CacheStore.html#method-c-new","(app, options = {})",""],["new","ActionDispatch::Session::Compatibility","classes/ActionDispatch/Session/Compatibility.html#method-c-new","(app, options = {})",""],["new","ActionDispatch::Session::CookieStore","classes/ActionDispatch/Session/CookieStore.html#method-c-new","(app, options = {})",""],["new","ActionDispatch::Session::CookieStore::SessionId","classes/ActionDispatch/Session/CookieStore/SessionId.html#method-c-new","(session_id, cookie_value = {})",""],["new","ActionDispatch::Session::MemCacheStore","classes/ActionDispatch/Session/MemCacheStore.html#method-c-new","(app, options = {})",""],["new","ActionDispatch::ShowExceptions","classes/ActionDispatch/ShowExceptions.html#method-c-new","(app, exceptions_app)",""],["new","ActionDispatch::Static","classes/ActionDispatch/Static.html#method-c-new","(app, path, index: \"index\", headers: {})",""],["new","ActionMailbox::Base","classes/ActionMailbox/Base.html#method-c-new","(inbound_email)",""],["new","ActionMailbox::InboundEmail::Incineratable::Incineration","classes/ActionMailbox/InboundEmail/Incineratable/Incineration.html#method-c-new","(inbound_email)",""],["new","ActionMailbox::Ingresses::Mailgun::InboundEmailsController::Authenticator","classes/ActionMailbox/Ingresses/Mailgun/InboundEmailsController/Authenticator.html#method-c-new","(key:, timestamp:, token:, signature:)",""],["new","ActionMailbox::Ingresses::Mandrill::InboundEmailsController::Authenticator","classes/ActionMailbox/Ingresses/Mandrill/InboundEmailsController/Authenticator.html#method-c-new","(request, key)",""],["new","ActionMailbox::Relayer","classes/ActionMailbox/Relayer.html#method-c-new","(url:, username: \"actionmailbox\", password:)",""],["new","ActionMailbox::Router","classes/ActionMailbox/Router.html#method-c-new","()",""],["new","ActionMailbox::Router::Route","classes/ActionMailbox/Router/Route.html#method-c-new","(address, to:)",""],["new","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-new","()",""],["new","ActionMailer::Collector","classes/ActionMailer/Collector.html#method-c-new","(context, &block)",""],["new","ActionMailer::NonInferrableMailerError","classes/ActionMailer/NonInferrableMailerError.html#method-c-new","(name)",""],["new","ActionMailer::Preview","classes/ActionMailer/Preview.html#method-c-new","(params = {})",""],["new","ActionText::Attachables::RemoteImage","classes/ActionText/Attachables/RemoteImage.html#method-c-new","(attributes = {})",""],["new","ActionText::Attachment","classes/ActionText/Attachment.html#method-c-new","(node, attachable)",""],["new","ActionText::AttachmentGallery","classes/ActionText/AttachmentGallery.html#method-c-new","(node)",""],["new","ActionText::Content","classes/ActionText/Content.html#method-c-new","(content = nil, options = {})",""],["new","ActionText::Fragment","classes/ActionText/Fragment.html#method-c-new","(source)",""],["new","ActionText::TrixAttachment","classes/ActionText/TrixAttachment.html#method-c-new","(node)",""],["new","ActionView::AbstractRenderer::RenderedCollection::EmptyCollection","classes/ActionView/AbstractRenderer/RenderedCollection/EmptyCollection.html#method-c-new","(format)",""],["new","ActionView::CacheExpiry::Executor","classes/ActionView/CacheExpiry/Executor.html#method-c-new","(watcher:)",""],["new","ActionView::CacheExpiry::ViewModificationWatcher","classes/ActionView/CacheExpiry/ViewModificationWatcher.html#method-c-new","(watcher:, &block)",""],["new","ActionView::Digestor::Node","classes/ActionView/Digestor/Node.html#method-c-new","(name, logical_name, template, children = [])",""],["new","ActionView::FileSystemResolver","classes/ActionView/FileSystemResolver.html#method-c-new","(path)",""],["new","ActionView::FixtureResolver","classes/ActionView/FixtureResolver.html#method-c-new","(hash = {})",""],["new","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-c-new","(object_name, object, template, options)",""],["new","ActionView::Helpers::NumberHelper::InvalidNumberError","classes/ActionView/Helpers/NumberHelper/InvalidNumberError.html#method-c-new","(number)",""],["new","ActionView::LogSubscriber","classes/ActionView/LogSubscriber.html#method-c-new","()",""],["new","ActionView::PartialIteration","classes/ActionView/PartialIteration.html#method-c-new","(size)",""],["new","ActionView::PartialRenderer","classes/ActionView/PartialRenderer.html#method-c-new","(lookup_context, options)",""],["new","ActionView::Renderer","classes/ActionView/Renderer.html#method-c-new","(lookup_context)",""],["new","ActionView::Rendering","classes/ActionView/Rendering.html#method-c-new","()",""],["new","ActionView::Template","classes/ActionView/Template.html#method-c-new","(source, identifier, handler, locals:, format: nil, variant: nil, virtual_path: nil)",""],["new","ActionView::Template::Sources::File","classes/ActionView/Template/Sources/File.html#method-c-new","(filename)",""],["new","ActionView::Template::Types::Type","classes/ActionView/Template/Types/Type.html#method-c-new","(symbol)",""],["new","ActionView::TemplateDetails::Requested","classes/ActionView/TemplateDetails/Requested.html#method-c-new","(locale:, handlers:, formats:, variants:)",""],["new","ActionView::TemplatePath","classes/ActionView/TemplatePath.html#method-c-new","(name, prefix, partial, virtual)",""],["new","ActionView::TestCase::Behavior::ClassMethods","classes/ActionView/TestCase/Behavior/ClassMethods.html#method-i-new","(*)",""],["new","ActionView::TestCase::Behavior::RenderedViewsCollection","classes/ActionView/TestCase/Behavior/RenderedViewsCollection.html#method-c-new","()",""],["new","ActionView::TestCase::TestController","classes/ActionView/TestCase/TestController.html#method-c-new","()",""],["new","ActionView::UnboundTemplate","classes/ActionView/UnboundTemplate.html#method-c-new","(source, identifier, details:, virtual_path:)",""],["new","ActiveJob::Core","classes/ActiveJob/Core.html#method-c-new","(*arguments)","<p>Creates a new job instance. Takes the arguments that will be passed to the perform method.\n"],["new","ActiveJob::QueueAdapters::AsyncAdapter","classes/ActiveJob/QueueAdapters/AsyncAdapter.html#method-c-new","(**executor_options)","<p>See Concurrent::ThreadPoolExecutor for executor options.\n"],["new","ActiveJob::QueueAdapters::SneakersAdapter","classes/ActiveJob/QueueAdapters/SneakersAdapter.html#method-c-new","()",""],["new","ActiveModel::API","classes/ActiveModel/API.html#method-c-new","(attributes = {})","<p>Initializes a new model with the given <code>params</code>.\n\n<pre><code>class Person\n  include ActiveModel::API\n  attr_accessor ...\n</code></pre>\n"],["new","ActiveModel::EachValidator","classes/ActiveModel/EachValidator.html#method-c-new","(options)","<p>Returns a new validator instance. All options will be available via the <code>options</code> reader, however the  â€¦\n"],["new","ActiveModel::Error","classes/ActiveModel/Error.html#method-c-new","(base, attribute, type = :invalid, **options)",""],["new","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-c-new","(base)","<p>Pass in the instance of the object that is using the errors object.\n\n<pre><code>class Person\n  def initialize\n    ...\n</code></pre>\n"],["new","ActiveModel::Name","classes/ActiveModel/Name.html#method-c-new","(klass, namespace = nil, name = nil, locale = :en)","<p>Returns a new ActiveModel::Name instance. By default, the <code>namespace</code> and <code>name</code> option will take the namespace â€¦\n"],["new","ActiveModel::NestedError","classes/ActiveModel/NestedError.html#method-c-new","(base, inner_error, override_options = {})",""],["new","ActiveModel::SecurePassword::InstanceMethodsOnActivation","classes/ActiveModel/SecurePassword/InstanceMethodsOnActivation.html#method-c-new","(attribute)",""],["new","ActiveModel::Type::Value","classes/ActiveModel/Type/Value.html#method-c-new","(precision: nil, limit: nil, scale: nil)",""],["new","ActiveModel::Type::Value","classes/ActiveModel/Type/Value.html#method-c-new","(precision: nil, limit: nil, scale: nil)",""],["new","ActiveModel::UnknownAttributeError","classes/ActiveModel/UnknownAttributeError.html#method-c-new","(record, attribute)",""],["new","ActiveModel::UnknownAttributeError","classes/ActiveModel/UnknownAttributeError.html#method-c-new","(record, attribute)",""],["new","ActiveModel::ValidationError","classes/ActiveModel/ValidationError.html#method-c-new","(model)",""],["new","ActiveModel::Validations::AcceptanceValidator::LazilyDefineAttributes","classes/ActiveModel/Validations/AcceptanceValidator/LazilyDefineAttributes.html#method-c-new","(attributes)",""],["new","ActiveModel::Validator","classes/ActiveModel/Validator.html#method-c-new","(options = {})","<p>Accepts options that will be made available through the <code>options</code> reader.\n"],["new","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-new","(attributes = {}, &block)",""],["new","ActiveRecord::Associations::Preloader::Association::LoaderQuery","classes/ActiveRecord/Associations/Preloader/Association/LoaderQuery.html#method-c-new","(scope, association_key_name)",""],["new","ActiveRecord::Associations::Preloader::Association::LoaderRecords","classes/ActiveRecord/Associations/Preloader/Association/LoaderRecords.html#method-c-new","(loaders, loader_query)",""],["new","ActiveRecord::AttributeAssignmentError","classes/ActiveRecord/AttributeAssignmentError.html#method-c-new","(message = nil, exception = nil, attribute = nil)",""],["new","ActiveRecord::AttributeMethods::Serialization::ColumnNotSerializableError","classes/ActiveRecord/AttributeMethods/Serialization/ColumnNotSerializableError.html#method-c-new","(name, type)",""],["new","ActiveRecord::ConnectionAdapters::AbstractAdapter::Version","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter/Version.html#method-c-new","(version_string, full_version_string = nil)",""],["new","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-c-new","(connection, logger, connection_options, config)",""],["new","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-c-new","()",""],["new","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-c-new","(pool_config)","<p>Creates a new ConnectionPool object. <code>pool_config</code> is a PoolConfig object which describes database connection â€¦\n"],["new","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-c-new","(lock = Monitor.new)",""],["new","ActiveRecord::ConnectionAdapters::ConnectionPool::Reaper","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Reaper.html#method-c-new","(pool, frequency)",""],["new","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-c-new","()",""],["new","ActiveRecord::ConnectionAdapters::Deduplicable::ClassMethods","classes/ActiveRecord/ConnectionAdapters/Deduplicable/ClassMethods.html#method-i-new","(*, **)",""],["new","ActiveRecord::ConnectionAdapters::MySQL::TableDefinition","classes/ActiveRecord/ConnectionAdapters/MySQL/TableDefinition.html#method-c-new","(conn, name, charset: nil, collation: nil, **)",""],["new","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-c-new","(connection, logger, connection_options, config)",""],["new","ActiveRecord::ConnectionAdapters::PostgreSQL::AlterTable","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/AlterTable.html#method-c-new","(td)",""],["new","ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit::Data","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Bit/Data.html#method-c-new","(value)",""],["new","ActiveRecord::ConnectionAdapters::PostgreSQL::TableDefinition","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/TableDefinition.html#method-c-new","(*, **)",""],["new","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-c-new","(connection, logger, connection_parameters, config)","<p>Initializes and connects a PostgreSQL adapter.\n"],["new","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-c-new","(*)",""],["new","ActiveRecord::ConnectionAdapters::QueryCache::ConnectionPoolConfiguration","classes/ActiveRecord/ConnectionAdapters/QueryCache/ConnectionPoolConfiguration.html#method-c-new","(*)",""],["new","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-c-new","(connection, logger, connection_options, config)",""],["new","ActiveRecord::ConnectionAdapters::SavepointTransaction","classes/ActiveRecord/ConnectionAdapters/SavepointTransaction.html#method-c-new","(connection, savepoint_name, parent_transaction, **options)",""],["new","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-c-new","(conn)",""],["new","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-c-new","(table_name, base)",""],["new","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-c-new","( conn, name, temporary: false, if_not_exists: false, options: nil, as: nil, comment: nil, ** )",""],["new","ActiveRecord::ConnectionAdapters::TransactionState","classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-c-new","(state = nil)",""],["new","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-c-new","(attributes = nil)","<p>New objects can be instantiated as either empty (pass no construction parameter) or pre-set with attributes â€¦\n"],["new","ActiveRecord::DatabaseConfigurations","classes/ActiveRecord/DatabaseConfigurations.html#method-c-new","(configurations = {})",""],["new","ActiveRecord::DatabaseConfigurations::HashConfig","classes/ActiveRecord/DatabaseConfigurations/HashConfig.html#method-c-new","(env_name, name, configuration_hash)",""],["new","ActiveRecord::DatabaseConfigurations::UrlConfig","classes/ActiveRecord/DatabaseConfigurations/UrlConfig.html#method-c-new","(env_name, name, url, configuration_hash = {})",""],["new","ActiveRecord::DatabaseConnectionError","classes/ActiveRecord/DatabaseConnectionError.html#method-c-new","(message = nil)",""],["new","ActiveRecord::DynamicMatchers::Method","classes/ActiveRecord/DynamicMatchers/Method.html#method-c-new","(model, method_name)",""],["new","ActiveRecord::EagerLoadPolymorphicError","classes/ActiveRecord/EagerLoadPolymorphicError.html#method-c-new","(reflection = nil)",""],["new","ActiveRecord::Encryption::Cipher::Aes256Gcm","classes/ActiveRecord/Encryption/Cipher/Aes256Gcm.html#method-c-new","(secret, deterministic: false)","<p>When iv not provided, it will generate a random iv on each encryption operation (default and recommended â€¦\n"],["new","ActiveRecord::Encryption::Config","classes/ActiveRecord/Encryption/Config.html#method-c-new","()",""],["new","ActiveRecord::Encryption::Context","classes/ActiveRecord/Encryption/Context.html#method-c-new","()",""],["new","ActiveRecord::Encryption::DerivedSecretKeyProvider","classes/ActiveRecord/Encryption/DerivedSecretKeyProvider.html#method-c-new","(passwords)",""],["new","ActiveRecord::Encryption::DeterministicKeyProvider","classes/ActiveRecord/Encryption/DeterministicKeyProvider.html#method-c-new","(password)",""],["new","ActiveRecord::Encryption::EncryptedAttributeType","classes/ActiveRecord/Encryption/EncryptedAttributeType.html#method-c-new","(scheme:, cast_type: ActiveModel::Type::String.new, previous_type: false)","<p>Options\n<p><code>:scheme</code> - A <code>Scheme</code> with the encryption properties for this attribute.\n<p><code>:cast_type</code> - A type that â€¦\n"],["new","ActiveRecord::Encryption::EncryptedFixtures","classes/ActiveRecord/Encryption/EncryptedFixtures.html#method-c-new","(fixture, model_class)",""],["new","ActiveRecord::Encryption::ExtendedDeterministicQueries::AdditionalValue","classes/ActiveRecord/Encryption/ExtendedDeterministicQueries/AdditionalValue.html#method-c-new","(value, type)",""],["new","ActiveRecord::Encryption::Key","classes/ActiveRecord/Encryption/Key.html#method-c-new","(secret)",""],["new","ActiveRecord::Encryption::KeyProvider","classes/ActiveRecord/Encryption/KeyProvider.html#method-c-new","(keys)",""],["new","ActiveRecord::Encryption::Message","classes/ActiveRecord/Encryption/Message.html#method-c-new","(payload: nil, headers: {})",""],["new","ActiveRecord::Encryption::Properties","classes/ActiveRecord/Encryption/Properties.html#method-c-new","(initial_properties = {})",""],["new","ActiveRecord::Encryption::Scheme","classes/ActiveRecord/Encryption/Scheme.html#method-c-new","(key_provider: nil, key: nil, deterministic: nil, downcase: nil, ignore_case: nil, previous_schemes: nil, **context_properties)",""],["new","ActiveRecord::EnvironmentMismatchError","classes/ActiveRecord/EnvironmentMismatchError.html#method-c-new","(current: nil, stored: nil)",""],["new","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-new","(_, name, class_name, path, config = ActiveRecord::Base)",""],["new","ActiveRecord::FixtureSet::ClassCache","classes/ActiveRecord/FixtureSet/ClassCache.html#method-c-new","(class_names, config)",""],["new","ActiveRecord::FutureResult::EventBuffer","classes/ActiveRecord/FutureResult/EventBuffer.html#method-c-new","(future_result, instrumenter)",""],["new","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-new","(attributes = nil, &block)","<p>Determines if one of the attributes passed in is the inheritance column, and if the inheritance column â€¦\n"],["new","ActiveRecord::Middleware::DatabaseSelector","classes/ActiveRecord/Middleware/DatabaseSelector.html#method-c-new","(app, resolver_klass = nil, context_klass = nil, options = {})",""],["new","ActiveRecord::Middleware::ShardSelector","classes/ActiveRecord/Middleware/ShardSelector.html#method-c-new","(app, resolver, options = {})",""],["new","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-c-new","(name = self.class.name, version = nil)",""],["new","ActiveRecord::Migration::CheckPending","classes/ActiveRecord/Migration/CheckPending.html#method-c-new","(app, file_watcher: ActiveSupport::FileUpdateChecker)",""],["new","ActiveRecord::Migration::CommandRecorder","classes/ActiveRecord/Migration/CommandRecorder.html#method-c-new","(delegate = nil)",""],["new","ActiveRecord::MigrationContext","classes/ActiveRecord/MigrationContext.html#method-c-new","(migrations_paths, schema_migration = SchemaMigration)",""],["new","ActiveRecord::MismatchedForeignKey","classes/ActiveRecord/MismatchedForeignKey.html#method-c-new","( message: nil, sql: nil, binds: nil, table: nil, foreign_key: nil, target_table: nil, primary_key: nil, primary_key_column: nil )",""],["new","ActiveRecord::MultiparameterAssignmentErrors","classes/ActiveRecord/MultiparameterAssignmentErrors.html#method-c-new","(errors = nil)",""],["new","ActiveRecord::NoDatabaseError","classes/ActiveRecord/NoDatabaseError.html#method-c-new","(message = nil)",""],["new","ActiveRecord::QueryMethods::WhereChain","classes/ActiveRecord/QueryMethods/WhereChain.html#method-c-new","(scope)",""],["new","ActiveRecord::RecordInvalid","classes/ActiveRecord/RecordInvalid.html#method-c-new","(record = nil)",""],["new","ActiveRecord::RecordNotDestroyed","classes/ActiveRecord/RecordNotDestroyed.html#method-c-new","(message = nil, record = nil)",""],["new","ActiveRecord::RecordNotFound","classes/ActiveRecord/RecordNotFound.html#method-c-new","(message = nil, model = nil, primary_key = nil, id = nil)",""],["new","ActiveRecord::RecordNotSaved","classes/ActiveRecord/RecordNotSaved.html#method-c-new","(message = nil, record = nil)",""],["new","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-c-new","(name, scope, options, active_record)",""],["new","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-c-new","(klass, table: klass.arel_table, predicate_builder: klass.predicate_builder, values: {})",""],["new","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-new","(attributes = nil, &block)","<p>Initializes new record from relation while maintaining the current scope.\n<p>Expects arguments in the same â€¦\n"],["new","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-c-new","(columns, rows, column_types = {})",""],["new","ActiveRecord::SoleRecordExceeded","classes/ActiveRecord/SoleRecordExceeded.html#method-c-new","(record = nil)",""],["new","ActiveRecord::StaleObjectError","classes/ActiveRecord/StaleObjectError.html#method-c-new","(record = nil, attempted_action = nil)",""],["new","ActiveRecord::StatementCache::PartialQueryCollector","classes/ActiveRecord/StatementCache/PartialQueryCollector.html#method-c-new","()",""],["new","ActiveRecord::StatementInvalid","classes/ActiveRecord/StatementInvalid.html#method-c-new","(message = nil, sql: nil, binds: nil)",""],["new","ActiveRecord::UnknownPrimaryKey","classes/ActiveRecord/UnknownPrimaryKey.html#method-c-new","(model = nil, description = nil)",""],["new","ActiveStorage::Analyzer","classes/ActiveStorage/Analyzer.html#method-c-new","(blob)",""],["new","ActiveStorage::Attached","classes/ActiveStorage/Attached.html#method-c-new","(name, record)",""],["new","ActiveStorage::Filename","classes/ActiveStorage/Filename.html#method-c-new","(filename)",""],["new","ActiveStorage::Preview","classes/ActiveStorage/Preview.html#method-c-new","(blob, variation_or_variation_key)",""],["new","ActiveStorage::Previewer","classes/ActiveStorage/Previewer.html#method-c-new","(blob)",""],["new","ActiveStorage::Service::AzureStorageService","classes/ActiveStorage/Service/AzureStorageService.html#method-c-new","(storage_account_name:, storage_access_key:, container:, public: false, **options)",""],["new","ActiveStorage::Service::DiskService","classes/ActiveStorage/Service/DiskService.html#method-c-new","(root:, public: false, **options)",""],["new","ActiveStorage::Service::GCSService","classes/ActiveStorage/Service/GCSService.html#method-c-new","(public: false, **config)",""],["new","ActiveStorage::Service::MirrorService","classes/ActiveStorage/Service/MirrorService.html#method-c-new","(primary:, mirrors:)",""],["new","ActiveStorage::Service::S3Service","classes/ActiveStorage/Service/S3Service.html#method-c-new","(bucket:, upload: {}, public: false, **options)",""],["new","ActiveStorage::Transformers::Transformer","classes/ActiveStorage/Transformers/Transformer.html#method-c-new","(transformations)",""],["new","ActiveStorage::Variant","classes/ActiveStorage/Variant.html#method-c-new","(blob, variation_or_variation_key)",""],["new","ActiveStorage::VariantWithRecord","classes/ActiveStorage/VariantWithRecord.html#method-c-new","(blob, variation)",""],["new","ActiveStorage::Variation","classes/ActiveStorage/Variation.html#method-c-new","(transformations)",""],["new","ActiveSupport::BacktraceCleaner","classes/ActiveSupport/BacktraceCleaner.html#method-c-new","()",""],["new","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-c-new","(cache_path, **options)",""],["new","ActiveSupport::Cache::MemCacheStore","classes/ActiveSupport/Cache/MemCacheStore.html#method-c-new","(*addresses)","<p>Creates a new MemCacheStore object, with the given memcached server addresses. Each address is either â€¦\n"],["new","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-c-new","(options = nil)",""],["new","ActiveSupport::Cache::RedisCacheStore","classes/ActiveSupport/Cache/RedisCacheStore.html#method-c-new","(namespace: nil, compress: true, compress_threshold: 1.kilobyte, coder: default_coder, expires_in: nil, race_condition_ttl: nil, error_handler: DEFAULT_ERROR_HANDLER, **redis_options)","<p>Creates a new Redis cache store.\n<p>Handles four options: :redis block, :redis instance, single :url string, â€¦\n"],["new","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-c-new","(options = nil)","<p>Creates a new cache. The options will be passed to any write method calls except for <code>:namespace</code> which â€¦\n"],["new","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","classes/ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-c-new","()",""],["new","ActiveSupport::CachingKeyGenerator","classes/ActiveSupport/CachingKeyGenerator.html#method-c-new","(key_generator)",""],["new","ActiveSupport::Callbacks::CallTemplate::InstanceExec0","classes/ActiveSupport/Callbacks/CallTemplate/InstanceExec0.html#method-c-new","(block)",""],["new","ActiveSupport::Callbacks::CallTemplate::InstanceExec1","classes/ActiveSupport/Callbacks/CallTemplate/InstanceExec1.html#method-c-new","(block)",""],["new","ActiveSupport::Callbacks::CallTemplate::InstanceExec2","classes/ActiveSupport/Callbacks/CallTemplate/InstanceExec2.html#method-c-new","(block)",""],["new","ActiveSupport::Callbacks::CallTemplate::MethodCall","classes/ActiveSupport/Callbacks/CallTemplate/MethodCall.html#method-c-new","(method)",""],["new","ActiveSupport::Callbacks::CallTemplate::ObjectCall","classes/ActiveSupport/Callbacks/CallTemplate/ObjectCall.html#method-c-new","(target, method)",""],["new","ActiveSupport::Callbacks::CallTemplate::ProcCall","classes/ActiveSupport/Callbacks/CallTemplate/ProcCall.html#method-c-new","(target)",""],["new","ActiveSupport::Callbacks::Conditionals::Value","classes/ActiveSupport/Callbacks/Conditionals/Value.html#method-c-new","(&block)",""],["new","ActiveSupport::CodeGenerator::MethodSet","classes/ActiveSupport/CodeGenerator/MethodSet.html#method-c-new","(namespace)",""],["new","ActiveSupport::Concurrency::ShareLock","classes/ActiveSupport/Concurrency/ShareLock.html#method-c-new","()",""],["new","ActiveSupport::CurrentAttributes","classes/ActiveSupport/CurrentAttributes.html#method-c-new","()",""],["new","ActiveSupport::Deprecation","classes/ActiveSupport/Deprecation.html#method-c-new","(deprecation_horizon = \"7.1\", gem_name = \"Rails\")","<p>It accepts two parameters on initialization. The first is a version of library and the second is a library â€¦\n"],["new","ActiveSupport::Deprecation::DeprecatedConstantProxy","classes/ActiveSupport/Deprecation/DeprecatedConstantProxy.html#method-c-new","(*args, **options, &block)",""],["new","ActiveSupport::Deprecation::DeprecatedConstantProxy","classes/ActiveSupport/Deprecation/DeprecatedConstantProxy.html#method-c-new","(old_const, new_const, deprecator = ActiveSupport::Deprecation.instance, message: \"#{old_const} is deprecated! Use #{new_const} instead.\")",""],["new","ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy","classes/ActiveSupport/Deprecation/DeprecatedInstanceVariableProxy.html#method-c-new","(instance, method, var = \"@#{method}\", deprecator = ActiveSupport::Deprecation.instance)",""],["new","ActiveSupport::Deprecation::DeprecatedObjectProxy","classes/ActiveSupport/Deprecation/DeprecatedObjectProxy.html#method-c-new","(object, message, deprecator = ActiveSupport::Deprecation.instance)",""],["new","ActiveSupport::EncryptedConfiguration","classes/ActiveSupport/EncryptedConfiguration.html#method-c-new","(config_path:, key_path:, env_key:, raise_if_missing_key:)",""],["new","ActiveSupport::EncryptedFile","classes/ActiveSupport/EncryptedFile.html#method-c-new","(content_path:, key_path:, env_key:, raise_if_missing_key:)",""],["new","ActiveSupport::EncryptedFile::InvalidKeyLengthError","classes/ActiveSupport/EncryptedFile/InvalidKeyLengthError.html#method-c-new","()",""],["new","ActiveSupport::EncryptedFile::MissingContentError","classes/ActiveSupport/EncryptedFile/MissingContentError.html#method-c-new","(content_path)",""],["new","ActiveSupport::EncryptedFile::MissingKeyError","classes/ActiveSupport/EncryptedFile/MissingKeyError.html#method-c-new","(key_path:, env_key:)",""],["new","ActiveSupport::ErrorReporter","classes/ActiveSupport/ErrorReporter.html#method-c-new","(*subscribers, logger: nil)",""],["new","ActiveSupport::FileUpdateChecker","classes/ActiveSupport/FileUpdateChecker.html#method-c-new","(files, dirs = {}, &block)","<p>It accepts two parameters on initialization. The first is an array of files and the second is an optional â€¦\n"],["new","ActiveSupport::Gzip::Stream","classes/ActiveSupport/Gzip/Stream.html#method-c-new","(*)",""],["new","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-c-new","(constructor = nil)",""],["new","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-c-new","(constructor = nil)",""],["new","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-c-new","()",""],["new","ActiveSupport::Inflector::Inflections::Uncountables","classes/ActiveSupport/Inflector/Inflections/Uncountables.html#method-c-new","()",""],["new","ActiveSupport::InheritableOptions","classes/ActiveSupport/InheritableOptions.html#method-c-new","(parent = nil)",""],["new","ActiveSupport::KeyGenerator","classes/ActiveSupport/KeyGenerator.html#method-c-new","(secret, options = {})",""],["new","ActiveSupport::LogSubscriber::TestHelper::MockLogger","classes/ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-c-new","(level = DEBUG)",""],["new","ActiveSupport::Logger","classes/ActiveSupport/Logger.html#method-c-new","(*args, **kwargs)",""],["new","ActiveSupport::MessageEncryptor","classes/ActiveSupport/MessageEncryptor.html#method-c-new","(secret, sign_secret = nil, cipher: nil, digest: nil, serializer: nil)","<p>Initialize a new MessageEncryptor. <code>secret</code> must be at least as long as the cipher key size. For the default â€¦\n"],["new","ActiveSupport::MessageVerifier","classes/ActiveSupport/MessageVerifier.html#method-c-new","(secret, digest: nil, serializer: nil)",""],["new","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-c-new","(string)","<p>Creates a new Chars instance by wrapping <em>string</em>.\n"],["new","ActiveSupport::Notifications::Event","classes/ActiveSupport/Notifications/Event.html#method-c-new","(name, start, ending, transaction_id, payload)",""],["new","ActiveSupport::Notifications::Fanout","classes/ActiveSupport/Notifications/Fanout.html#method-c-new","()",""],["new","ActiveSupport::Notifications::InstrumentationSubscriberError","classes/ActiveSupport/Notifications/InstrumentationSubscriberError.html#method-c-new","(exceptions)",""],["new","ActiveSupport::Notifications::Instrumenter","classes/ActiveSupport/Notifications/Instrumenter.html#method-c-new","(notifier)",""],["new","ActiveSupport::ParameterFilter","classes/ActiveSupport/ParameterFilter.html#method-c-new","(filters = [], mask: FILTERED)","<p>Create instance with given filters. Supported type of filters are <code>String</code>, <code>Regexp</code>, and <code>Proc</code>. Other types â€¦\n"],["new","ActiveSupport::Reloader","classes/ActiveSupport/Reloader.html#method-c-new","()",""],["new","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-c-new","(str = \"\")",""],["new","ActiveSupport::SafeBuffer::SafeConcatError","classes/ActiveSupport/SafeBuffer/SafeConcatError.html#method-c-new","()",""],["new","ActiveSupport::SecureCompareRotator","classes/ActiveSupport/SecureCompareRotator.html#method-c-new","(value, **_options)",""],["new","ActiveSupport::Subscriber","classes/ActiveSupport/Subscriber.html#method-c-new","()",""],["new","ActiveSupport::TaggedLogging","classes/ActiveSupport/TaggedLogging.html#method-c-new","(logger)",""],["new","ActiveSupport::Testing::Parallelization::Server","classes/ActiveSupport/Testing/Parallelization/Server.html#method-c-new","()",""],["new","ActiveSupport::Testing::Parallelization::Worker","classes/ActiveSupport/Testing/Parallelization/Worker.html#method-c-new","(number, url)",""],["new","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-c-new","(utc_time, time_zone, local_time = nil, period = nil)",""],["new","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-new","(name)","<p>Returns a TimeZone instance with the given name, or <code>nil</code> if no such TimeZone instance exists. (This exists â€¦\n"],["new","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-new","(name, utc_offset = nil, tzinfo = nil)","<p>Create a new TimeZone object with the given name and offset. The offset is the number of seconds that â€¦\n"],["new","ActiveSupport::XMLConverter::DisallowedType","classes/ActiveSupport/XMLConverter/DisallowedType.html#method-c-new","(type)",""],["new","Mime::AllType","classes/Mime/AllType.html#method-c-new","()",""],["new","Mime::Mimes","classes/Mime/Mimes.html#method-c-new","()",""],["new","Mime::Type","classes/Mime/Type.html#method-c-new","(string, symbol = nil, synonyms = [])",""],["new","Minitest::BacktraceFilterWithFallback","classes/Minitest/BacktraceFilterWithFallback.html#method-c-new","(preferred, fallback)",""],["new","Rails::API::Task","classes/Rails/API/Task.html#method-c-new","(name)",""],["new","Rails::Application","classes/Rails/Application.html#method-c-new","(initial_variable_values = {}, &block)",""],["new","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-c-new","(*)",""],["new","Rails::Application::DefaultMiddlewareStack","classes/Rails/Application/DefaultMiddlewareStack.html#method-c-new","(app, config, paths)",""],["new","Rails::Application::Finisher::MutexHook","classes/Rails/Application/Finisher/MutexHook.html#method-c-new","(mutex = Mutex.new)",""],["new","Rails::Application::RoutesReloader","classes/Rails/Application/RoutesReloader.html#method-c-new","()",""],["new","Rails::BacktraceCleaner","classes/Rails/BacktraceCleaner.html#method-c-new","()",""],["new","Rails::Configuration::MiddlewareStackProxy","classes/Rails/Configuration/MiddlewareStackProxy.html#method-c-new","(operations = [], delete_operations = [])",""],["new","Rails::Console","classes/Rails/Console.html#method-c-new","(app, options = {})",""],["new","Rails::DBConsole","classes/Rails/DBConsole.html#method-c-new","(options = {})",""],["new","Rails::Engine","classes/Rails/Engine.html#method-c-new","()",""],["new","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-c-new","(root = nil)",""],["new","Rails::Engine::Railties","classes/Rails/Engine/Railties.html#method-c-new","()",""],["new","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-c-new","(name)",""],["new","Rails::Generators::AppBase::GemfileEntry","classes/Rails/Generators/AppBase/GemfileEntry.html#method-c-new","(name, version, comment, options = {}, commented_out = false)",""],["new","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-c-new","(name, context, options, &block)",""],["new","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-c-new","(root, current, paths, options = {})",""],["new","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-c-new","(path)",""],["new","Rails::Rack::Logger","classes/Rails/Rack/Logger.html#method-c-new","(app, taggers = nil)",""],["new","Rails::Rails::Conductor::ActionMailbox::InboundEmails::SourcesController","classes/Rails/Rails/Conductor/ActionMailbox/InboundEmails/SourcesController.html#method-i-new","()",""],["new","Rails::Rails::Conductor::ActionMailbox::InboundEmailsController","classes/Rails/Rails/Conductor/ActionMailbox/InboundEmailsController.html#method-i-new","()",""],["new","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-c-new","()",""],["new","Rails::Secrets::MissingKeyError","classes/Rails/Secrets/MissingKeyError.html#method-c-new","()",""],["new","Rails::Server","classes/Rails/Server.html#method-c-new","(options = nil)",""],["new","Rails::SourceAnnotationExtractor","classes/Rails/SourceAnnotationExtractor.html#method-c-new","(tag)",""],["new_client","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-c-new_client","(config)",""],["new_client","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-c-new_client","(conn_params)",""],["new_helper","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-new_helper","(type: :url)",""],["new_record?","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-new_record-3F","()","<p>Returns true if this object hasn&#39;t been saved yet â€“ that is, a record for the object doesn&#39;t â€¦\n"],["new_session","Rails::ConsoleMethods","classes/Rails/ConsoleMethods.html#method-i-new_session","()","<p>create a new session. If a block is given, the new session will be yielded to the block before being â€¦\n"],["next_day","Time","classes/Time.html#method-i-next_day","(days = 1)","<p>Returns a new time the specified number of days in the future.\n"],["next_day?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-next_day-3F","()",""],["next_day?","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-next_day-3F","()",""],["next_migration_number","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-next_migration_number","(number)","<p>Determines the version number of the next migration.\n"],["next_month","Time","classes/Time.html#method-i-next_month","(months = 1)","<p>Returns a new time the specified number of months in the future.\n"],["next_occurring","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-next_occurring","(day_of_week)","<p>Returns a new date/time representing the next occurrence of the specified day of week.\n\n<pre><code>today = Date.today ...\n</code></pre>\n"],["next_quarter","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-next_quarter","()","<p>Short-hand for <code>months_since(3)</code>.\n"],["next_sequence_value","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-next_sequence_value","()","<p>Returns the next value that will be used as the primary key on an insert statement.\n"],["next_week","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-next_week","(given_day_in_next_week = Date.beginning_of_week, same_time: false)","<p>Returns a new date/time representing the given day in the next week.\n\n<pre><code>today = Date.today # =&gt; Thu, 07 May ...\n</code></pre>\n"],["next_weekday","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-next_weekday","()","<p>Returns a new date/time representing the next weekday.\n"],["next_year","Time","classes/Time.html#method-i-next_year","(years = 1)","<p>Returns a new time the specified number of years in the future.\n"],["nil?","Mime::NullType","classes/Mime/NullType.html#method-i-nil-3F","()",""],["no_routes","ActionDispatch::Routing::ConsoleFormatter::Base","classes/ActionDispatch/Routing/ConsoleFormatter/Base.html#method-i-no_routes","(routes, filter)",""],["no_routes","ActionDispatch::Routing::HtmlTableFormatter","classes/ActionDispatch/Routing/HtmlTableFormatter.html#method-i-no_routes","(*)",""],["no_store","ActionController::ConditionalGet","classes/ActionController/ConditionalGet.html#method-i-no_store","()","<p>Sets an HTTP 1.1 Cache-Control header of <code>no-store</code>. This means the resource may not be stored in any cache. â€¦\n"],["no_touching","ActiveRecord::NoTouching::ClassMethods","classes/ActiveRecord/NoTouching/ClassMethods.html#method-i-no_touching","(&block)","<p>Lets you selectively disable calls to <code>touch</code> for the duration of a block.\n<p>Examples\n\n<pre><code>ActiveRecord::Base.no_touching ...\n</code></pre>\n"],["no_touching?","ActiveRecord::NoTouching","classes/ActiveRecord/NoTouching.html#method-i-no_touching-3F","()","<p>Returns <code>true</code> if the class has <code>no_touching</code> set, <code>false</code> otherwise.\n\n<pre><code>Project.no_touching do\n  Project.first.no_touching? ...\n</code></pre>\n"],["node_to_html","ActionText::HtmlConversion","classes/ActionText/HtmlConversion.html#method-i-node_to_html","(node)",""],["node_to_plain_text","ActionText::PlainTextConversion","classes/ActionText/PlainTextConversion.html#method-i-node_to_plain_text","(node)",""],["non_xhr_javascript_response?","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-non_xhr_javascript_response-3F","()","<p>Check for cross-origin JavaScript responses.\n"],["nonce","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-nonce","(secret_key, time = Time.now)","<p>Uses an MD5 digest based on time to generate a value to be used only once.\n<p>A server-specified data string â€¦\n"],["none","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-none","()","<p>Returns a chainable relation with zero records.\n<p>The returned relation implements the Null Object pattern. â€¦\n"],["none?","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-none-3F","()","<p>Returns true if there are no records.\n"],["noon","Date","classes/Date.html#method-i-noon","()",""],["noon","DateTime","classes/DateTime.html#method-i-noon","()",""],["noon","Time","classes/Time.html#method-i-noon","()",""],["normalize_action_path","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-normalize_action_path","(action_path)",""],["normalize_name","ActionDispatch::Routing::Mapper","classes/ActionDispatch/Routing/Mapper.html#method-c-normalize_name","(name)",""],["normalize_path","ActionDispatch::Routing::Mapper","classes/ActionDispatch/Routing/Mapper.html#method-c-normalize_path","(path)","<p>Invokes Journey::Router::Utils.normalize_path, then ensures that /(:locale) becomes (/:locale). Except â€¦\n"],["not","ActiveRecord::QueryMethods::WhereChain","classes/ActiveRecord/QueryMethods/WhereChain.html#method-i-not","(opts, *rest)","<p>Returns a new relation expressing WHERE + NOT condition according to the conditions in the arguments. â€¦\n"],["not_modified?","ActionDispatch::Http::Cache::Request","classes/ActionDispatch/Http/Cache/Request.html#method-i-not_modified-3F","(modified_at)",""],["notice","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-notice","()","<p>Convenience accessor for <code>flash[:notice]</code>.\n"],["notice=","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-notice-3D","(message)","<p>Convenience accessor for <code>flash[:notice]=</code>.\n"],["now","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-now","()","<p>Sets a flash that will not be available to the next action, only to the current.\n\n<pre><code>flash.now[:message] = ...\n</code></pre>\n"],["now","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-now","()","<p>Returns an ActiveSupport::TimeWithZone instance representing the current time in the time zone represented â€¦\n"],["now_is_loaded?","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-now_is_loaded-3F","()",""],["nsec","DateTime","classes/DateTime.html#method-i-nsec","()","<p>Returns the fraction of a second as nanoseconds\n"],["nullify!","ActiveRecord::ConnectionAdapters::TransactionState","classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-nullify-21","()",""],["num_waiting","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-num_waiting","()","<p>Returns the number of threads currently waiting on this queue.\n"],["number_field","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-number_field","","<p>Wraps ActionView::Helpers::FormHelper#number_field for form builders:\n\n<pre><code>&lt;%= form_with model: @user do |f| ...\n</code></pre>\n"],["number_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-number_field","(object_name, method, options = {})","<p>Returns an input tag of type â€œnumberâ€.\n<p>Options\n<p>Accepts same options as number_field_tag\n"],["number_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-number_field_tag","(name, value = nil, options = {})","<p>Creates a number field.\n<p>Options\n<p><code>:min</code> - The minimum acceptable value.\n"],["number_to_currency","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_currency","(number, options = {})","<p>Formats a <code>number</code> into a currency string (e.g., $13.65). You can customize the format in the <code>options</code> hash. â€¦\n"],["number_to_currency","ActiveSupport::NumberHelper","classes/ActiveSupport/NumberHelper.html#method-i-number_to_currency","(number, options = {})","<p>Formats a <code>number</code> into a currency string (e.g., $13.65). You can customize the format in the <code>options</code> hash. â€¦\n"],["number_to_delimited","ActiveSupport::NumberHelper","classes/ActiveSupport/NumberHelper.html#method-i-number_to_delimited","(number, options = {})","<p>Formats a <code>number</code> with grouped thousands using <code>delimiter</code> (e.g., 12,324). You can customize the format â€¦\n"],["number_to_human","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_human","(number, options = {})","<p>Pretty prints (formats and approximates) a number in a way it is more readable by humans (e.g.: 1200000000 â€¦\n"],["number_to_human","ActiveSupport::NumberHelper","classes/ActiveSupport/NumberHelper.html#method-i-number_to_human","(number, options = {})","<p>Pretty prints (formats and approximates) a number in a way it is more readable by humans (e.g.: 1200000000 â€¦\n"],["number_to_human_size","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_human_size","(number, options = {})","<p>Formats the bytes in <code>number</code> into a more understandable representation (e.g., giving it 1500 yields 1.46 â€¦\n"],["number_to_human_size","ActiveSupport::NumberHelper","classes/ActiveSupport/NumberHelper.html#method-i-number_to_human_size","(number, options = {})","<p>Formats the bytes in <code>number</code> into a more understandable representation (e.g., giving it 1500 yields 1.46 â€¦\n"],["number_to_percentage","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_percentage","(number, options = {})","<p>Formats a <code>number</code> as a percentage string (e.g., 65%). You can customize the format in the <code>options</code> hash. â€¦\n"],["number_to_percentage","ActiveSupport::NumberHelper","classes/ActiveSupport/NumberHelper.html#method-i-number_to_percentage","(number, options = {})","<p>Formats a <code>number</code> as a percentage string (e.g., 65%). You can customize the format in the <code>options</code> hash. â€¦\n"],["number_to_phone","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_phone","(number, options = {})","<p>Formats a <code>number</code> into a phone number (US by default e.g., (555) 123-9876). You can customize the format â€¦\n"],["number_to_phone","ActiveSupport::NumberHelper","classes/ActiveSupport/NumberHelper.html#method-i-number_to_phone","(number, options = {})","<p>Formats a <code>number</code> into a phone number (US by default e.g., (555) 123-9876). You can customize the format â€¦\n"],["number_to_rounded","ActiveSupport::NumberHelper","classes/ActiveSupport/NumberHelper.html#method-i-number_to_rounded","(number, options = {})","<p>Formats a <code>number</code> with the specified level of <code>:precision</code> (e.g., 112.32 has a precision of 2 if <code>:significant</code> â€¦\n"],["number_with_delimiter","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_with_delimiter","(number, options = {})","<p>Formats a <code>number</code> with grouped thousands using <code>delimiter</code> (e.g., 12,324). You can customize the format â€¦\n"],["number_with_precision","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_with_precision","(number, options = {})","<p>Formats a <code>number</code> with the specified level of <code>:precision</code> (e.g., 112.32 has a precision of 2 if <code>:significant</code> â€¦\n"],["numrange","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-numrange","",""],["object","ActionView::Helpers::ActiveModelInstanceTag","classes/ActionView/Helpers/ActiveModelInstanceTag.html#method-i-object","()",""],["of_kind?","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-of_kind-3F","(attribute, type = :invalid)","<p>Returns <code>true</code> if an error on the attribute with the given type is present, or <code>false</code> otherwise. <code>type</code> is â€¦\n"],["offset","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-offset","(value)","<p>Specifies the number of rows to skip before returning rows.\n\n<pre><code>User.offset(10) # generated SQL has &quot;OFFSET ...\n</code></pre>\n"],["oid","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-oid","",""],["on_cdata_block","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_cdata_block","(string)",""],["on_characters","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_characters","(string)",""],["on_encrypted_attribute_declared","ActiveRecord::Encryption::Configurable","classes/ActiveRecord/Encryption/Configurable.html#method-i-on_encrypted_attribute_declared","(&block)","<p>Register callback to be invoked when an encrypted attribute is declared.\n<p>Example:\n\n<pre><code>ActiveRecord::Encryption.on_encrypted_attribute_declared ...\n</code></pre>\n"],["on_end_document","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_end_document","()",""],["on_end_element","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_end_element","(name)",""],["on_load","ActiveSupport::LazyLoadHooks","classes/ActiveSupport/LazyLoadHooks.html#method-i-on_load","(name, options = {}, &block)","<p>Declares a block that will be executed when a Rails component is fully loaded.\n<p>Options:\n<p><code>:yield</code> - Yields â€¦\n"],["on_start_document","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_start_document","()",""],["on_start_element","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_start_element","(name, attrs = {})",""],["on_subscribe","ActionCable::Channel::Callbacks::ClassMethods","classes/ActionCable/Channel/Callbacks/ClassMethods.html#method-i-on_subscribe","(*methods, &block)",""],["on_unsubscribe","ActionCable::Channel::Callbacks::ClassMethods","classes/ActionCable/Channel/Callbacks/ClassMethods.html#method-i-on_unsubscribe","(*methods, &block)",""],["on_weekday?","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-on_weekday-3F","()","<p>Returns true if the date/time does not fall on a Saturday or Sunday.\n"],["on_weekend?","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-on_weekend-3F","()","<p>Returns true if the date/time falls on a Saturday or Sunday.\n"],["one?","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-one-3F","()","<p>Returns true if there is exactly one record.\n"],["only","ActiveRecord::SpawnMethods","classes/ActiveRecord/SpawnMethods.html#method-i-only","(*onlies)","<p>Removes any condition from the query other than the one(s) specified in <code>onlies</code>.\n\n<pre><code>Post.order(&#39;id asc&#39;).only(:where) ...\n</code></pre>\n"],["opaque","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-opaque","(secret_key)","<p>Opaque based on digest of secret key\n"],["open","ActionDispatch::Http::UploadedFile","classes/ActionDispatch/Http/UploadedFile.html#method-i-open","()","<p>Shortcut for <code>tempfile.open</code>.\n"],["open","ActionDispatch::RailsEntityStore","classes/ActionDispatch/RailsEntityStore.html#method-i-open","(key)",""],["open","ActiveStorage::Blob","classes/ActiveStorage/Blob.html#method-i-open","(tmpdir: nil, &block)","<p>Downloads the blob to a tempfile on disk. Yields the tempfile.\n<p>The tempfile&#39;s name is prefixed with â€¦\n"],["open","ActiveStorage::Service","classes/ActiveStorage/Service.html#method-i-open","(*args, **options, &block)",""],["open_session","ActionDispatch::Integration::Runner","classes/ActionDispatch/Integration/Runner.html#method-i-open_session","()","<p>Open a new session instance. If a block is given, the new session is yielded to the block before being â€¦\n"],["opt_parser","Rails::Server","classes/Rails/Server.html#method-i-opt_parser","()",""],["optimize_indentation","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-optimize_indentation","(value, amount = 0)","<p>Returns optimized string with indentation\n"],["optimize_routes_generation?","ActionDispatch::Routing::UrlFor","classes/ActionDispatch/Routing/UrlFor.html#method-i-optimize_routes_generation-3F","()",""],["optimizer_hints","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-optimizer_hints","(*args)","<p>Specify optimizer hints to be used in the SELECT statement.\n<p>Example (for MySQL):\n\n<pre><code>Topic.optimizer_hints(&quot;MAX_EXECUTION_TIME(50000)&quot;, ...\n</code></pre>\n"],["option_groups_from_collection_for_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-option_groups_from_collection_for_select","(collection, group_method, group_label_method, option_key_method, option_value_method, selected_key = nil)","<p>Returns a string of <code>&lt;option&gt;</code> tags, like <code>options_from_collection_for_select</code>, but groups them by â€¦\n"],["optional_port","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-optional_port","()","<p>Returns a number port suffix like 8080 if the port number of this request is not the default HTTP port â€¦\n"],["options","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-options","(path, **args)","<p>Performs an OPTIONS request with the given parameters. See ActionDispatch::Integration::Session#process â€¦\n"],["options","ActionDispatch::Routing::Mapper::HttpHelpers","classes/ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-options","(*args, &block)","<p>Define a route that only recognizes HTTP OPTIONS. For supported arguments, see match\n\n<pre><code>options &#39;carrots&#39;, ...\n</code></pre>\n"],["options_for_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-options_for_select","(container, selected = nil)","<p>Accepts a container (hash, array, enumerable, your type) and returns a string of option tags. Given a â€¦\n"],["options_from_collection_for_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-options_from_collection_for_select","(collection, value_method, text_method, selected = nil)","<p>Returns a string of option tags that have been compiled by iterating over the <code>collection</code> and assigning â€¦\n"],["options_include_default?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-options_include_default-3F","(options)",""],["or","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-or","(other)","<p>Returns a new relation, which is the logical union of this relation and the one passed as an argument. â€¦\n"],["order","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-order","(*args)","<p>Applies an <code>ORDER BY</code> clause to a query.\n<p>#order accepts arguments in one of several formats.\n<p>symbols\n"],["ordinal","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-ordinal","(number)","<p>Returns the suffix that should be added to a number to denote the position in an ordered sequence such â€¦\n"],["ordinal","Integer","classes/Integer.html#method-i-ordinal","()","<p>Ordinal returns the suffix used to denote the position in an ordered sequence such as 1st, 2nd, 3rd, â€¦\n"],["ordinalize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-ordinalize","(number)","<p>Turns a number into an ordinal string used to denote the position in an ordered sequence such as 1st, â€¦\n"],["ordinalize","Integer","classes/Integer.html#method-i-ordinalize","()","<p>Ordinalize turns a number into an ordinal string used to denote the position in an ordered sequence such â€¦\n"],["original_concat","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-original_concat","(value)",""],["original_fullpath","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-original_fullpath","()","<p>Returns a <code>String</code> with the last requested path including their params.\n\n<pre><code># get &#39;/foo&#39;\nrequest.original_fullpath ...\n</code></pre>\n"],["original_url","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-original_url","()","<p>Returns the original request URL as a <code>String</code>.\n\n<pre><code># get &quot;/articles?page=2&quot;\nrequest.original_url # =&gt; &quot;http://www.example.com/articles?page=2&quot;\n</code></pre>\n"],["overlaps?","Range","classes/Range.html#method-i-overlaps-3F","(other)","<p>Compare two ranges and see if they overlap each other\n\n<pre><code>(1..5).overlaps?(4..6) # =&gt; true\n(1..5).overlaps?(7..9) ...\n</code></pre>\n"],["override_accessors_to_preserve_original","ActiveRecord::Encryption::EncryptableRecord","classes/ActiveRecord/Encryption/EncryptableRecord.html#method-i-override_accessors_to_preserve_original","(name, original_attribute_name)",""],["parallelize","ActiveSupport::TestCase","classes/ActiveSupport/TestCase.html#method-c-parallelize","(workers: :number_of_processors, with: :processes, threshold: ActiveSupport.test_parallelization_threshold)","<p>Parallelizes the test suite.\n<p>Takes a <code>workers</code> argument that controls how many times the process is forked. â€¦\n"],["parallelize_setup","ActiveSupport::TestCase","classes/ActiveSupport/TestCase.html#method-c-parallelize_setup","(&block)","<p>Set up hook for parallel testing. This can be used if you have multiple databases or any behavior that â€¦\n"],["parallelize_teardown","ActiveSupport::TestCase","classes/ActiveSupport/TestCase.html#method-c-parallelize_teardown","(&block)","<p>Clean up hook for parallel testing. This can be used to drop databases if your app uses multiple write/read â€¦\n"],["param_encoding","ActionController::ParameterEncoding::ClassMethods","classes/ActionController/ParameterEncoding/ClassMethods.html#method-i-param_encoding","(action, param, encoding)","<p>Specify the encoding for a parameter on an action. If not specified the default is UTF-8.\n<p>You can specify â€¦\n"],["param_key","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-param_key","(record_or_class)","<p>Returns string to use for params names. It differs for namespaced models regarding whether it&#39;s inside â€¦\n"],["parameter_filter","ActionDispatch::Http::FilterParameters","classes/ActionDispatch/Http/FilterParameters.html#method-i-parameter_filter","()",""],["parameter_filter_for","ActionDispatch::Http::FilterParameters","classes/ActionDispatch/Http/FilterParameters.html#method-i-parameter_filter_for","(filters)",""],["parameter_parsers=","ActionDispatch::Http::Parameters::ClassMethods","classes/ActionDispatch/Http/Parameters/ClassMethods.html#method-i-parameter_parsers-3D","(parsers)","<p>Configure the parameter parser for a given MIME type.\n<p>It accepts a hash where the key is the symbol of â€¦\n"],["parameterize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-parameterize","(string, separator: \"-\", preserve_case: false, locale: nil)","<p>Replaces special characters in a string so that it may be used as part of a &#39;pretty&#39; URL.\n\n<pre><code>parameterize(&quot;Donald ...\n</code></pre>\n"],["parameterize","String","classes/String.html#method-i-parameterize","(separator: \"-\", preserve_case: false, locale: nil)","<p>Replaces special characters in a string so that it may be used as part of a &#39;pretty&#39; URL.\n<p>If the â€¦\n"],["parameters","ActionDispatch::Http::Parameters","classes/ActionDispatch/Http/Parameters.html#method-i-parameters","()","<p>Returns both GET and POST parameters in a single hash.\n"],["params","ActionController::Metal","classes/ActionController/Metal.html#method-i-params","()",""],["params","ActionController::StrongParameters","classes/ActionController/StrongParameters.html#method-i-params","()","<p>Returns a new ActionController::Parameters object that has been instantiated with the <code>request.parameters</code> â€¦\n"],["params","ActionDispatch::Http::Parameters","classes/ActionDispatch/Http/Parameters.html#method-i-params","()",""],["params=","ActionController::Metal","classes/ActionController/Metal.html#method-i-params-3D","(val)",""],["params=","ActionController::StrongParameters","classes/ActionController/StrongParameters.html#method-i-params-3D","(value)","<p>Assigns the given <code>value</code> to the <code>params</code> hash. If <code>value</code> is a Hash, this will create an ActionController::Parameters â€¦\n"],["params_array_from","ActionController::HttpAuthentication::Token","classes/ActionController/HttpAuthentication/Token.html#method-i-params_array_from","(raw_params)","<p>Takes <code>raw_params</code> and turns it into an array of parameters.\n"],["params_readable?","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-params_readable-3F","()",""],["parent_of?","ActiveSupport::Notifications::Event","classes/ActiveSupport/Notifications/Event.html#method-i-parent_of-3F","(event)",""],["parse","ActionView::TemplatePath","classes/ActionView/TemplatePath.html#method-c-parse","(virtual)","<p>Build a TemplatePath form a virtual path\n"],["parse","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-c-parse","(iso8601duration)","<p>Creates a new Duration from string formatted according to ISO 8601 Duration.\n<p>See ISO 8601 for more information. â€¦\n"],["parse","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-parse","(str, now = now())","<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone of <code>self</code> from parsed string. â€¦\n"],["parse","Mime::Type","classes/Mime/Type.html#method-c-parse","(accept_header)",""],["parse!","Rails::Server::Options","classes/Rails/Server/Options.html#method-i-parse-21","(args)",""],["parse_data_with_trailing_star","Mime::Type","classes/Mime/Type.html#method-c-parse_data_with_trailing_star","(type)","<p>For an input of <code>&#39;text&#39;</code>, returns <code>[Mime[:json], Mime[:xml], Mime[:ics], Mime[:html], Mime[:css],</code> â€¦\n"],["parse_error","ActiveSupport::JSON","classes/ActiveSupport/JSON.html#method-c-parse_error","()","<p>Returns the class of the error that will be raised when there is an error in decoding JSON. Using this â€¦\n"],["parse_trailing_star","Mime::Type","classes/Mime/Type.html#method-c-parse_trailing_star","(accept_header)",""],["parsed_body","ActionDispatch::TestResponse","classes/ActionDispatch/TestResponse.html#method-i-parsed_body","()",""],["partial_writes","ActiveRecord::AttributeMethods::Dirty::ClassMethods","classes/ActiveRecord/AttributeMethods/Dirty/ClassMethods.html#method-i-partial_writes","()",""],["partial_writes=","ActiveRecord::AttributeMethods::Dirty::ClassMethods","classes/ActiveRecord/AttributeMethods/Dirty/ClassMethods.html#method-i-partial_writes-3D","(value)",""],["partial_writes?","ActiveRecord::AttributeMethods::Dirty::ClassMethods","classes/ActiveRecord/AttributeMethods/Dirty/ClassMethods.html#method-i-partial_writes-3F","()",""],["parts","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-parts","()","<p>Returns a copy of the parts hash that defines the duration\n"],["password_field","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-password_field","","<p>Wraps ActionView::Helpers::FormHelper#password_field for form builders:\n\n<pre><code>&lt;%= form_with model: @user do ...\n</code></pre>\n"],["password_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-password_field","(object_name, method, options = {})","<p>Returns an input tag of the â€œpasswordâ€ type tailored for accessing a specified attribute (identified â€¦\n"],["password_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-password_field_tag","(name = \"password\", value = nil, options = {})","<p>Creates a password field, a masked text field that will hide the users input behind a mask character. â€¦\n"],["past?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-past-3F","()","<p>Returns true if the current object&#39;s time is in the past.\n"],["past?","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-past-3F","()","<p>Returns true if the date/time is in the past.\n"],["patch","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-patch","(action, **args)","<p>Simulate a PATCH request with the given parameters and set/volley the response. See <code>get</code> for more details. â€¦\n"],["patch","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-patch","(path, **args)","<p>Performs a PATCH request with the given parameters. See ActionDispatch::Integration::Session#process â€¦\n"],["patch","ActionDispatch::Routing::Mapper::HttpHelpers","classes/ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-patch","(*args, &block)","<p>Define a route that only recognizes HTTP PATCH. For supported arguments, see match\n\n<pre><code>patch &#39;bacon&#39;, to: ...\n</code></pre>\n"],["path","ActionDispatch::Http::UploadedFile","classes/ActionDispatch/Http/UploadedFile.html#method-i-path","()","<p>Shortcut for <code>tempfile.path</code>.\n"],["path","ActionDispatch::Routing::PathRedirect","classes/ActionDispatch/Routing/PathRedirect.html#method-i-path","(params, request)",""],["path","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-path","",""],["path","Rails::Generators::AppBase::GemfileEntry","classes/Rails/Generators/AppBase/GemfileEntry.html#method-c-path","(name, path, comment = nil)",""],["path=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-path-3D","(path)",""],["path_for","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-c-path_for","(options)",""],["path_parameters","ActionDispatch::Http::Parameters","classes/ActionDispatch/Http/Parameters.html#method-i-path_parameters","()","<p>Returns a hash with the parameters used to form the path of the request. Returned hash keys are strings: â€¦\n"],["path_to_asset","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-path_to_asset","(source, options = {})",""],["path_to_audio","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-path_to_audio","(source, options = {})",""],["path_to_font","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-path_to_font","(source, options = {})",""],["path_to_image","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-path_to_image","(source, options = {})",""],["path_to_javascript","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-path_to_javascript","(source, options = {})",""],["path_to_stylesheet","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-path_to_stylesheet","(source, options = {})",""],["path_to_video","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-path_to_video","(source, options = {})",""],["paths","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-paths","()",""],["paths","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-paths","()",""],["paths","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-paths","()",""],["pattern","ActiveRecord::DynamicMatchers::Method","classes/ActiveRecord/DynamicMatchers/Method.html#method-c-pattern","()",""],["pdftoppm_exists?","ActiveStorage::Previewer::PopplerPDFPreviewer","classes/ActiveStorage/Previewer/PopplerPDFPreviewer.html#method-c-pdftoppm_exists-3F","()",""],["pdftoppm_path","ActiveStorage::Previewer::PopplerPDFPreviewer","classes/ActiveStorage/Previewer/PopplerPDFPreviewer.html#method-c-pdftoppm_path","()",""],["per_form_csrf_token","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-per_form_csrf_token","(session, action_path, method)",""],["perform","ActionCable::Channel::TestCase::Behavior","classes/ActionCable/Channel/TestCase/Behavior.html#method-i-perform","(action, data = {})","<p>Perform action on a channel.\n<p>NOTE: Must be subscribed.\n"],["perform","ActionMailbox::IncinerationJob","classes/ActionMailbox/IncinerationJob.html#method-i-perform","(inbound_email)",""],["perform","ActionMailbox::RoutingJob","classes/ActionMailbox/RoutingJob.html#method-i-perform","(inbound_email)",""],["perform","ActiveJob::Execution","classes/ActiveJob/Execution.html#method-i-perform","(*)",""],["perform","ActiveRecord::DestroyAssociationAsyncJob","classes/ActiveRecord/DestroyAssociationAsyncJob.html#method-i-perform","( owner_model_name: nil, owner_id: nil, association_class: nil, association_ids: nil, association_primary_key_column: nil, ensuring_owner_was_method: nil )",""],["perform","ActiveStorage::AnalyzeJob","classes/ActiveStorage/AnalyzeJob.html#method-i-perform","(blob)",""],["perform","ActiveStorage::MirrorJob","classes/ActiveStorage/MirrorJob.html#method-i-perform","(key, checksum:)",""],["perform","ActiveStorage::PurgeJob","classes/ActiveStorage/PurgeJob.html#method-i-perform","(blob)",""],["perform_action","ActionCable::Channel::Base","classes/ActionCable/Channel/Base.html#method-i-perform_action","(data)","<p>Extract the action name from the passed data and process it via the channel. The process will ensure â€¦\n"],["perform_enqueued_jobs","ActiveJob::TestHelper","classes/ActiveJob/TestHelper.html#method-i-perform_enqueued_jobs","(only: nil, except: nil, queue: nil, at: nil, &block)","<p>Performs all enqueued jobs. If a block is given, performs all of the jobs that were enqueued throughout â€¦\n"],["perform_job","ActiveSupport::Testing::Parallelization::Worker","classes/ActiveSupport/Testing/Parallelization/Worker.html#method-i-perform_job","(job)",""],["perform_later","ActiveJob::Enqueuing::ClassMethods","classes/ActiveJob/Enqueuing/ClassMethods.html#method-i-perform_later","(...)","<p>Push a job onto the queue. By default the arguments must be either String, Integer, Float, NilClass, â€¦\n"],["perform_now","ActiveJob::Execution","classes/ActiveJob/Execution.html#method-i-perform_now","()","<p>Performs the job immediately. The job is not sent to the queuing adapter but directly executed by blocking â€¦\n"],["perform_now","ActiveJob::Execution::ClassMethods","classes/ActiveJob/Execution/ClassMethods.html#method-i-perform_now","(...)","<p>Performs the job immediately.\n\n<pre><code>MyJob.perform_now(&quot;mike&quot;)\n</code></pre>\n"],["performed?","AbstractController::Base","classes/AbstractController/Base.html#method-i-performed-3F","()","<p>Tests if a response body is set. Used to determine if the <code>process_action</code> callback needs to be terminated â€¦\n"],["performed?","ActionController::Metal","classes/ActionController/Metal.html#method-i-performed-3F","()","<p>Tests if render or redirect has already happened.\n"],["performed_jobs","ActiveJob::QueueAdapters::TestAdapter","classes/ActiveJob/QueueAdapters/TestAdapter.html#method-i-performed_jobs","()","<p>Provides a store of all the performed jobs with the TestAdapter so you can check them.\n"],["period","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-period","()","<p>Returns the underlying <code>TZInfo::TimezonePeriod</code>.\n"],["period_for_local","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-period_for_local","(time, dst = true)","<p>Available so that TimeZone instances respond like <code>TZInfo::Timezone</code> instances.\n"],["period_for_utc","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-period_for_utc","(time)","<p>Available so that TimeZone instances respond like <code>TZInfo::Timezone</code> instances.\n"],["periodically","ActionCable::Channel::PeriodicTimers::ClassMethods","classes/ActionCable/Channel/PeriodicTimers/ClassMethods.html#method-i-periodically","(callback_or_method_name = nil, every:, &block)","<p>Periodically performs a task on the channel, like updating an online user counter, polling a backend â€¦\n"],["permanent","ActionDispatch::Cookies::ChainedCookieJars","classes/ActionDispatch/Cookies/ChainedCookieJars.html#method-i-permanent","()","<p>Returns a jar that&#39;ll automatically set the assigned cookies to have an expiration date 20 years â€¦\n"],["permanent_failure?","ActionMailbox::Relayer::Result","classes/ActionMailbox/Relayer/Result.html#method-i-permanent_failure-3F","()",""],["permissions_policy","ActionController::PermissionsPolicy::ClassMethods","classes/ActionController/PermissionsPolicy/ClassMethods.html#method-i-permissions_policy","(**options, &block)","<p>Overrides parts of the globally configured Feature-Policy header:\n\n<pre><code>class PagesController &lt; ApplicationController ...\n</code></pre>\n"],["permissions_policy","ActionDispatch::PermissionsPolicy::Request","classes/ActionDispatch/PermissionsPolicy/Request.html#method-i-permissions_policy","()",""],["permissions_policy","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-permissions_policy","(&block)","<p>Configures the ActionDispatch::PermissionsPolicy.\n"],["permissions_policy=","ActionDispatch::PermissionsPolicy::Request","classes/ActionDispatch/PermissionsPolicy/Request.html#method-i-permissions_policy-3D","(policy)",""],["permit","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-permit","(*filters)","<p>Returns a new <code>ActionController::Parameters</code> instance that includes only the given <code>filters</code> and sets the â€¦\n"],["permit!","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-permit-21","()","<p>Sets the <code>permitted</code> attribute to <code>true</code>. This can be used to pass mass assignment. Returns <code>self</code>.\n\n<pre><code>class Person ...\n</code></pre>\n"],["permit_concurrent_loads","ActiveSupport::Dependencies::Interlock","classes/ActiveSupport/Dependencies/Interlock.html#method-i-permit_concurrent_loads","(&block)",""],["permitted?","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-permitted-3F","()","<p>Returns <code>true</code> if the parameter is permitted, <code>false</code> otherwise.\n\n<pre><code>params = ActionController::Parameters.new ...\n</code></pre>\n"],["persisted?","ActiveModel::API","classes/ActiveModel/API.html#method-i-persisted-3F","()","<p>Indicates if the model is persisted. Default is <code>false</code>.\n\n<pre><code>class Person\n  include ActiveModel::API\n  attr_accessor ...\n</code></pre>\n"],["persisted?","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-persisted-3F","()","<p>Returns true if the record is persisted, i.e. it&#39;s not a new record and it was not destroyed, otherwise â€¦\n"],["petabyte","Numeric","classes/Numeric.html#method-i-petabyte","()",""],["petabytes","Numeric","classes/Numeric.html#method-i-petabytes","()","<p>Returns the number of bytes equivalent to the petabytes provided.\n\n<pre><code>2.petabytes # =&gt; 2_251_799_813_685_248\n</code></pre>\n"],["phone_field","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-phone_field","","<p>Wraps ActionView::Helpers::FormHelper#phone_field for form builders:\n\n<pre><code>&lt;%= form_with model: @user do |f| ...\n</code></pre>\n"],["phone_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-phone_field","(object_name, method, options = {})","<p>aliases telephone_field\n"],["phone_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-phone_field_tag","(name, value = nil, options = {})",""],["phone_to","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-phone_to","(phone_number, name = nil, html_options = {}, &block)","<p>Creates a TEL anchor link tag to the specified <code>phone_number</code>. When the link is clicked, the default app â€¦\n"],["pick","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-pick","(*column_names)","<p>Pick the value(s) from the named column(s) in the current relation. This is short-hand for <code>relation.limit(1).pluck(*column_names).first</code> â€¦\n"],["pick","Enumerable","classes/Enumerable.html#method-i-pick","(*keys)","<p>Extract the given key from the first element in the enumerable.\n\n<pre><code>[{ name: &quot;David&quot; }, { name: &quot;Rafael&quot; }, ...\n</code></pre>\n"],["pluck","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-pluck","(*column_names)",""],["pluck","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-pluck","(*column_names)","<p>Use #pluck as a shortcut to select one or more attributes without loading an entire record object per â€¦\n"],["pluck","Enumerable","classes/Enumerable.html#method-i-pluck","(*keys)","<p>Extract the given key from each element in the enumerable.\n\n<pre><code>[{ name: &quot;David&quot; }, { name: &quot;Rafael&quot; }, { name: ...\n</code></pre>\n"],["plugin_rails_init","Minitest","classes/Minitest.html#method-c-plugin_rails_init","(options)","<p>Owes great inspiration to test runner trailblazers like RSpec, minitest-reporters, maxitest, and others. â€¦\n"],["plugin_rails_options","Minitest","classes/Minitest.html#method-c-plugin_rails_options","(opts, options)",""],["plugin_types","ActionDispatch::ContentSecurityPolicy","classes/ActionDispatch/ContentSecurityPolicy.html#method-i-plugin_types","(*types)","<p>Restricts the set of plugins that can be embedded:\n\n<pre><code>policy.plugin_types &quot;application/x-shockwave-flash&quot;\n</code></pre>\n"],["plural","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-plural","(record_or_class)","<p>Returns the plural class name of a record or class.\n\n<pre><code>ActiveModel::Naming.plural(post)             # =&gt; ...\n</code></pre>\n"],["plural","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-i-plural","(rule, replacement)","<p>Specifies a new pluralization rule and its replacement. The rule can either be a string or a regular â€¦\n"],["plural_file_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-plural_file_name","()",""],["plural_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-plural_name","()",""],["plural_route_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-plural_route_name","()",""],["plural_table_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-plural_table_name","()",""],["pluralize","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-pluralize","(count, singular, plural_arg = nil, plural: plural_arg, locale: I18n.locale)","<p>Attempts to pluralize the <code>singular</code> word unless <code>count</code> is 1. If <code>plural</code> is supplied, it will use that when â€¦\n"],["pluralize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-pluralize","(word, locale = :en)","<p>Returns the plural form of the word in the string.\n<p>If passed an optional <code>locale</code> parameter, the word will â€¦\n"],["pluralize","String","classes/String.html#method-i-pluralize","(count = nil, locale = :en)","<p>Returns the plural form of the word in the string.\n<p>If the optional parameter <code>count</code> is specified, the singular â€¦\n"],["pluralize_table_names","ActiveRecord::ModelSchema","classes/ActiveRecord/ModelSchema.html#method-c-pluralize_table_names","","<p>Indicates whether table names should be the pluralized versions of the corresponding class names. If â€¦\n"],["pluralize_table_names=","ActiveRecord::ModelSchema","classes/ActiveRecord/ModelSchema.html#method-c-pluralize_table_names-3D","","<p>Set whether table names should be the pluralized versions of the corresponding class names. If true, â€¦\n"],["pluralize_table_names?","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-pluralize_table_names-3F","()",""],["point","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-point","",""],["poll","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-poll","(timeout = nil)","<p>Remove the head of the queue.\n<p>If <code>timeout</code> is not given, remove and return the head of the queue if the â€¦\n"],["polygon","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-polygon","",""],["polymorphic_class_for","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-polymorphic_class_for","(name)","<p>Returns the class for the provided <code>name</code>.\n<p>It is used to find the class correspondent to the value stored â€¦\n"],["polymorphic_name","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-polymorphic_name","()","<p>Returns the value to be stored in the polymorphic type column for Polymorphic Associations.\n"],["polymorphic_path","ActionDispatch::Routing::PolymorphicRoutes","classes/ActionDispatch/Routing/PolymorphicRoutes.html#method-i-polymorphic_path","(record_or_hash_or_array, options = {})","<p>Returns the path component of a URL for the given record.\n"],["polymorphic_url","ActionDispatch::Routing::PolymorphicRoutes","classes/ActionDispatch/Routing/PolymorphicRoutes.html#method-i-polymorphic_url","(record_or_hash_or_array, options = {})","<p>Constructs a call to a named RESTful route for the given record and returns the resulting URL string. â€¦\n"],["pool","ActiveRecord::DatabaseConfigurations::HashConfig","classes/ActiveRecord/DatabaseConfigurations/HashConfig.html#method-i-pool","()",""],["pop","ActiveSupport::Testing::Parallelization::Server","classes/ActiveSupport/Testing/Parallelization/Server.html#method-i-pop","()",""],["port","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-port","()","<p>Returns the port number of this request as an integer.\n\n<pre><code>req = ActionDispatch::Request.new &#39;HTTP_HOST&#39; =&gt; ...\n</code></pre>\n"],["port=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-port-3D","(number)",""],["port_string","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-port_string","()","<p>Returns a string port suffix, including colon, like â€œ:8080â€ if the port number of this request â€¦\n"],["post","ActionCable::Connection::StreamEventLoop","classes/ActionCable/Connection/StreamEventLoop.html#method-i-post","(task = nil, &block)",""],["post","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-post","(action, **args)","<p>Simulate a POST request with the given parameters and set/volley the response. See <code>get</code> for more details. â€¦\n"],["post","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-post","(path, **args)","<p>Performs a POST request with the given parameters. See ActionDispatch::Integration::Session#process for â€¦\n"],["post","ActionDispatch::Routing::Mapper::HttpHelpers","classes/ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-post","(*args, &block)","<p>Define a route that only recognizes HTTP POST. For supported arguments, see match\n\n<pre><code>post &#39;bacon&#39;, to: &#39;food#bacon&#39;\n</code></pre>\n"],["prefetch_primary_key?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-prefetch_primary_key-3F","(table_name = nil)","<p>Should primary key values be selected from their corresponding sequence before the insert statement? â€¦\n"],["prefetch_primary_key?","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-prefetch_primary_key-3F","()","<p>Determines if the primary key values should be selected from their corresponding sequence before the â€¦\n"],["prefix","ActiveRecord::DynamicMatchers::FindBy","classes/ActiveRecord/DynamicMatchers/FindBy.html#method-c-prefix","()",""],["prefix","ActiveRecord::DynamicMatchers::FindByBang","classes/ActiveRecord/DynamicMatchers/FindByBang.html#method-c-prefix","()",""],["prefix","ActiveRecord::DynamicMatchers::Method","classes/ActiveRecord/DynamicMatchers/Method.html#method-c-prefix","()",""],["preload","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-preload","(*args)","<p>Allows preloading of <code>args</code>, in the same way that #includes does:\n\n<pre><code>User.preload(:posts)\n# SELECT &quot;posts&quot;.* ...\n</code></pre>\n"],["preload_link_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-preload_link_tag","(source, options = {})","<p>Returns a link tag that browsers can use to preload the <code>source</code>. The <code>source</code> can be the path of a resource â€¦\n"],["prepare","ActiveStorage::FixtureSet","classes/ActiveStorage/FixtureSet.html#method-i-prepare","(instance, **attributes)",""],["prepare!","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-prepare-21","()",""],["prepare_all","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-prepare_all","()",""],["prepare_destination","Rails::Generators::Testing::Behaviour","classes/Rails/Generators/Testing/Behaviour.html#method-i-prepare_destination","()","<p>Clears all files and directories in destination.\n"],["prepared_statements","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-prepared_statements","()",""],["prepared_statements?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-prepared_statements-3F","()",""],["prepend","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-prepend","(value)",""],["prepend_after_action","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-prepend_after_action","","<p>Prepend a callback after actions. See _insert_callbacks for parameter details.\n"],["prepend_around_action","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-prepend_around_action","","<p>Prepend a callback around actions. See _insert_callbacks for parameter details.\n"],["prepend_before_action","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-prepend_before_action","","<p>Prepend a callback before actions. See _insert_callbacks for parameter details.\n<p>If the callback renders â€¦\n"],["prepend_view_path","ActionView::ViewPaths","classes/ActionView/ViewPaths.html#method-i-prepend_view_path","(path)","<p>Prepend a path to the list of view paths for the current LookupContext.\n<p>Parameters\n<p><code>path</code> - If a String is â€¦\n"],["prepend_view_path","ActionView::ViewPaths::ClassMethods","classes/ActionView/ViewPaths/ClassMethods.html#method-i-prepend_view_path","(path)","<p>Prepend a path to the list of view paths for this controller.\n<p>Parameters\n<p><code>path</code> - If a String is provided, â€¦\n"],["prepended","ActiveSupport::Concern","classes/ActiveSupport/Concern.html#method-i-prepended","(base = nil, &block)","<p>Evaluate given block in context of base class, so that you can write class macros here. When you define â€¦\n"],["prepended","ActiveSupport::Testing::SetupAndTeardown","classes/ActiveSupport/Testing/SetupAndTeardown.html#method-c-prepended","(klass)",""],["presence","Object","classes/Object.html#method-i-presence","()","<p>Returns the receiver if it&#39;s present otherwise returns <code>nil</code>. <code>object.presence</code> is equivalent to\n\n<pre><code>object.present? ...\n</code></pre>\n"],["presence_in","Object","classes/Object.html#method-i-presence_in","(another_object)","<p>Returns the receiver if it&#39;s included in the argument otherwise returns <code>nil</code>. Argument must be any â€¦\n"],["present?","Object","classes/Object.html#method-i-present-3F","()","<p>An object is present if it&#39;s not blank.\n<p>@return [true, false]\n"],["preserve_original_encrypted","ActiveRecord::Encryption::EncryptableRecord","classes/ActiveRecord/Encryption/EncryptableRecord.html#method-i-preserve_original_encrypted","(name)",""],["pretty_print","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-pretty_print","(pp)","<p>Takes a PP and prettily prints this record to it, allowing you to get a nice result from <code>pp record</code> when â€¦\n"],["pretty_print","ActiveRecord::Core::InspectionMask","classes/ActiveRecord/Core/InspectionMask.html#method-i-pretty_print","(pp)",""],["pretty_print","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-pretty_print","(q)",""],["prev_day","Time","classes/Time.html#method-i-prev_day","(days = 1)","<p>Returns a new time the specified number of days ago.\n"],["prev_day?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-prev_day-3F","()",""],["prev_day?","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-prev_day-3F","()",""],["prev_month","Time","classes/Time.html#method-i-prev_month","(months = 1)","<p>Returns a new time the specified number of months ago.\n"],["prev_occurring","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-prev_occurring","(day_of_week)","<p>Returns a new date/time representing the previous occurrence of the specified day of week.\n\n<pre><code>today = Date.today ...\n</code></pre>\n"],["prev_quarter","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-prev_quarter","()","<p>Short-hand for <code>months_ago(3)</code>.\n"],["prev_week","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-prev_week","(start_day = Date.beginning_of_week, same_time: false)","<p>Returns a new date/time representing the given day in the previous week. Week is assumed to start on â€¦\n"],["prev_weekday","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-prev_weekday","()","<p>Returns a new date/time representing the previous weekday.\n"],["prev_year","Time","classes/Time.html#method-i-prev_year","(years = 1)","<p>Returns a new time the specified number of years ago.\n"],["preventing_writes?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-preventing_writes-3F","()","<p>Determines whether writes are currently being prevented.\n<p>Returns true if the connection is a replica. â€¦\n"],["preview","ActiveStorage::Blob::Representable","classes/ActiveStorage/Blob/Representable.html#method-i-preview","(transformations)","<p>Returns an ActiveStorage::Preview instance with the set of <code>transformations</code> provided. A preview is an â€¦\n"],["preview","ActiveStorage::Previewer","classes/ActiveStorage/Previewer.html#method-i-preview","(**options)","<p>Override this method in a concrete subclass. Have it yield an attachable preview image (i.e. anything â€¦\n"],["preview","ActiveStorage::Previewer::MuPDFPreviewer","classes/ActiveStorage/Previewer/MuPDFPreviewer.html#method-i-preview","(**options)",""],["preview","ActiveStorage::Previewer::PopplerPDFPreviewer","classes/ActiveStorage/Previewer/PopplerPDFPreviewer.html#method-i-preview","(**options)",""],["preview","ActiveStorage::Previewer::VideoPreviewer","classes/ActiveStorage/Previewer/VideoPreviewer.html#method-i-preview","(**options)",""],["preview_name","ActionMailer::Preview","classes/ActionMailer/Preview.html#method-c-preview_name","()","<p>Returns the underscored name of the mailer preview without the suffix.\n"],["previewable?","ActiveStorage::Blob::Representable","classes/ActiveStorage/Blob/Representable.html#method-i-previewable-3F","()","<p>Returns true if any registered previewer accepts the blob. By default, this will return true for videos â€¦\n"],["previewable_attachable?","ActionText::Attachable","classes/ActionText/Attachable.html#method-i-previewable_attachable-3F","()",""],["previewable_attachable?","ActionText::Engine","classes/ActionText/Engine.html#method-i-previewable_attachable-3F","()",""],["previous=","ActiveRecord::Encryption::Config","classes/ActiveRecord/Encryption/Config.html#method-i-previous-3D","(previous_schemes_properties)","<p>Configure previous encryption schemes.\n\n<pre><code>config.active_record.encryption.previous = [ { key_provider: MyOldKeyProvider.new ...\n</code></pre>\n"],["previous_changes","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-previous_changes","()","<p>Returns a hash of attributes that were changed before the model was saved.\n\n<pre><code>person.name # =&gt; &quot;bob&quot;\nperson.name ...\n</code></pre>\n"],["previously_new_record?","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-previously_new_record-3F","()","<p>Returns true if this object was just created â€“ that is, prior to the last save, the object didn&#39;t â€¦\n"],["previously_persisted?","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-previously_persisted-3F","()","<p>Returns true if this object was previously persisted but now it has been deleted.\n"],["primary_abstract_class","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-primary_abstract_class","()","<p>Sets the application record class for Active Record\n<p>This is useful if your application uses a different â€¦\n"],["primary_key","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-primary_key","()","<p>Defines the primary key field â€“ can be overridden in subclasses. Overwriting will negate any effect â€¦\n"],["primary_key","ActiveRecord::ConnectionAdapters::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/ColumnMethods.html#method-i-primary_key","(name, type = :primary_key, **options)","<p>Appends a primary key definition to the table definition. Can be called multiple times, but this is probably â€¦\n"],["primary_key","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-primary_key","(name, type = :primary_key, **options)","<p>Defines the primary key field. Use of the native PostgreSQL UUID type is supported, and can be used by â€¦\n"],["primary_key","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-primary_key","(table_name)","<p>Returns just a table&#39;s primary key\n"],["primary_key=","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-primary_key-3D","(value)","<p>Sets the name of the primary key column.\n\n<pre><code>class Project &lt; ActiveRecord::Base\n  self.primary_key = &#39;sysid&#39; ...\n</code></pre>\n"],["primary_key_prefix_type","ActiveRecord::ModelSchema","classes/ActiveRecord/ModelSchema.html#method-c-primary_key_prefix_type","","<p>The prefix type that will be prepended to every primary key column name. The options are <code>:table_name</code> â€¦\n"],["primary_key_prefix_type=","ActiveRecord::ModelSchema","classes/ActiveRecord/ModelSchema.html#method-c-primary_key_prefix_type-3D","","<p>Sets the prefix type that will be prepended to every primary key column name. The options are <code>:table_name</code> â€¦\n"],["primary_keys","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-primary_keys","(table_name)",""],["print_generators","Rails::Generators","classes/Rails/Generators.html#method-c-print_generators","()",""],["print_list","Rails::Generators","classes/Rails/Generators.html#method-c-print_list","(base, namespaces)",""],["printing_commands","Rails::Command::Base","classes/Rails/Command/Base.html#method-c-printing_commands","()",""],["priority","ActiveJob::QueuePriority","classes/ActiveJob/QueuePriority.html#method-i-priority","()","<p>Returns the priority that the job will be created with\n"],["proc_for_binds","ActiveRecord::Encryption::ExtendedDeterministicQueries::InWithAdditionalValues","classes/ActiveRecord/Encryption/ExtendedDeterministicQueries/InWithAdditionalValues.html#method-i-proc_for_binds","()",""],["process","AbstractController::Base","classes/AbstractController/Base.html#method-i-process","(action, *args)","<p>Calls the action going through the entire action dispatch stack.\n<p>The actual method that is called is determined â€¦\n"],["process","ActionController::Live","classes/ActionController/Live.html#method-i-process","(name)",""],["process","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-process","(action, method: \"GET\", params: nil, session: nil, body: nil, flash: {}, format: nil, xhr: false, as: nil)","<p>Simulate an HTTP request to <code>action</code> by specifying request method, parameters and set/volley the response. â€¦\n"],["process","ActionDispatch::Integration::Session","classes/ActionDispatch/Integration/Session.html#method-i-process","(method, path, params: nil, headers: nil, env: nil, xhr: false, as: nil)","<p>Performs the actual request.\n<p><code>method</code>: The HTTP method (GET, POST, PATCH, PUT, DELETE, HEAD, OPTIONS) as â€¦\n"],["process","ActionMailbox::Base","classes/ActionMailbox/Base.html#method-i-process","()",""],["process","ActionMailer::LogSubscriber","classes/ActionMailer/LogSubscriber.html#method-i-process","(event)","<p>An email was generated.\n"],["process","ActiveStorage::Transformers::Transformer","classes/ActiveStorage/Transformers/Transformer.html#method-i-process","(file, format:)","<p>Returns an open Tempfile containing a transformed image in the given <code>format</code>. All subclasses implement â€¦\n"],["process","ActiveStorage::VariantWithRecord","classes/ActiveStorage/VariantWithRecord.html#method-i-process","()",""],["process_action","ActionController::LogSubscriber","classes/ActionController/LogSubscriber.html#method-i-process_action","(event)",""],["processed","ActiveStorage::Preview","classes/ActiveStorage/Preview.html#method-i-processed","()","<p>Processes the preview if it has not been processed yet. Returns the receiving Preview instance for convenience: â€¦\n"],["processed","ActiveStorage::Variant","classes/ActiveStorage/Variant.html#method-i-processed","()","<p>Returns the variant instance itself after it&#39;s been processed or an existing processing has been â€¦\n"],["processed","ActiveStorage::VariantWithRecord","classes/ActiveStorage/VariantWithRecord.html#method-i-processed","()",""],["processed?","ActionMailbox::InboundEmail","classes/ActionMailbox/InboundEmail.html#method-i-processed-3F","()",""],["processed?","ActionMailer::MessageDelivery","classes/ActionMailer/MessageDelivery.html#method-i-processed-3F","()","<p>Was the delegate loaded, causing the mailer action to be processed?\n"],["processed?","ActiveStorage::VariantWithRecord","classes/ActiveStorage/VariantWithRecord.html#method-i-processed-3F","()",""],["prohibit_shard_swapping","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-prohibit_shard_swapping","(enabled = true)","<p>Prohibit swapping shards while inside of the passed block.\n<p>In some cases you may want to be able to swap â€¦\n"],["proper_table_name","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-proper_table_name","(name, options = {})","<p>Finds the correct table name given an Active Record object. Uses the Active Record object&#39;s own  â€¦\n"],["property","Rails::Info","classes/Rails/Info.html#method-c-property","(name, value = nil)",""],["protect_against_forgery?","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-protect_against_forgery-3F","()","<p>Checks if the controller allows forgery protection.\n"],["protect_against_forgery?","ActionView::TestCase::Behavior","classes/ActionView/TestCase/Behavior.html#method-i-protect_against_forgery-3F","()",""],["protect_from_forgery","ActionController::RequestForgeryProtection::ClassMethods","classes/ActionController/RequestForgeryProtection/ClassMethods.html#method-i-protect_from_forgery","(options = {})","<p>Turn on request forgery protection. Bear in mind that GET and HEAD requests are not checked.\n\n<pre><code>class ApplicationController ...\n</code></pre>\n"],["protected_environments","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-protected_environments","()","<p>The array of names of environments where destructive actions should be prohibited. By default, the value â€¦\n"],["protected_environments=","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-protected_environments-3D","(environments)","<p>Sets an array of names of environments where destructive actions should be prohibited.\n"],["protecting_encrypted_data","ActiveRecord::Encryption::Contexts","classes/ActiveRecord/Encryption/Contexts.html#method-i-protecting_encrypted_data","(&block)","<p>Runs the provided block in an encryption context where:\n<p>Reading encrypted content will return its ciphertext. â€¦\n"],["protocol","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-protocol","()","<p>Returns &#39;https://&#39; if this is an SSL request and &#39;http://&#39; otherwise.\n\n<pre><code>req = ActionDispatch::Request.new ...\n</code></pre>\n"],["provide","ActionView::Helpers::CaptureHelper","classes/ActionView/Helpers/CaptureHelper.html#method-i-provide","(name, content = nil, &block)","<p>The same as <code>content_for</code> but when used with streaming flushes straight back to the layout. In other words, â€¦\n"],["proxy_class","ActiveSupport::Multibyte","classes/ActiveSupport/Multibyte.html#method-c-proxy_class","()","<p>Returns the current proxy class.\n"],["proxy_class=","ActiveSupport::Multibyte","classes/ActiveSupport/Multibyte.html#method-c-proxy_class-3D","(klass)","<p>The proxy class returned when calling mb_chars. You can use this accessor to configure your own proxy â€¦\n"],["prune","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-prune","(target_size, max_time = nil)","<p>To ensure entries fit within the specified memory prune the cache by removing the least recently accessed â€¦\n"],["pruning?","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-pruning-3F","()","<p>Returns true if the cache is currently being pruned.\n"],["public?","ActiveStorage::Service","classes/ActiveStorage/Service.html#method-i-public-3F","()",""],["public_compute_asset_path","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-public_compute_asset_path","(source, options = {})",""],["public_directory","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-public_directory","()",""],["public_namespaces","Rails::Generators","classes/Rails/Generators.html#method-c-public_namespaces","()",""],["public_path","Rails","classes/Rails.html#method-c-public_path","()","<p>Returns a Pathname object of the public folder of the current Rails project, otherwise it returns <code>nil</code> â€¦\n"],["publish","ActiveSupport::Notifications","classes/ActiveSupport/Notifications.html#method-c-publish","(name, *args)",""],["publish","ActiveSupport::Notifications::Fanout","classes/ActiveSupport/Notifications/Fanout.html#method-i-publish","(name, *args)",""],["publish_event","ActiveSupport::LogSubscriber","classes/ActiveSupport/LogSubscriber.html#method-i-publish_event","(event)",""],["publish_event","ActiveSupport::Notifications::Fanout","classes/ActiveSupport/Notifications/Fanout.html#method-i-publish_event","(event)",""],["publish_event","ActiveSupport::Notifications::Fanout::Subscribers::EventObject","classes/ActiveSupport/Notifications/Fanout/Subscribers/EventObject.html#method-i-publish_event","(event)",""],["pubsub","ActionCable::Server::Base","classes/ActionCable/Server/Base.html#method-i-pubsub","()","<p>Adapter used for all streams/broadcasting.\n"],["pubsub_adapter","ActionCable::Server::Configuration","classes/ActionCable/Server/Configuration.html#method-i-pubsub_adapter","()","<p>Returns constant of subscription adapter specified in config/cable.yml. If the adapter cannot be found, â€¦\n"],["purge","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-purge","(configuration)",""],["purge","ActiveStorage::Attached::Many","classes/ActiveStorage/Attached/Many.html#method-i-purge","","<p>Directly purges each associated attachment (i.e. destroys the blobs and attachments and deletes the files â€¦\n"],["purge","ActiveStorage::Attached::Model","classes/ActiveStorage/Attached/Model.html#method-i-purge","()",""],["purge","ActiveStorage::Attached::One","classes/ActiveStorage/Attached/One.html#method-i-purge","","<p>Directly purges the attachment (i.e. destroys the blob and attachment and deletes the file on the service). â€¦\n"],["purge","ActiveStorage::Attachment","classes/ActiveStorage/Attachment.html#method-i-purge","()","<p>Synchronously deletes the attachment and purges the blob.\n"],["purge","ActiveStorage::Blob","classes/ActiveStorage/Blob.html#method-i-purge","()","<p>Destroys the blob record and then deletes the file on the service. This is the recommended way to dispose â€¦\n"],["purge_all","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-purge_all","()",""],["purge_current","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-purge_current","(environment = env)",""],["purge_later","ActiveStorage::Attached::Many","classes/ActiveStorage/Attached/Many.html#method-i-purge_later","","<p>Purges each associated attachment through the queuing system.\n"],["purge_later","ActiveStorage::Attached::Model","classes/ActiveStorage/Attached/Model.html#method-i-purge_later","()",""],["purge_later","ActiveStorage::Attached::One","classes/ActiveStorage/Attached/One.html#method-i-purge_later","","<p>Purges the attachment through the queuing system.\n"],["purge_later","ActiveStorage::Attachment","classes/ActiveStorage/Attachment.html#method-i-purge_later","()","<p>Deletes the attachment and enqueues a background job to purge the blob.\n"],["purge_later","ActiveStorage::Blob","classes/ActiveStorage/Blob.html#method-i-purge_later","()","<p>Enqueues an ActiveStorage::PurgeJob to call #purge. This is the recommended way to purge blobs from a â€¦\n"],["push","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-push","(*records)",""],["push","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-push","(path)",""],["put","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-put","(action, **args)","<p>Simulate a PUT request with the given parameters and set/volley the response. See <code>get</code> for more details. â€¦\n"],["put","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-put","(path, **args)","<p>Performs a PUT request with the given parameters. See ActionDispatch::Integration::Session#process for â€¦\n"],["put","ActionDispatch::Routing::Mapper::HttpHelpers","classes/ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-put","(*args, &block)","<p>Define a route that only recognizes HTTP PUT. For supported arguments, see match\n\n<pre><code>put &#39;bacon&#39;, to: &#39;food#bacon&#39;\n</code></pre>\n"],["query_attribute","ActiveRecord::AttributeMethods::Query","classes/ActiveRecord/AttributeMethods/Query.html#method-i-query_attribute","(attr_name)",""],["query_cache_enabled","ActiveRecord::ConnectionAdapters::QueryCache::ConnectionPoolConfiguration","classes/ActiveRecord/ConnectionAdapters/QueryCache/ConnectionPoolConfiguration.html#method-i-query_cache_enabled","()",""],["query_parameter_names","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-query_parameter_names","(generated_extras)",""],["query_parameters","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-query_parameters","()",""],["queue_adapter","ActiveJob::QueueAdapter::ClassMethods","classes/ActiveJob/QueueAdapter/ClassMethods.html#method-i-queue_adapter","()","<p>Returns the backend queue provider. The default queue adapter is the <code>:async</code> queue. See QueueAdapters â€¦\n"],["queue_adapter","ActiveJob::TestHelper","classes/ActiveJob/TestHelper.html#method-i-queue_adapter","()","<p>Accesses the queue_adapter set by ActiveJob::Base.\n\n<pre><code>def test_assert_job_has_custom_queue_adapter_set\n  ...\n</code></pre>\n"],["queue_adapter","ActiveJob::TestHelper::TestQueueAdapter::ClassMethods","classes/ActiveJob/TestHelper/TestQueueAdapter/ClassMethods.html#method-i-queue_adapter","()",""],["queue_adapter=","ActiveJob::QueueAdapter::ClassMethods","classes/ActiveJob/QueueAdapter/ClassMethods.html#method-i-queue_adapter-3D","(name_or_adapter)","<p>Specify the backend queue provider. The default queue adapter is the <code>:async</code> queue. See QueueAdapters â€¦\n"],["queue_adapter_for_test","ActiveJob::TestHelper","classes/ActiveJob/TestHelper.html#method-i-queue_adapter_for_test","()","<p>Specifies the queue adapter to use with all Active Job test helpers.\n<p>Returns an instance of the queue â€¦\n"],["queue_adapter_name","ActiveJob::QueueAdapter::ClassMethods","classes/ActiveJob/QueueAdapter/ClassMethods.html#method-i-queue_adapter_name","()","<p>Returns string denoting the name of the configured queue adapter. By default returns <code>&quot;async&quot;</code> â€¦\n"],["queue_as","ActiveJob::QueueName::ClassMethods","classes/ActiveJob/QueueName/ClassMethods.html#method-i-queue_as","(part_name = nil, &block)","<p>Specifies the name of the queue to process the job on.\n\n<pre><code>class PublishToFeedJob &lt; ActiveJob::Base\n  queue_as ...\n</code></pre>\n"],["queue_name","ActiveJob::QueueName","classes/ActiveJob/QueueName.html#method-i-queue_name","()","<p>Returns the name of the queue the job will be run on.\n"],["queue_with_priority","ActiveJob::QueuePriority::ClassMethods","classes/ActiveJob/QueuePriority/ClassMethods.html#method-i-queue_with_priority","(priority = nil, &block)","<p>Specifies the priority of the queue to create the job with.\n\n<pre><code>class PublishToFeedJob &lt; ActiveJob::Base\n ...\n</code></pre>\n"],["quote","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote","(value)","<p>Quotes the column value to help prevent SQL injection attacks.\n"],["quote","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-quote","(value)","<p>Always returns value in double quotes.\n"],["quote_bound_value","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_bound_value","(value)","<p>Quote a value to be used as a bound parameter of unknown type. For example, MySQL might perform dangerous â€¦\n"],["quote_column_name","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_column_name","(column_name)","<p>Quotes the column name. Defaults to no quoting.\n"],["quote_schema_name","ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/Quoting.html#method-i-quote_schema_name","(name)","<p>Quotes schema names for use in SQL queries.\n"],["quote_string","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-quote_string","(string)",""],["quote_string","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_string","(s)","<p>Quotes a string, escaping any &#39; (single quote) and \\ (backslash) characters.\n"],["quote_table_name","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_table_name","(table_name)","<p>Quotes the table name. Defaults to column name quoting.\n"],["quote_table_name_for_assignment","ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/Quoting.html#method-i-quote_table_name_for_assignment","(table, attr)",""],["quote_table_name_for_assignment","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_table_name_for_assignment","(table, attr)","<p>Override to return the quoted table name for assignment. Defaults to table quoting.\n<p>This works for mysql2 â€¦\n"],["quoted_date","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_date","(value)","<p>Quote date/time values for use in SQL input. Includes microseconds if the value is a Time responding â€¦\n"],["quoted_false","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_false","()",""],["quoted_primary_key","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-quoted_primary_key","()","<p>Returns a quoted version of the primary key name, used to construct SQL statements.\n"],["quoted_table_name","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-quoted_table_name","()","<p>Returns a quoted version of the table name, used to construct SQL statements.\n"],["quoted_true","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_true","()",""],["radio_button","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-radio_button","(method, tag_value, options = {})","<p>Returns a radio button tag for accessing a specified attribute (identified by <code>method</code>) on an object assigned â€¦\n"],["radio_button","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-radio_button","(object_name, method, tag_value, options = {})","<p>Returns a radio button tag for accessing a specified attribute (identified by <code>method</code>) on an object assigned â€¦\n"],["radio_button_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-radio_button_tag","(name, value, checked = false, options = {})","<p>Creates a radio button; use groups of radio buttons named the same to allow users to select from a group â€¦\n"],["rails_command","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-rails_command","(command, options = {})","<p>Runs the supplied rake task (invoked with &#39;rails â€¦&#39;)\n\n<pre><code>rails_command(&quot;db:migrate&quot;)\nrails_command(&quot;db:migrate&quot;, ...\n</code></pre>\n"],["rails_root","ActionView::LogSubscriber","classes/ActionView/LogSubscriber.html#method-i-rails_root","()",""],["rails_version","Rails::API::EdgeTask","classes/Rails/API/EdgeTask.html#method-i-rails_version","()",""],["rails_version","Rails::API::StableTask","classes/Rails/API/StableTask.html#method-i-rails_version","()",""],["railtie_name","Rails::Railtie","classes/Rails/Railtie.html#method-c-railtie_name","(name = nil)",""],["railties","Rails::Engine","classes/Rails/Engine.html#method-i-railties","()",""],["raise","ActiveSupport::ProxyObject","classes/ActiveSupport/ProxyObject.html#method-i-raise","(*args)","<p>Let ActiveSupport::ProxyObject at least raise exceptions.\n"],["raise_for_multi_db","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-raise_for_multi_db","(environment = env, command:)",""],["raise_validation_error","ActiveModel::Validations","classes/ActiveModel/Validations.html#method-i-raise_validation_error","()",""],["rake","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-rake","(command, options = {})","<p>Runs the supplied rake task (invoked with &#39;rake â€¦&#39;)\n\n<pre><code>rake(&quot;db:migrate&quot;)\nrake(&quot;db:migrate&quot;, env: ...\n</code></pre>\n"],["rake_tasks","Rails::Application","classes/Rails/Application.html#method-i-rake_tasks","(&block)","<p>If you try to define a set of Rake tasks on the instance, these will get passed up to the Rake tasks â€¦\n"],["rake_tasks","Rails::Railtie","classes/Rails/Railtie.html#method-c-rake_tasks","(&blk)",""],["rakefile","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-rakefile","()",""],["rakefile","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-rakefile","(filename, data = nil)","<p>Create a new <code>Rakefile</code> with the provided code (either in a block or a string).\n\n<pre><code>rakefile(&quot;bootstrap.rake&quot;) ...\n</code></pre>\n"],["rakefile","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-rakefile","()",""],["range_field","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-range_field","","<p>Wraps ActionView::Helpers::FormHelper#range_field for form builders:\n\n<pre><code>&lt;%= form_with model: @user do |f| ...\n</code></pre>\n"],["range_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-range_field","(object_name, method, options = {})","<p>Returns an input tag of type â€œrangeâ€.\n<p>Options\n<p>Accepts same options as range_field_tag\n"],["range_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-range_field_tag","(name, value = nil, options = {})","<p>Creates a range form element.\n<p>Options\n<p>Accepts the same options as number_field_tag.\n"],["raw","ActionView::Helpers::OutputSafetyHelper","classes/ActionView/Helpers/OutputSafetyHelper.html#method-i-raw","(stringish)","<p>This method outputs without escaping a string. Since escaping tags is now default, this can be used when â€¦\n"],["raw_connection","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-raw_connection","()","<p>Provides access to the underlying database driver for this adapter. For example, this method returns â€¦\n"],["raw_host_with_port","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-raw_host_with_port","()","<p>Returns the host and port for this request, such as â€œexample.com:8080â€.\n\n<pre><code>req = ActionDispatch::Request.new ...\n</code></pre>\n"],["raw_params","ActionController::HttpAuthentication::Token","classes/ActionController/HttpAuthentication/Token.html#method-i-raw_params","(auth)","<p>This method takes an authorization body and splits up the key-value pairs by the standardized <code>:</code>, <code>;</code>, or â€¦\n"],["raw_post","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-raw_post","()","<p>Read the request body. This is useful for web services that need to work with raw requests directly. â€¦\n"],["raw_request_method","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-raw_request_method","()",""],["read","ActionDispatch::Http::UploadedFile","classes/ActionDispatch/Http/UploadedFile.html#method-i-read","(length = nil, buffer = nil)","<p>Shortcut for <code>tempfile.read</code>.\n"],["read","ActionDispatch::RailsEntityStore","classes/ActionDispatch/RailsEntityStore.html#method-i-read","(key)",""],["read","ActionDispatch::RailsMetaStore","classes/ActionDispatch/RailsMetaStore.html#method-i-read","(key)",""],["read","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-read","(name, options = nil)","<p>Reads data from the cache, using the given key. If there is data in the cache with the given key, then â€¦\n"],["read","ActiveSupport::EncryptedConfiguration","classes/ActiveSupport/EncryptedConfiguration.html#method-i-read","()","<p>Allow a config to be started without a file present\n"],["read","ActiveSupport::EncryptedFile","classes/ActiveSupport/EncryptedFile.html#method-i-read","()",""],["read_attribute","ActiveRecord::AttributeMethods::Read","classes/ActiveRecord/AttributeMethods/Read.html#method-i-read_attribute","(attr_name, &block)","<p>Returns the value of the attribute identified by <code>attr_name</code> after it has been typecast (for example, â€œ2004-12-12â€ â€¦\n"],["read_attribute_before_type_cast","ActiveRecord::AttributeMethods::BeforeTypeCast","classes/ActiveRecord/AttributeMethods/BeforeTypeCast.html#method-i-read_attribute_before_type_cast","(attr_name)","<p>Returns the value of the attribute identified by <code>attr_name</code> before typecasting and deserialization.\n\n<pre><code>class ...\n</code></pre>\n"],["read_entry","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","classes/ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-read_entry","(key)",""],["read_fragment","AbstractController::Caching::Fragments","classes/AbstractController/Caching/Fragments.html#method-i-read_fragment","(key, options = nil)","<p>Reads a cached fragment from the location signified by <code>key</code> (see <code>expire_fragment</code> for acceptable formats). â€¦\n"],["read_multi","ActiveSupport::Cache::RedisCacheStore","classes/ActiveSupport/Cache/RedisCacheStore.html#method-i-read_multi","(*names)","<p>Cache Store API implementation.\n<p>Read multiple values at once. Returns a hash of requested keys -&gt; fetched â€¦\n"],["read_multi","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-read_multi","(*names)","<p>Reads multiple values at once from the cache. Options can be passed in the last argument.\n<p>Some cache implementation â€¦\n"],["read_multi_entries","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","classes/ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-read_multi_entries","(keys)",""],["read_store_attribute","ActiveRecord::Store","classes/ActiveRecord/Store.html#method-i-read_store_attribute","(store_attribute, key)",""],["readable_inspect","Date","classes/Date.html#method-i-readable_inspect","()","<p>Overrides the default inspect method with a human readable one, e.g., â€œMon, 21 Feb 2005â€\n"],["readable_inspect","DateTime","classes/DateTime.html#method-i-readable_inspect","()","<p>Overrides the default inspect method with a human readable one, e.g., â€œMon, 21 Feb 2005 14:30:00 â€¦\n"],["readme","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-readme","()",""],["readme","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-readme","(path)","<p>Reads the given file at the source root and prints it in the console.\n\n<pre><code>readme &quot;README&quot;\n</code></pre>\n"],["readme","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-readme","()",""],["readonly","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-readonly","(value = true)","<p>Sets readonly attributes for the returned relation. If value is true (default), attempting to update â€¦\n"],["readonly!","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-readonly-21","()","<p>Marks this record as read only.\n"],["readonly?","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-readonly-3F","()","<p>Returns <code>true</code> if the record is read only.\n"],["readonly_attributes","ActiveRecord::ReadonlyAttributes::ClassMethods","classes/ActiveRecord/ReadonlyAttributes/ClassMethods.html#method-i-readonly_attributes","()","<p>Returns an array of all the attributes that have been specified as readonly.\n"],["real_csrf_token","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-real_csrf_token","(session)",""],["reap","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-reap","()","<p>Recover lost connections for the pool. A lost connection can occur if a programmer forgets to checkin â€¦\n"],["reaping_frequency","ActiveRecord::DatabaseConfigurations::HashConfig","classes/ActiveRecord/DatabaseConfigurations/HashConfig.html#method-i-reaping_frequency","()","<p><code>reaping_frequency</code> is configurable mostly for historical reasons, but it could also be useful if someone â€¦\n"],["receive","ActionMailbox::Base","classes/ActionMailbox/Base.html#method-c-receive","(inbound_email)",""],["receive_inbound_email_from_fixture","ActionMailbox::TestHelper","classes/ActionMailbox/TestHelper.html#method-i-receive_inbound_email_from_fixture","(*args)","<p>Create an InboundEmail from fixture using the same arguments as create_inbound_email_from_fixture and â€¦\n"],["receive_inbound_email_from_mail","ActionMailbox::TestHelper","classes/ActionMailbox/TestHelper.html#method-i-receive_inbound_email_from_mail","(**kwargs, &block)","<p>Create an InboundEmail using the same options or block as create_inbound_email_from_mail, then immediately â€¦\n"],["receive_inbound_email_from_source","ActionMailbox::TestHelper","classes/ActionMailbox/TestHelper.html#method-i-receive_inbound_email_from_source","(*args)","<p>Create an InboundEmail using the same arguments as create_inbound_email_from_source and immediately route â€¦\n"],["recipients","Mail::Message","classes/Mail/Message.html#method-i-recipients","()",""],["recipients_addresses","Mail::Message","classes/Mail/Message.html#method-i-recipients_addresses","()",""],["reconnect!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-reconnect-21","()","<p>Disconnects from the database if already connected, and establishes a new connection with the database. â€¦\n"],["reconnect!","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-reconnect-21","()",""],["reconnect!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-reconnect-21","()","<p>Close then reopen the connection.\n"],["reconnect!","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-reconnect-21","()",""],["record","ActiveRecord::Migration::CommandRecorder","classes/ActiveRecord/Migration/CommandRecorder.html#method-i-record","(*command, &block)","<p>Record <code>command</code>. <code>command</code> should be a method name and arguments. For example:\n\n<pre><code>recorder.record(:method_name, ...\n</code></pre>\n"],["record","ActiveSupport::ErrorReporter","classes/ActiveSupport/ErrorReporter.html#method-i-record","(error_class = StandardError, severity: :error, context: {})",""],["record","ActiveSupport::Notifications::Event","classes/ActiveSupport/Notifications/Event.html#method-i-record","()",""],["record","ActiveSupport::Testing::Parallelization::Server","classes/ActiveSupport/Testing/Parallelization/Server.html#method-i-record","(reporter, result)",""],["record_key_for_dom_id","ActionView::RecordIdentifier","classes/ActionView/RecordIdentifier.html#method-i-record_key_for_dom_id","(record)","<p>Returns a string representation of the key attribute(s) that is suitable for use in an HTML DOM id.  â€¦\n"],["records","ActiveRecord::Associations::Preloader::Association::LoaderRecords","classes/ActiveRecord/Associations/Preloader/Association/LoaderRecords.html#method-i-records","()",""],["records_for","ActiveRecord::Associations::Preloader::Association::LoaderQuery","classes/ActiveRecord/Associations/Preloader/Association/LoaderQuery.html#method-i-records_for","(loaders)",""],["recreate_database","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-recreate_database","(name, options = {})","<p>Drops the database specified on the <code>name</code> attribute and creates it again using the provided <code>options</code>.\n"],["redefine_method","Module","classes/Module.html#method-i-redefine_method","(method, &block)","<p>Replaces the existing method definition, if there is one, with the passed block as its body.\n"],["redefine_singleton_method","Module","classes/Module.html#method-i-redefine_singleton_method","(method, &block)","<p>Replaces the existing singleton method definition, if there is one, with the passed block as its body. â€¦\n"],["redirect","ActionDispatch::Routing::Redirection","classes/ActionDispatch/Routing/Redirection.html#method-i-redirect","(*args, &block)","<p>Redirect any path to another path:\n\n<pre><code>get &quot;/stories&quot; =&gt; redirect(&quot;/posts&quot;)\n</code></pre>\n<p>This will redirect the user, while â€¦\n"],["redirect_back","ActionController::Redirecting","classes/ActionController/Redirecting.html#method-i-redirect_back","(fallback_location:, allow_other_host: _allow_other_host, **args)","<p>Soft deprecated alias for #redirect_back_or_to where the <code>fallback_location</code> location is supplied as a â€¦\n"],["redirect_back_or_to","ActionController::Redirecting","classes/ActionController/Redirecting.html#method-i-redirect_back_or_to","(fallback_location, allow_other_host: _allow_other_host, **options)","<p>Redirects the browser to the page that issued the request (the referrer) if possible, otherwise redirects â€¦\n"],["redirect_resource_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-redirect_resource_name","()",""],["redirect_to","ActionController::Flash","classes/ActionController/Flash.html#method-i-redirect_to","(options = {}, response_options_and_flash = {})",""],["redirect_to","ActionController::Instrumentation","classes/ActionController/Instrumentation.html#method-i-redirect_to","(*)",""],["redirect_to","ActionController::LogSubscriber","classes/ActionController/LogSubscriber.html#method-i-redirect_to","(event)",""],["redirect_to","ActionController::Redirecting","classes/ActionController/Redirecting.html#method-i-redirect_to","(options = {}, response_options = {})","<p>Redirects the browser to the target specified in <code>options</code>. This parameter can be any one of:\n<p><code>Hash</code> - The â€¦\n"],["redirect_to_url","ActionDispatch::TestProcess","classes/ActionDispatch/TestProcess.html#method-i-redirect_to_url","()",""],["redis","ActiveSupport::Cache::RedisCacheStore","classes/ActiveSupport/Cache/RedisCacheStore.html#method-i-redis","()",""],["ref","ActionView::Template::Types::Type","classes/ActionView/Template/Types/Type.html#method-i-ref","()",""],["ref","Mime::NullType","classes/Mime/NullType.html#method-i-ref","()",""],["ref","Mime::Type","classes/Mime/Type.html#method-i-ref","()",""],["references","ActiveRecord::ConnectionAdapters::SQLite3::TableDefinition","classes/ActiveRecord/ConnectionAdapters/SQLite3/TableDefinition.html#method-i-references","(*args, **options)",""],["references","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-references","(*args, **options)","<p>Adds a reference.\n\n<pre><code>t.references(:user)\nt.belongs_to(:supplier, foreign_key: true)\n</code></pre>\n<p>See connection.add_reference â€¦\n"],["references","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-references","(*args, **options)","<p>Adds a reference.\n\n<pre><code>t.references(:user)\nt.belongs_to(:supplier, foreign_key: true)\nt.belongs_to(:supplier, ...\n</code></pre>\n"],["references","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-references","(*table_names)","<p>Use to indicate that the given <code>table_names</code> are referenced by an SQL string, and should therefore be  â€¦\n"],["reflect_on_aggregation","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_aggregation","(aggregation)","<p>Returns the AggregateReflection object for the named <code>aggregation</code> (use the symbol).\n\n<pre><code>Account.reflect_on_aggregation(:balance) ...\n</code></pre>\n"],["reflect_on_all_aggregations","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_aggregations","()","<p>Returns an array of AggregateReflection objects for all the aggregations in the class.\n"],["reflect_on_all_associations","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_associations","(macro = nil)","<p>Returns an array of AssociationReflection objects for all the associations in the class. If you only â€¦\n"],["reflect_on_all_attachments","ActiveStorage::Reflection::ActiveRecordExtensions::ClassMethods","classes/ActiveStorage/Reflection/ActiveRecordExtensions/ClassMethods.html#method-i-reflect_on_all_attachments","()","<p>Returns an array of reflection objects for all the attachments in the class.\n"],["reflect_on_all_autosave_associations","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_autosave_associations","()","<p>Returns an array of AssociationReflection objects for all associations which have <code>:autosave</code> enabled. â€¦\n"],["reflect_on_association","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_association","(association)","<p>Returns the AssociationReflection object for the <code>association</code> (use the symbol).\n\n<pre><code>Account.reflect_on_association(:owner) ...\n</code></pre>\n"],["reflect_on_attachment","ActiveStorage::Reflection::ActiveRecordExtensions::ClassMethods","classes/ActiveStorage/Reflection/ActiveRecordExtensions/ClassMethods.html#method-i-reflect_on_attachment","(attachment)","<p>Returns the reflection object for the named <code>attachment</code>.\n\n<pre><code>User.reflect_on_attachment(:avatar)\n# =&gt; the avatar ...\n</code></pre>\n"],["reflections","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflections","()","<p>Returns a Hash of name of the reflection as the key and an AssociationReflection as the value.\n\n<pre><code>Account.reflections ...\n</code></pre>\n"],["register","ActiveModel::Type","classes/ActiveModel/Type.html#method-c-register","(type_name, klass = nil, &block)","<p>Add a new type to the registry, allowing it to be referenced as a symbol by attribute.\n"],["register","ActiveRecord::Type","classes/ActiveRecord/Type.html#method-c-register","(type_name, klass = nil, **options, &block)","<p>Add a new type to the registry, allowing it to be referenced as a symbol by ActiveRecord::Base.attribute â€¦\n"],["register","Mime::Type","classes/Mime/Type.html#method-c-register","(string, symbol, mime_type_synonyms = [], extension_synonyms = [], skip_lookup = false)",""],["register_alias","Mime::Type","classes/Mime/Type.html#method-c-register_alias","(string, symbol, extension_synonyms = [])","<p>Registers an alias that&#39;s not used on MIME type lookup, but can be referenced directly. Especially â€¦\n"],["register_callback","Mime::Type","classes/Mime/Type.html#method-c-register_callback","(&block)",""],["register_directories","Rails::SourceAnnotationExtractor::Annotation","classes/Rails/SourceAnnotationExtractor/Annotation.html#method-c-register_directories","(*dirs)","<p>Registers additional directories to be included\n\n<pre><code>Rails::SourceAnnotationExtractor::Annotation.register_directories(&quot;spec&quot;, ...\n</code></pre>\n"],["register_encoder","ActionDispatch::IntegrationTest::Behavior::ClassMethods","classes/ActionDispatch/IntegrationTest/Behavior/ClassMethods.html#method-i-register_encoder","(*args, **options)",""],["register_extensions","Rails::SourceAnnotationExtractor::Annotation","classes/Rails/SourceAnnotationExtractor/Annotation.html#method-c-register_extensions","(*exts, &block)","<p>Registers new Annotations File Extensions\n\n<pre><code>Rails::SourceAnnotationExtractor::Annotation.register_extensions(&quot;css&quot;, ...\n</code></pre>\n"],["register_hook","ActiveSupport::ExecutionWrapper","classes/ActiveSupport/ExecutionWrapper.html#method-c-register_hook","(hook, outer: false)","<p>Register an object to be invoked during both the <code>run</code> and <code>complete</code> steps.\n<p><code>hook.complete</code> will be passed â€¦\n"],["register_interceptor","ActionDispatch::DebugExceptions","classes/ActionDispatch/DebugExceptions.html#method-c-register_interceptor","(object = nil, &block)",""],["register_interceptor","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-register_interceptor","(interceptor)","<p>Register an Interceptor which will be called before mail is sent. Either a class, string, or symbol can â€¦\n"],["register_interceptors","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-register_interceptors","(*interceptors)","<p>Register one or more Interceptors which will be called before mail is sent.\n"],["register_observer","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-register_observer","(observer)","<p>Register an Observer which will be notified when mail is delivered. Either a class, string, or symbol â€¦\n"],["register_observers","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-register_observers","(*observers)","<p>Register one or more Observers which will be notified when mail is delivered.\n"],["register_preview_interceptor","ActionMailer::Previews::ClassMethods","classes/ActionMailer/Previews/ClassMethods.html#method-i-register_preview_interceptor","(interceptor)","<p>Register an Interceptor which will be called before mail is previewed. Either a class or a string can â€¦\n"],["register_preview_interceptors","ActionMailer::Previews::ClassMethods","classes/ActionMailer/Previews/ClassMethods.html#method-i-register_preview_interceptors","(*interceptors)","<p>Register one or more Interceptors which will be called before mail is previewed.\n"],["register_tags","Rails::SourceAnnotationExtractor::Annotation","classes/Rails/SourceAnnotationExtractor/Annotation.html#method-c-register_tags","(*additional_tags)","<p>Registers additional tags\n\n<pre><code>Rails::SourceAnnotationExtractor::Annotation.register_tags(&quot;TESTME&quot;, &quot;DEPRECATEME&quot;)\n</code></pre>\n"],["register_task","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-register_task","(pattern, task)",""],["registry","ActiveRecord::ConnectionAdapters::Deduplicable::ClassMethods","classes/ActiveRecord/ConnectionAdapters/Deduplicable/ClassMethods.html#method-i-registry","()",""],["regular_class_path","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-regular_class_path","()",""],["regular_update","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_update","(*other_hashes, &block)",""],["regular_update","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_update","(*other_hashes, &block)",""],["regular_writer","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_writer","(key, value)",""],["regular_writer","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_writer","(key, value)",""],["reject","ActionCable::Channel::Base","classes/ActionCable/Channel/Base.html#method-i-reject","()",""],["reject","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-reject","(&block)","<p>Returns a new instance of <code>ActionController::Parameters</code> with items that the block evaluates to true removed. â€¦\n"],["reject","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-reject","(*args, &block)",""],["reject","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-reject","(*args, &block)",""],["reject!","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-reject-21","(&block)","<p>Removes items that the block evaluates to true and returns self.\n"],["reject_unauthorized_connection","ActionCable::Connection::Authorization","classes/ActionCable/Connection/Authorization.html#method-i-reject_unauthorized_connection","()","<p>Closes the WebSocket connection if it is open and returns a 404 â€œFile not Foundâ€ response. â€¦\n"],["rejected?","ActionCable::Channel::ChannelStub","classes/ActionCable/Channel/ChannelStub.html#method-i-rejected-3F","()",""],["relay","ActionMailbox::Relayer","classes/ActionMailbox/Relayer.html#method-i-relay","(source)",""],["release_connection","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-release_connection","(owner_thread = Thread.current)","<p>Signal that the thread is finished with the current connection. #release_connection releases the connection-thread â€¦\n"],["release_savepoint","ActiveRecord::ConnectionAdapters::Savepoints","classes/ActiveRecord/ConnectionAdapters/Savepoints.html#method-i-release_savepoint","(name = current_savepoint_name)",""],["release_unload_lock!","ActiveSupport::Reloader","classes/ActiveSupport/Reloader.html#method-i-release_unload_lock-21","()","<p>Release the unload lock if it has been previously obtained\n"],["reload","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-reload","()","<p>Reloads the collection from the database. Returns <code>self</code>.\n\n<pre><code>class Person &lt; ActiveRecord::Base\n  has_many :pets ...\n</code></pre>\n"],["reload","ActiveRecord::AttributeMethods::Dirty","classes/ActiveRecord/AttributeMethods/Dirty.html#method-i-reload","(*)","<p><code>reload</code> the record and clears changed attributes.\n"],["reload","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-reload","(options = nil)","<p>Reloads the attributes of the object as usual and clears <code>marked_for_destruction</code> flag.\n"],["reload","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-reload","(options = nil)","<p>Reloads the record from the database.\n<p>This method finds the record by its primary key (which could be â€¦\n"],["reload","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-reload","()","<p>Forces reloading of relation.\n"],["reload!","ActiveSupport::Reloader","classes/ActiveSupport/Reloader.html#method-c-reload-21","()","<p>Initiate a manual reload\n"],["reload!","Rails::Application::RoutesReloader","classes/Rails/Application/RoutesReloader.html#method-i-reload-21","()",""],["reload!","Rails::ConsoleMethods","classes/Rails/ConsoleMethods.html#method-i-reload-21","(print = true)","<p>reloads the environment\n"],["reload_routes!","Rails::Application","classes/Rails/Application.html#method-i-reload_routes-21","()","<p>Reload application routes regardless if they changed or not.\n"],["remote_addr=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-remote_addr-3D","(addr)",""],["remote_connections","ActionCable::Server::Base","classes/ActionCable/Server/Base.html#method-i-remote_connections","()","<p>Gateway to RemoteConnections. See that class for details.\n"],["remote_ip","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-remote_ip","()","<p>Returns the IP address of client as a <code>String</code>, usually set by the RemoteIp middleware.\n"],["remote_ip=","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-remote_ip-3D","(remote_ip)",""],["remove","ActionController::Renderers","classes/ActionController/Renderers.html#method-c-remove","(key)","<p>This method is the opposite of add method.\n<p>To remove a csv renderer:\n\n<pre><code>ActionController::Renderers.remove(:csv)\n</code></pre>\n"],["remove","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-remove","(conn)","<p>Remove a connection from the connection pool. The connection will remain open and active but will no â€¦\n"],["remove","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove","(*column_names, **options)","<p>Removes the column(s) from the table definition.\n\n<pre><code>t.remove(:qualification)\nt.remove(:qualification, :experience)\n</code></pre>\n"],["remove","String","classes/String.html#method-i-remove","(*patterns)","<p>Returns a new string with all occurrences of the patterns removed.\n\n<pre><code>str = &quot;foo bar test&quot;\nstr.remove(&quot; test&quot;) ...\n</code></pre>\n"],["remove!","String","classes/String.html#method-i-remove-21","(*patterns)","<p>Alters the string by removing all occurrences of the patterns.\n\n<pre><code>str = &quot;foo bar test&quot;\nstr.remove!(&quot; test&quot;, ...\n</code></pre>\n"],["remove_belongs_to","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_belongs_to","(table_name, ref_name, foreign_key: false, polymorphic: false, **options)",""],["remove_belongs_to","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_belongs_to","(*args, **options)",""],["remove_channel","ActionCable::SubscriptionAdapter::PostgreSQL::Listener","classes/ActionCable/SubscriptionAdapter/PostgreSQL/Listener.html#method-i-remove_channel","(channel)",""],["remove_channel","ActionCable::SubscriptionAdapter::Redis::Listener","classes/ActionCable/SubscriptionAdapter/Redis/Listener.html#method-i-remove_channel","(channel)",""],["remove_channel","ActionCable::SubscriptionAdapter::SubscriberMap","classes/ActionCable/SubscriptionAdapter/SubscriberMap.html#method-i-remove_channel","(channel)",""],["remove_check_constraint","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_check_constraint","(table_name, expression = nil, **options)","<p>Removes the given check constraint from the table.\n\n<pre><code>remove_check_constraint :products, name: &quot;price_check&quot;\n</code></pre>\n"],["remove_check_constraint","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_check_constraint","(*args, **options)","<p>Removes the given check constraint from the table.\n\n<pre><code>t.remove_check_constraint(name: &quot;price_check&quot;)\n</code></pre>\n<p>See  â€¦\n"],["remove_column","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_column","(table_name, column_name, type = nil, **options)","<p>Removes the column from the table definition.\n\n<pre><code>remove_column(:suppliers, :qualification)\n</code></pre>\n<p>The <code>type</code> and <code>options</code> â€¦\n"],["remove_column","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-remove_column","(name)","<p>remove the column <code>name</code> from the table.\n\n<pre><code>remove_column(:account_id)\n</code></pre>\n"],["remove_columns","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_columns","(table_name, *column_names, type: nil, **options)","<p>Removes the given columns from the table definition.\n\n<pre><code>remove_columns(:suppliers, :qualification, :experience)\n</code></pre>\n"],["remove_connection","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-remove_connection","(name = nil)",""],["remove_connection_pool","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-remove_connection_pool","(owner, role: ActiveRecord::Base.current_role, shard: ActiveRecord::Base.current_shard)",""],["remove_event_subscriber","ActiveSupport::Subscriber","classes/ActiveSupport/Subscriber.html#method-c-remove_event_subscriber","(event)",""],["remove_filters!","ActiveSupport::BacktraceCleaner","classes/ActiveSupport/BacktraceCleaner.html#method-i-remove_filters-21","()","<p>Removes all filters, but leaves in the silencers. Useful if you suddenly need to see entire filepaths â€¦\n"],["remove_foreign_key","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_foreign_key","(from_table, to_table = nil, **options)","<p>Removes the given foreign key from the table. Any option parameters provided will be used to re-add the â€¦\n"],["remove_foreign_key","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_foreign_key","(*args, **options)","<p>Removes the given foreign key from the table.\n\n<pre><code>t.remove_foreign_key(:authors)\nt.remove_foreign_key(column: ...\n</code></pre>\n"],["remove_hook_for","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-remove_hook_for","(*names)","<p>Remove a previously added hook.\n\n<pre><code>remove_hook_for :orm\n</code></pre>\n"],["remove_index","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_index","(table_name, column_name = nil, **options)","<p>Removes the given index from the table.\n<p>Removes the index on <code>branch_id</code> in the <code>accounts</code> table if exactly â€¦\n"],["remove_index","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_index","(column_name = nil, **options)","<p>Removes the given index from the table.\n\n<pre><code>t.remove_index(:branch_id)\nt.remove_index(column: [:branch_id, ...\n</code></pre>\n"],["remove_possible_method","Module","classes/Module.html#method-i-remove_possible_method","(method)","<p>Removes the named method, if it exists.\n"],["remove_possible_singleton_method","Module","classes/Module.html#method-i-remove_possible_singleton_method","(method)","<p>Removes the named singleton method, if it exists.\n"],["remove_reference","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_reference","(table_name, ref_name, foreign_key: false, polymorphic: false, **options)","<p>Removes the reference(s). Also removes a <code>type</code> column if one exists. #remove_reference and #remove_belongs_to â€¦\n"],["remove_references","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_references","(*args, **options)","<p>Removes a reference. Optionally removes a <code>type</code> column.\n\n<pre><code>t.remove_references(:user)\nt.remove_belongs_to(:supplier, ...\n</code></pre>\n"],["remove_renderer","ActionController","classes/ActionController.html#method-c-remove_renderer","(key)","<p>See <code>Renderers.remove</code>\n"],["remove_silencers!","ActiveSupport::BacktraceCleaner","classes/ActiveSupport/BacktraceCleaner.html#method-i-remove_silencers-21","()","<p>Removes all silencers, but leaves in the filters. Useful if your context of debugging suddenly expands â€¦\n"],["remove_subscriber","ActionCable::SubscriptionAdapter::SubscriberMap","classes/ActionCable/SubscriptionAdapter/SubscriberMap.html#method-i-remove_subscriber","(channel, subscriber)",""],["remove_timestamps","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_timestamps","(table_name, **options)","<p>Removes the timestamp columns (<code>created_at</code> and <code>updated_at</code>) from the table definition.\n\n<pre><code>remove_timestamps(:suppliers)\n</code></pre>\n"],["remove_timestamps","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_timestamps","(**options)","<p>Removes the timestamp columns (<code>created_at</code> and <code>updated_at</code>) from the table.\n\n<pre><code>t.remove_timestamps\n</code></pre>\n<p>See connection.remove_timestamps â€¦\n"],["rename","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-rename","(column_name, new_column_name)","<p>Renames a column.\n\n<pre><code>t.rename(:description, :name)\n</code></pre>\n<p>See connection.rename_column\n"],["rename_column","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_column","(table_name, column_name, new_column_name)","<p>Renames a column.\n\n<pre><code>rename_column(:suppliers, :description, :name)\n</code></pre>\n"],["rename_index","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-rename_index","(table_name, old_name, new_name)",""],["rename_index","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-rename_index","(table_name, old_name, new_name)","<p>Renames an index of a table. Raises error if length of new index name is greater than allowed limit. â€¦\n"],["rename_index","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_index","(table_name, old_name, new_name)","<p>Renames an index.\n<p>Rename the <code>index_people_on_last_name</code> index to <code>index_users_on_last_name</code>:\n\n<pre><code>rename_index ...\n</code></pre>\n"],["rename_index","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-rename_index","(index_name, new_index_name)","<p>Renames the given index on the table.\n\n<pre><code>t.rename_index(:user_id, :account_id)\n</code></pre>\n<p>See connection.rename_index â€¦\n"],["rename_key","ActiveSupport::XmlMini","classes/ActiveSupport/XmlMini.html#method-i-rename_key","(key, options = {})",""],["rename_table","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-rename_table","(table_name, new_name)","<p>Renames a table.\n<p>Example:\n\n<pre><code>rename_table(&#39;octopuses&#39;, &#39;octopi&#39;)\n</code></pre>\n"],["rename_table","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-rename_table","(table_name, new_name)","<p>Renames a table. Also renames a table&#39;s primary key sequence if the sequence name exists and matches â€¦\n"],["rename_table","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-rename_table","(table_name, new_name)","<p>Renames a table.\n<p>Example:\n\n<pre><code>rename_table(&#39;octopuses&#39;, &#39;octopi&#39;)\n</code></pre>\n"],["rename_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_table","(table_name, new_name)","<p>Renames a table.\n\n<pre><code>rename_table(&#39;octopuses&#39;, &#39;octopi&#39;)\n</code></pre>\n"],["render","AbstractController::Rendering","classes/AbstractController/Rendering.html#method-i-render","(*args, &block)","<p>Normalizes arguments, options and then delegates render_to_body and sticks the result in <code>self.response_body</code> â€¦\n"],["render","ActionController::Instrumentation","classes/ActionController/Instrumentation.html#method-i-render","(*)",""],["render","ActionController::Renderer","classes/ActionController/Renderer.html#method-i-render","(*args)","<p>Render templates with any options from ActionController::Base#render_to_string.\n<p>The primary options are: â€¦\n"],["render","ActionView::Helpers::RenderingHelper","classes/ActionView/Helpers/RenderingHelper.html#method-i-render","(options = {}, locals = {}, &block)","<p>Returns the result of a render that&#39;s dictated by the options hash. The primary options are:\n<p><code>:partial</code> â€¦\n"],["render","ActionView::Helpers::Tags::ActionText","classes/ActionView/Helpers/Tags/ActionText.html#method-i-render","()",""],["render","ActionView::PartialRenderer","classes/ActionView/PartialRenderer.html#method-i-render","(partial, context, block)",""],["render","ActionView::Renderer","classes/ActionView/Renderer.html#method-i-render","(context, options)","<p>Main render entry point shared by Action View and Action Controller.\n"],["render","ActionView::Template","classes/ActionView/Template.html#method-i-render","(view, locals, buffer = ActionView::OutputBuffer.new, add_to_stack: true, &block)","<p>Render a template. If the template was not compiled yet, it is done exactly before rendering.\n<p>This method â€¦\n"],["render","ActionView::TestCase::Behavior","classes/ActionView/TestCase/Behavior.html#method-i-render","(options = {}, local_assigns = {}, &block)",""],["render","ActionView::TestCase::Behavior::Locals","classes/ActionView/TestCase/Behavior/Locals.html#method-i-render","(options = {}, local_assigns = {})",""],["render_action_text_attachments","ActionText::ContentHelper","classes/ActionText/ContentHelper.html#method-i-render_action_text_attachments","(content)",""],["render_action_text_content","ActionText::ContentHelper","classes/ActionText/ContentHelper.html#method-i-render_action_text_content","(content)",""],["render_attachment_galleries","ActionText::Content","classes/ActionText/Content.html#method-i-render_attachment_galleries","(&block)",""],["render_attachments","ActionText::Content","classes/ActionText/Content.html#method-i-render_attachments","(**options, &block)",""],["render_body","ActionView::Renderer","classes/ActionView/Renderer.html#method-i-render_body","(context, options)","<p>Render but returns a valid Rack body. If fibers are defined, we return a streaming body that renders â€¦\n"],["render_collection","ActionView::LogSubscriber","classes/ActionView/LogSubscriber.html#method-i-render_collection","(event)",""],["render_count","ActionView::LogSubscriber","classes/ActionView/LogSubscriber.html#method-i-render_count","(payload)",""],["render_layout","ActionView::LogSubscriber","classes/ActionView/LogSubscriber.html#method-i-render_layout","(event)",""],["render_partial","ActionView::LogSubscriber","classes/ActionView/LogSubscriber.html#method-i-render_partial","(event)",""],["render_template","ActionView::LogSubscriber","classes/ActionView/LogSubscriber.html#method-i-render_template","(event)",""],["render_to_body","AbstractController::Rendering","classes/AbstractController/Rendering.html#method-i-render_to_body","(options = {})","<p>Performs the actual template rendering.\n"],["render_to_body","ActionController::ApiRendering","classes/ActionController/ApiRendering.html#method-i-render_to_body","(options = {})",""],["render_to_body","ActionController::Renderers","classes/ActionController/Renderers.html#method-i-render_to_body","(options)","<p>Called by <code>render</code> in AbstractController::Rendering which sets the return value as the <code>response_body</code>.\n<p>If â€¦\n"],["render_to_body","ActionController::Rendering","classes/ActionController/Rendering.html#method-i-render_to_body","(options = {})",""],["render_to_body","ActionView::Rendering","classes/ActionView/Rendering.html#method-i-render_to_body","(options = {})",""],["render_to_string","AbstractController::Rendering","classes/AbstractController/Rendering.html#method-i-render_to_string","(*args, &block)","<p>Raw rendering of a template to a string.\n<p>It is similar to render, except that it does not set the <code>response_body</code> â€¦\n"],["render_to_string","ActionController::Renderer","classes/ActionController/Renderer.html#method-i-render_to_string","(*args)",""],["render_to_string","ActionController::Rendering","classes/ActionController/Rendering.html#method-i-render_to_string","(*)","<p>Override render_to_string because body can now be set to a Rack body.\n"],["rendered_format","AbstractController::Rendering","classes/AbstractController/Rendering.html#method-i-rendered_format","()","<p>Returns Content-Type of rendered content.\n"],["rendered_views","ActionView::TestCase::Behavior","classes/ActionView/TestCase/Behavior.html#method-i-rendered_views","()",""],["rendered_views","ActionView::TestCase::Behavior::RenderedViewsCollection","classes/ActionView/TestCase/Behavior/RenderedViewsCollection.html#method-i-rendered_views","()",""],["reorder","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-reorder","(*args)","<p>Replaces any existing order defined on the relation with the specified order.\n\n<pre><code>User.order(&#39;email DESC&#39;).reorder(&#39;id ...\n</code></pre>\n"],["replace","ActionText::Fragment","classes/ActionText/Fragment.html#method-i-replace","(selector)",""],["replace","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-replace","(other_array)","<p>Replaces this collection with <code>other_array</code>. This will perform a diff and delete/add only records that â€¦\n"],["replace","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-replace","(other_hash)","<p>Replaces the contents of this hash with other_hash.\n\n<pre><code>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 }\nh.replace({ &quot;c&quot; =&gt; ...\n</code></pre>\n"],["replace","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-replace","(other_hash)","<p>Replaces the contents of this hash with other_hash.\n\n<pre><code>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 }\nh.replace({ &quot;c&quot; =&gt; ...\n</code></pre>\n"],["replace","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-replace","(value)",""],["replay","ActiveRecord::Migration::CommandRecorder","classes/ActiveRecord/Migration/CommandRecorder.html#method-i-replay","(migration)",""],["replica?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-replica-3F","()",""],["replica?","ActiveRecord::DatabaseConfigurations::HashConfig","classes/ActiveRecord/DatabaseConfigurations/HashConfig.html#method-i-replica-3F","()","<p>Determines whether a database configuration is for a replica / readonly connection. If the <code>replica</code> key â€¦\n"],["report","ActiveSupport::ErrorReporter","classes/ActiveSupport/ErrorReporter.html#method-i-report","(error, handled:, severity: handled ? :warning : :error, context: {})","<p>When the block based <code>handle</code> and <code>record</code> methods are not suitable, you can directly use <code>report</code>\n\n<pre><code>Rails.error.report(error, ...\n</code></pre>\n"],["report_uri","ActionDispatch::ContentSecurityPolicy","classes/ActionDispatch/ContentSecurityPolicy.html#method-i-report_uri","(uri)","<p>Enable the report-uri directive. Violation reports will be sent to the specified URI:\n\n<pre><code>policy.report_uri ...\n</code></pre>\n"],["representable?","ActiveStorage::Blob::Representable","classes/ActiveStorage/Blob/Representable.html#method-i-representable-3F","()","<p>Returns true if the blob is variable or previewable.\n"],["representation","ActiveStorage::Blob::Representable","classes/ActiveStorage/Blob/Representable.html#method-i-representation","(transformations)","<p>Returns an ActiveStorage::Preview for a previewable blob or an ActiveStorage::Variant for a variable â€¦\n"],["request","ActionCable::Connection::Base","classes/ActionCable/Connection/Base.html#method-i-request","()","<p>The request that initiated the WebSocket connection is available here. This gives access to the environment, â€¦\n"],["request","ActionController::Base","classes/ActionController/Base.html#method-i-request","","<p>Returns an ActionDispatch::Request instance that represents the current request.\n"],["request_authenticity_tokens","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-request_authenticity_tokens","()","<p>Possible authenticity tokens sent in the request.\n"],["request_http_basic_authentication","ActionController::HttpAuthentication::Basic::ControllerMethods","classes/ActionController/HttpAuthentication/Basic/ControllerMethods.html#method-i-request_http_basic_authentication","(realm = \"Application\", message = nil)",""],["request_http_digest_authentication","ActionController::HttpAuthentication::Digest::ControllerMethods","classes/ActionController/HttpAuthentication/Digest/ControllerMethods.html#method-i-request_http_digest_authentication","(realm = \"Application\", message = nil)","<p>Render an HTTP header requesting the client to send a Digest for authentication.\n"],["request_http_token_authentication","ActionController::HttpAuthentication::Token::ControllerMethods","classes/ActionController/HttpAuthentication/Token/ControllerMethods.html#method-i-request_http_token_authentication","(realm = \"Application\", message = nil)","<p>Render an HTTP header requesting the client to send a Bearer token for authentication.\n"],["request_id","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-request_id","()","<p>Returns the unique request id, which is based on either the X-Request-Id header that can be generated â€¦\n"],["request_method","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-request_method","()","<p>Returns the HTTP method that the application should see. In the case where the method was overridden â€¦\n"],["request_method=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-request_method-3D","(method)",""],["request_method_symbol","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-request_method_symbol","()","<p>Returns a symbol form of the #request_method.\n"],["request_parameters","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-request_parameters","()",""],["request_parameters=","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-request_parameters-3D","(params)",""],["request_uri=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-request_uri-3D","(uri)",""],["require","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-require","(key)","<p>This method accepts both a single key and an array of keys.\n<p>When passed a single key, if it exists and â€¦\n"],["require_application!","Rails::Command::Actions","classes/Rails/Command/Actions.html#method-i-require_application-21","()",""],["require_application_and_environment!","Rails::Command::Actions","classes/Rails/Command/Actions.html#method-i-require_application_and_environment-21","()",""],["require_dependency","ActiveSupport::Dependencies::RequireDependency","classes/ActiveSupport/Dependencies/RequireDependency.html#method-i-require_dependency","(filename)","<p><strong>Warning:</strong> This method is obsolete. The semantics of the autoloader match Ruby&#39;s and you do not need â€¦\n"],["require_engine","ActionView::Template::Handlers::Builder","classes/ActionView/Template/Handlers/Builder.html#method-i-require_engine","()",""],["require_environment!","Rails::Command::Actions","classes/Rails/Command/Actions.html#method-i-require_environment-21","()",""],["require_sri_for","ActionDispatch::ContentSecurityPolicy","classes/ActionDispatch/ContentSecurityPolicy.html#method-i-require_sri_for","(*types)","<p>Specify asset types for which Subresource Integrity is required:\n\n<pre><code>policy.require_sri_for :script, :style\n</code></pre>\n"],["require_unload_lock!","ActiveSupport::Reloader","classes/ActiveSupport/Reloader.html#method-i-require_unload_lock-21","()","<p>Acquire the ActiveSupport::Dependencies::Interlock unload lock, ensuring it will be released automatically â€¦\n"],["required","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-required","(key)","<p>Alias of #require.\n"],["requires_reloading?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-requires_reloading-3F","()","<p>Returns true if its required to reload the connection between requests for development mode.\n"],["requires_reloading?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-requires_reloading-3F","()",""],["rescue_from","ActiveSupport::Rescuable::ClassMethods","classes/ActiveSupport/Rescuable/ClassMethods.html#method-i-rescue_from","(*klasses, with: nil, &block)","<p>Registers exception classes with a handler to be called by <code>rescue_with_handler</code>.\n<p><code>rescue_from</code> receives a â€¦\n"],["rescue_response?","ActionDispatch::ExceptionWrapper","classes/ActionDispatch/ExceptionWrapper.html#method-i-rescue_response-3F","()",""],["rescue_template","ActionDispatch::ExceptionWrapper","classes/ActionDispatch/ExceptionWrapper.html#method-i-rescue_template","()",""],["rescue_with_handler","ActiveSupport::Rescuable","classes/ActiveSupport/Rescuable.html#method-i-rescue_with_handler","(exception)","<p>Delegates to the class method, but uses the instance as the subject for rescue_from handlers (method â€¦\n"],["rescue_with_handler","ActiveSupport::Rescuable::ClassMethods","classes/ActiveSupport/Rescuable/ClassMethods.html#method-i-rescue_with_handler","(exception, object: self, visited_exceptions: [])","<p>Matches an exception to a handler based on the exception class.\n<p>If no handler matches the exception, check â€¦\n"],["reselect","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-reselect","(*args)","<p>Allows you to change a previously set select statement.\n\n<pre><code>Post.select(:title, :body)\n# SELECT `posts`.`title`, ...\n</code></pre>\n"],["reset","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-reset","()","<p>Unloads the association. Returns <code>self</code>.\n\n<pre><code>class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nperson.pets ...\n</code></pre>\n"],["reset","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-reset","()",""],["reset","ActiveSupport::CurrentAttributes","classes/ActiveSupport/CurrentAttributes.html#method-i-reset","()","<p>Reset all attributes. Should be called before and after actions, when used as a per-request singleton. â€¦\n"],["reset!","ActionDispatch::Integration::Runner","classes/ActionDispatch/Integration/Runner.html#method-i-reset-21","()","<p>Reset the current session. This is useful for testing multiple sessions in a single test case.\n"],["reset!","ActionDispatch::Integration::Session","classes/ActionDispatch/Integration/Session.html#method-i-reset-21","()","<p>Resets the instance. This can be used to reset the state information in an existing session instance, â€¦\n"],["reset!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-reset-21","()","<p>Reset the state of this connection, directing the DBMS to clear transactions and other connection-related â€¦\n"],["reset!","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-reset-21","()",""],["reset!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-reset-21","()",""],["reset_body!","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-reset_body-21","()",""],["reset_cache","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-reset_cache","()",""],["reset_callbacks","ActiveSupport::Callbacks::ClassMethods","classes/ActiveSupport/Callbacks/ClassMethods.html#method-i-reset_callbacks","(name)","<p>Remove all set callbacks for the given event.\n"],["reset_column_information","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-reset_column_information","()","<p>Resets all the cached information about columns, which will cause them to be reloaded on the next request. â€¦\n"],["reset_counters","ActiveRecord::CounterCache::ClassMethods","classes/ActiveRecord/CounterCache/ClassMethods.html#method-i-reset_counters","(id, *counters, touch: nil)","<p>Resets one or more counter caches to their correct value using an SQL count query. This is useful when â€¦\n"],["reset_cycle","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-reset_cycle","(name = \"default\")","<p>Resets a cycle so that it starts from the first element the next time it is called. Pass in <code>name</code> to reset â€¦\n"],["reset_locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-reset_locking_column","()","<p>Reset the column used for optimistic locking back to the <code>lock_version</code> default.\n"],["reset_runtime","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-c-reset_runtime","()",""],["reset_sequence!","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-reset_sequence-21","(table, column, sequence = nil)","<p>Set the sequence to the max value of the table&#39;s column.\n"],["reset_session","ActionController::Metal","classes/ActionController/Metal.html#method-i-reset_session","()",""],["reset_session","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-reset_session","()",""],["resets","ActiveSupport::CurrentAttributes","classes/ActiveSupport/CurrentAttributes.html#method-c-resets","(&block)","<p>Calls this block after #reset is called on the instance. Used for resetting external collaborators, like â€¦\n"],["resolve","ActionDispatch::RailsEntityStore","classes/ActionDispatch/RailsEntityStore.html#method-c-resolve","(uri)",""],["resolve","ActionDispatch::RailsMetaStore","classes/ActionDispatch/RailsMetaStore.html#method-c-resolve","(uri)",""],["resolve","ActionDispatch::Routing::Mapper::CustomUrls","classes/ActionDispatch/Routing/Mapper/CustomUrls.html#method-i-resolve","(*args, &block)","<p>Define custom polymorphic mappings of models to URLs. This alters the behavior of <code>polymorphic_url</code> and â€¦\n"],["resource","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-resource","(*resources, &block)","<p>Sometimes, you have a resource that clients always look up without referencing an ID. A common example, â€¦\n"],["resources","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-resources","(*resources, &block)","<p>In Rails, a resourceful route provides a mapping between HTTP verbs and URLs and controller actions. â€¦\n"],["resources_path_names","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-resources_path_names","(options)",""],["respond_to","ActionController::MimeResponds","classes/ActionController/MimeResponds.html#method-i-respond_to","(*mimes)","<p>Without web-service support, an action which collects the data for displaying a list of people might â€¦\n"],["respond_to?","ActionDispatch::Response::RackBody","classes/ActionDispatch/Response/RackBody.html#method-i-respond_to-3F","(method, include_private = false)",""],["respond_to?","ActiveModel::AttributeMethods","classes/ActiveModel/AttributeMethods.html#method-i-respond_to-3F","(method, include_private_methods = false)",""],["respond_to?","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-respond_to-3F","(name, include_private = false)","<p>A Person object with a name attribute can ask <code>person.respond_to?(:name)</code>, <code>person.respond_to?(:name=)</code>, â€¦\n"],["respond_to?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-respond_to-3F","(sym, include_priv = false)","<p>respond_to_missing? is not called in some cases, such as when type conversion is performed with Kernel#String â€¦\n"],["respond_to?","Rails::Railtie::Configurable::ClassMethods","classes/Rails/Railtie/Configurable/ClassMethods.html#method-i-respond_to-3F","(*args)",""],["respond_to?","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-respond_to-3F","(name, include_private = false)",""],["respond_to_missing?","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-respond_to_missing-3F","(method, include_private)","<p>Returns <code>true</code> if <em>obj</em> responds to the given method. Private methods are included in the search only if â€¦\n"],["respond_to_missing?","ActiveSupport::OrderedOptions","classes/ActiveSupport/OrderedOptions.html#method-i-respond_to_missing-3F","(name, include_private)",""],["respond_to_missing?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-respond_to_missing-3F","(sym, include_priv)","<p>Ensure proxy class responds to all methods that underlying time instance responds to.\n"],["respond_to_without_attributes?","ActiveModel::AttributeMethods","classes/ActiveModel/AttributeMethods.html#method-i-respond_to_without_attributes-3F","(method, include_private_methods = false)","<p>A <code>Person</code> instance with a <code>name</code> attribute can ask <code>person.respond_to?(:name)</code>, <code>person.respond_to?(:name=)</code> â€¦\n"],["response","ActionController::Base","classes/ActionController/Base.html#method-i-response","","<p>Returns an ActionDispatch::Response that represents the current response.\n"],["response","ActionController::MimeResponds::Collector","classes/ActionController/MimeResponds/Collector.html#method-i-response","()",""],["response_body","AbstractController::Base","classes/AbstractController/Base.html#method-i-response_body","","<p>Returns the body of the HTTP response sent by the controller.\n"],["response_body=","ActionController::Live","classes/ActionController/Live.html#method-i-response_body-3D","(body)",""],["response_body=","ActionController::Metal","classes/ActionController/Metal.html#method-i-response_body-3D","(body)",""],["response_code","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-response_code","()","<p>The response code of the request.\n"],["response_parser","ActionDispatch::RequestEncoder::IdentityEncoder","classes/ActionDispatch/RequestEncoder/IdentityEncoder.html#method-i-response_parser","()",""],["response_parser","ActionDispatch::TestResponse","classes/ActionDispatch/TestResponse.html#method-i-response_parser","()",""],["restart","ActionCable::Server::Base","classes/ActionCable/Server/Base.html#method-i-restart","()",""],["restore_attributes","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-restore_attributes","(attr_names = changed)","<p>Restore all previous data of the provided attributes.\n"],["result","ActionDispatch::Routing::ConsoleFormatter::Base","classes/ActionDispatch/Routing/ConsoleFormatter/Base.html#method-i-result","()",""],["result","ActionDispatch::Routing::HtmlTableFormatter","classes/ActionDispatch/Routing/HtmlTableFormatter.html#method-i-result","()",""],["retrieve_connection","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-retrieve_connection","()",""],["retrieve_connection_pool","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-retrieve_connection_pool","(owner, role: ActiveRecord::Base.current_role, shard: ActiveRecord::Base.current_shard)","<p>Retrieving the connection pool happens a lot, so we cache it in @owner_to_pool_manager. This makes retrieving â€¦\n"],["retry_job","ActiveJob::Exceptions","classes/ActiveJob/Exceptions.html#method-i-retry_job","(options = {})","<p>Reschedules the job to be re-executed. This is useful in combination with the <code>rescue_from</code> option. When â€¦\n"],["retry_on","ActiveJob::Exceptions::ClassMethods","classes/ActiveJob/Exceptions/ClassMethods.html#method-i-retry_on","(*exceptions, wait: 3.seconds, attempts: 5, queue: nil, priority: nil, jitter: JITTER_DEFAULT)","<p>Catch the exception and reschedule job for re-execution after so many seconds, for a specific number â€¦\n"],["reverse","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-reverse","()","<p>Reverses all characters in the string.\n\n<pre><code>&#39;CafÃ©&#39;.mb_chars.reverse.to_s # =&gt; &#39;Ã©faC&#39;\n</code></pre>\n"],["reverse_merge","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-reverse_merge","(other_hash)","<p>Returns a new <code>ActionController::Parameters</code> with all keys from current hash merged into <code>other_hash</code>.\n"],["reverse_merge","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge","(other_hash)","<p>Like <code>merge</code> but the other way around: Merges the receiver into the argument and returns a new hash with â€¦\n"],["reverse_merge","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge","(other_hash)","<p>Like <code>merge</code> but the other way around: Merges the receiver into the argument and returns a new hash with â€¦\n"],["reverse_merge","Hash","classes/Hash.html#method-i-reverse_merge","(other_hash)","<p>Merges the caller into <code>other_hash</code>. For example,\n\n<pre><code>options = options.reverse_merge(size: 25, velocity: 10)\n</code></pre>\n"],["reverse_merge!","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-reverse_merge-21","(other_hash)","<p>Returns current <code>ActionController::Parameters</code> instance with current hash merged into <code>other_hash</code>.\n"],["reverse_merge!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge-21","(other_hash)","<p>Same semantics as <code>reverse_merge</code> but modifies the receiver in-place.\n"],["reverse_merge!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge-21","(other_hash)","<p>Same semantics as <code>reverse_merge</code> but modifies the receiver in-place.\n"],["reverse_merge!","Hash","classes/Hash.html#method-i-reverse_merge-21","(other_hash)","<p>Destructive <code>reverse_merge</code>.\n"],["reverse_order","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-reverse_order","()","<p>Reverse the existing order clause on the relation.\n\n<pre><code>User.order(&#39;name ASC&#39;).reverse_order # generated SQL ...\n</code></pre>\n"],["reverse_update","Hash","classes/Hash.html#method-i-reverse_update","(other_hash)",""],["reversible","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-reversible","()","<p>Used to specify an operation that can be run in one direction or another. Call the methods <code>up</code> and <code>down</code> â€¦\n"],["revert","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-revert","(*migration_classes, &block)","<p>Reverses the migration commands for the given block and the given migrations.\n<p>The following migration â€¦\n"],["revert","ActiveRecord::Migration::CommandRecorder","classes/ActiveRecord/Migration/CommandRecorder.html#method-i-revert","()","<p>While executing the given block, the recorded will be in reverting mode. All commands recorded will end â€¦\n"],["reverting?","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-reverting-3F","()",""],["rewhere","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-rewhere","(conditions)","<p>Allows you to change a previously set where condition for a given attribute, instead of appending to â€¦\n"],["rewind","ActionDispatch::Http::UploadedFile","classes/ActionDispatch/Http/UploadedFile.html#method-i-rewind","()","<p>Shortcut for <code>tempfile.rewind</code>.\n"],["rewrite_param_values","ActionController::HttpAuthentication::Token","classes/ActionController/HttpAuthentication/Token.html#method-i-rewrite_param_values","(array_params)","<p>This removes the <code>&quot;</code> characters wrapping the value.\n"],["rfc2822","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-rfc2822","()","<p>Returns a string of the object&#39;s date and time in the RFC 2822 standard format.\n\n<pre><code>Time.zone.now.rfc2822 ...\n</code></pre>\n"],["rfc3339","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-rfc3339","(fraction_digits = 0)",""],["rfc3339","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-rfc3339","(str)","<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone of <code>self</code> from an RFC 3339 string. â€¦\n"],["rfc3339","Time","classes/Time.html#method-c-rfc3339","(str)","<p>Creates a <code>Time</code> instance from an RFC 3339 string.\n\n<pre><code>Time.rfc3339(&#39;1999-12-31T14:00:00-10:00&#39;) # =&gt; 2000-01-01 ...\n</code></pre>\n"],["rfc822","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-rfc822","()",""],["rich_text_area","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-rich_text_area","(method, options = {})",""],["rich_text_area","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-rich_text_area","(object_name, method, options = {})","<p>Returns a <code>trix-editor</code> tag that instantiates the Trix JavaScript editor as well as a hidden field that â€¦\n"],["rich_text_area_tag","ActionText::TagHelper","classes/ActionText/TagHelper.html#method-i-rich_text_area_tag","(name, value = nil, options = {})","<p>Returns a <code>trix-editor</code> tag that instantiates the Trix JavaScript editor as well as a hidden field that â€¦\n"],["rich_text_association_names","ActionText::Attribute","classes/ActionText/Attribute.html#method-i-rich_text_association_names","()",""],["role","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-role","()","<p>The role (e.g. <code>:writing</code>) for the current connection. In a non-multi role application, <code>:writing</code> is returned. â€¦\n"],["rollback","ActiveRecord::ConnectionAdapters::RealTransaction","classes/ActiveRecord/ConnectionAdapters/RealTransaction.html#method-i-rollback","()",""],["rollback","ActiveRecord::ConnectionAdapters::SavepointTransaction","classes/ActiveRecord/ConnectionAdapters/SavepointTransaction.html#method-i-rollback","()",""],["rollback!","ActiveRecord::ConnectionAdapters::TransactionState","classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-rollback-21","()",""],["rollback_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-rollback_db_transaction","()","<p>Rolls back the transaction (and turns on auto-committing). Must be done if the transaction block raises â€¦\n"],["rollback_to_savepoint","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-rollback_to_savepoint","(name = nil)",""],["rolledback?","ActiveRecord::ConnectionAdapters::TransactionState","classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-rolledback-3F","()",""],["root","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-root","(path, options = {})","<p>You can specify what Rails should route â€œ/â€ to with the root method:\n\n<pre><code>root to: &#39;pages#main&#39;\n</code></pre>\n<p>For â€¦\n"],["root","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-root","()",""],["root","Rails","classes/Rails.html#method-c-root","()","<p>Returns a Pathname object of the current Rails project, otherwise it returns <code>nil</code> if there is no project: â€¦\n"],["root","Rails::Command","classes/Rails/Command.html#method-c-root","()","<p>Returns the root of the Rails engine or app running the command.\n"],["root=","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-root-3D","(value)",""],["route","ActionMailbox::InboundEmail::Routable","classes/ActionMailbox/InboundEmail/Routable.html#method-i-route","()","<p>Route this <code>InboundEmail</code> using the routing rules declared on the <code>ApplicationMailbox</code>.\n"],["route","ActionMailbox::Router","classes/ActionMailbox/Router.html#method-i-route","(inbound_email)",""],["route","ActionMailbox::Routing","classes/ActionMailbox/Routing.html#method-i-route","(inbound_email)",""],["route","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-route","(routing_code, namespace: nil)","<p>Make an entry in Rails routing file <code>config/routes.rb</code>\n\n<pre><code>route &quot;root &#39;welcome#index&#39;&quot;\nroute &quot;root &#39;admin#index&#39;&quot;, ...\n</code></pre>\n"],["route_for","ActionDispatch::Routing::UrlFor","classes/ActionDispatch/Routing/UrlFor.html#method-i-route_for","(name, *args)","<p>Allows calling direct or regular named route.\n\n<pre><code>resources :buckets\n\ndirect :recordable do |recording|\n  ...\n</code></pre>\n"],["route_key","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-route_key","(record_or_class)","<p>Returns string to use while generating route names. It differs for namespaced models regarding whether â€¦\n"],["route_later","ActionMailbox::InboundEmail::Routable","classes/ActionMailbox/InboundEmail/Routable.html#method-i-route_later","()","<p>Enqueue a <code>RoutingJob</code> for this <code>InboundEmail</code>.\n"],["route_url","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-route_url","()",""],["routes","Rails::Engine","classes/Rails/Engine.html#method-i-routes","(&block)","<p>Defines the routes for this engine. If a block is given to routes, it is appended to the engine.\n"],["routing","ActionMailbox::Routing","classes/ActionMailbox/Routing.html#method-i-routing","(routes)",""],["ruby2_keywords_hash","ActiveJob::Arguments::Hash","classes/ActiveJob/Arguments/Hash.html#method-c-ruby2_keywords_hash","(hash)",""],["ruby2_keywords_hash?","ActiveJob::Arguments::Hash","classes/ActiveJob/Arguments/Hash.html#method-c-ruby2_keywords_hash-3F","(hash)",""],["ruby_version","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-ruby_version","()",""],["run","ActionMailbox::InboundEmail::Incineratable::Incineration","classes/ActionMailbox/InboundEmail/Incineratable/Incineration.html#method-i-run","()",""],["run","ActionView::CacheExpiry::Executor","classes/ActionView/CacheExpiry/Executor.html#method-i-run","()",""],["run","ActiveRecord::ConnectionAdapters::ConnectionPool::Reaper","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Reaper.html#method-i-run","()",""],["run","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-run","(*migration_classes)","<p>Runs the given migration classes. Last argument can specify options:\n<p><code>:direction</code> - Default is <code>:up</code>.\n<p><code>:revert</code> â€¦\n"],["run","ActiveRecord::QueryCache","classes/ActiveRecord/QueryCache.html#method-c-run","()",""],["run","ActiveSupport::Testing::Isolation","classes/ActiveSupport/Testing/Isolation.html#method-i-run","()",""],["run","Rails::Application::Finisher::InterlockHook","classes/Rails/Application/Finisher/InterlockHook.html#method-c-run","()",""],["run","Rails::Application::Finisher::MutexHook","classes/Rails/Application/Finisher/MutexHook.html#method-i-run","()",""],["run","Rails::Engine::Updater","classes/Rails/Engine/Updater.html#method-c-run","(action)",""],["run","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-i-run","(*args)",""],["run!","ActiveSupport::ExecutionWrapper","classes/ActiveSupport/ExecutionWrapper.html#method-c-run-21","(reset: false)","<p>Run this execution.\n<p>Returns an instance, whose <code>complete!</code> method <strong>must</strong> be invoked after the work has been â€¦\n"],["run_callbacks","ActiveSupport::Callbacks","classes/ActiveSupport/Callbacks.html#method-i-run_callbacks","(kind)","<p>Runs the callbacks for the given event.\n<p>Calls the before and around callbacks in the order they were set, â€¦\n"],["run_cleanup","ActiveSupport::Testing::Parallelization::Worker","classes/ActiveSupport/Testing/Parallelization/Worker.html#method-i-run_cleanup","()",""],["run_generator","Rails::Generators::Testing::Behaviour","classes/Rails/Generators/Testing/Behaviour.html#method-i-run_generator","(args = default_arguments, config = {})","<p>Runs the generator configured for this class. The first argument is an array like command line arguments: â€¦\n"],["run_in_isolation","ActiveSupport::Testing::Isolation::Forking","classes/ActiveSupport/Testing/Isolation/Forking.html#method-i-run_in_isolation","(&blk)",""],["run_in_isolation","ActiveSupport::Testing::Isolation::Subprocess","classes/ActiveSupport/Testing/Isolation/Subprocess.html#method-i-run_in_isolation","(&blk)","<p>Complicated H4X to get this working in windows / jruby with no forking.\n"],["run_in_transaction?","ActiveRecord::TestFixtures","classes/ActiveRecord/TestFixtures.html#method-i-run_in_transaction-3F","()",""],["run_initializers","Rails::Initializable","classes/Rails/Initializable.html#method-i-run_initializers","(group = :default, *args)",""],["run_interlock","ActiveSupport::Dependencies","classes/ActiveSupport/Dependencies.html#method-c-run_interlock","(&block)","<p>Execute the supplied block without interference from any concurrent loads.\n"],["run_load_hooks","ActiveSupport::LazyLoadHooks","classes/ActiveSupport/LazyLoadHooks.html#method-i-run_load_hooks","(name, base = Object)","<p>Executes all blocks registered to <code>name</code> via on_load, using <code>base</code> as the evaluation context.\n\n<pre><code>ActiveSupport.run_load_hooks(:active_record, ...\n</code></pre>\n"],["runner","Rails::Application","classes/Rails/Application.html#method-i-runner","(&blk)","<p>Sends any runner called in the instance of a new application up to the <code>runner</code> method defined in Rails::Railtie â€¦\n"],["runner","Rails::Railtie","classes/Rails/Railtie.html#method-c-runner","(&blk)",""],["running","ActiveSupport::Dependencies::Interlock","classes/ActiveSupport/Dependencies/Interlock.html#method-i-running","(&block)",""],["runtime","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-c-runtime","()",""],["runtime=","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-c-runtime-3D","(value)",""],["safe_concat","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-safe_concat","(string)",""],["safe_concat","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-safe_concat","(value)",""],["safe_constantize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-safe_constantize","(camel_cased_word)","<p>Tries to find a constant with the name specified in the argument string.\n\n<pre><code>safe_constantize(&#39;Module&#39;)   ...\n</code></pre>\n"],["safe_constantize","String","classes/String.html#method-i-safe_constantize","()","<p><code>safe_constantize</code> tries to find a declared constant with the name specified in the string. It returns â€¦\n"],["safe_join","ActionView::Helpers::OutputSafetyHelper","classes/ActionView/Helpers/OutputSafetyHelper.html#method-i-safe_join","(array, sep = $,)","<p>This method returns an HTML safe string similar to what <code>Array#join</code> would return. The array is flattened, â€¦\n"],["safe_record","ActiveSupport::Testing::Parallelization::Worker","classes/ActiveSupport/Testing/Parallelization/Worker.html#method-i-safe_record","(reporter, result)",""],["sandbox","ActionDispatch::ContentSecurityPolicy","classes/ActionDispatch/ContentSecurityPolicy.html#method-i-sandbox","(*values)","<p>Specify whether a sandbox should be enabled for the requested resource:\n\n<pre><code>policy.sandbox\n</code></pre>\n<p>Values can be passed â€¦\n"],["sandbox?","Rails::Console","classes/Rails/Console.html#method-i-sandbox-3F","()",""],["sanitize","ActionView::Helpers::SanitizeHelper","classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize","(html, options = {})","<p>Sanitizes HTML input, stripping all but known-safe tags and attributes.\n<p>It also strips href/src attributes â€¦\n"],["sanitize_action_text_content","ActionText::ContentHelper","classes/ActionText/ContentHelper.html#method-i-sanitize_action_text_content","(content)",""],["sanitize_css","ActionView::Helpers::SanitizeHelper","classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize_css","(style)","<p>Sanitizes a block of CSS code. Used by <code>sanitize</code> when it comes across a style attribute.\n"],["sanitize_limit","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-sanitize_limit","(limit)","<p>Sanitizes the given LIMIT parameter in order to prevent SQL injection.\n<p>The <code>limit</code> may be anything that â€¦\n"],["sanitize_sql","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql","(condition)",""],["sanitize_sql_array","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_array","(ary)","<p>Accepts an array of conditions. The array has each value sanitized and interpolated into the SQL statement. â€¦\n"],["sanitize_sql_for_assignment","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_for_assignment","(assignments, default_table_name = table_name)","<p>Accepts an array, hash, or string of SQL conditions and sanitizes them into a valid SQL fragment for â€¦\n"],["sanitize_sql_for_conditions","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_for_conditions","(condition)","<p>Accepts an array or string of SQL conditions and sanitizes them into a valid SQL fragment for a WHERE â€¦\n"],["sanitize_sql_for_order","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_for_order","(condition)","<p>Accepts an array, or string of SQL conditions and sanitizes them into a valid SQL fragment for an ORDER â€¦\n"],["sanitize_sql_hash_for_assignment","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_hash_for_assignment","(attrs, table)","<p>Sanitizes a hash of attribute/value pairs into SQL conditions for a SET clause.\n\n<pre><code>sanitize_sql_hash_for_assignment({ ...\n</code></pre>\n"],["sanitize_sql_like","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_like","(string, escape_character = \"\\\\\")","<p>Sanitizes a <code>string</code> so that it is safe to use within an SQL LIKE statement. This method uses <code>escape_character</code> â€¦\n"],["sanitized","ActiveStorage::Filename","classes/ActiveStorage/Filename.html#method-i-sanitized","()","<p>Returns the sanitized filename.\n\n<pre><code>ActiveStorage::Filename.new(&quot;foo:bar.jpg&quot;).sanitized # =&gt; &quot;foo-bar.jpg&quot; ...\n</code></pre>\n"],["save","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-save","(**options, &block)","<p>Saves the model.\n<p>If the model is new, a record gets created in the database, otherwise the existing record â€¦\n"],["save","ActiveRecord::Validations","classes/ActiveRecord/Validations.html#method-i-save","(**options)","<p>The validation process on save can be skipped by passing <code>validate: false</code>. The validation context can â€¦\n"],["save","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-i-save","()","<p>POST create\n"],["save!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-save-21","(**options, &block)","<p>Saves the model.\n<p>If the model is new, a record gets created in the database, otherwise the existing record â€¦\n"],["save!","ActiveRecord::Validations","classes/ActiveRecord/Validations.html#method-i-save-21","(**options)","<p>Attempts to save the record just like ActiveRecord::Base#save but will raise an ActiveRecord::RecordInvalid â€¦\n"],["saved_change_to_attribute","ActiveRecord::AttributeMethods::Dirty","classes/ActiveRecord/AttributeMethods/Dirty.html#method-i-saved_change_to_attribute","(attr_name)","<p>Returns the change to an attribute during the last save. If the attribute was changed, the result will â€¦\n"],["saved_change_to_attribute?","ActiveRecord::AttributeMethods::Dirty","classes/ActiveRecord/AttributeMethods/Dirty.html#method-i-saved_change_to_attribute-3F","(attr_name, **options)","<p>Did this attribute change when we last saved?\n<p>This method is useful in after callbacks to determine if â€¦\n"],["saved_changes","ActiveRecord::AttributeMethods::Dirty","classes/ActiveRecord/AttributeMethods/Dirty.html#method-i-saved_changes","()","<p>Returns a hash containing all the changes that were just saved.\n"],["saved_changes?","ActiveRecord::AttributeMethods::Dirty","classes/ActiveRecord/AttributeMethods/Dirty.html#method-i-saved_changes-3F","()","<p>Did the last call to <code>save</code> have any changes to change?\n"],["say","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-say","(message, subitem = false)","<p>Takes a message argument and outputs it as is. A second boolean argument can be passed to specify whether â€¦\n"],["say_with_time","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-say_with_time","(message)","<p>Outputs text along with how long it took to run its block. If the block returns an integer it assumes â€¦\n"],["schedule","ActionMailbox::IncinerationJob","classes/ActionMailbox/IncinerationJob.html#method-c-schedule","(inbound_email)",""],["scheduled?","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-scheduled-3F","()","<p>Returns <code>true</code> if the relation was scheduled on the background thread pool.\n"],["schema_cache","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-schema_cache","()",""],["schema_cache=","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-schema_cache-3D","(cache)",""],["schema_cache_path","ActiveRecord::DatabaseConfigurations::HashConfig","classes/ActiveRecord/DatabaseConfigurations/HashConfig.html#method-i-schema_cache_path","()","<p>The path to the schema cache dump file for a database. If omitted, the filename will be read from ENV â€¦\n"],["schema_dump","ActiveRecord::DatabaseConfigurations::HashConfig","classes/ActiveRecord/DatabaseConfigurations/HashConfig.html#method-i-schema_dump","(format = ActiveRecord.schema_format)","<p>Determines whether to dump the schema/structure files and the filename that should be used.\n<p>If <code>configuration_hash[:schema_dump]</code> â€¦\n"],["schema_dump_path","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-schema_dump_path","(db_config, format = ActiveRecord.schema_format)",""],["schema_exists?","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-schema_exists-3F","(name)","<p>Returns true if schema exists.\n"],["schema_file_type","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-schema_file_type","(format = ActiveRecord.schema_format)",""],["schema_migrations_table_name","ActiveRecord::ModelSchema","classes/ActiveRecord/ModelSchema.html#method-c-schema_migrations_table_name","","<p>The name of the schema migrations table. By default, the value is <code>&quot;schema_migrations&quot;</code>.\n"],["schema_migrations_table_name=","ActiveRecord::ModelSchema","classes/ActiveRecord/ModelSchema.html#method-c-schema_migrations_table_name-3D","","<p>Sets the name of the schema migrations table.\n"],["schema_names","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-schema_names","()","<p>Returns an array of schema names.\n"],["schema_search_path","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-schema_search_path","()","<p>Returns the active schema search path.\n"],["schema_search_path=","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-schema_search_path-3D","(schema_csv)","<p>Sets the schema search path to a string of comma-separated schema names. Names beginning with $ have â€¦\n"],["schema_up_to_date?","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-schema_up_to_date-3F","(configuration, format = ActiveRecord.schema_format, file = nil)",""],["schema_version","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-schema_version","()","<p>Returns the version identifier of the schema currently available in the database. This is generally equal â€¦\n"],["scheme_for","ActiveRecord::Encryption::EncryptableRecord","classes/ActiveRecord/Encryption/EncryptableRecord.html#method-i-scheme_for","(key_provider: nil, key: nil, deterministic: false, downcase: false, ignore_case: false, previous: [], **context_properties)",""],["scope","ActionDispatch::Routing::Mapper::Scoping","classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-scope","(*args)","<p>Scopes a set of routes to the given default options.\n<p>Take the following route definition as an example: â€¦\n"],["scope","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-scope","()","<p>Returns a <code>Relation</code> object for the records in this association\n"],["scope","ActiveRecord::Scoping::Named::ClassMethods","classes/ActiveRecord/Scoping/Named/ClassMethods.html#method-i-scope","(name, body, &block)","<p>Adds a class method for retrieving and querying objects. The method is intended to return an ActiveRecord::Relation â€¦\n"],["scope_for","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-i-scope_for","(relation, owner = nil)",""],["scope_for_create","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-scope_for_create","()",""],["scoping","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-scoping","(all_queries: nil, &block)","<p>Scope all queries to the current scope.\n\n<pre><code>Comment.where(post_id: 1).scoping do\n  Comment.first\nend\n# =&gt; ...\n</code></pre>\n"],["search_field","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-search_field","","<p>Wraps ActionView::Helpers::FormHelper#search_field for form builders:\n\n<pre><code>&lt;%= form_with model: @user do |f| ...\n</code></pre>\n"],["search_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-search_field","(object_name, method, options = {})","<p>Returns an input of type â€œsearchâ€ for accessing a specified attribute (identified by <code>method</code> â€¦\n"],["search_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-search_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type â€œsearchâ€.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],["sec_fraction","Time","classes/Time.html#method-i-sec_fraction","()","<p>Returns the fraction of a second as a <code>Rational</code>\n\n<pre><code>Time.new(2012, 8, 29, 0, 0, 0.5).sec_fraction # =&gt; (1/2)\n</code></pre>\n"],["second","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-second","","<p>Same as #first except returns only the second record.\n"],["second","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-second","()","<p>Find the second record. If no order is defined it will order by primary key.\n\n<pre><code>Person.second # returns the ...\n</code></pre>\n"],["second","Array","classes/Array.html#method-i-second","()","<p>Equal to <code>self[1]</code>.\n\n<pre><code>%w( a b c d e ).second # =&gt; &quot;b&quot;\n</code></pre>\n"],["second","Numeric","classes/Numeric.html#method-i-second","()",""],["second!","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-second-21","()","<p>Same as #second but raises ActiveRecord::RecordNotFound if no record is found.\n"],["second_to_last","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-second_to_last","","<p>Same as #first except returns only the second-to-last record.\n"],["second_to_last","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-second_to_last","()","<p>Find the second-to-last record. If no order is defined it will order by primary key.\n\n<pre><code>Person.second_to_last ...\n</code></pre>\n"],["second_to_last","Array","classes/Array.html#method-i-second_to_last","()","<p>Equal to <code>self[-2]</code>.\n\n<pre><code>%w( a b c d e ).second_to_last # =&gt; &quot;d&quot;\n</code></pre>\n"],["second_to_last!","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-second_to_last-21","()","<p>Same as #second_to_last but raises ActiveRecord::RecordNotFound if no record is found.\n"],["seconds","Numeric","classes/Numeric.html#method-i-seconds","()","<p>Returns a Duration instance matching the number of seconds provided.\n\n<pre><code>2.seconds # =&gt; 2 seconds\n</code></pre>\n"],["seconds_since_midnight","DateTime","classes/DateTime.html#method-i-seconds_since_midnight","()","<p>Returns the number of seconds since 00:00:00.\n\n<pre><code>DateTime.new(2012, 8, 29,  0,  0,  0).seconds_since_midnight ...\n</code></pre>\n"],["seconds_since_midnight","Time","classes/Time.html#method-i-seconds_since_midnight","()","<p>Returns the number of seconds since 00:00:00.\n\n<pre><code>Time.new(2012, 8, 29,  0,  0,  0).seconds_since_midnight ...\n</code></pre>\n"],["seconds_to_utc_offset","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-seconds_to_utc_offset","(seconds, colon = true)","<p>Assumes self represents an offset from UTC in seconds (as returned from Time#utc_offset) and turns this â€¦\n"],["seconds_until_end_of_day","DateTime","classes/DateTime.html#method-i-seconds_until_end_of_day","()","<p>Returns the number of seconds until 23:59:59.\n\n<pre><code>DateTime.new(2012, 8, 29,  0,  0,  0).seconds_until_end_of_day ...\n</code></pre>\n"],["seconds_until_end_of_day","Time","classes/Time.html#method-i-seconds_until_end_of_day","()","<p>Returns the number of seconds until 23:59:59.\n\n<pre><code>Time.new(2012, 8, 29,  0,  0,  0).seconds_until_end_of_day ...\n</code></pre>\n"],["secret_key_base","Rails::Application","classes/Rails/Application.html#method-i-secret_key_base","()","<p>The secret_key_base is used as the input secret to the application&#39;s key generator, which in turn â€¦\n"],["secret_token","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-secret_token","(request)",""],["secrets","Rails::Application","classes/Rails/Application.html#method-i-secrets","()",""],["section","ActionDispatch::Routing::ConsoleFormatter::Base","classes/ActionDispatch/Routing/ConsoleFormatter/Base.html#method-i-section","(routes)",""],["section","ActionDispatch::Routing::ConsoleFormatter::Expanded","classes/ActionDispatch/Routing/ConsoleFormatter/Expanded.html#method-i-section","(routes)",""],["section","ActionDispatch::Routing::ConsoleFormatter::Sheet","classes/ActionDispatch/Routing/ConsoleFormatter/Sheet.html#method-i-section","(routes)",""],["section","ActionDispatch::Routing::HtmlTableFormatter","classes/ActionDispatch/Routing/HtmlTableFormatter.html#method-i-section","(routes)",""],["section_title","ActionDispatch::Routing::ConsoleFormatter::Base","classes/ActionDispatch/Routing/ConsoleFormatter/Base.html#method-i-section_title","(title)",""],["section_title","ActionDispatch::Routing::ConsoleFormatter::Expanded","classes/ActionDispatch/Routing/ConsoleFormatter/Expanded.html#method-i-section_title","(title)",""],["section_title","ActionDispatch::Routing::ConsoleFormatter::Sheet","classes/ActionDispatch/Routing/ConsoleFormatter/Sheet.html#method-i-section_title","(title)",""],["section_title","ActionDispatch::Routing::HtmlTableFormatter","classes/ActionDispatch/Routing/HtmlTableFormatter.html#method-i-section_title","(title)",""],["secure_compare","ActiveSupport::SecurityUtils","classes/ActiveSupport/SecurityUtils.html#method-c-secure_compare","(a, b)","<p>Secure string comparison for strings of variable length.\n<p>While a timing attack would not be able to discern â€¦\n"],["secure_compare!","ActiveSupport::SecureCompareRotator","classes/ActiveSupport/SecureCompareRotator.html#method-i-secure_compare-21","(other_value, on_rotation: @on_rotation)",""],["seed_loader","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-seed_loader","()",""],["select","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-select","(&block)","<p>Returns a new instance of <code>ActionController::Parameters</code> with only items that the block evaluates to true. â€¦\n"],["select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-select","(method, choices = nil, options = {}, html_options = {}, &block)","<p>Wraps ActionView::Helpers::FormOptionsHelper#select for form builders:\n\n<pre><code>&lt;%= form_for @post do |f| %&gt;\n  ...\n</code></pre>\n"],["select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-select","(object, method, choices = nil, options = {}, html_options = {}, &block)","<p>Create a select tag and a series of contained option tags for the provided object and method. The option â€¦\n"],["select","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-select","","<p>Works in two ways.\n<p><strong>First:</strong> Specify a subset of fields to be selected from the result set.\n\n<pre><code>class Person &lt; ...\n</code></pre>\n"],["select","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-select","(*fields)","<p>Works in two unique ways.\n<p>First: takes a block so it can be used just like <code>Array#select</code>.\n\n<pre><code>Model.all.select ...\n</code></pre>\n"],["select","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-select","(*args, &block)",""],["select","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-select","(*args, &block)",""],["select!","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-select-21","(&block)","<p>Equivalent to Hash#keep_if, but returns <code>nil</code> if no changes were made.\n"],["select_all","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_all","(arel, name = nil, binds = [], preparable: nil, async: false)","<p>Returns an ActiveRecord::Result instance.\n"],["select_all","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-select_all","(arel, name = nil, binds = [], preparable: nil, async: false)",""],["select_date","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_date","(date = Date.current, options = {}, html_options = {})","<p>Returns a set of HTML select-tags (one for year, month, and day) pre-selected with the <code>date</code>. It&#39;s â€¦\n"],["select_datetime","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_datetime","(datetime = Time.current, options = {}, html_options = {})","<p>Returns a set of HTML select-tags (one for year, month, day, hour, minute, and second) pre-selected with â€¦\n"],["select_day","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_day","(date, options = {}, html_options = {})","<p>Returns a select tag with options for each of the days 1 through 31 with the current day selected. The â€¦\n"],["select_hour","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_hour","(datetime, options = {}, html_options = {})","<p>Returns a select tag with options for each of the hours 0 through 23 with the current hour selected. â€¦\n"],["select_minute","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_minute","(datetime, options = {}, html_options = {})","<p>Returns a select tag with options for each of the minutes 0 through 59 with the current minute selected. â€¦\n"],["select_month","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_month","(date, options = {}, html_options = {})","<p>Returns a select tag with options for each of the months January through December with the current month â€¦\n"],["select_one","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_one","(arel, name = nil, binds = [])","<p>Returns a record hash with the column names as keys and column values as values.\n"],["select_rows","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_rows","(arel, name = nil, binds = [])","<p>Returns an array of arrays containing the field values. Order is the same as that returned by <code>columns</code> â€¦\n"],["select_second","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_second","(datetime, options = {}, html_options = {})","<p>Returns a select tag with options for each of the seconds 0 through 59 with the current second selected. â€¦\n"],["select_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-select_tag","(name, option_tags = nil, options = {})","<p>Creates a dropdown selection box, or if the <code>:multiple</code> option is set to true, a multiple choice selection â€¦\n"],["select_time","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_time","(datetime = Time.current, options = {}, html_options = {})","<p>Returns a set of HTML select-tags (one for hour and minute). You can set <code>:time_separator</code> key to format â€¦\n"],["select_value","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_value","(arel, name = nil, binds = [])","<p>Returns a single value from a record\n"],["select_values","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_values","(arel, name = nil, binds = [])","<p>Returns an array of the values of the first column in a select:\n\n<pre><code>select_values(&quot;SELECT id FROM companies ...\n</code></pre>\n"],["select_year","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_year","(date, options = {}, html_options = {})","<p>Returns a select tag with options for each of the five years on each side of the current, which is selected. â€¦\n"],["selector","ActionText::AttachmentGallery","classes/ActionText/AttachmentGallery.html#method-c-selector","()",""],["send_async","ActionCable::Connection::Base","classes/ActionCable/Connection/Base.html#method-i-send_async","(method, *arguments)","<p>Invoke a method on the connection asynchronously through the pool of thread workers.\n"],["send_blob_stream","ActiveStorage::Streaming","classes/ActiveStorage/Streaming.html#method-i-send_blob_stream","(blob, disposition: nil)","<p>Stream the blob from storage directly to the response. The disposition can be controlled by setting  â€¦\n"],["send_data","ActionController::DataStreaming","classes/ActionController/DataStreaming.html#method-i-send_data","(data, options = {})","<p>Sends the given binary data to the browser. This method is similar to <code>render plain: data</code>, but also allows â€¦\n"],["send_data","ActionController::Instrumentation","classes/ActionController/Instrumentation.html#method-i-send_data","(data, options = {})",""],["send_data","ActionController::LogSubscriber","classes/ActionController/LogSubscriber.html#method-i-send_data","(event)",""],["send_early_hints","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-send_early_hints","(links)","<p>Early Hints is an HTTP/2 status code that indicates hints to help a client start making preparations â€¦\n"],["send_file","ActionController::DataStreaming","classes/ActionController/DataStreaming.html#method-i-send_file","(path, options = {})","<p>Sends the file. This uses a server-appropriate method (such as X-Sendfile) via the Rack::Sendfile middleware. â€¦\n"],["send_file","ActionController::Instrumentation","classes/ActionController/Instrumentation.html#method-i-send_file","(path, options = {})",""],["send_file","ActionController::LogSubscriber","classes/ActionController/LogSubscriber.html#method-i-send_file","(event)",""],["send_file","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-send_file","(path)","<p>Send the file stored at <code>path</code> as the response body.\n"],["send_stream","ActionController::Live","classes/ActionController/Live.html#method-i-send_stream","(filename:, disposition: \"attachment\", type: nil)","<p>Sends a stream to the browser, which is helpful when you&#39;re generating exports or other running data â€¦\n"],["sending!","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-sending-21","()",""],["sending?","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-sending-3F","()",""],["sending_file=","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-sending_file-3D","(v)",""],["sent!","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-sent-21","()",""],["sent?","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-sent-3F","()",""],["sequence_name","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-sequence_name","()",""],["sequence_name=","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-sequence_name-3D","(value)","<p>Sets the name of the sequence to use when generating ids to the given value, or (if the value is <code>nil</code> â€¦\n"],["serial","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-serial","",""],["serial_sequence","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-serial_sequence","(table, column)",""],["serializable?","ActiveModel::Type::Value","classes/ActiveModel/Type/Value.html#method-i-serializable-3F","(value)","<p>Returns true if this type can convert <code>value</code> to a type that is usable by the database.  For example a â€¦\n"],["serializable?","ActiveModel::Type::Value","classes/ActiveModel/Type/Value.html#method-i-serializable-3F","(value)","<p>Returns true if this type can convert <code>value</code> to a type that is usable by the database.  For example a â€¦\n"],["serializable_hash","ActiveModel::Serialization","classes/ActiveModel/Serialization.html#method-i-serializable_hash","(options = nil)","<p>Returns a serialized hash of your object.\n\n<pre><code>class Person\n  include ActiveModel::Serialization\n\n  attr_accessor ...\n</code></pre>\n"],["serializable_hash","ActiveRecord::Serialization","classes/ActiveRecord/Serialization.html#method-i-serializable_hash","(options = nil)",""],["serialize","ActiveJob::Arguments","classes/ActiveJob/Arguments.html#method-i-serialize","(arguments)","<p>Serializes a set of arguments. Intrinsic types that can safely be serialized without mutation are returned â€¦\n"],["serialize","ActiveJob::Core","classes/ActiveJob/Core.html#method-i-serialize","()","<p>Returns a hash with the job data that can safely be passed to the queuing adapter.\n"],["serialize","ActiveJob::Serializers::ObjectSerializer","classes/ActiveJob/Serializers/ObjectSerializer.html#method-i-serialize","(hash)","<p>Serializes an argument to a JSON primitive type.\n"],["serialize","ActiveJob::Serializers::RangeSerializer","classes/ActiveJob/Serializers/RangeSerializer.html#method-i-serialize","(range)",""],["serialize","ActiveModel::Type::Value","classes/ActiveModel/Type/Value.html#method-i-serialize","(value)","<p>Casts a value from the ruby type to a type that the database knows how to understand. The returned value â€¦\n"],["serialize","ActiveModel::Type::Value","classes/ActiveModel/Type/Value.html#method-i-serialize","(value)","<p>Casts a value from the ruby type to a type that the database knows how to understand. The returned value â€¦\n"],["serialize","ActiveRecord::AttributeMethods::Serialization::ClassMethods","classes/ActiveRecord/AttributeMethods/Serialization/ClassMethods.html#method-i-serialize","(attr_name, class_name_or_coder = Object, **options)","<p>If you have an attribute that needs to be saved to the database as a serialized object, and retrieved â€¦\n"],["serialize","ActiveRecord::Encryption::EncryptedAttributeType","classes/ActiveRecord/Encryption/EncryptedAttributeType.html#method-i-serialize","(value)",""],["serialize","ActiveRecord::Encryption::ExtendedDeterministicQueries::ExtendedEncryptableType","classes/ActiveRecord/Encryption/ExtendedDeterministicQueries/ExtendedEncryptableType.html#method-i-serialize","(data)",""],["serialize","ActiveRecord::Type::Json","classes/ActiveRecord/Type/Json.html#method-i-serialize","(value)",""],["serialize","ActiveRecord::Type::Time","classes/ActiveRecord/Type/Time.html#method-i-serialize","(value)",""],["serialize?","ActiveJob::Serializers::ObjectSerializer","classes/ActiveJob/Serializers/ObjectSerializer.html#method-i-serialize-3F","(argument)","<p>Determines if an argument should be serialized by a serializer.\n"],["served_url","Rails::Server","classes/Rails/Server.html#method-i-served_url","()",""],["server","Rails::Application","classes/Rails/Application.html#method-i-server","(&blk)","<p>Sends any server called in the instance of a new application up to the <code>server</code> method defined in Rails::Railtie â€¦\n"],["server","Rails::Railtie","classes/Rails/Railtie.html#method-c-server","(&blk)",""],["server_port","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-server_port","()","<p>Returns the requested port, such as 8080, based on SERVER_PORT\n\n<pre><code>req = ActionDispatch::Request.new &#39;SERVER_PORT&#39; ...\n</code></pre>\n"],["server_software","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-server_software","()","<p>Returns the lowercase name of the HTTP server software.\n"],["service","ActiveStorage::Blob","classes/ActiveStorage/Blob.html#method-i-service","()","<p>Returns an instance of service, which can be configured globally or per attachment\n"],["service_delete","ActiveStorage::LogSubscriber","classes/ActiveStorage/LogSubscriber.html#method-i-service_delete","(event)",""],["service_delete_prefixed","ActiveStorage::LogSubscriber","classes/ActiveStorage/LogSubscriber.html#method-i-service_delete_prefixed","(event)",""],["service_download","ActiveStorage::LogSubscriber","classes/ActiveStorage/LogSubscriber.html#method-i-service_download","(event)",""],["service_exist","ActiveStorage::LogSubscriber","classes/ActiveStorage/LogSubscriber.html#method-i-service_exist","(event)",""],["service_headers_for_direct_upload","ActiveStorage::Blob","classes/ActiveStorage/Blob.html#method-i-service_headers_for_direct_upload","()","<p>Returns a Hash of headers for <code>service_url_for_direct_upload</code> requests.\n"],["service_mirror","ActiveStorage::LogSubscriber","classes/ActiveStorage/LogSubscriber.html#method-i-service_mirror","(event)",""],["service_streaming_download","ActiveStorage::LogSubscriber","classes/ActiveStorage/LogSubscriber.html#method-i-service_streaming_download","(event)",""],["service_upload","ActiveStorage::LogSubscriber","classes/ActiveStorage/LogSubscriber.html#method-i-service_upload","(event)",""],["service_url","ActiveStorage::LogSubscriber","classes/ActiveStorage/LogSubscriber.html#method-i-service_url","(event)",""],["service_url_for_direct_upload","ActiveStorage::Blob","classes/ActiveStorage/Blob.html#method-i-service_url_for_direct_upload","(expires_in: ActiveStorage.service_urls_expire_in)","<p>Returns a URL that can be used to directly upload a file for this blob on the service. This URL is intended â€¦\n"],["session","ActionDispatch::TestProcess","classes/ActionDispatch/TestProcess.html#method-i-session","()",""],["session_auth=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-session_auth-3D","(user)","<p>Set the authorized user for this session\n"],["session_options=","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-session_options-3D","(options)",""],["session_store","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-session_store","(new_session_store = nil, **options)","<p>Specifies what class to use to store the session. Possible values are <code>:cookie_store</code>, <code>:mem_cache_store</code> â€¦\n"],["set","ActiveJob::Core::ClassMethods","classes/ActiveJob/Core/ClassMethods.html#method-i-set","(options = {})","<p>Creates a job preconfigured with the given options. You can call perform_later with the job arguments â€¦\n"],["set","ActiveSupport::CurrentAttributes","classes/ActiveSupport/CurrentAttributes.html#method-i-set","(set_attributes)","<p>Expose one or more attributes within a block. Old values are returned after the block concludes. Example â€¦\n"],["set_application_directory!","Rails::Command::Actions","classes/Rails/Command/Actions.html#method-i-set_application_directory-21","()","<p>Change to the application&#39;s path if there is no <code>config.ru</code> file in current directory. This allows â€¦\n"],["set_callback","ActiveSupport::Callbacks::ClassMethods","classes/ActiveSupport/Callbacks/ClassMethods.html#method-i-set_callback","(name, *filter_list, &block)","<p>Install a callback for the given event.\n\n<pre><code>set_callback :save, :before, :before_method\nset_callback :save, ...\n</code></pre>\n"],["set_content_type","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-set_content_type","(m, user_content_type, class_default)","<p>Used by #mail to set the content type of the message.\n<p>It will use the given <code>user_content_type</code>, or multipart â€¦\n"],["set_context","ActiveSupport::ErrorReporter","classes/ActiveSupport/ErrorReporter.html#method-i-set_context","(...)","<p>Update the execution context that is accessible to error subscribers\n\n<pre><code>Rails.error.set_context(section: ...\n</code></pre>\n"],["set_environment","Rails::Server","classes/Rails/Server.html#method-i-set_environment","()",""],["set_environment!","Rails::Console","classes/Rails/Console.html#method-i-set_environment-21","()",""],["set_fixture_class","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-set_fixture_class","(class_names = {})","<p>Sets the model class for a fixture when the class name cannot be inferred from the fixture name.\n<p>Examples: â€¦\n"],["set_header","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-set_header","(key, v)",""],["set_logger","ActiveSupport::LogSubscriber::TestHelper","classes/ActiveSupport/LogSubscriber/TestHelper.html#method-i-set_logger","(logger)","<p>Overwrite if you use another logger in your log subscriber.\n\n<pre><code>def logger\n  ActiveRecord::Base.logger = @logger ...\n</code></pre>\n"],["set_member_mappings_for_resource","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-set_member_mappings_for_resource","()",""],["set_migration_assigns!","Rails::Generators::Migration","classes/Rails/Generators/Migration.html#method-i-set_migration_assigns-21","(destination)",""],["set_standard_conforming_strings","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-set_standard_conforming_strings","()",""],["setup","ActiveSupport::Testing::SetupAndTeardown::ClassMethods","classes/ActiveSupport/Testing/SetupAndTeardown/ClassMethods.html#method-i-setup","(*args, &block)","<p>Add a callback, which runs before <code>TestCase#setup</code>.\n"],["setup_controller_request_and_response","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-setup_controller_request_and_response","()",""],["setup_fixture_accessors","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-setup_fixture_accessors","(fixture_set_names = nil)",""],["setup_fixtures","ActiveRecord::TestFixtures","classes/ActiveRecord/TestFixtures.html#method-i-setup_fixtures","(config = ActiveRecord::Base)",""],["setup_horo_variables","Rails::API::Task","classes/Rails/API/Task.html#method-i-setup_horo_variables","()",""],["setup_initial_database_yaml","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-setup_initial_database_yaml","()",""],["setup_with_controller","ActionView::TestCase::Behavior","classes/ActionView/TestCase/Behavior.html#method-i-setup_with_controller","()",""],["shallow","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-shallow","()",""],["shallow?","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-shallow-3F","()",""],["shard","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-shard","()","<p>The shard (e.g. <code>:default</code>) for the current connection. In a non-sharded application, <code>:default</code> is returned. â€¦\n"],["shard_swapping_prohibited?","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-shard_swapping_prohibited-3F","()","<p>Determine whether or not shard swapping is currently prohibited\n"],["sharing","ActiveSupport::Concurrency::ShareLock","classes/ActiveSupport/Concurrency/ShareLock.html#method-i-sharing","()","<p>Execute the supplied block while holding the Share lock.\n"],["short_identifier","ActionView::Template","classes/ActionView/Template.html#method-i-short_identifier","()",""],["should_apply_vary_header?","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-should_apply_vary_header-3F","()",""],["show","ActiveStorage::Blobs::ProxyController","classes/ActiveStorage/Blobs/ProxyController.html#method-i-show","()",""],["show","ActiveStorage::Blobs::RedirectController","classes/ActiveStorage/Blobs/RedirectController.html#method-i-show","()",""],["show","ActiveStorage::DiskController","classes/ActiveStorage/DiskController.html#method-i-show","()",""],["show","ActiveStorage::Representations::ProxyController","classes/ActiveStorage/Representations/ProxyController.html#method-i-show","()",""],["show","ActiveStorage::Representations::RedirectController","classes/ActiveStorage/Representations/RedirectController.html#method-i-show","()",""],["show","Rails::Rails::Conductor::ActionMailbox::InboundEmailsController","classes/Rails/Rails/Conductor/ActionMailbox/InboundEmailsController.html#method-i-show","()",""],["show_detailed_exceptions?","ActionController::Rescue","classes/ActionController/Rescue.html#method-i-show_detailed_exceptions-3F","()","<p>Override this method if you want to customize when detailed exceptions must be shown. This method is â€¦\n"],["show_helper","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-show_helper","(arg = \"@#{singular_table_name}\", type: :url)",""],["show_variable","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-show_variable","(name)","<p>SHOW VARIABLES LIKE &#39;name&#39;\n"],["shutdown","ActionCable::SubscriptionAdapter::Base","classes/ActionCable/SubscriptionAdapter/Base.html#method-i-shutdown","()",""],["shutdown","ActionCable::SubscriptionAdapter::PostgreSQL::Listener","classes/ActionCable/SubscriptionAdapter/PostgreSQL/Listener.html#method-i-shutdown","()",""],["shutdown","ActionCable::SubscriptionAdapter::Redis::Listener","classes/ActionCable/SubscriptionAdapter/Redis/Listener.html#method-i-shutdown","()",""],["shutdown","ActiveSupport::Testing::Parallelization::Server","classes/ActiveSupport/Testing/Parallelization/Server.html#method-i-shutdown","()",""],["signed","ActionCable::Connection::TestCookieJar","classes/ActionCable/Connection/TestCookieJar.html#method-i-signed","()",""],["signed","ActionDispatch::Cookies::ChainedCookieJars","classes/ActionDispatch/Cookies/ChainedCookieJars.html#method-i-signed","()","<p>Returns a jar that&#39;ll automatically generate a signed representation of cookie value and verify it â€¦\n"],["signed_id","ActiveRecord::SignedId","classes/ActiveRecord/SignedId.html#method-i-signed_id","(expires_in: nil, purpose: nil)","<p>Returns a signed id that&#39;s generated using a preconfigured <code>ActiveSupport::MessageVerifier</code> instance. â€¦\n"],["signed_id","ActiveStorage::Blob","classes/ActiveStorage/Blob.html#method-i-signed_id","(purpose: :blob_id, expires_in: nil)","<p>Returns a signed ID for this blob that&#39;s suitable for reference on the client-side without fear of â€¦\n"],["signed_id_verifier","ActiveRecord::SignedId::ClassMethods","classes/ActiveRecord/SignedId/ClassMethods.html#method-i-signed_id_verifier","()","<p>The verifier instance that all signed ids are generated and verified from. By default, it&#39;ll be initialized â€¦\n"],["signed_id_verifier=","ActiveRecord::SignedId::ClassMethods","classes/ActiveRecord/SignedId/ClassMethods.html#method-i-signed_id_verifier-3D","(verifier)","<p>Allows you to pass in a custom verifier used for the signed ids. This also allows you to use different â€¦\n"],["signed_or_encrypted","ActionDispatch::Cookies::ChainedCookieJars","classes/ActionDispatch/Cookies/ChainedCookieJars.html#method-i-signed_or_encrypted","()","<p>Returns the <code>signed</code> or <code>encrypted</code> jar, preferring <code>encrypted</code> if <code>secret_key_base</code> is set. Used by ActionDispatch::Session::CookieStore â€¦\n"],["silence","ActiveSupport::Deprecation::Reporting","classes/ActiveSupport/Deprecation/Reporting.html#method-i-silence","(&block)","<p>Silence deprecation warnings within the block.\n\n<pre><code>ActiveSupport::Deprecation.warn(&#39;something broke!&#39;)\n# =&gt; ...\n</code></pre>\n"],["silence","ActiveSupport::LoggerSilence","classes/ActiveSupport/LoggerSilence.html#method-i-silence","(severity = Logger::ERROR)","<p>Silences the logger for the duration of the block.\n"],["silence!","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-silence-21","()","<p>Silences the logger.\n"],["silence_redefinition_of_method","Module","classes/Module.html#method-i-silence_redefinition_of_method","(method)","<p>Marks the named method as intended to be redefined, if it exists. Suppresses the Ruby method redefinition â€¦\n"],["silence_warnings","Kernel","classes/Kernel.html#method-i-silence_warnings","(&block)","<p>Sets $VERBOSE to <code>nil</code> for the duration of the block and back to its original value afterwards.\n\n<pre><code>silence_warnings ...\n</code></pre>\n"],["silenced","ActiveSupport::Deprecation::Reporting","classes/ActiveSupport/Deprecation/Reporting.html#method-i-silenced","()",""],["simple_format","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-simple_format","(text, html_options = {}, options = {})","<p>Returns <code>text</code> transformed into HTML using simple formatting rules. Two or more consecutive newlines ( â€¦\n"],["since","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-since","(time = ::Time.current)","<p>Calculates a new Time or Date that is as far in the future as this Duration represents.\n"],["since","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-since","(other)",""],["since","Date","classes/Date.html#method-i-since","(seconds)","<p>Converts Date to a Time (or DateTime if necessary) with the time portion set to the beginning of the â€¦\n"],["since","DateTime","classes/DateTime.html#method-i-since","(seconds)","<p>Returns a new DateTime representing the time a number of seconds since the instance time. Do not use â€¦\n"],["since","Time","classes/Time.html#method-i-since","(seconds)","<p>Returns a new Time representing the time a number of seconds since the instance time\n"],["singular","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-singular","(record_or_class)","<p>Returns the singular class name of a record or class.\n\n<pre><code>ActiveModel::Naming.singular(post)             # ...\n</code></pre>\n"],["singular","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-i-singular","(rule, replacement)","<p>Specifies a new singularization rule and its replacement. The rule can either be a string or a regular â€¦\n"],["singular_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-singular_name","()","<p>FIXME: We are avoiding to use alias because a bug on thor that make this method public and add it to â€¦\n"],["singular_route_key","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-singular_route_key","(record_or_class)","<p>Returns string to use while generating route names. It differs for namespaced models regarding whether â€¦\n"],["singular_route_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-singular_route_name","()",""],["singular_table_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-singular_table_name","()",""],["singularize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-singularize","(word, locale = :en)","<p>The reverse of #pluralize, returns the singular form of a word in a string.\n<p>If passed an optional <code>locale</code> â€¦\n"],["singularize","String","classes/String.html#method-i-singularize","(locale = :en)","<p>The reverse of <code>pluralize</code>, returns the singular form of a word in a string.\n<p>If the optional parameter  â€¦\n"],["size","ActionDispatch::Http::UploadedFile","classes/ActionDispatch/Http/UploadedFile.html#method-i-size","()","<p>Shortcut for <code>tempfile.size</code>.\n"],["size","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-size","()",""],["size","ActionText::AttachmentGallery","classes/ActionText/AttachmentGallery.html#method-i-size","()",""],["size","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-size","()","<p>Returns the size of the collection. If the collection hasn&#39;t been loaded, it executes a <code>SELECT COUNT(*)</code> â€¦\n"],["size","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-size","()",""],["size","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-i-size","()",""],["size","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-size","()","<p>Returns size of the records.\n"],["skip_after_action","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-skip_after_action","","<p>Skip a callback after actions. See _insert_callbacks for parameter details.\n"],["skip_around_action","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-skip_around_action","","<p>Skip a callback around actions. See _insert_callbacks for parameter details.\n"],["skip_before_action","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-skip_before_action","","<p>Skip a callback before actions. See _insert_callbacks for parameter details.\n"],["skip_callback","ActiveSupport::Callbacks::ClassMethods","classes/ActiveSupport/Callbacks/ClassMethods.html#method-i-skip_callback","(name, *filter_list, &block)","<p>Skip a previously set callback. Like <code>set_callback</code>, <code>:if</code> or <code>:unless</code> options may be passed in order to control â€¦\n"],["skip_forgery_protection","ActionController::RequestForgeryProtection::ClassMethods","classes/ActionController/RequestForgeryProtection/ClassMethods.html#method-i-skip_forgery_protection","(options = {})","<p>Turn off request forgery protection. This is a wrapper for:\n\n<pre><code>skip_before_action :verify_authenticity_token\n</code></pre>\n"],["skip_parameter_encoding","ActionController::ParameterEncoding::ClassMethods","classes/ActionController/ParameterEncoding/ClassMethods.html#method-i-skip_parameter_encoding","(action)","<p>Specify that a given action&#39;s parameters should all be encoded as ASCII-8BIT (it â€œskipsâ€ â€¦\n"],["slice","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-slice","(*keys)","<p>Returns a new <code>ActionController::Parameters</code> instance that includes only the given <code>keys</code>. If the given  â€¦\n"],["slice","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-slice","(*methods)","<p>Returns a hash of the given methods with their names as keys and returned values as values.\n"],["slice","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-slice","(*keys)",""],["slice","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-slice","(*keys)",""],["slice!","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-slice-21","(*keys)","<p>Returns current <code>ActionController::Parameters</code> instance which contains only the given <code>keys</code>.\n"],["slice!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-slice-21","(*keys)",""],["slice!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-slice-21","(*keys)",""],["slice!","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-slice-21","(*args)","<p>Works like <code>String#slice!</code>, but returns an instance of Chars, or <code>nil</code> if the string was not modified. The â€¦\n"],["slice!","Hash","classes/Hash.html#method-i-slice-21","(*keys)","<p>Replaces the hash with only the given keys. Returns a hash containing the removed key/value pairs.\n\n<pre><code>hash ...\n</code></pre>\n"],["sms_to","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-sms_to","(phone_number, name = nil, html_options = {}, &block)","<p>Creates an SMS anchor link tag to the specified <code>phone_number</code>. When the link is clicked, the default  â€¦\n"],["sole","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-sole","()","<p>Finds the sole matching record. Raises ActiveRecord::RecordNotFound if no record is found. Raises ActiveRecord::SoleRecordExceeded â€¦\n"],["sole","Enumerable","classes/Enumerable.html#method-i-sole","()","<p>Returns the sole item in the enumerable. If there are no items, or more than one item, raises <code>Enumerable::SoleItemExpectedError</code> â€¦\n"],["sorted_groups","Rails::Generators","classes/Rails/Generators.html#method-c-sorted_groups","()",""],["source","ActionMailbox::InboundEmail","classes/ActionMailbox/InboundEmail.html#method-i-source","()",""],["source","ActionView::Template","classes/ActionView/Template.html#method-i-source","()",""],["source_attribute_from_preserved_attribute","ActiveRecord::Encryption::EncryptableRecord","classes/ActiveRecord/Encryption/EncryptableRecord.html#method-i-source_attribute_from_preserved_attribute","(attribute_name)","<p>Given a attribute name, it returns the name of the source attribute when it&#39;s a preserved one.\n"],["source_extracts","ActionDispatch::ExceptionWrapper","classes/ActionDispatch/ExceptionWrapper.html#method-i-source_extracts","()",""],["source_root","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-source_root","(path = nil)","<p>Returns the source root for this generator using default_source_root as default.\n"],["source_to_show_id","ActionDispatch::ExceptionWrapper","classes/ActionDispatch/ExceptionWrapper.html#method-i-source_to_show_id","()",""],["split","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-split","(*args)","<p>Works just like <code>String#split</code>, with the exception that the items in the resulting list are Chars instances â€¦\n"],["split","Array","classes/Array.html#method-i-split","(value = nil, &block)","<p>Divides the array into one or more subarrays based on a delimiting <code>value</code> or the result of an optional â€¦\n"],["sql","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-i-sql","(event)",""],["sql","Arel","classes/Arel.html#method-c-sql","(raw_sql)","<p>Wrap a known-safe SQL string for passing to query methods, e.g.\n\n<pre><code>Post.order(Arel.sql(&quot;REPLACE(title, &#39;misc&#39;, ...\n</code></pre>\n"],["squish","String","classes/String.html#method-i-squish","()","<p>Returns the string, first removing all whitespace on both ends of the string, and then changing remaining â€¦\n"],["squish!","String","classes/String.html#method-i-squish-21","()","<p>Performs a destructive squish. See String#squish.\n\n<pre><code>str = &quot; foo   bar    \\n   \\t   boo&quot;\nstr.squish!     ...\n</code></pre>\n"],["stale?","ActionController::ConditionalGet","classes/ActionController/ConditionalGet.html#method-i-stale-3F","(object = nil, **freshness_kwargs)","<p>Sets the <code>etag</code> and/or <code>last_modified</code> on the response and checks it against the client request. If the request â€¦\n"],["stale_session_check!","ActionDispatch::Session::StaleSessionCheck","classes/ActionDispatch/Session/StaleSessionCheck.html#method-i-stale_session_check-21","()",""],["standard_port","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-standard_port","()","<p>Returns the standard port number for this request&#39;s protocol.\n\n<pre><code>req = ActionDispatch::Request.new &#39;HTTP_HOST&#39; ...\n</code></pre>\n"],["standard_port?","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-standard_port-3F","()","<p>Returns whether this request is using the standard port\n\n<pre><code>req = ActionDispatch::Request.new &#39;HTTP_HOST&#39; ...\n</code></pre>\n"],["start","ActionView::LogSubscriber","classes/ActionView/LogSubscriber.html#method-i-start","(name, id, payload)",""],["start","ActiveSupport::LogSubscriber","classes/ActiveSupport/LogSubscriber.html#method-i-start","(name, id, payload)",""],["start","ActiveSupport::Notifications::Fanout","classes/ActiveSupport/Notifications/Fanout.html#method-i-start","(name, id, payload)",""],["start","ActiveSupport::Notifications::Fanout::Subscribers::EventObject","classes/ActiveSupport/Notifications/Fanout/Subscribers/EventObject.html#method-i-start","(name, id, payload)",""],["start","ActiveSupport::Notifications::Instrumenter","classes/ActiveSupport/Notifications/Instrumenter.html#method-i-start","(name, payload)","<p>Send a start notification with <code>name</code> and <code>payload</code>.\n"],["start","ActiveSupport::Subscriber","classes/ActiveSupport/Subscriber.html#method-i-start","(name, id, payload)",""],["start","ActiveSupport::Testing::Parallelization::Worker","classes/ActiveSupport/Testing/Parallelization/Worker.html#method-i-start","()",""],["start","Rails::Console","classes/Rails/Console.html#method-c-start","(*args)",""],["start","Rails::Console","classes/Rails/Console.html#method-i-start","()",""],["start","Rails::DBConsole","classes/Rails/DBConsole.html#method-c-start","(*args)",""],["start","Rails::DBConsole","classes/Rails/DBConsole.html#method-i-start","()",""],["start","Rails::Server","classes/Rails/Server.html#method-i-start","(after_stop_callback = nil)",""],["start!","ActiveSupport::Notifications::Event","classes/ActiveSupport/Notifications/Event.html#method-i-start-21","()","<p>Record information at the time this event starts\n"],["start_document","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-start_document","()",""],["start_element","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-start_element","(name, attrs = [])",""],["start_exclusive","ActiveSupport::Concurrency::ShareLock","classes/ActiveSupport/Concurrency/ShareLock.html#method-i-start_exclusive","(purpose: nil, compatible: [], no_wait: false)","<p>Returns false if <code>no_wait</code> is set and the lock is not immediately available. Otherwise, returns true after â€¦\n"],["start_periodic_timers","ActionCable::Channel::ChannelStub","classes/ActionCable/Channel/ChannelStub.html#method-i-start_periodic_timers","()","<p>Make periodic timers no-op\n"],["start_processing","ActionController::LogSubscriber","classes/ActionController/LogSubscriber.html#method-i-start_processing","(event)",""],["start_running","ActiveSupport::Dependencies::Interlock","classes/ActiveSupport/Dependencies/Interlock.html#method-i-start_running","()",""],["start_sharing","ActiveSupport::Concurrency::ShareLock","classes/ActiveSupport/Concurrency/ShareLock.html#method-i-start_sharing","()",""],["start_unloading","ActiveSupport::Dependencies::Interlock","classes/ActiveSupport/Dependencies/Interlock.html#method-i-start_unloading","()",""],["start_worker","ActiveSupport::Testing::Parallelization::Server","classes/ActiveSupport/Testing/Parallelization/Server.html#method-i-start_worker","(worker_id)",""],["started_request_message","Rails::Rack::Logger","classes/Rails/Rack/Logger.html#method-i-started_request_message","(request)","<p>Started GET â€œ/session/newâ€ for 127.0.0.1 at 2012-09-26 14:51:42 -0700\n"],["stat","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-stat","()","<p>Return connection pool&#39;s usage statistic Example:\n\n<pre><code>ActiveRecord::Base.connection_pool.stat # =&gt; { size: ...\n</code></pre>\n"],["statistics","ActionCable::Connection::Base","classes/ActionCable/Connection/Base.html#method-i-statistics","()","<p>Return a basic hash of statistics for the connection keyed with <code>identifier</code>, <code>started_at</code>, <code>subscriptions</code> â€¦\n"],["stats","ActiveSupport::Cache::MemCacheStore","classes/ActiveSupport/Cache/MemCacheStore.html#method-i-stats","()","<p>Get the statistics from the memcached servers.\n"],["stats","ActiveSupport::Cache::RedisCacheStore","classes/ActiveSupport/Cache/RedisCacheStore.html#method-i-stats","()","<p>Get info from redis servers.\n"],["status=","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-status-3D","(status)","<p>Sets the HTTP status code.\n"],["status_code","ActionDispatch::ExceptionWrapper","classes/ActionDispatch/ExceptionWrapper.html#method-i-status_code","()",""],["status_code_for_exception","ActionDispatch::ExceptionWrapper","classes/ActionDispatch/ExceptionWrapper.html#method-c-status_code_for_exception","(class_name)",""],["status_message","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-status_message","()",""],["sti_class_for","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-sti_class_for","(type_name)","<p>Returns the class for the provided <code>type_name</code>.\n<p>It is used to find the class correspondent to the value â€¦\n"],["sti_name","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-sti_name","()","<p>Returns the value to be stored in the inheritance column for STI.\n"],["stop","ActionCable::Connection::StreamEventLoop","classes/ActionCable/Connection/StreamEventLoop.html#method-i-stop","()",""],["stop_all_streams","ActionCable::Channel::ChannelStub","classes/ActionCable/Channel/ChannelStub.html#method-i-stop_all_streams","()",""],["stop_all_streams","ActionCable::Channel::Streams","classes/ActionCable/Channel/Streams.html#method-i-stop_all_streams","()","<p>Unsubscribes all streams associated with this channel from the pubsub queue.\n"],["stop_exclusive","ActiveSupport::Concurrency::ShareLock","classes/ActiveSupport/Concurrency/ShareLock.html#method-i-stop_exclusive","(compatible: [])","<p>Relinquish the exclusive lock. Must only be called by the thread that called start_exclusive (and currently â€¦\n"],["stop_periodic_timers","ActionCable::Channel::ChannelStub","classes/ActionCable/Channel/ChannelStub.html#method-i-stop_periodic_timers","()",""],["stop_sharing","ActiveSupport::Concurrency::ShareLock","classes/ActiveSupport/Concurrency/ShareLock.html#method-i-stop_sharing","()",""],["stop_stream_for","ActionCable::Channel::Streams","classes/ActionCable/Channel/Streams.html#method-i-stop_stream_for","(model)","<p>Unsubscribes streams for the <code>model</code>.\n"],["stop_stream_from","ActionCable::Channel::Streams","classes/ActionCable/Channel/Streams.html#method-i-stop_stream_from","(broadcasting)","<p>Unsubscribes streams from the named <code>broadcasting</code>.\n"],["stop_worker","ActiveSupport::Testing::Parallelization::Server","classes/ActiveSupport/Testing/Parallelization/Server.html#method-i-stop_worker","(worker_id)",""],["storage","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-storage","()",""],["store","ActiveRecord::Store::ClassMethods","classes/ActiveRecord/Store/ClassMethods.html#method-i-store","(store_attribute, options = {})",""],["store","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-store","(key, value)",""],["store","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-store","(key, value)",""],["store_accessor","ActiveRecord::Store::ClassMethods","classes/ActiveRecord/Store/ClassMethods.html#method-i-store_accessor","(store_attribute, *keys, prefix: nil, suffix: nil)",""],["store_inherited","ActiveSupport::DescendantsTracker","classes/ActiveSupport/DescendantsTracker.html#method-c-store_inherited","(klass, descendant)","<p>This is the only method that is not thread safe, but is only ever called during the eager loading phase. â€¦\n"],["stored_attributes","ActiveRecord::Store::ClassMethods","classes/ActiveRecord/Store/ClassMethods.html#method-i-stored_attributes","()",""],["stream_for","ActionCable::Channel::Streams","classes/ActionCable/Channel/Streams.html#method-i-stream_for","(model, callback = nil, coder: nil, &block)","<p>Start streaming the pubsub queue for the <code>model</code> in this channel. Optionally, you can pass a <code>callback</code> that&#39;ll â€¦\n"],["stream_from","ActionCable::Channel::ChannelStub","classes/ActionCable/Channel/ChannelStub.html#method-i-stream_from","(broadcasting, *)",""],["stream_from","ActionCable::Channel::Streams","classes/ActionCable/Channel/Streams.html#method-i-stream_from","(broadcasting, callback = nil, coder: nil, &block)","<p>Start streaming from the named <code>broadcasting</code> pubsub queue. Optionally, you can pass a <code>callback</code> that&#39;ll â€¦\n"],["stream_or_reject_for","ActionCable::Channel::Streams","classes/ActionCable/Channel/Streams.html#method-i-stream_or_reject_for","(model)","<p>Calls stream_for with the given <code>model</code> if it&#39;s present to start streaming, otherwise rejects the subscription. â€¦\n"],["streams","ActionCable::Channel::ChannelStub","classes/ActionCable/Channel/ChannelStub.html#method-i-streams","()",""],["strftime","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-strftime","(format)","<p>Replaces <code>%Z</code> directive with +zone before passing to Time#strftime, so that zone information is correct. â€¦\n"],["strict_loading","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-strict_loading","(value = true)","<p>Sets the returned relation to strict_loading mode. This will raise an error if the record tries to lazily â€¦\n"],["strict_loading!","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-strict_loading-21","(value = true, mode: :all)","<p>Sets the record to strict_loading mode. This will raise an error if the record tries to lazily load an â€¦\n"],["strict_loading?","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-strict_loading-3F","()","<p>Returns <code>true</code> if the record is in strict_loading mode.\n"],["strict_loading_n_plus_one_only?","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-strict_loading_n_plus_one_only-3F","()","<p>Returns <code>true</code> if the record uses strict_loading with <code>:n_plus_one_only</code> mode enabled.\n"],["strict_loading_violation","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-i-strict_loading_violation","(event)",""],["strict_match?","ActiveModel::Error","classes/ActiveModel/Error.html#method-i-strict_match-3F","(attribute, type, **options)","<p>See if error matches provided <code>attribute</code>, <code>type</code>, and <code>options</code> exactly.\n<p>All params must be equal to Error&#39;s â€¦\n"],["strict_mode?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-strict_mode-3F","()",""],["stringify_array","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-stringify_array","(array)",""],["stringify_keys","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys","()",""],["stringify_keys","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys","()",""],["stringify_keys","Hash","classes/Hash.html#method-i-stringify_keys","()","<p>Returns a new hash with all keys converted to strings.\n\n<pre><code>hash = { name: &#39;Rob&#39;, age: &#39;28&#39; }\n\nhash.stringify_keys ...\n</code></pre>\n"],["stringify_keys!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys-21","()",""],["stringify_keys!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys-21","()",""],["stringify_keys!","Hash","classes/Hash.html#method-i-stringify_keys-21","()","<p>Destructively converts all keys to strings. Same as <code>stringify_keys</code>, but modifies <code>self</code>.\n"],["strip_heredoc","String","classes/String.html#method-i-strip_heredoc","()","<p>Strips indentation in heredocs.\n<p>For example in\n\n<pre><code>if options[:usage]\n  puts &lt;&lt;-USAGE.strip_heredoc\n    This ...\n</code></pre>\n"],["strip_links","ActionView::Helpers::SanitizeHelper","classes/ActionView/Helpers/SanitizeHelper.html#method-i-strip_links","(html)","<p>Strips all link tags from <code>html</code> leaving just the link text.\n\n<pre><code>strip_links(&#39;&lt;a href=&quot;http://www.rubyonrails.org&quot;&gt;Ruby ...\n</code></pre>\n"],["strip_tags","ActionView::Helpers::SanitizeHelper","classes/ActionView/Helpers/SanitizeHelper.html#method-i-strip_tags","(html)","<p>Strips all HTML tags from <code>html</code>, including comments and special characters.\n\n<pre><code>strip_tags(&quot;Strip &lt;i&gt;these&lt;/i&gt; ...\n</code></pre>\n"],["strong_etag=","ActionDispatch::Http::Cache::Response","classes/ActionDispatch/Http/Cache/Response.html#method-i-strong_etag-3D","(strong_validators)",""],["strong_etag?","ActionDispatch::Http::Cache::Response","classes/ActionDispatch/Http/Cache/Response.html#method-i-strong_etag-3F","()","<p>True if an ETag is set and it isn&#39;t a weak validator (not preceded with W/)\n"],["strptime","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-strptime","(str, format, now = now())","<p>Parses <code>str</code> according to <code>format</code> and returns an ActiveSupport::TimeWithZone.\n<p>Assumes that <code>str</code> is a time â€¦\n"],["structurally_compatible?","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-structurally_compatible-3F","(other)","<p>Checks whether the given relation is structurally compatible with this relation, to determine if it&#39;s â€¦\n"],["structure_dump","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-structure_dump","(configuration, *arguments)",""],["structure_dump_flags","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-c-structure_dump_flags","","<p>Extra flags passed to database CLI tool (mysqldump/pg_dump) when calling db:schema:dump It can be used â€¦\n"],["structure_load","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-structure_load","(configuration, *arguments)",""],["structure_load_flags","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-c-structure_load_flags","","<p>Extra flags passed to database CLI tool when calling db:schema:load It can be used as a string/array â€¦\n"],["stub_connection","ActionCable::Channel::TestCase::Behavior","classes/ActionCable/Channel/TestCase/Behavior.html#method-i-stub_connection","(identifiers = {})","<p>Set up test connection with the specified identifiers:\n\n<pre><code>class ApplicationCable &lt; ActionCable::Connection::Base ...\n</code></pre>\n"],["stylesheet_link_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-stylesheet_link_tag","(*sources)","<p>Returns a stylesheet link tag for the sources specified as arguments.\n<p>When passing paths, the <code>.css</code> extension â€¦\n"],["stylesheet_path","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-stylesheet_path","(source, options = {})","<p>Computes the path to a stylesheet asset in the public stylesheets directory. If the <code>source</code> filename has â€¦\n"],["stylesheet_url","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-stylesheet_url","(source, options = {})","<p>Computes the full URL to a stylesheet asset in the public stylesheets directory. This will use <code>stylesheet_path</code> â€¦\n"],["stylesheets","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-stylesheets","()",""],["subclasses","ActiveSupport::DescendantsTracker","classes/ActiveSupport/DescendantsTracker.html#method-c-subclasses","(klass)",""],["subclasses","ActiveSupport::DescendantsTracker","classes/ActiveSupport/DescendantsTracker.html#method-i-subclasses","()",""],["subclasses","Class","classes/Class.html#method-i-subclasses","()","<p>Returns an array with the direct children of <code>self</code>.\n\n<pre><code>class Foo; end\nclass Bar &lt; Foo; end\nclass Baz &lt; Bar; ...\n</code></pre>\n"],["subclasses","Rails::Railtie","classes/Rails/Railtie.html#method-c-subclasses","()",""],["subdomain","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-subdomain","(tld_length = @@tld_length)","<p>Returns all the subdomains as a string, so <code>&quot;dev.www&quot;</code> would be returned for â€œdev.www.rubyonrails.org â€¦\n"],["subdomains","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-subdomains","(tld_length = @@tld_length)","<p>Returns all the subdomains as an array, so <code>[&quot;dev&quot;, &quot;www&quot;]</code> would be returned for â€œdev. â€¦\n"],["submit","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-submit","(value = nil, options = {})","<p>Add the submit button for the given form. When no value is given, it checks if the object is a new resource â€¦\n"],["submit_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-submit_tag","(value = \"Save changes\", options = {})","<p>Creates a submit button with the text <code>value</code> as the caption.\n<p>Options\n<p><code>:data</code> - This option can be used to â€¦\n"],["subscribe","ActionCable::Channel::TestCase::Behavior","classes/ActionCable/Channel/TestCase/Behavior.html#method-i-subscribe","(params = {})","<p>Subscribe to the channel under test. Optionally pass subscription parameters as a Hash.\n"],["subscribe","ActionCable::SubscriptionAdapter::Base","classes/ActionCable/SubscriptionAdapter/Base.html#method-i-subscribe","(channel, message_callback, success_callback = nil)",""],["subscribe","ActiveSupport::ErrorReporter","classes/ActiveSupport/ErrorReporter.html#method-i-subscribe","(subscriber)","<p>Register a new error subscriber. The subscriber must respond to\n\n<pre><code>report(Exception, handled: Boolean, context: ...\n</code></pre>\n"],["subscribe","ActiveSupport::Notifications","classes/ActiveSupport/Notifications.html#method-c-subscribe","(pattern = nil, callback = nil, &block)","<p>Subscribe to a given event name with the passed <code>block</code>.\n<p>You can subscribe to events by passing a String â€¦\n"],["subscribe","ActiveSupport::Notifications::Fanout","classes/ActiveSupport/Notifications/Fanout.html#method-i-subscribe","(pattern = nil, callable = nil, monotonic: false, &block)",""],["subscribe_to_channel","ActionCable::Channel::Base","classes/ActionCable/Channel/Base.html#method-i-subscribe_to_channel","()","<p>This method is called after subscription has been added to the connection and confirms or rejects the â€¦\n"],["subscribed","ActionCable::Channel::Base","classes/ActionCable/Channel/Base.html#method-i-subscribed","()","<p>Called once a consumer has become a subscriber of the channel. Usually the place to set up any streams â€¦\n"],["subscribed","ActiveSupport::Notifications","classes/ActiveSupport/Notifications.html#method-c-subscribed","(callback, pattern = nil, monotonic: false, &block)",""],["subscribers","ActiveSupport::Subscriber","classes/ActiveSupport/Subscriber.html#method-c-subscribers","()",""],["subscription_confirmation_sent?","ActionCable::Channel::Base","classes/ActionCable/Channel/Base.html#method-i-subscription_confirmation_sent-3F","()",""],["subscription_rejected?","ActionCable::Channel::Base","classes/ActionCable/Channel/Base.html#method-i-subscription_rejected-3F","()",""],["subsec","DateTime","classes/DateTime.html#method-i-subsec","()","<p>Returns the fraction of a second as a <code>Rational</code>\n\n<pre><code>DateTime.new(2012, 8, 29, 0, 0, 0.5).subsec # =&gt; (1/2)\n</code></pre>\n"],["success?","ActionMailbox::Relayer::Result","classes/ActionMailbox/Relayer/Result.html#method-i-success-3F","()",""],["successfully_enqueued?","ActiveJob::Core","classes/ActiveJob/Core.html#method-i-successfully_enqueued-3F","()",""],["suffix","ActiveRecord::DynamicMatchers::FindByBang","classes/ActiveRecord/DynamicMatchers/FindByBang.html#method-c-suffix","()",""],["suffix","ActiveRecord::DynamicMatchers::Method","classes/ActiveRecord/DynamicMatchers/Method.html#method-c-suffix","()",""],["sum","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-sum","(identity_or_column = nil, &block)","<p>Calculates the sum of values on a given column. The value is returned with the same data type of the â€¦\n"],["sum","Enumerable","classes/Enumerable.html#method-i-sum","(identity = nil, &block)","<p>Calculates a sum from the elements.\n\n<pre><code>payments.sum { |p| p.price * p.tax_rate }\npayments.sum(&amp;:price)\n</code></pre>\n<p>The â€¦\n"],["sunday","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-sunday","()","<p>Returns Sunday of this week assuming that week starts on Monday. <code>DateTime</code> objects have their time set â€¦\n"],["supports_advisory_locks?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_advisory_locks-3F","()","<p>Does this adapter support application-enforced advisory locking?\n"],["supports_advisory_locks?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_advisory_locks-3F","()",""],["supports_advisory_locks?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_advisory_locks-3F","()",""],["supports_bulk_alter?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_bulk_alter-3F","()",""],["supports_bulk_alter?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_bulk_alter-3F","()",""],["supports_bulk_alter?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_bulk_alter-3F","()",""],["supports_cache_versioning?","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-c-supports_cache_versioning-3F","()","<p>Advertise cache versioning support.\n"],["supports_cache_versioning?","ActiveSupport::Cache::MemCacheStore","classes/ActiveSupport/Cache/MemCacheStore.html#method-c-supports_cache_versioning-3F","()","<p>Advertise cache versioning support.\n"],["supports_cache_versioning?","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-c-supports_cache_versioning-3F","()","<p>Advertise cache versioning support.\n"],["supports_cache_versioning?","ActiveSupport::Cache::NullStore","classes/ActiveSupport/Cache/NullStore.html#method-c-supports_cache_versioning-3F","()","<p>Advertise cache versioning support.\n"],["supports_cache_versioning?","ActiveSupport::Cache::RedisCacheStore","classes/ActiveSupport/Cache/RedisCacheStore.html#method-c-supports_cache_versioning-3F","()","<p>Advertise cache versioning support.\n"],["supports_check_constraints?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_check_constraints-3F","()","<p>Does this adapter support creating check constraints?\n"],["supports_check_constraints?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_check_constraints-3F","()",""],["supports_check_constraints?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_check_constraints-3F","()",""],["supports_check_constraints?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_check_constraints-3F","()",""],["supports_comments?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_comments-3F","()","<p>Does this adapter support metadata comments on database objects (tables, columns, indexes)?\n"],["supports_comments?","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-supports_comments-3F","()",""],["supports_comments?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_comments-3F","()",""],["supports_comments_in_create?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_comments_in_create-3F","()","<p>Can comments for tables, columns, and indexes be specified in create/alter table statements?\n"],["supports_comments_in_create?","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-supports_comments_in_create-3F","()",""],["supports_common_table_expressions?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_common_table_expressions-3F","()",""],["supports_common_table_expressions?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_common_table_expressions-3F","()",""],["supports_common_table_expressions?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_common_table_expressions-3F","()",""],["supports_common_table_expressions?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_common_table_expressions-3F","()",""],["supports_concurrent_connections?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_concurrent_connections-3F","()",""],["supports_concurrent_connections?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_concurrent_connections-3F","()",""],["supports_datetime_with_precision?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_datetime_with_precision-3F","()","<p>Does this adapter support datetime with precision?\n"],["supports_datetime_with_precision?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_datetime_with_precision-3F","()",""],["supports_datetime_with_precision?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_datetime_with_precision-3F","()",""],["supports_datetime_with_precision?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_datetime_with_precision-3F","()",""],["supports_ddl_transactions?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_ddl_transactions-3F","()","<p>Does this adapter support DDL rollbacks in transactions? That is, would CREATE TABLE or ALTER TABLE get â€¦\n"],["supports_ddl_transactions?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_ddl_transactions-3F","()",""],["supports_ddl_transactions?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_ddl_transactions-3F","()",""],["supports_deferrable_constraints?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_deferrable_constraints-3F","()","<p>Does this adapter support creating deferrable constraints?\n"],["supports_deferrable_constraints?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_deferrable_constraints-3F","()",""],["supports_explain?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_explain-3F","()","<p>Does this adapter support explain?\n"],["supports_explain?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_explain-3F","()",""],["supports_explain?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_explain-3F","()",""],["supports_explain?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_explain-3F","()",""],["supports_expression_index?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_expression_index-3F","()","<p>Does this adapter support expression indices?\n"],["supports_expression_index?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_expression_index-3F","()",""],["supports_expression_index?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_expression_index-3F","()",""],["supports_expression_index?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_expression_index-3F","()",""],["supports_extensions?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_extensions-3F","()","<p>Does this adapter support database extensions?\n"],["supports_extensions?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_extensions-3F","()",""],["supports_foreign_keys?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_foreign_keys-3F","()","<p>Does this adapter support creating foreign key constraints?\n"],["supports_foreign_keys?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_foreign_keys-3F","()",""],["supports_foreign_keys?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_foreign_keys-3F","()",""],["supports_foreign_keys?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_foreign_keys-3F","()",""],["supports_foreign_tables?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_foreign_tables-3F","()","<p>Does this adapter support foreign/external tables?\n"],["supports_foreign_tables?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_foreign_tables-3F","()",""],["supports_index_sort_order?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_index_sort_order-3F","()","<p>Does this adapter support index sort order?\n"],["supports_index_sort_order?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_index_sort_order-3F","()",""],["supports_index_sort_order?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_index_sort_order-3F","()",""],["supports_index_sort_order?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_index_sort_order-3F","()",""],["supports_indexes_in_create?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_indexes_in_create-3F","()","<p>Does this adapter support creating indexes in the same statement as creating the table?\n"],["supports_indexes_in_create?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_indexes_in_create-3F","()",""],["supports_insert_conflict_target?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_insert_conflict_target-3F","()",""],["supports_insert_conflict_target?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_insert_conflict_target-3F","()",""],["supports_insert_conflict_target?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_insert_conflict_target-3F","()",""],["supports_insert_on_conflict?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_insert_on_conflict-3F","()",""],["supports_insert_on_conflict?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_insert_on_conflict-3F","()",""],["supports_insert_on_duplicate_skip?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_insert_on_duplicate_skip-3F","()",""],["supports_insert_on_duplicate_skip?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_insert_on_duplicate_skip-3F","()",""],["supports_insert_on_duplicate_skip?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_insert_on_duplicate_skip-3F","()",""],["supports_insert_on_duplicate_skip?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_insert_on_duplicate_skip-3F","()",""],["supports_insert_on_duplicate_update?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_insert_on_duplicate_update-3F","()",""],["supports_insert_on_duplicate_update?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_insert_on_duplicate_update-3F","()",""],["supports_insert_on_duplicate_update?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_insert_on_duplicate_update-3F","()",""],["supports_insert_on_duplicate_update?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_insert_on_duplicate_update-3F","()",""],["supports_insert_returning?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_insert_returning-3F","()",""],["supports_insert_returning?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_insert_returning-3F","()",""],["supports_json?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_json-3F","()","<p>Does this adapter support json data type?\n"],["supports_json?","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-supports_json-3F","()",""],["supports_json?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_json-3F","()",""],["supports_json?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_json-3F","()",""],["supports_lazy_transactions?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_lazy_transactions-3F","()",""],["supports_lazy_transactions?","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-supports_lazy_transactions-3F","()",""],["supports_lazy_transactions?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_lazy_transactions-3F","()",""],["supports_lazy_transactions?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_lazy_transactions-3F","()",""],["supports_materialized_views?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_materialized_views-3F","()","<p>Does this adapter support materialized views?\n"],["supports_materialized_views?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_materialized_views-3F","()",""],["supports_optimizer_hints?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_optimizer_hints-3F","()","<p>Does this adapter support optimizer hints?\n"],["supports_optimizer_hints?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_optimizer_hints-3F","()","<p>See dev.mysql.com/doc/refman/en/optimizer-hints.html for more details.\n"],["supports_optimizer_hints?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_optimizer_hints-3F","()",""],["supports_partial_index?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_partial_index-3F","()","<p>Does this adapter support partial indices?\n"],["supports_partial_index?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_partial_index-3F","()",""],["supports_partial_index?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_partial_index-3F","()",""],["supports_partitioned_indexes?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_partitioned_indexes-3F","()",""],["supports_partitioned_indexes?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_partitioned_indexes-3F","()",""],["supports_path?","AbstractController::Base","classes/AbstractController/Base.html#method-c-supports_path-3F","()","<p>Returns true if the given controller is capable of rendering a path. A subclass of <code>AbstractController::Base</code> â€¦\n"],["supports_path?","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-supports_path-3F","()","<p>Emails do not support relative path links.\n"],["supports_pgcrypto_uuid?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_pgcrypto_uuid-3F","()",""],["supports_savepoints?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_savepoints-3F","()","<p>Does this adapter support savepoints?\n"],["supports_savepoints?","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-supports_savepoints-3F","()",""],["supports_savepoints?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_savepoints-3F","()",""],["supports_savepoints?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_savepoints-3F","()",""],["supports_streaming?","ActionView::Template","classes/ActionView/Template.html#method-i-supports_streaming-3F","()","<p>Returns whether the underlying handler supports streaming. If so, a streaming buffer <strong>may</strong> be passed when â€¦\n"],["supports_streaming?","ActionView::Template::Handlers::ERB","classes/ActionView/Template/Handlers/ERB.html#method-i-supports_streaming-3F","()",""],["supports_transaction_isolation?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_transaction_isolation-3F","()","<p>Does this adapter support setting the isolation level for a transaction?\n"],["supports_transaction_isolation?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_transaction_isolation-3F","()",""],["supports_transaction_isolation?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_transaction_isolation-3F","()",""],["supports_transaction_isolation?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_transaction_isolation-3F","()",""],["supports_validate_constraints?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_validate_constraints-3F","()","<p>Does this adapter support creating invalid constraints?\n"],["supports_validate_constraints?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_validate_constraints-3F","()",""],["supports_views?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_views-3F","()","<p>Does this adapter support views?\n"],["supports_views?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_views-3F","()",""],["supports_views?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_views-3F","()",""],["supports_views?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_views-3F","()",""],["supports_virtual_columns?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_virtual_columns-3F","()","<p>Does this adapter support virtual columns?\n"],["supports_virtual_columns?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_virtual_columns-3F","()",""],["supports_virtual_columns?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_virtual_columns-3F","()",""],["suppress","ActiveRecord::Suppressor::ClassMethods","classes/ActiveRecord/Suppressor/ClassMethods.html#method-i-suppress","(&block)",""],["suppress","Kernel","classes/Kernel.html#method-i-suppress","(*exception_classes)","<p>Blocks and ignores any exception passed as argument if raised within the block.\n\n<pre><code>suppress(ZeroDivisionError) ...\n</code></pre>\n"],["suppress_messages","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-suppress_messages","()","<p>Takes a block as an argument and suppresses any output generated by the block.\n"],["swap","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-swap","(target, *args, &block)",""],["swap","Rails::Configuration::MiddlewareStackProxy","classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-swap","(...)",""],["symbolize_keys","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-symbolize_keys","()",""],["symbolize_keys","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-symbolize_keys","()",""],["symbolize_keys","Hash","classes/Hash.html#method-i-symbolize_keys","()","<p>Returns a new hash with all keys converted to symbols, as long as they respond to <code>to_sym</code>.\n\n<pre><code>hash = { &#39;name&#39; ...\n</code></pre>\n"],["symbolize_keys!","Hash","classes/Hash.html#method-i-symbolize_keys-21","()","<p>Destructively converts all keys to symbols, as long as they respond to <code>to_sym</code>. Same as <code>symbolize_keys</code> â€¦\n"],["symbols","ActionView::Template::Types","classes/ActionView/Template/Types.html#method-c-symbols","()",""],["synchronize","ActiveSupport::Concurrency::LoadInterlockAwareMonitor","classes/ActiveSupport/Concurrency/LoadInterlockAwareMonitor.html#method-i-synchronize","(&block)",""],["system_test","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-system_test","()",""],["t","AbstractController::Translation","classes/AbstractController/Translation.html#method-i-t","(key, **options)",""],["t","ActionView::Helpers::TranslationHelper","classes/ActionView/Helpers/TranslationHelper.html#method-i-t","(key, **options)",""],["table_alias_for","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-table_alias_for","(table_name)","<p>Truncates a table alias according to the limits of the current adapter.\n"],["table_alias_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-table_alias_length","()","<p>Returns the maximum length of a table alias.\n"],["table_comment","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-table_comment","(table_name)","<p>Returns the table comment that&#39;s stored in database metadata.\n"],["table_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-table_exists-3F","(table_name)","<p>Checks to see if the table <code>table_name</code> exists on the database.\n\n<pre><code>table_exists?(:developers)\n</code></pre>\n"],["table_exists?","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-table_exists-3F","()","<p>Indicates whether the table associated with this class exists\n"],["table_name","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-table_name","()","<p>Guesses the table name (in forced lower-case) based on the name of the class in the inheritance hierarchy â€¦\n"],["table_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-table_name","()",""],["table_name=","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-table_name-3D","(value)","<p>Sets the table name explicitly. Example:\n\n<pre><code>class Project &lt; ActiveRecord::Base\n  self.table_name = &quot;project&quot; ...\n</code></pre>\n"],["table_name_prefix","ActiveRecord::ModelSchema","classes/ActiveRecord/ModelSchema.html#method-c-table_name_prefix","","<p>The prefix string to prepend to every table name.\n"],["table_name_prefix=","ActiveRecord::ModelSchema","classes/ActiveRecord/ModelSchema.html#method-c-table_name_prefix-3D","","<p>Sets the prefix string to prepend to every table name. So if set to â€œbasecamp_â€, all table â€¦\n"],["table_name_suffix","ActiveRecord::ModelSchema","classes/ActiveRecord/ModelSchema.html#method-c-table_name_suffix","","<p>The suffix string to append to every table name.\n"],["table_name_suffix=","ActiveRecord::ModelSchema","classes/ActiveRecord/ModelSchema.html#method-c-table_name_suffix-3D","","<p>Works like <code>table_name_prefix=</code>, but appends instead of prepends (set to â€œ_basecampâ€ gives â€œprojects_basecampâ€, â€¦\n"],["table_options","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-table_options","(table_name)",""],["table_rows","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-i-table_rows","()","<p>Returns a hash of rows to be inserted. The key is the table, the value is a list of rows to insert to â€¦\n"],["tableize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-tableize","(class_name)","<p>Creates the name of a table like Rails does for models to table names. This method uses the #pluralize â€¦\n"],["tableize","String","classes/String.html#method-i-tableize","()","<p>Creates the name of a table like Rails does for models to table names. This method uses the <code>pluralize</code> â€¦\n"],["tables","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-tables","()","<p>Returns an array of table names defined in the database.\n"],["tag","ActionCable::Connection::TaggedLoggerProxy","classes/ActionCable/Connection/TaggedLoggerProxy.html#method-i-tag","(logger, &block)",""],["tag","ActionView::Helpers::ActiveModelInstanceTag","classes/ActionView/Helpers/ActiveModelInstanceTag.html#method-i-tag","(type, options, *)",""],["tag","ActionView::Helpers::TagHelper","classes/ActionView/Helpers/TagHelper.html#method-i-tag","(name = nil, options = nil, open = false, escape = true)","<p>Returns an HTML tag.\n<p>Building HTML tags\n<p>Builds HTML5 compliant tags with a tag proxy. Every tag can be â€¦\n"],["tagged","ActiveSupport::TaggedLogging","classes/ActiveSupport/TaggedLogging.html#method-i-tagged","(*tags)",""],["tags","Rails::SourceAnnotationExtractor::Annotation","classes/Rails/SourceAnnotationExtractor/Annotation.html#method-c-tags","()",""],["take","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-take","(limit = nil)","<p>Gives a record (or N records if a parameter is supplied) from the collection using the same rules as â€¦\n"],["take","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-take","(limit = nil)","<p>Gives a record (or N records if a parameter is supplied) without any implied order. The order will depend â€¦\n"],["take!","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-take-21","()","<p>Same as #take but raises ActiveRecord::RecordNotFound if no record is found. Note that #take! accepts â€¦\n"],["take_failed_screenshot","ActionDispatch::SystemTesting::TestHelpers::ScreenshotHelper","classes/ActionDispatch/SystemTesting/TestHelpers/ScreenshotHelper.html#method-i-take_failed_screenshot","()","<p>Takes a screenshot of the current page in the browser if the test failed.\n<p><code>take_failed_screenshot</code> is called â€¦\n"],["take_screenshot","ActionDispatch::SystemTesting::TestHelpers::ScreenshotHelper","classes/ActionDispatch/SystemTesting/TestHelpers/ScreenshotHelper.html#method-i-take_screenshot","()","<p>Takes a screenshot of the current page in the browser.\n<p><code>take_screenshot</code> can be used at any point in your â€¦\n"],["target","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-target","()",""],["target_version","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-target_version","()",""],["teardown","ActiveSupport::Testing::SetupAndTeardown::ClassMethods","classes/ActiveSupport/Testing/SetupAndTeardown/ClassMethods.html#method-i-teardown","(*args, &block)","<p>Add a callback, which runs after <code>TestCase#teardown</code>.\n"],["teardown_fixtures","ActiveRecord::TestFixtures","classes/ActiveRecord/TestFixtures.html#method-i-teardown_fixtures","()",""],["telephone_field","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-telephone_field","","<p>Wraps ActionView::Helpers::FormHelper#telephone_field for form builders:\n\n<pre><code>&lt;%= form_with model: @user do ...\n</code></pre>\n"],["telephone_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-telephone_field","(object_name, method, options = {})","<p>Returns a text_field of type â€œtelâ€.\n\n<pre><code>telephone_field(&quot;user&quot;, &quot;phone&quot;)\n# =&gt; &lt;input id=&quot;user_phone&quot; ...\n</code></pre>\n"],["telephone_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-telephone_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type â€œtelâ€.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],["template","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-template","(source, *args, &block)",""],["template_exists?","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-template_exists-3F","(name, prefixes = [], partial = false, keys = [], **options)",""],["terabyte","Numeric","classes/Numeric.html#method-i-terabyte","()",""],["terabytes","Numeric","classes/Numeric.html#method-i-terabytes","()","<p>Returns the number of bytes equivalent to the terabytes provided.\n\n<pre><code>2.terabytes # =&gt; 2_199_023_255_552\n</code></pre>\n"],["test","ActiveSupport::Testing::Declarative","classes/ActiveSupport/Testing/Declarative.html#method-i-test","(name, &block)","<p>Helper to define a test method using a String. Under the hood, it replaces spaces with underscores and â€¦\n"],["test","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-test","()",""],["test","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-test","()",""],["test_dummy_clean","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-test_dummy_clean","()",""],["test_dummy_config","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-test_dummy_config","()",""],["test_dummy_sprocket_assets","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-test_dummy_sprocket_assets","()",""],["test_errors_aref","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_errors_aref","()","<p>Passes if the object&#39;s model responds to <code>errors</code> and if calling <code>[](attribute)</code> on the result of this â€¦\n"],["test_model_naming","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_model_naming","()","<p>Passes if the object&#39;s model responds to <code>model_name</code> both as an instance method and as a class method, â€¦\n"],["test_order","ActiveSupport::TestCase","classes/ActiveSupport/TestCase.html#method-c-test_order","()","<p>Returns the order in which test cases are run.\n\n<pre><code>ActiveSupport::TestCase.test_order # =&gt; :random\n</code></pre>\n<p>Possible â€¦\n"],["test_order=","ActiveSupport::TestCase","classes/ActiveSupport/TestCase.html#method-c-test_order-3D","(new_order)","<p>Sets the order in which test cases are run.\n\n<pre><code>ActiveSupport::TestCase.test_order = :random # =&gt; :random\n</code></pre>\n"],["test_persisted?","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_persisted-3F","()","<p>Passes if the object&#39;s model responds to <code>persisted?</code> and if calling this method returns either <code>true</code> â€¦\n"],["test_to_key","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_to_key","()","<p>Passes if the object&#39;s model responds to <code>to_key</code> and if calling this method returns <code>nil</code> when the object â€¦\n"],["test_to_param","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_to_param","()","<p>Passes if the object&#39;s model responds to <code>to_param</code> and if calling this method returns <code>nil</code> when the â€¦\n"],["test_to_partial_path","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_to_partial_path","()","<p>Passes if the object&#39;s model responds to <code>to_partial_path</code> and if calling this method returns a string. â€¦\n"],["tests","ActionCable::Channel::TestCase::Behavior::ClassMethods","classes/ActionCable/Channel/TestCase/Behavior/ClassMethods.html#method-i-tests","(channel)",""],["tests","ActionCable::Connection::TestCase::Behavior::ClassMethods","classes/ActionCable/Connection/TestCase/Behavior/ClassMethods.html#method-i-tests","(connection)",""],["tests","ActionController::TestCase::Behavior::ClassMethods","classes/ActionController/TestCase/Behavior/ClassMethods.html#method-i-tests","(controller_class)","<p>Sets the controller class name. Useful if the name can&#39;t be inferred from test class. Normalizes â€¦\n"],["tests","ActionMailer::TestCase::Behavior::ClassMethods","classes/ActionMailer/TestCase/Behavior/ClassMethods.html#method-i-tests","(mailer)",""],["tests","ActionView::TestCase::Behavior::ClassMethods","classes/ActionView/TestCase/Behavior/ClassMethods.html#method-i-tests","(helper_class)",""],["tests","Rails::Generators::Testing::Behaviour::ClassMethods","classes/Rails/Generators/Testing/Behaviour/ClassMethods.html#method-i-tests","(klass)","<p>Sets which generator should be tested:\n\n<pre><code>tests AppGenerator\n</code></pre>\n"],["text?","ActiveStorage::Blob","classes/ActiveStorage/Blob.html#method-i-text-3F","()","<p>Returns true if the content_type of this blob is in the text range, like text/plain.\n"],["text_area","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-text_area","","<p>Wraps ActionView::Helpers::FormHelper#text_area for form builders:\n\n<pre><code>&lt;%= form_with model: @user do |f| %&gt; ...\n</code></pre>\n"],["text_area","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-text_area","(object_name, method, options = {})","<p>Returns a textarea opening and closing tag set tailored for accessing a specified attribute (identified â€¦\n"],["text_area_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-text_area_tag","(name, content = nil, options = {})","<p>Creates a text input area; use a textarea for longer text inputs such as blog posts or descriptions. â€¦\n"],["text_field","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-text_field","","<p>Wraps ActionView::Helpers::FormHelper#text_field for form builders:\n\n<pre><code>&lt;%= form_with model: @user do |f| ...\n</code></pre>\n"],["text_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-text_field","(object_name, method, options = {})","<p>Returns an input tag of the â€œtextâ€ type tailored for accessing a specified attribute (identified â€¦\n"],["text_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-text_field_tag","(name, value = nil, options = {})","<p>Creates a standard text field; use these text fields to input smaller chunks of text like a username â€¦\n"],["third","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-third","","<p>Same as #first except returns only the third record.\n"],["third","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-third","()","<p>Find the third record. If no order is defined it will order by primary key.\n\n<pre><code>Person.third # returns the ...\n</code></pre>\n"],["third","Array","classes/Array.html#method-i-third","()","<p>Equal to <code>self[2]</code>.\n\n<pre><code>%w( a b c d e ).third # =&gt; &quot;c&quot;\n</code></pre>\n"],["third!","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-third-21","()","<p>Same as #third but raises ActiveRecord::RecordNotFound if no record is found.\n"],["third_to_last","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-third_to_last","","<p>Same as #first except returns only the third-to-last record.\n"],["third_to_last","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-third_to_last","()","<p>Find the third-to-last record. If no order is defined it will order by primary key.\n\n<pre><code>Person.third_to_last ...\n</code></pre>\n"],["third_to_last","Array","classes/Array.html#method-i-third_to_last","()","<p>Equal to <code>self[-3]</code>.\n\n<pre><code>%w( a b c d e ).third_to_last # =&gt; &quot;c&quot;\n</code></pre>\n"],["third_to_last!","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-third_to_last-21","()","<p>Same as #third_to_last but raises ActiveRecord::RecordNotFound if no record is found.\n"],["thread_cattr_accessor","Module","classes/Module.html#method-i-thread_cattr_accessor","(*syms, instance_reader: true, instance_writer: true, instance_accessor: true, default: nil)",""],["thread_mattr_accessor","Module","classes/Module.html#method-i-thread_mattr_accessor","(*syms, instance_reader: true, instance_writer: true, instance_accessor: true, default: nil)","<p>Defines both class and instance accessors for class attributes.\n\n<pre><code>class Account\n  thread_mattr_accessor ...\n</code></pre>\n"],["throw_away!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-throw_away-21","()","<p>Removes the connection from the pool and disconnect it.\n"],["tidy_bytes","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-tidy_bytes","(force = false)","<p>Replaces all ISO-8859-1 or CP1252 characters by their UTF-8 equivalent resulting in a valid UTF-8 string. â€¦\n"],["tidy_bytes","ActiveSupport::Multibyte::Unicode","classes/ActiveSupport/Multibyte/Unicode.html#method-i-tidy_bytes","(string, force = false)","<p>Replaces all ISO-8859-1 or CP1252 characters by their UTF-8 equivalent resulting in a valid UTF-8 string. â€¦\n"],["time","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-time","()","<p>Returns a <code>Time</code> instance that represents the time in <code>time_zone</code>.\n"],["time_ago_in_words","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-time_ago_in_words","(from_time, options = {})","<p>Like <code>distance_of_time_in_words</code>, but where <code>to_time</code> is fixed to <code>Time.now</code>.\n\n<pre><code>time_ago_in_words(3.minutes.from_now) ...\n</code></pre>\n"],["time_field","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-time_field","","<p>Wraps ActionView::Helpers::FormHelper#time_field for form builders:\n\n<pre><code>&lt;%= form_with model: @user do |f| ...\n</code></pre>\n"],["time_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-time_field","(object_name, method, options = {})","<p>Returns a text_field of type â€œtimeâ€.\n<p>The default value is generated by trying to call <code>strftime</code> â€¦\n"],["time_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-time_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type â€œtimeâ€.\n<p>Options\n<p><code>:min</code> - The minimum acceptable value.\n"],["time_select","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-time_select","(object_name, method, options = {}, html_options = {})","<p>Returns a set of select tags (one for hour, minute, and optionally second) pre-selected for accessing â€¦\n"],["time_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-time_select","(method, options = {}, html_options = {})","<p>Wraps ActionView::Helpers::DateHelper#time_select for form builders:\n\n<pre><code>&lt;%= form_for @race do |f| %&gt;\n  &lt;%= ...\n</code></pre>\n"],["time_tag","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-time_tag","(date_or_time, *args, &block)","<p>Returns an HTML time tag for the given date or time.\n\n<pre><code>time_tag Date.today  # =&gt;\n  &lt;time datetime=&quot;2010-11-04&quot;&gt;November ...\n</code></pre>\n"],["time_zone_options_for_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-time_zone_options_for_select","(selected = nil, priority_zones = nil, model = ::ActiveSupport::TimeZone)","<p>Returns a string of option tags for pretty much any time zone in the world. Supply an ActiveSupport::TimeZone â€¦\n"],["time_zone_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-time_zone_select","(method, priority_zones = nil, options = {}, html_options = {})","<p>Wraps ActionView::Helpers::FormOptionsHelper#time_zone_select for form builders:\n\n<pre><code>&lt;%= form_for @user do ...\n</code></pre>\n"],["time_zone_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-time_zone_select","(object, method, priority_zones = nil, options = {}, html_options = {})","<p>Returns select and option tags for the given object and method, using #time_zone_options_for_select to â€¦\n"],["timer","ActionCable::Connection::StreamEventLoop","classes/ActionCable/Connection/StreamEventLoop.html#method-i-timer","(interval, &block)",""],["timestamps","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-timestamps","(**options)","<p>Adds timestamps (<code>created_at</code> and <code>updated_at</code>) columns to the table.\n\n<pre><code>t.timestamps(null: false)\n</code></pre>\n<p>See connection.add_timestamps â€¦\n"],["timestamps","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-timestamps","(**options)","<p>Appends <code>:datetime</code> columns <code>:created_at</code> and <code>:updated_at</code> to the table. See connection.add_timestamps\n\n<pre><code>t.timestamps ...\n</code></pre>\n"],["timestamptz","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-timestamptz","",""],["tinyblob","ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-tinyblob","",""],["tinytext","ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-tinytext","",""],["titlecase","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-titlecase","()",""],["titlecase","String","classes/String.html#method-i-titlecase","(keep_id_suffix: false)",""],["titleize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-titleize","(word, keep_id_suffix: false)","<p>Capitalizes all the words and replaces some characters in the string to create a nicer looking title. â€¦\n"],["titleize","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-titleize","()","<p>Capitalizes the first letter of every word, when possible.\n\n<pre><code>&quot;Ã‰L QUE SE ENTERÃ“&quot;.mb_chars.titleize.to_s  ...\n</code></pre>\n"],["titleize","String","classes/String.html#method-i-titleize","(keep_id_suffix: false)","<p>Capitalizes all the words and replaces some characters in the string to create a nicer looking title. â€¦\n"],["tmp","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-tmp","()",""],["tmpdir","ActiveStorage::Analyzer","classes/ActiveStorage/Analyzer.html#method-i-tmpdir","()",""],["tmpdir","ActiveStorage::Previewer","classes/ActiveStorage/Previewer.html#method-i-tmpdir","()",""],["to","Array","classes/Array.html#method-i-to","(position)","<p>Returns the beginning of the array up to <code>position</code>.\n\n<pre><code>%w( a b c d ).to(0)  # =&gt; [&quot;a&quot;]\n%w( a b c d ).to(2) ...\n</code></pre>\n"],["to","String","classes/String.html#method-i-to","(position)","<p>Returns a substring from the beginning of the string to the given position. If the position is negative, â€¦\n"],["to_a","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-to_a","()","<p>Turns the Response into a Rack-compatible array of the status, headers, and body. Allows explicit splatting: â€¦\n"],["to_a","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-to_a","()",""],["to_a","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-to_a","()",""],["to_a","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-i-to_a","()",""],["to_a","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_a","()","<p>Returns Array of parts of Time in sequence of [seconds, minutes, hours, day, month, year, weekday, yearday, â€¦\n"],["to_a","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-to_a","()",""],["to_addresses","Mail::Message","classes/Mail/Message.html#method-i-to_addresses","()",""],["to_ary","ActionDispatch::Response::RackBody","classes/ActionDispatch/Response/RackBody.html#method-i-to_ary","()",""],["to_ary","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-to_ary","()","<p>Converts relation objects to Array.\n"],["to_ary","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-i-to_ary","()","<p>Returns an array of hashes representing each row record.\n"],["to_ary","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-to_ary","()",""],["to_attachable_partial_path","ActionText::Attachable","classes/ActionText/Attachable.html#method-i-to_attachable_partial_path","()",""],["to_complete","ActiveSupport::ExecutionWrapper","classes/ActiveSupport/ExecutionWrapper.html#method-c-to_complete","(*args, &block)",""],["to_date","String","classes/String.html#method-i-to_date","()","<p>Converts a string to a Date value.\n\n<pre><code>&quot;1-1-2012&quot;.to_date   # =&gt; Sun, 01 Jan 2012\n&quot;01/01/2012&quot;.to_date # =&gt; ...\n</code></pre>\n"],["to_datetime","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_datetime","()","<p>Returns an instance of DateTime with the timezone&#39;s UTC offset\n\n<pre><code>Time.zone.now.to_datetime          ...\n</code></pre>\n"],["to_datetime","String","classes/String.html#method-i-to_datetime","()","<p>Converts a string to a DateTime value.\n\n<pre><code>&quot;1-1-2012&quot;.to_datetime            # =&gt; Sun, 01 Jan 2012 00:00:00 ...\n</code></pre>\n"],["to_dep_map","ActionView::Digestor::Node","classes/ActionView/Digestor/Node.html#method-i-to_dep_map","()",""],["to_f","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_f","()","<p>Returns the object&#39;s date and time as a floating-point number of seconds since the Epoch (January â€¦\n"],["to_f","DateTime","classes/DateTime.html#method-i-to_f","()","<p>Converts <code>self</code> to a floating-point number of seconds, including fractional microseconds, since the Unix â€¦\n"],["to_formatted_s","ActiveSupport::NumericWithFormat","classes/ActiveSupport/NumericWithFormat.html#method-i-to_formatted_s","(format = nil, options = nil)",""],["to_formatted_s","ActiveSupport::RangeWithFormat","classes/ActiveSupport/RangeWithFormat.html#method-i-to_formatted_s","(format = :default)",""],["to_formatted_s","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_formatted_s","(format = :default)",""],["to_formatted_s","Array","classes/Array.html#method-i-to_formatted_s","(format = :default)",""],["to_formatted_s","Date","classes/Date.html#method-i-to_formatted_s","(format = :default)",""],["to_formatted_s","DateTime","classes/DateTime.html#method-i-to_formatted_s","(format = :default)",""],["to_formatted_s","Time","classes/Time.html#method-i-to_formatted_s","(format = :default)",""],["to_fs","ActiveSupport::NumericWithFormat","classes/ActiveSupport/NumericWithFormat.html#method-i-to_fs","(format = nil, options = nil)","<p>Provides options for converting numbers into formatted strings. Options are provided for phone numbers, â€¦\n"],["to_fs","ActiveSupport::RangeWithFormat","classes/ActiveSupport/RangeWithFormat.html#method-i-to_fs","(format = :default)","<p>Convert range to a formatted string. See RANGE_FORMATS for predefined formats.\n<p>This method is aliased â€¦\n"],["to_fs","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_fs","(format = :default)","<p>Returns a string of the object&#39;s date and time.\n<p>This method is aliased to <code>to_formatted_s</code>.\n<p>Accepts an â€¦\n"],["to_fs","Array","classes/Array.html#method-i-to_fs","(format = :default)","<p>Extends <code>Array#to_s</code> to convert a collection of elements into a comma separated id list if <code>:db</code> argument â€¦\n"],["to_fs","Date","classes/Date.html#method-i-to_fs","(format = :default)","<p>Convert to a formatted string. See DATE_FORMATS for predefined formats.\n<p>This method is aliased to <code>to_formatted_s</code> â€¦\n"],["to_fs","DateTime","classes/DateTime.html#method-i-to_fs","(format = :default)","<p>Convert to a formatted string. See Time::DATE_FORMATS for predefined formats.\n<p>This method is aliased to â€¦\n"],["to_fs","Time","classes/Time.html#method-i-to_fs","(format = :default)","<p>Converts to a formatted string. See DATE_FORMATS for built-in formats.\n<p>This method is aliased to <code>to_formatted_s</code> â€¦\n"],["to_h","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-to_h","()","<p>Returns a safe <code>ActiveSupport::HashWithIndifferentAccess</code> representation of the parameters with all unpermitted â€¦\n"],["to_h","ActiveRecord::Encryption::Properties","classes/ActiveRecord/Encryption/Properties.html#method-i-to_h","()",""],["to_h","ActiveRecord::Encryption::Scheme","classes/ActiveRecord/Encryption/Scheme.html#method-i-to_h","()",""],["to_hash","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-to_hash","()","<p>Returns a safe <code>Hash</code> representation of the parameters with all unpermitted keys removed.\n\n<pre><code>params = ActionController::Parameters.new({ ...\n</code></pre>\n"],["to_hash","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-to_hash","()",""],["to_hash","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-to_hash","(full_messages = false)","<p>Returns a Hash of attributes with their error messages. If <code>full_messages</code> is <code>true</code>, it will contain full â€¦\n"],["to_hash","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-to_hash","()","<p>Convert to a regular hash with string keys.\n"],["to_hash","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-to_hash","()","<p>Convert to a regular hash with string keys.\n"],["to_html","ActionText::Attachment","classes/ActionText/Attachment.html#method-i-to_html","()",""],["to_html","ActionText::Content","classes/ActionText/Content.html#method-i-to_html","()",""],["to_html","ActionText::Fragment","classes/ActionText/Fragment.html#method-i-to_html","()",""],["to_html","ActionText::TrixAttachment","classes/ActionText/TrixAttachment.html#method-i-to_html","()",""],["to_html","Rails::Info","classes/Rails/Info.html#method-c-to_html","()",""],["to_i","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-to_i","()","<p>Returns the number of seconds that this Duration represents.\n\n<pre><code>1.minute.to_i   # =&gt; 60\n1.hour.to_i     # ...\n</code></pre>\n"],["to_i","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_i","()","<p>Returns the object&#39;s date and time as an integer number of seconds since the Epoch (January 1, 1970 â€¦\n"],["to_i","DateTime","classes/DateTime.html#method-i-to_i","()","<p>Converts <code>self</code> to an integer number of seconds since the Unix epoch.\n"],["to_io","ActionDispatch::Http::UploadedFile","classes/ActionDispatch/Http/UploadedFile.html#method-i-to_io","()",""],["to_json","ActiveStorage::Filename","classes/ActiveStorage/Filename.html#method-i-to_json","()",""],["to_key","ActiveModel::Conversion","classes/ActiveModel/Conversion.html#method-i-to_key","()","<p>Returns an Array of all key attributes if any of the attributes is set, whether or not the object is â€¦\n"],["to_key","ActiveRecord::AttributeMethods::PrimaryKey","classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-to_key","()","<p>Returns this record&#39;s primary key value wrapped in an array if one is available.\n"],["to_model","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-to_model","()",""],["to_model","ActiveModel::Conversion","classes/ActiveModel/Conversion.html#method-i-to_model","()","<p>If your object is already designed to implement all of the Active Model you can use the default <code>:to_model</code> â€¦\n"],["to_options","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-to_options","()",""],["to_options","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-to_options","()",""],["to_options","Hash","classes/Hash.html#method-i-to_options","()",""],["to_options!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-to_options-21","()",""],["to_options!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-to_options-21","()",""],["to_options!","Hash","classes/Hash.html#method-i-to_options-21","()",""],["to_param","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-to_param","(*args)",""],["to_param","ActiveModel::Conversion","classes/ActiveModel/Conversion.html#method-i-to_param","()","<p>Returns a <code>string</code> representing the object&#39;s key suitable for use in URLs, or <code>nil</code> if <code>persisted?</code> is â€¦\n"],["to_param","ActiveRecord::Integration","classes/ActiveRecord/Integration.html#method-i-to_param","()","<p>Returns a <code>String</code>, which Action Pack uses for constructing a URL to this object. The default implementation â€¦\n"],["to_param","ActiveRecord::Integration::ClassMethods","classes/ActiveRecord/Integration/ClassMethods.html#method-i-to_param","(method_name = nil)","<p>Defines your model&#39;s <code>to_param</code> method to generate â€œprettyâ€ URLs using <code>method_name</code>, which â€¦\n"],["to_param","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-to_param","()",""],["to_param","Array","classes/Array.html#method-i-to_param","()","<p>Calls <code>to_param</code> on all its elements and joins the result with slashes. This is used by <code>url_for</code> in Action â€¦\n"],["to_param","FalseClass","classes/FalseClass.html#method-i-to_param","()","<p>Returns <code>self</code>.\n"],["to_param","Hash","classes/Hash.html#method-i-to_param","(namespace = nil)",""],["to_param","NilClass","classes/NilClass.html#method-i-to_param","()","<p>Returns <code>self</code>.\n"],["to_param","Object","classes/Object.html#method-i-to_param","()","<p>Alias of <code>to_s</code>.\n"],["to_param","TrueClass","classes/TrueClass.html#method-i-to_param","()","<p>Returns <code>self</code>.\n"],["to_partial_path","ActionText::Attachables::ContentAttachment","classes/ActionText/Attachables/ContentAttachment.html#method-i-to_partial_path","()",""],["to_partial_path","ActionText::Attachables::MissingAttachable","classes/ActionText/Attachables/MissingAttachable.html#method-c-to_partial_path","()",""],["to_partial_path","ActionText::Attachables::RemoteImage","classes/ActionText/Attachables/RemoteImage.html#method-i-to_partial_path","()",""],["to_partial_path","ActionText::Content","classes/ActionText/Content.html#method-i-to_partial_path","()",""],["to_partial_path","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-to_partial_path","()",""],["to_partial_path","ActiveModel::Conversion","classes/ActiveModel/Conversion.html#method-i-to_partial_path","()","<p>Returns a <code>string</code> identifying the path associated with the object. ActionPack uses this to find a suitable â€¦\n"],["to_path","ActionDispatch::Http::UploadedFile","classes/ActionDispatch/Http/UploadedFile.html#method-i-to_path","()","<p>Shortcut for <code>tempfile.to_path</code>.\n"],["to_path","ActionDispatch::Response::RackBody","classes/ActionDispatch/Response/RackBody.html#method-i-to_path","()",""],["to_path","ActionView::FileSystemResolver","classes/ActionView/FileSystemResolver.html#method-i-to_path","()",""],["to_plain_text","ActionText::Attachment","classes/ActionText/Attachment.html#method-i-to_plain_text","()",""],["to_plain_text","ActionText::Content","classes/ActionText/Content.html#method-i-to_plain_text","()",""],["to_plain_text","ActionText::Fragment","classes/ActionText/Fragment.html#method-i-to_plain_text","()",""],["to_plain_text","ActionText::RichText","classes/ActionText/RichText.html#method-i-to_plain_text","()",""],["to_prepare","ActiveSupport::Reloader","classes/ActiveSupport/Reloader.html#method-c-to_prepare","(*args, &block)","<p>Registers a callback that will run once at application startup and every time the code is reloaded.\n"],["to_prepare","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-to_prepare","(&blk)","<p>Defines generic callbacks to run before #after_initialize. Useful for Rails::Railtie subclasses.\n"],["to_prepare_blocks","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-to_prepare_blocks","()","<p>Array of callbacks defined by #to_prepare.\n"],["to_query","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-to_query","(*args)","<p>Returns a string representation of the receiver suitable for use as a URL query string:\n\n<pre><code>params = ActionController::Parameters.new({ ...\n</code></pre>\n"],["to_query","Array","classes/Array.html#method-i-to_query","(key)","<p>Converts an array into a string suitable for use as a URL query string, using the given <code>key</code> as the param â€¦\n"],["to_query","Hash","classes/Hash.html#method-i-to_query","(namespace = nil)","<p>Returns a string representation of the receiver suitable for use as a URL query string:\n\n<pre><code>{name: &#39;David&#39;, ...\n</code></pre>\n"],["to_query","Object","classes/Object.html#method-i-to_query","(key)","<p>Converts an object into a string suitable for use as a URL query string, using the given <code>key</code> as the param â€¦\n"],["to_r","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_r","()","<p>Returns the object&#39;s date and time as a rational number of seconds since the Epoch (January 1, 1970 â€¦\n"],["to_rendered_html_with_layout","ActionText::Content","classes/ActionText/Content.html#method-i-to_rendered_html_with_layout","()",""],["to_rich_text_attributes","ActionText::Attachable","classes/ActionText/Attachable.html#method-i-to_rich_text_attributes","(attributes = {})",""],["to_run","ActiveSupport::ExecutionWrapper","classes/ActiveSupport/ExecutionWrapper.html#method-c-to_run","(*args, &block)",""],["to_s","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-to_s","","<p>Returns the content of the parameters as a string.\n"],["to_s","ActionDispatch::RemoteIp::GetIp","classes/ActionDispatch/RemoteIp/GetIp.html#method-i-to_s","()","<p>Memoizes the value returned by #calculate_ip and returns it for ActionDispatch::Request to use.\n"],["to_s","ActionText::Attachment","classes/ActionText/Attachment.html#method-i-to_s","()",""],["to_s","ActionText::Content","classes/ActionText/Content.html#method-i-to_s","()",""],["to_s","ActionText::Fragment","classes/ActionText/Fragment.html#method-i-to_s","()",""],["to_s","ActionText::TrixAttachment","classes/ActionText/TrixAttachment.html#method-i-to_s","()",""],["to_s","ActionView::FileSystemResolver","classes/ActionView/FileSystemResolver.html#method-i-to_s","()",""],["to_s","ActionView::FixtureResolver","classes/ActionView/FixtureResolver.html#method-i-to_s","()",""],["to_s","ActionView::Template::Sources::File","classes/ActionView/Template/Sources/File.html#method-i-to_s","()",""],["to_s","ActionView::Template::Types::Type","classes/ActionView/Template/Types/Type.html#method-i-to_s","()",""],["to_s","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-to_s","","<p>Returns the class name.\n\n<pre><code>class BlogPost\n  extend ActiveModel::Naming\nend\n\nBlogPost.model_name.to_s # =&gt; ...\n</code></pre>\n"],["to_s","ActiveRecord::ConnectionAdapters::AbstractAdapter::Version","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter/Version.html#method-i-to_s","()",""],["to_s","ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit::Data","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Bit/Data.html#method-i-to_s","()",""],["to_s","ActiveStorage::Filename","classes/ActiveStorage/Filename.html#method-i-to_s","()","<p>Returns the sanitized version of the filename.\n"],["to_s","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-to_s","()","<p>Returns the amount of seconds a duration covers as a string. For more information check to_i method. â€¦\n"],["to_s","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-to_s","()",""],["to_s","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_s","(format = NOT_SET)","<p>Returns a string of the object&#39;s date and time.\n"],["to_s","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-to_s","()","<p>Returns a textual representation of this time zone.\n"],["to_s","Mime::NullType","classes/Mime/NullType.html#method-i-to_s","()",""],["to_s","Mime::Type","classes/Mime/Type.html#method-i-to_s","()",""],["to_s","Rails::Generators::AppBase::GemfileEntry","classes/Rails/Generators/AppBase/GemfileEntry.html#method-i-to_s","()",""],["to_s","Rails::Info","classes/Rails/Info.html#method-c-to_s","()",""],["to_s","Rails::SourceAnnotationExtractor::Annotation","classes/Rails/SourceAnnotationExtractor/Annotation.html#method-i-to_s","(options = {})","<p>Returns a representation of the annotation that looks like this:\n\n<pre><code>[126] [TODO] This algorithm is simple ...\n</code></pre>\n"],["to_sentence","ActionView::Helpers::OutputSafetyHelper","classes/ActionView/Helpers/OutputSafetyHelper.html#method-i-to_sentence","(array, options = {})","<p>Converts the array to a comma-separated sentence where the last element is joined by the connector word. â€¦\n"],["to_sentence","Array","classes/Array.html#method-i-to_sentence","(options = {})","<p>Converts the array to a comma-separated sentence where the last element is joined by the connector word. â€¦\n"],["to_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-to_sql","(arel_or_sql_string, binds = [])","<p>Converts an arel AST to SQL\n"],["to_sql","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-to_sql","()","<p>Returns sql statement for the relation.\n\n<pre><code>User.where(name: &#39;Oscar&#39;).to_sql\n# =&gt; SELECT &quot;users&quot;.* FROM &quot;users&quot; ...\n</code></pre>\n"],["to_str","ActionView::Template::Types::Type","classes/ActionView/Template/Types/Type.html#method-i-to_str","()",""],["to_str","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-to_str","","<p>Equivalent to <code>to_s</code>.\n"],["to_str","Mime::Type","classes/Mime/Type.html#method-i-to_str","()",""],["to_sym","ActionView::Template::Types::Type","classes/ActionView/Template/Types/Type.html#method-i-to_sym","()",""],["to_sym","Mime::Type","classes/Mime/Type.html#method-i-to_sym","()",""],["to_tag","ActiveSupport::XmlMini","classes/ActiveSupport/XmlMini.html#method-i-to_tag","(key, value, options)",""],["to_time","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_time","()","<p>Returns an instance of <code>Time</code>, either with the same UTC offset as <code>self</code> or in the local system timezone â€¦\n"],["to_time","Date","classes/Date.html#method-i-to_time","(form = :local)","<p>Converts a Date instance to a Time, where the time is set to the beginning of the day. The timezone can â€¦\n"],["to_time","DateTime","classes/DateTime.html#method-i-to_time","()","<p>Either return an instance of <code>Time</code> with the same UTC offset as <code>self</code> or an instance of <code>Time</code> representing â€¦\n"],["to_time","String","classes/String.html#method-i-to_time","(form = :local)","<p>Converts a string to a Time value. The <code>form</code> can be either <code>:utc</code> or <code>:local</code> (default <code>:local</code>).\n<p>The time is â€¦\n"],["to_time","Time","classes/Time.html#method-i-to_time","()","<p>Either return <code>self</code> or the time in the local system timezone depending on the setting of <code>ActiveSupport.to_time_preserves_timezone</code> â€¦\n"],["to_trix_attachment","ActionText::Attachments::TrixConversion","classes/ActionText/Attachments/TrixConversion.html#method-i-to_trix_attachment","(content = trix_attachment_content)",""],["to_trix_content_attachment_partial_path","ActionText::Attachable","classes/ActionText/Attachable.html#method-i-to_trix_content_attachment_partial_path","()",""],["to_trix_content_attachment_partial_path","ActionText::Attachables::ContentAttachment","classes/ActionText/Attachables/ContentAttachment.html#method-i-to_trix_content_attachment_partial_path","()",""],["to_trix_content_attachment_partial_path","ActionText::Engine","classes/ActionText/Engine.html#method-i-to_trix_content_attachment_partial_path","()",""],["to_trix_html","ActionText::Content","classes/ActionText/Content.html#method-i-to_trix_html","()",""],["to_trix_html","ActionText::RichText","classes/ActionText/RichText.html#method-i-to_trix_html","()",""],["to_unsafe_h","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-to_unsafe_h","()","<p>Returns an unsafe, unfiltered <code>ActiveSupport::HashWithIndifferentAccess</code> representation of the parameters. â€¦\n"],["to_unsafe_hash","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-to_unsafe_hash","()",""],["to_xml","Array","classes/Array.html#method-i-to_xml","(options = {})","<p>Returns a string that represents the array in XML by invoking <code>to_xml</code> on each element. Active Record collections â€¦\n"],["to_xml","Hash","classes/Hash.html#method-i-to_xml","(options = {})","<p>Returns a string containing an XML representation of its receiver:\n\n<pre><code>{ foo: 1, bar: 2 }.to_xml\n# =&gt;\n# &lt;?xml ...\n</code></pre>\n"],["today","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-today","()","<p>Returns the current date in this time zone.\n"],["today?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-today-3F","()","<p>Returns true if the current object&#39;s time falls within the current day.\n"],["today?","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-today-3F","()","<p>Returns true if the date/time is today.\n"],["toggle","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-toggle","(attribute)","<p>Assigns to <code>attribute</code> the boolean opposite of <code>attribute?</code>. So if the predicate returns <code>true</code> the attribute â€¦\n"],["toggle!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-toggle-21","(attribute)","<p>Wrapper around #toggle that saves the record. This method differs from its non-bang version in the sense â€¦\n"],["token_and_options","ActionController::HttpAuthentication::Token","classes/ActionController/HttpAuthentication/Token.html#method-i-token_and_options","(request)","<p>Parses the token and options out of the token Authorization header. The value for the Authorization header â€¦\n"],["token_list","ActionView::Helpers::TagHelper","classes/ActionView/Helpers/TagHelper.html#method-i-token_list","(*args)","<p>Returns a string of tokens built from <code>args</code>.\n<p>Examples\n\n<pre><code>token_list(&quot;foo&quot;, &quot;bar&quot;)\n # =&gt; &quot;foo bar&quot;\ntoken_list(&quot;foo&quot;, ...\n</code></pre>\n"],["token_params_from","ActionController::HttpAuthentication::Token","classes/ActionController/HttpAuthentication/Token.html#method-i-token_params_from","(auth)",""],["tomorrow","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-tomorrow","()","<p>Returns the next date in this time zone.\n"],["tomorrow","Date","classes/Date.html#method-c-tomorrow","()","<p>Returns a new Date representing the date 1 day after today (i.e. tomorrow&#39;s date).\n"],["tomorrow","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-tomorrow","()","<p>Returns a new date/time representing tomorrow.\n"],["tomorrow?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-tomorrow-3F","()","<p>Returns true if the current object&#39;s time falls within the next day (tomorrow).\n"],["tomorrow?","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-tomorrow-3F","()","<p>Returns true if the date/time is tomorrow.\n"],["touch","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-touch","(*names, time: nil)","<p>Saves the record with the updated_at/on attributes set to the current time or the time specified. Please â€¦\n"],["touch_all","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-touch_all","(*names, time: nil)","<p>Touches all records in the current relation, setting the <code>updated_at</code>/<code>updated_on</code> attributes to the current â€¦\n"],["trace_to_show","ActionDispatch::ExceptionWrapper","classes/ActionDispatch/ExceptionWrapper.html#method-i-trace_to_show","()",""],["traces","ActionDispatch::ExceptionWrapper","classes/ActionDispatch/ExceptionWrapper.html#method-i-traces","()",""],["transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-transaction","(requires_new: nil, isolation: nil, joinable: true, &block)","<p>Runs the given block in a database transaction, and returns the result of the block.\n<p>Nested transactions â€¦\n"],["transaction","ActiveRecord::Transactions::ClassMethods","classes/ActiveRecord/Transactions/ClassMethods.html#method-i-transaction","(**options, &block)","<p>See the ConnectionAdapters::DatabaseStatements#transaction API docs.\n"],["transaction_isolation_levels","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-transaction_isolation_levels","()",""],["transaction_open?","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-transaction_open-3F","()",""],["transform","ActiveStorage::Transformers::Transformer","classes/ActiveStorage/Transformers/Transformer.html#method-i-transform","(file, format:)","<p>Applies the transformations to the source image in <code>file</code>, producing a target image in the specified <code>format</code> â€¦\n"],["transform","ActiveStorage::Variation","classes/ActiveStorage/Variation.html#method-i-transform","(file, &block)","<p>Accepts a File object, performs the <code>transformations</code> against it, and saves the transformed image into â€¦\n"],["transform_keys","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-transform_keys","(&block)","<p>Returns a new <code>ActionController::Parameters</code> instance with the results of running <code>block</code> once for every â€¦\n"],["transform_keys","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-transform_keys","(*args, &block)",""],["transform_keys","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-transform_keys","(*args, &block)",""],["transform_keys!","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-transform_keys-21","(&block)","<p>Performs keys transformation and returns the altered <code>ActionController::Parameters</code> instance.\n"],["transform_keys!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-transform_keys-21","()",""],["transform_keys!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-transform_keys-21","()",""],["transform_values","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-transform_values","()","<p>Returns a new <code>ActionController::Parameters</code> with the results of running <code>block</code> once for every value. The â€¦\n"],["transform_values","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-transform_values","(*args, &block)",""],["transform_values","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-transform_values","(*args, &block)",""],["transform_values!","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-transform_values-21","()","<p>Performs values transformation and returns the altered <code>ActionController::Parameters</code> instance.\n"],["transient_failure?","ActionMailbox::Relayer::Result","classes/ActionMailbox/Relayer/Result.html#method-i-transient_failure-3F","()",""],["translate","AbstractController::Translation","classes/AbstractController/Translation.html#method-i-translate","(key, **options)","<p>Delegates to <code>I18n.translate</code>. Also aliased as <code>t</code>.\n<p>When the given key starts with a period, it will be scoped â€¦\n"],["translate","ActionView::Helpers::TranslationHelper","classes/ActionView/Helpers/TranslationHelper.html#method-i-translate","(key, **options)","<p>Delegates to <code>I18n#translate</code> but also performs three additional functions.\n<p>First, it will ensure that any â€¦\n"],["transliterate","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-transliterate","(string, replacement = \"?\", locale: nil)","<p>Replaces non-ASCII characters with an ASCII approximation, or if none exists, a replacement character â€¦\n"],["transmissions","ActionCable::Channel::TestCase::Behavior","classes/ActionCable/Channel/TestCase/Behavior.html#method-i-transmissions","()","<p>Returns messages transmitted into channel\n"],["transmit","ActionCable::Channel::Base","classes/ActionCable/Channel/Base.html#method-i-transmit","(data, via: nil)","<p>Transmit a hash of data to the subscriber. The hash will automatically be wrapped in a JSON envelope â€¦\n"],["transmit","ActionCable::Channel::ConnectionStub","classes/ActionCable/Channel/ConnectionStub.html#method-i-transmit","(cable_message)",""],["travel","ActiveSupport::Testing::TimeHelpers","classes/ActiveSupport/Testing/TimeHelpers.html#method-i-travel","(duration, &block)","<p>Changes current time to the time in the future or in the past by a given time difference by stubbing â€¦\n"],["travel_back","ActiveSupport::Testing::TimeHelpers","classes/ActiveSupport/Testing/TimeHelpers.html#method-i-travel_back","()","<p>Returns the current time back to its original state, by removing the stubs added by <code>travel</code>, <code>travel_to</code> â€¦\n"],["travel_to","ActiveSupport::Testing::TimeHelpers","classes/ActiveSupport/Testing/TimeHelpers.html#method-i-travel_to","(date_or_time)","<p>Changes current time to the given time by stubbing <code>Time.now</code>, <code>Date.today</code>, and <code>DateTime.now</code> to return the â€¦\n"],["tree","ActionView::Digestor","classes/ActionView/Digestor.html#method-c-tree","(name, finder, partial = false, seen = {})","<p>Create a dependency tree for template named <code>name</code>.\n"],["truncate","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-truncate","(text, options = {}, &block)","<p>Truncates a given <code>text</code> after a given <code>:length</code> if <code>text</code> is longer than <code>:length</code> (defaults to 30). The last â€¦\n"],["truncate","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-truncate","(table_name, name = nil)","<p>Executes the truncate statement.\n"],["truncate","String","classes/String.html#method-i-truncate","(truncate_at, options = {})","<p>Truncates a given <code>text</code> after a given <code>length</code> if <code>text</code> is longer than <code>length</code>:\n\n<pre><code>&#39;Once upon a time in a world ...\n</code></pre>\n"],["truncate_all","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-truncate_all","(environment = env)",""],["truncate_bytes","String","classes/String.html#method-i-truncate_bytes","(truncate_at, omission: \"â€¦\")","<p>Truncates <code>text</code> to at most <code>bytesize</code> bytes in length without breaking string encoding by splitting multibyte â€¦\n"],["truncate_words","String","classes/String.html#method-i-truncate_words","(words_count, options = {})","<p>Truncates a given <code>text</code> after a given number of words (<code>words_count</code>):\n\n<pre><code>&#39;Once upon a time in a world far far ...\n</code></pre>\n"],["try","Delegator","classes/Delegator.html#method-i-try","","<p>See Object#try\n"],["try","NilClass","classes/NilClass.html#method-i-try","(*)","<p>Calling <code>try</code> on <code>nil</code> always returns <code>nil</code>. It becomes especially helpful when navigating through associations â€¦\n"],["try","Object","classes/Object.html#method-i-try","","<p>Invokes the public method whose name goes as first argument just like <code>public_send</code> does, except that if â€¦\n"],["try!","Delegator","classes/Delegator.html#method-i-try-21","","<p>See Object#try!\n"],["try!","NilClass","classes/NilClass.html#method-i-try-21","(*)","<p>Calling <code>try!</code> on <code>nil</code> always returns <code>nil</code>.\n\n<pre><code>nil.try!(:name) # =&gt; nil\n</code></pre>\n"],["try!","Object","classes/Object.html#method-i-try-21","","<p>Same as #try, but raises a <code>NoMethodError</code> exception if the receiver is not <code>nil</code> and does not implement â€¦\n"],["tsort_each_child","Rails::Initializable::Collection","classes/Rails/Initializable/Collection.html#method-i-tsort_each_child","(initializer, &block)",""],["tsrange","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-tsrange","",""],["tstzrange","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-tstzrange","",""],["tsvector","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-tsvector","",""],["tv_sec","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-tv_sec","()",""],["type","ActionView::Template","classes/ActionView/Template.html#method-i-type","()",""],["type","ActiveRecord::Type::Json","classes/ActiveRecord/Type/Json.html#method-i-type","()",""],["type_cast","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-type_cast","(value)","<p>Cast a <code>value</code> to a type that the database understands. For example, SQLite does not understand dates, â€¦\n"],["type_cast_config_to_boolean","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-c-type_cast_config_to_boolean","(config)",""],["type_cast_config_to_integer","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-c-type_cast_config_to_integer","(config)",""],["type_for_attribute","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-type_for_attribute","(attr_name, &block)","<p>Returns the type of the attribute with the given name, after applying all modifiers. This method is the â€¦\n"],["uncacheable!","ActionView::Helpers::CacheHelper","classes/ActionView/Helpers/CacheHelper.html#method-i-uncacheable-21","()","<p>Raises <code>UncacheableFragmentError</code> when called from within a <code>cache</code> block.\n<p>Useful to denote helper methods â€¦\n"],["uncached","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-uncached","()","<p>Disable the query cache within the block.\n"],["uncached","ActiveRecord::QueryCache::ClassMethods","classes/ActiveRecord/QueryCache/ClassMethods.html#method-i-uncached","(&block)","<p>Disable the query cache within the block if Active Record is configured. If it&#39;s not, it will execute â€¦\n"],["uncountable","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-i-uncountable","(*words)","<p>Specifies words that are uncountable and should not be inflected.\n\n<pre><code>uncountable &#39;money&#39;\nuncountable &#39;money&#39;, ...\n</code></pre>\n"],["uncountable?","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-uncountable-3F","()",""],["uncountable?","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-uncountable-3F","(record_or_class)","<p>Identifies whether the class name of a record or class is uncountable.\n\n<pre><code>ActiveModel::Naming.uncountable?(Sheep) ...\n</code></pre>\n"],["uncountable?","ActiveSupport::Inflector::Inflections::Uncountables","classes/ActiveSupport/Inflector/Inflections/Uncountables.html#method-i-uncountable-3F","(str)",""],["uncountable?","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-uncountable-3F","()",""],["undefine_attribute_methods","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-undefine_attribute_methods","()","<p>Removes all the previously dynamically defined methods from the class.\n\n<pre><code>class Person\n  include ActiveModel::AttributeMethods ...\n</code></pre>\n"],["underscore","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-underscore","(camel_cased_word)","<p>Makes an underscored, lowercase form from the expression in the string.\n<p>Changes &#39;::&#39; to &#39;/&#39; â€¦\n"],["underscore","String","classes/String.html#method-i-underscore","()","<p>The reverse of <code>camelize</code>. Makes an underscored, lowercase form from the expression in the string.\n<p><code>underscore</code> â€¦\n"],["unescape_bytea","ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/Quoting.html#method-i-unescape_bytea","(value)","<p>Unescapes bytea output from a database to the binary string it represents. NOTE: This is NOT an inverse â€¦\n"],["unfreeze_time","ActiveSupport::Testing::TimeHelpers","classes/ActiveSupport/Testing/TimeHelpers.html#method-i-unfreeze_time","()",""],["uniq!","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-uniq-21","(name)","<p>Deduplicate multiple values.\n"],["unload_interlock","ActiveSupport::Dependencies","classes/ActiveSupport/Dependencies.html#method-c-unload_interlock","(&block)","<p>Execute the supplied block while holding an exclusive lock, preventing any other thread from being inside â€¦\n"],["unloading","ActiveSupport::Dependencies::Interlock","classes/ActiveSupport/Dependencies/Interlock.html#method-i-unloading","(&block)",""],["unmask_token","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-unmask_token","(masked_token)",""],["unpermitted_parameters","ActionController::LogSubscriber","classes/ActionController/LogSubscriber.html#method-i-unpermitted_parameters","(event)",""],["unprepared_statement","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-unprepared_statement","()",""],["unquoted_false","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-unquoted_false","()",""],["unquoted_true","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-unquoted_true","()",""],["unregister","Mime::Type","classes/Mime/Type.html#method-c-unregister","(symbol)","<p>This method is opposite of register method.\n<p>To unregister a MIME type:\n\n<pre><code>Mime::Type.unregister(:mobile)\n</code></pre>\n"],["unregister_interceptor","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-unregister_interceptor","(interceptor)","<p>Unregister a previously registered Interceptor. Either a class, string, or symbol can be passed in as â€¦\n"],["unregister_interceptors","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-unregister_interceptors","(*interceptors)","<p>Unregister one or more previously registered Interceptors.\n"],["unregister_observer","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-unregister_observer","(observer)","<p>Unregister a previously registered Observer. Either a class, string, or symbol can be passed in as the â€¦\n"],["unregister_observers","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-unregister_observers","(*observers)","<p>Unregister one or more previously registered Observers.\n"],["unregister_preview_interceptor","ActionMailer::Previews::ClassMethods","classes/ActionMailer/Previews/ClassMethods.html#method-i-unregister_preview_interceptor","(interceptor)","<p>Unregister a previously registered Interceptor. Either a class or a string can be passed in as the Interceptor â€¦\n"],["unregister_preview_interceptors","ActionMailer::Previews::ClassMethods","classes/ActionMailer/Previews/ClassMethods.html#method-i-unregister_preview_interceptors","(*interceptors)","<p>Unregister one or more previously registered Interceptors.\n"],["unscope","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-unscope","(*args)","<p>Removes an unwanted relation that is already defined on a chain of relations. This is useful when passing â€¦\n"],["unscoped","ActiveRecord::Scoping::Default::ClassMethods","classes/ActiveRecord/Scoping/Default/ClassMethods.html#method-i-unscoped","(&block)","<p>Returns a scope for the model without the previously set scopes.\n\n<pre><code>class Post &lt; ActiveRecord::Base\n  def ...\n</code></pre>\n"],["unshift","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-unshift","(klass, *args, &block)",""],["unshift","Rails::Configuration::MiddlewareStackProxy","classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-unshift","(...)",""],["unshift","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-unshift","(*paths)",""],["unsigned_bigint","ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-unsigned_bigint","",""],["unsigned_decimal","ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-unsigned_decimal","",""],["unsigned_float","ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-unsigned_float","",""],["unsigned_integer","ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-unsigned_integer","",""],["unsubscribe","ActionCable::Channel::TestCase::Behavior","classes/ActionCable/Channel/TestCase/Behavior.html#method-i-unsubscribe","()","<p>Unsubscribe the subscription under test.\n"],["unsubscribe","ActionCable::SubscriptionAdapter::Base","classes/ActionCable/SubscriptionAdapter/Base.html#method-i-unsubscribe","(channel, message_callback)",""],["unsubscribe","ActiveSupport::Notifications","classes/ActiveSupport/Notifications.html#method-c-unsubscribe","(subscriber_or_name)",""],["unsubscribe","ActiveSupport::Notifications::Fanout","classes/ActiveSupport/Notifications/Fanout.html#method-i-unsubscribe","(subscriber_or_name)",""],["unsubscribe!","ActiveSupport::Notifications::Fanout::Subscribers::Matcher::AllMessages","classes/ActiveSupport/Notifications/Fanout/Subscribers/Matcher/AllMessages.html#method-i-unsubscribe-21","(*)",""],["unsubscribed","ActionCable::Channel::Base","classes/ActionCable/Channel/Base.html#method-i-unsubscribed","()","<p>Called once a consumer has cut its cable connection. Can be used for cleaning up connections or marking â€¦\n"],["until","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-until","(time = ::Time.current)",""],["unwrapped_exception","ActionDispatch::ExceptionWrapper","classes/ActionDispatch/ExceptionWrapper.html#method-i-unwrapped_exception","()",""],["up","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-up","()",""],["up_only","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-up_only","(&block)","<p>Used to specify an operation that is only run when migrating up (for example, populating a new column â€¦\n"],["upcase_first","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-upcase_first","(string)","<p>Converts just the first character to uppercase.\n\n<pre><code>upcase_first(&#39;what a Lovely Day&#39;) # =&gt; &quot;What a Lovely ...\n</code></pre>\n"],["upcase_first","String","classes/String.html#method-i-upcase_first","()","<p>Converts just the first character to uppercase.\n\n<pre><code>&#39;what a Lovely Day&#39;.upcase_first # =&gt; &quot;What a Lovely Day&quot; ...\n</code></pre>\n"],["update","ActionText::Fragment","classes/ActionText/Fragment.html#method-i-update","()",""],["update","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-update","(arel, name = nil, binds = [])","<p>Executes the update statement and returns the number of rows affected.\n"],["update","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-update","(attributes)","<p>Updates the attributes of the model from the passed-in hash and saves the record, all wrapped in a transaction. â€¦\n"],["update","ActiveRecord::Persistence::ClassMethods","classes/ActiveRecord/Persistence/ClassMethods.html#method-i-update","(id = :all, attributes)","<p>Updates an object (or multiple objects) and saves it to the database, if validations pass. The resulting â€¦\n"],["update","ActiveStorage::DiskController","classes/ActiveStorage/DiskController.html#method-i-update","()",""],["update","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-update","(*other_hashes, &block)","<p>Updates the receiver in-place, merging in the hashes passed as arguments:\n\n<pre><code>hash_1 = ActiveSupport::HashWithIndifferentAccess.new ...\n</code></pre>\n"],["update","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-update","(*other_hashes, &block)","<p>Updates the receiver in-place, merging in the hashes passed as arguments:\n\n<pre><code>hash_1 = ActiveSupport::HashWithIndifferentAccess.new ...\n</code></pre>\n"],["update","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-i-update","(params = nil)","<p>PATCH/PUT update\n"],["update!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-update-21","(attributes)","<p>Updates its receiver just like #update but calls #save! instead of <code>save</code>, so an exception is raised if â€¦\n"],["update!","ActiveRecord::Persistence::ClassMethods","classes/ActiveRecord/Persistence/ClassMethods.html#method-i-update-21","(id = :all, attributes)","<p>Updates the object (or multiple objects) just like #update but calls #update! instead of <code>update</code>, so an â€¦\n"],["update_all","ActiveRecord::Batches::BatchEnumerator","classes/ActiveRecord/Batches/BatchEnumerator.html#method-i-update_all","(updates)","<p>Updates records in batches. Returns the total number of rows affected.\n\n<pre><code>Person.in_batches.update_all(&quot;age ...\n</code></pre>\n"],["update_all","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-update_all","(updates)","<p>Updates all records in the current relation with details given. This method constructs a single SQL  â€¦\n"],["update_attribute","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-update_attribute","(name, value)","<p>Updates a single attribute and saves the record. This is especially useful for boolean flags on existing â€¦\n"],["update_column","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-update_column","(name, value)","<p>Equivalent to <code>update_columns(name =&gt; value)</code>.\n"],["update_columns","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-update_columns","(attributes)","<p>Updates the attributes directly in the database issuing an UPDATE SQL statement and sets them in the â€¦\n"],["update_counters","ActiveRecord::CounterCache::ClassMethods","classes/ActiveRecord/CounterCache/ClassMethods.html#method-i-update_counters","(id, counters)","<p>A generic â€œcounter updaterâ€ implementation, intended primarily to be used by #increment_counter â€¦\n"],["update_counters","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-update_counters","(id, counters)","<p>Make sure the lock version column gets updated when counters are updated.\n"],["update_counters","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-update_counters","(counters)","<p>Updates the counters of the records in the current relation.\n<p>Parameters\n<p><code>counter</code> - A Hash containing the â€¦\n"],["update_metadata","ActiveStorage::Service","classes/ActiveStorage/Service.html#method-i-update_metadata","(key, **metadata)","<p>Update metadata for the file identified by <code>key</code> in the service. Override in subclasses only if the service â€¦\n"],["update_metadata","ActiveStorage::Service::GCSService","classes/ActiveStorage/Service/GCSService.html#method-i-update_metadata","(key, content_type:, disposition: nil, filename: nil, custom_metadata: {})",""],["updated?","ActiveSupport::FileUpdateChecker","classes/ActiveSupport/FileUpdateChecker.html#method-i-updated-3F","()","<p>Check if any of the entries were updated. If so, the watched and/or updated_at values are cached until â€¦\n"],["upgrade_insecure_requests","ActionDispatch::ContentSecurityPolicy","classes/ActionDispatch/ContentSecurityPolicy.html#method-i-upgrade_insecure_requests","(enabled = true)","<p>Specify whether user agents should treat any assets over HTTP as HTTPS:\n\n<pre><code>policy.upgrade_insecure_requests\n</code></pre>\n"],["upload","ActiveStorage::Blob","classes/ActiveStorage/Blob.html#method-i-upload","(io, identify: true)","<p>Uploads the <code>io</code> to the service on the <code>key</code> for this blob. Blobs are intended to be immutable, so you shouldn&#39;t â€¦\n"],["upload","ActiveStorage::Service","classes/ActiveStorage/Service.html#method-i-upload","(key, io, checksum: nil, **options)","<p>Upload the <code>io</code> to the <code>key</code> specified. If a <code>checksum</code> is provided, the service will ensure a match when the â€¦\n"],["upload","ActiveStorage::Service::AzureStorageService","classes/ActiveStorage/Service/AzureStorageService.html#method-i-upload","(key, io, checksum: nil, filename: nil, content_type: nil, disposition: nil, custom_metadata: {}, **)",""],["upload","ActiveStorage::Service::DiskService","classes/ActiveStorage/Service/DiskService.html#method-i-upload","(key, io, checksum: nil, **)",""],["upload","ActiveStorage::Service::GCSService","classes/ActiveStorage/Service/GCSService.html#method-i-upload","(key, io, checksum: nil, content_type: nil, disposition: nil, filename: nil, custom_metadata: {})",""],["upload","ActiveStorage::Service::MirrorService","classes/ActiveStorage/Service/MirrorService.html#method-i-upload","(key, io, checksum: nil, **options)","<p>Upload the <code>io</code> to the <code>key</code> specified to all services. If a <code>checksum</code> is provided, all services will ensure â€¦\n"],["upload","ActiveStorage::Service::S3Service","classes/ActiveStorage/Service/S3Service.html#method-i-upload","(key, io, checksum: nil, filename: nil, content_type: nil, disposition: nil, custom_metadata: {}, **)",""],["upsert","ActiveRecord::Persistence::ClassMethods","classes/ActiveRecord/Persistence/ClassMethods.html#method-i-upsert","(attributes, on_duplicate: :update, returning: nil, unique_by: nil, record_timestamps: nil)","<p>Updates or inserts (upserts) a single record into the database in a single SQL INSERT statement. It does â€¦\n"],["upsert_all","ActiveRecord::Persistence::ClassMethods","classes/ActiveRecord/Persistence/ClassMethods.html#method-i-upsert_all","(attributes, on_duplicate: :update, update_only: nil, returning: nil, unique_by: nil, record_timestamps: nil)","<p>Updates or inserts (upserts) multiple records into the database in a single SQL INSERT statement. It â€¦\n"],["url","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-url","()","<p>Returns the complete URL used for this request.\n\n<pre><code>req = ActionDispatch::Request.new &#39;HTTP_HOST&#39; =&gt; &#39;example.com&#39; ...\n</code></pre>\n"],["url","ActiveStorage::Blob","classes/ActiveStorage/Blob.html#method-i-url","(expires_in: ActiveStorage.service_urls_expire_in, disposition: :inline, filename: nil, **options)","<p>Returns the URL of the blob on the service. This returns a permanent URL for public files, and returns â€¦\n"],["url","ActiveStorage::Preview","classes/ActiveStorage/Preview.html#method-i-url","(**options)","<p>Returns the URL of the preview&#39;s variant on the service. Raises ActiveStorage::Preview::UnprocessedError â€¦\n"],["url","ActiveStorage::Service","classes/ActiveStorage/Service.html#method-i-url","(key, **options)","<p>Returns the URL for the file at the <code>key</code>. This returns a permanent URL for public files, and returns a â€¦\n"],["url","ActiveStorage::Variant","classes/ActiveStorage/Variant.html#method-i-url","(expires_in: ActiveStorage.service_urls_expire_in, disposition: :inline)","<p>Returns the URL of the blob variant on the service. See {ActiveStorage::Blob#url} for details.\n<p>Use <code>url_for(variant)</code> â€¦\n"],["url_field","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-url_field","","<p>Wraps ActionView::Helpers::FormHelper#url_field for form builders:\n\n<pre><code>&lt;%= form_with model: @user do |f| %&gt; ...\n</code></pre>\n"],["url_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-url_field","(object_name, method, options = {})","<p>Returns a text_field of type â€œurlâ€.\n\n<pre><code>url_field(&quot;user&quot;, &quot;homepage&quot;)\n# =&gt; &lt;input id=&quot;user_homepage&quot; ...\n</code></pre>\n"],["url_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-url_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type â€œurlâ€.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],["url_for","ActionController::Metal","classes/ActionController/Metal.html#method-i-url_for","(string)","<p>Basic url_for that can be overridden for more robust functionality.\n"],["url_for","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-c-url_for","(options)",""],["url_for","ActionDispatch::Routing::UrlFor","classes/ActionDispatch/Routing/UrlFor.html#method-i-url_for","(options = nil)","<p>Generate a URL based on the options provided, default_url_options, and the routes defined in routes.rb. â€¦\n"],["url_for","ActionView::RoutingUrlFor","classes/ActionView/RoutingUrlFor.html#method-i-url_for","(options = nil)","<p>Returns the URL for the set of <code>options</code> provided. This takes the same options as <code>url_for</code> in Action Controller â€¦\n"],["url_for_direct_upload","ActiveStorage::Service","classes/ActiveStorage/Service.html#method-i-url_for_direct_upload","(key, expires_in:, content_type:, content_length:, checksum:, custom_metadata: {})","<p>Returns a signed, temporary URL that a direct upload file can be PUT to on the <code>key</code>. The URL will be valid â€¦\n"],["url_for_direct_upload","ActiveStorage::Service::AzureStorageService","classes/ActiveStorage/Service/AzureStorageService.html#method-i-url_for_direct_upload","(key, expires_in:, content_type:, content_length:, checksum:, custom_metadata: {})",""],["url_for_direct_upload","ActiveStorage::Service::DiskService","classes/ActiveStorage/Service/DiskService.html#method-i-url_for_direct_upload","(key, expires_in:, content_type:, content_length:, checksum:, custom_metadata: {})",""],["url_for_direct_upload","ActiveStorage::Service::GCSService","classes/ActiveStorage/Service/GCSService.html#method-i-url_for_direct_upload","(key, expires_in:, checksum:, custom_metadata: {}, **)",""],["url_for_direct_upload","ActiveStorage::Service::S3Service","classes/ActiveStorage/Service/S3Service.html#method-i-url_for_direct_upload","(key, expires_in:, content_type:, content_length:, checksum:, custom_metadata: {})",""],["url_from","ActionController::Redirecting","classes/ActionController/Redirecting.html#method-i-url_from","(location)","<p>Verifies the passed <code>location</code> is an internal URL that&#39;s safe to redirect to and returns it, or nil â€¦\n"],["url_helper_prefix","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-url_helper_prefix","()",""],["url_options","ActionController::UrlFor","classes/ActionController/UrlFor.html#method-i-url_options","()",""],["url_options","ActionDispatch::Integration::Session","classes/ActionDispatch/Integration/Session.html#method-i-url_options","()",""],["url_options","ActionDispatch::IntegrationTest::UrlOptions","classes/ActionDispatch/IntegrationTest/UrlOptions.html#method-i-url_options","()",""],["url_options","ActionDispatch::Routing::UrlFor","classes/ActionDispatch/Routing/UrlFor.html#method-i-url_options","()","<p>Hook overridden in controller to add request information with <code>default_url_options</code>. Application logic â€¦\n"],["url_to_asset","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-url_to_asset","(source, options = {})",""],["url_to_audio","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-url_to_audio","(source, options = {})",""],["url_to_font","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-url_to_font","(source, options = {})",""],["url_to_image","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-url_to_image","(source, options = {})",""],["url_to_javascript","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-url_to_javascript","(source, options = {})",""],["url_to_stylesheet","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-url_to_stylesheet","(source, options = {})",""],["url_to_video","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-url_to_video","(source, options = {})",""],["us_zones","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-us_zones","()","<p>A convenience method for returning a collection of TimeZone objects for time zones in the USA.\n"],["usage_path","Rails::Command::Base","classes/Rails/Command/Base.html#method-c-usage_path","()","<p>Path to lookup a USAGE description in a file.\n"],["usage_path","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-usage_path","()",""],["use","ActionController::Metal","classes/ActionController/Metal.html#method-c-use","(...)","<p>Pushes the given Rack middleware and its arguments to the bottom of the middleware stack.\n"],["use","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-use","(klass, *args, &block)",""],["use","Rails::Configuration::MiddlewareStackProxy","classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-use","(...)",""],["use_accept_header","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-use_accept_header","()",""],["use_insert_returning?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-use_insert_returning-3F","()",""],["use_metadata_table?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-use_metadata_table-3F","()",""],["use_renderer","ActionController::Renderers::ClassMethods","classes/ActionController/Renderers/ClassMethods.html#method-i-use_renderer","(*args)",""],["use_renderers","ActionController::Renderers::ClassMethods","classes/ActionController/Renderers/ClassMethods.html#method-i-use_renderers","(*args)","<p>Adds, by name, a renderer or renderers to the <code>_renderers</code> available to call within controller actions. â€¦\n"],["use_zone","Time","classes/Time.html#method-c-use_zone","(time_zone)","<p>Allows override of <code>Time.zone</code> locally inside supplied block; resets <code>Time.zone</code> to existing value when done. â€¦\n"],["usec","DateTime","classes/DateTime.html#method-i-usec","()","<p>Returns the fraction of a second as microseconds\n"],["user_agent=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-user_agent-3D","(user_agent)",""],["user_name_and_password","ActionController::HttpAuthentication::Basic","classes/ActionController/HttpAuthentication/Basic.html#method-i-user_name_and_password","(request)",""],["username_error","ActiveRecord::DatabaseConnectionError","classes/ActiveRecord/DatabaseConnectionError.html#method-c-username_error","(username)",""],["uses_transaction","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-uses_transaction","(*methods)","<p>Prevents automatically wrapping each specified test in a transaction, to allow application logic transactions â€¦\n"],["uses_transaction?","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-uses_transaction-3F","(method)",""],["utc","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-utc","()","<p>Returns a <code>Time</code> instance of the simultaneous time in the UTC timezone.\n"],["utc","DateTime","classes/DateTime.html#method-i-utc","()","<p>Returns a <code>Time</code> instance of the simultaneous time in the UTC timezone.\n\n<pre><code>DateTime.civil(2005, 2, 21, 10, ...\n</code></pre>\n"],["utc?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-utc-3F","()","<p>Returns true if the current time zone is set to UTC.\n\n<pre><code>Time.zone = &#39;UTC&#39;                           # =&gt; ...\n</code></pre>\n"],["utc?","DateTime","classes/DateTime.html#method-i-utc-3F","()","<p>Returns <code>true</code> if <code>offset == 0</code>.\n"],["utc_offset","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-utc_offset","()","<p>Returns the offset from current time to UTC time in seconds.\n"],["utc_offset","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-utc_offset","()","<p>Returns the offset of this time zone from UTC in seconds.\n"],["utc_offset","DateTime","classes/DateTime.html#method-i-utc_offset","()","<p>Returns the offset value in seconds.\n"],["utc_to_local","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-utc_to_local","(time)","<p>Adjust the given time to the simultaneous time in the time zone represented by <code>self</code>. Returns a local â€¦\n"],["utf8_enforcer_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-utf8_enforcer_tag","()","<p>Creates the hidden UTF8 enforcer tag. Override this method in a helper to customize the tag.\n"],["uuid","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-uuid","()",""],["uuid","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-uuid","",""],["uuid_from_hash","Digest::UUID","classes/Digest/UUID.html#method-c-uuid_from_hash","(hash_class, namespace, name)","<p>Generates a v5 non-random UUID (Universally Unique IDentifier).\n<p>Using OpenSSL::Digest::MD5 generates version â€¦\n"],["uuid_v3","Digest::UUID","classes/Digest/UUID.html#method-c-uuid_v3","(uuid_namespace, name)","<p>Convenience method for uuid_from_hash using OpenSSL::Digest::MD5.\n"],["uuid_v4","Digest::UUID","classes/Digest/UUID.html#method-c-uuid_v4","()","<p>Convenience method for SecureRandom.uuid.\n"],["uuid_v5","Digest::UUID","classes/Digest/UUID.html#method-c-uuid_v5","(uuid_namespace, name)","<p>Convenience method for uuid_from_hash using OpenSSL::Digest::SHA1.\n"],["valid?","ActiveModel::Validations","classes/ActiveModel/Validations.html#method-i-valid-3F","(context = nil)","<p>Runs all the specified validations and returns <code>true</code> if no errors were added otherwise <code>false</code>.\n\n<pre><code>class Person ...\n</code></pre>\n"],["valid?","ActiveRecord::DynamicMatchers::Method","classes/ActiveRecord/DynamicMatchers/Method.html#method-i-valid-3F","()",""],["valid?","ActiveRecord::Validations","classes/ActiveRecord/Validations.html#method-i-valid-3F","(context = nil)","<p>Runs all the validations within the specified context. Returns <code>true</code> if no errors are found, <code>false</code> otherwise. â€¦\n"],["valid_accept_header","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-valid_accept_header","()",""],["valid_authenticity_token?","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-valid_authenticity_token-3F","(session, encoded_masked_token)","<p>Checks the client&#39;s masked token to see if it matches the session token. Essentially the inverse â€¦\n"],["valid_message?","ActiveSupport::MessageVerifier","classes/ActiveSupport/MessageVerifier.html#method-i-valid_message-3F","(signed_message)","<p>Checks if a signed message could have been generated by signing an object with the <code>MessageVerifier</code>&#39;s â€¦\n"],["valid_per_form_csrf_token?","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-valid_per_form_csrf_token-3F","(token, session)",""],["valid_request_origin?","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-valid_request_origin-3F","()","<p>Checks if the request originated from the same origin by looking at the Origin header.\n"],["validate","ActiveModel::EachValidator","classes/ActiveModel/EachValidator.html#method-i-validate","(record)","<p>Performs validation on the supplied record. By default this will call <code>validate_each</code> to determine validity â€¦\n"],["validate","ActiveModel::Validations","classes/ActiveModel/Validations.html#method-i-validate","(context = nil)",""],["validate","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validate","(*args, &block)","<p>Adds a validation method or block to the class. This is useful when overriding the <code>validate</code> instance â€¦\n"],["validate","ActiveModel::Validator","classes/ActiveModel/Validator.html#method-i-validate","(record)","<p>Override this method in subclasses with validation logic, adding errors to the records <code>errors</code> array where â€¦\n"],["validate","ActiveRecord::Validations","classes/ActiveRecord/Validations.html#method-i-validate","(context = nil)",""],["validate!","ActiveModel::Validations","classes/ActiveModel/Validations.html#method-i-validate-21","(context = nil)","<p>Runs all the validations within the specified context. Returns <code>true</code> if no errors are found, raises <code>ValidationError</code> â€¦\n"],["validate_check_constraint","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-validate_check_constraint","(table_name, **options)","<p>Validates the given check constraint.\n\n<pre><code>validate_check_constraint :products, name: &quot;price_check&quot;\n</code></pre>\n<p>The <code>options</code> â€¦\n"],["validate_column_size","ActiveRecord::Encryption::EncryptableRecord","classes/ActiveRecord/Encryption/EncryptableRecord.html#method-i-validate_column_size","(attribute_name)",""],["validate_constraint","ActiveRecord::ConnectionAdapters::PostgreSQL::AlterTable","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/AlterTable.html#method-i-validate_constraint","(name)",""],["validate_constraint","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-validate_constraint","(table_name, constraint_name)","<p>Validates the given constraint.\n<p>Validates the constraint named <code>constraint_name</code> on <code>accounts</code>.\n\n<pre><code>validate_constraint ...\n</code></pre>\n"],["validate_digest_response","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-validate_digest_response","(request, realm, &password_procedure)","<p>Returns false unless the request credentials response value matches the expected value. First try the â€¦\n"],["validate_each","ActiveModel::EachValidator","classes/ActiveModel/EachValidator.html#method-i-validate_each","(record, attribute, value)","<p>Override this method in subclasses with the validation logic, adding errors to the records <code>errors</code> array â€¦\n"],["validate_each","ActiveRecord::Encryption::ExtendedDeterministicUniquenessValidator::EncryptedUniquenessValidator","classes/ActiveRecord/Encryption/ExtendedDeterministicUniquenessValidator/EncryptedUniquenessValidator.html#method-i-validate_each","(record, attribute, value)",""],["validate_foreign_key","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-validate_foreign_key","(from_table, to_table = nil, **options)","<p>Validates the given foreign key.\n<p>Validates the foreign key on <code>accounts.branch_id</code>.\n\n<pre><code>validate_foreign_key ...\n</code></pre>\n"],["validate_nonce","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-validate_nonce","(secret_key, request, value, seconds_to_timeout = 5 * 60)","<p>Might want a shorter timeout depending on whether the request is a PATCH, PUT, or POST, and if the client â€¦\n"],["validate_secret_key_base","Rails::Application","classes/Rails/Application.html#method-i-validate_secret_key_base","(secret_key_base)",""],["validate_service_configuration","ActiveStorage::Attached::Model","classes/ActiveStorage/Attached/Model.html#method-i-validate_service_configuration","(association_name, service)",""],["validate_value_type","ActiveRecord::Encryption::Properties","classes/ActiveRecord/Encryption/Properties.html#method-i-validate_value_type","(value)",""],["validates","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validates","(*attributes)","<p>This method is a shortcut to all default validators and any custom validator classes ending in &#39;Validator&#39;. â€¦\n"],["validates!","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validates-21","(*attributes)","<p>This method is used to define validations that cannot be corrected by end users and are considered exceptional. â€¦\n"],["validates_absence_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_absence_of","(*attr_names)","<p>Validates that the specified attributes are blank (as defined by Object#present?). Happens by default â€¦\n"],["validates_absence_of","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_absence_of","(*attr_names)","<p>Validates that the specified attributes are not present (as defined by Object#present?). If the attribute â€¦\n"],["validates_acceptance_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_acceptance_of","(*attr_names)","<p>Encapsulates the pattern of wanting to validate the acceptance of a terms of service check box (or similar â€¦\n"],["validates_associated","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_associated","(*attr_names)","<p>Validates whether the associated object or objects are all valid. Works with any kind of association. â€¦\n"],["validates_comparison_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_comparison_of","(*attr_names)","<p>Validates the value of a specified attribute fulfills all defined comparisons with another value, proc, â€¦\n"],["validates_confirmation_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_confirmation_of","(*attr_names)","<p>Encapsulates the pattern of wanting to validate a password or email address field with a confirmation. â€¦\n"],["validates_each","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validates_each","(*attr_names, &block)","<p>Validates each attribute against a block.\n\n<pre><code>class Person\n  include ActiveModel::Validations\n\n  attr_accessor ...\n</code></pre>\n"],["validates_exclusion_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_exclusion_of","(*attr_names)","<p>Validates that the value of the specified attribute is not in a particular enumerable object.\n\n<pre><code>class Person ...\n</code></pre>\n"],["validates_format_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_format_of","(*attr_names)","<p>Validates whether the value of the specified attribute is of the correct form, going by the regular expression â€¦\n"],["validates_inclusion_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_inclusion_of","(*attr_names)","<p>Validates whether the value of the specified attribute is available in a particular enumerable object. â€¦\n"],["validates_length_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_length_of","(*attr_names)","<p>Validates that the specified attributes match the length restrictions supplied. Only one constraint option â€¦\n"],["validates_length_of","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_length_of","(*attr_names)","<p>Validates that the specified attributes match the length restrictions supplied. If the attribute is an â€¦\n"],["validates_numericality_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_numericality_of","(*attr_names)","<p>Validates whether the value of the specified attribute is numeric by trying to convert it to a float â€¦\n"],["validates_numericality_of","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_numericality_of","(*attr_names)","<p>Validates whether the value of the specified attribute is numeric by trying to convert it to a float â€¦\n"],["validates_presence_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_presence_of","(*attr_names)","<p>Validates that the specified attributes are not blank (as defined by Object#blank?). Happens by default â€¦\n"],["validates_presence_of","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_presence_of","(*attr_names)","<p>Validates that the specified attributes are not blank (as defined by Object#blank?), and, if the attribute â€¦\n"],["validates_size_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_size_of","(*attr_names)",""],["validates_size_of","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_size_of","(*attr_names)",""],["validates_uniqueness_of","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_uniqueness_of","(*attr_names)","<p>Validates whether the value of the specified attributes are unique across the system. Useful for making â€¦\n"],["validates_with","ActiveModel::Validations","classes/ActiveModel/Validations.html#method-i-validates_with","(*args, &block)","<p>Passes the record off to the class or classes specified and allows them to add errors based on more complex â€¦\n"],["validates_with","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validates_with","(*args, &block)","<p>Passes the record off to the class or classes specified and allows them to add errors based on more complex â€¦\n"],["validators","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validators","()","<p>List all validators that are being used to validate the model using <code>validates_with</code> method.\n\n<pre><code>class Person ...\n</code></pre>\n"],["validators_on","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validators_on","(*attributes)","<p>List all validators that are being used to validate a specific attribute.\n\n<pre><code>class Person\n  include ActiveModel::Validations ...\n</code></pre>\n"],["value","ActiveRecord::StatementCache::PartialQueryCollector","classes/ActiveRecord/StatementCache/PartialQueryCollector.html#method-i-value","()",""],["value?","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-value-3F","","<p>Returns true if the given value is present for some key in the parameters.\n"],["values","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-values","","<p>Returns a new array of the values of the parameters.\n"],["values","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-values","()",""],["values","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-values","()",""],["values_at","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-values_at","(*keys)","<p>Returns values that were assigned to the given <code>keys</code>. Note that all the <code>Hash</code> objects will be converted â€¦\n"],["values_at","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-values_at","(*methods)","<p>Returns an array of the values returned by the given methods.\n"],["values_at","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-values_at","(*keys)","<p>Returns an array of the values at the specified indices:\n\n<pre><code>hash = ActiveSupport::HashWithIndifferentAccess.new ...\n</code></pre>\n"],["values_at","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-values_at","(*keys)","<p>Returns an array of the values at the specified indices:\n\n<pre><code>hash = ActiveSupport::HashWithIndifferentAccess.new ...\n</code></pre>\n"],["values_at","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-values_at","(*list)",""],["variable?","ActiveStorage::Blob::Representable","classes/ActiveStorage/Blob/Representable.html#method-i-variable-3F","()","<p>Returns true if the variant processor can transform the blob (its content type is in <code>ActiveStorage.variable_content_types</code> â€¦\n"],["variant","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-variant","()",""],["variant","ActiveStorage::Attachment","classes/ActiveStorage/Attachment.html#method-i-variant","(transformations)","<p>Returns an ActiveStorage::Variant or ActiveStorage::VariantWithRecord instance for the attachment with â€¦\n"],["variant","ActiveStorage::Blob::Representable","classes/ActiveStorage/Blob/Representable.html#method-i-variant","(transformations)","<p>Returns an ActiveStorage::Variant or ActiveStorage::VariantWithRecord instance with the set of <code>transformations</code> â€¦\n"],["variant=","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-variant-3D","(variant)","<p>Sets the variant for template.\n"],["vendor","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-vendor","()",""],["vendor","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-vendor","(filename, data = nil)","<p>Create a new file in the <code>vendor/</code> directory. Code can be specified in a block or a data string can be â€¦\n"],["verified","ActiveSupport::MessageVerifier","classes/ActiveSupport/MessageVerifier.html#method-i-verified","(signed_message, purpose: nil, **)","<p>Decodes the signed message using the <code>MessageVerifier</code>&#39;s secret.\n\n<pre><code>verifier = ActiveSupport::MessageVerifier.new ...\n</code></pre>\n"],["verified","ActiveSupport::Messages::Rotator::Verifier","classes/ActiveSupport/Messages/Rotator/Verifier.html#method-i-verified","(*args, on_rotation: @on_rotation, **options)",""],["verified_request?","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-verified_request-3F","()","<p>Returns true or false if a request is verified. Checks:\n<p>Is it a GET or HEAD request? GETs should be safe â€¦\n"],["verify","ActiveSupport::MessageVerifier","classes/ActiveSupport/MessageVerifier.html#method-i-verify","(*args, **options)","<p>Decodes the signed message using the <code>MessageVerifier</code>&#39;s secret.\n\n<pre><code>verifier = ActiveSupport::MessageVerifier.new ...\n</code></pre>\n"],["verify!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-verify-21","()","<p>Checks whether the connection to the database is still active (i.e. not stale). This is done under the â€¦\n"],["verify_authenticity_token","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-verify_authenticity_token","()","<p>The actual before_action that is used to verify the CSRF token. Don&#39;t override this directly. Provide â€¦\n"],["verify_same_origin_request","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-verify_same_origin_request","()","<p>If <code>verify_authenticity_token</code> was run (indicating that we have forgery protection enabled for this request) â€¦\n"],["version","ActionCable","classes/ActionCable.html#method-c-version","()","<p>Returns the currently loaded version of Action Cable as a <code>Gem::Version</code>.\n"],["version","ActionMailbox","classes/ActionMailbox.html#method-c-version","()","<p>Returns the currently loaded version of Action Mailbox as a <code>Gem::Version</code>.\n"],["version","ActionMailer","classes/ActionMailer.html#method-c-version","()","<p>Returns the currently loaded version of Action Mailer as a <code>Gem::Version</code>.\n"],["version","ActionText","classes/ActionText.html#method-c-version","()","<p>Returns the currently loaded version of Action Text as a <code>Gem::Version</code>.\n"],["version","ActionView","classes/ActionView.html#method-c-version","()","<p>Returns the currently loaded version of Action View as a <code>Gem::Version</code>.\n"],["version","ActiveJob","classes/ActiveJob.html#method-c-version","()","<p>Returns the currently loaded version of Active Job as a <code>Gem::Version</code>.\n"],["version","ActiveModel","classes/ActiveModel.html#method-c-version","()","<p>Returns the currently loaded version of Active Model as a <code>Gem::Version</code>.\n"],["version","ActiveRecord","classes/ActiveRecord.html#method-c-version","()","<p>Returns the currently loaded version of Active Record as a <code>Gem::Version</code>.\n"],["version","ActiveStorage","classes/ActiveStorage.html#method-c-version","()","<p>Returns the currently loaded version of Active Storage as a <code>Gem::Version</code>.\n"],["version","ActiveSupport","classes/ActiveSupport.html#method-c-version","()","<p>Returns the currently loaded version of Active Support as a <code>Gem::Version</code>.\n"],["version","Rails","classes/Rails.html#method-c-version","()","<p>Returns the currently loaded version of Rails as a string.\n"],["version","Rails::Generators::AppBase::GemfileEntry","classes/Rails/Generators/AppBase/GemfileEntry.html#method-c-version","(name, version, comment = nil)",""],["version_control","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-version_control","()",""],["version_control","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-version_control","()",""],["video?","ActiveStorage::Blob","classes/ActiveStorage/Blob.html#method-i-video-3F","()","<p>Returns true if the content_type of this blob is in the video range, like video/mp4.\n"],["video_path","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-video_path","(source, options = {})","<p>Computes the path to a video asset in the public videos directory. Full paths from the document root â€¦\n"],["video_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-video_tag","(*sources)","<p>Returns an HTML video tag for the <code>sources</code>. If <code>sources</code> is a string, a single video tag will be returned. â€¦\n"],["video_url","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-video_url","(source, options = {})","<p>Computes the full URL to a video asset in the public videos directory. This will use <code>video_path</code> internally, â€¦\n"],["view_assigns","AbstractController::Rendering","classes/AbstractController/Rendering.html#method-i-view_assigns","()","<p>This method should return a hash with assigns. You can overwrite this configuration per controller.\n"],["view_cache_dependencies","AbstractController::Caching","classes/AbstractController/Caching.html#method-i-view_cache_dependencies","()",""],["view_cache_dependency","AbstractController::Caching::ClassMethods","classes/AbstractController/Caching/ClassMethods.html#method-i-view_cache_dependency","(&dependency)",""],["view_context","ActionView::Rendering","classes/ActionView/Rendering.html#method-i-view_context","()","<p>An instance of a view class. The default view class is ActionView::Base.\n<p>The view class must have the â€¦\n"],["view_context_class","ActionView::Rendering","classes/ActionView/Rendering.html#method-i-view_context_class","()",""],["view_context_class","ActionView::Rendering::ClassMethods","classes/ActionView/Rendering/ClassMethods.html#method-i-view_context_class","()",""],["view_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-view_exists-3F","(view_name)","<p>Checks to see if the view <code>view_name</code> exists on the database.\n\n<pre><code>view_exists?(:ebooks)\n</code></pre>\n"],["view_paths","ActionView::ViewPaths::ClassMethods","classes/ActionView/ViewPaths/ClassMethods.html#method-i-view_paths","()","<p>A list of all of the default view paths for this controller.\n"],["view_paths=","ActionView::ViewPaths::ClassMethods","classes/ActionView/ViewPaths/ClassMethods.html#method-i-view_paths-3D","(paths)","<p>Set the view paths.\n<p>Parameters\n<p><code>paths</code> - If a PathSet is provided, use that; otherwise, process the parameter â€¦\n"],["view_rendered?","ActionView::TestCase::Behavior::RenderedViewsCollection","classes/ActionView/TestCase/Behavior/RenderedViewsCollection.html#method-i-view_rendered-3F","(view, expected_locals)",""],["views","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-views","()","<p>Returns an array of view names defined in the database.\n"],["virtual","ActionView::TemplatePath","classes/ActionView/TemplatePath.html#method-c-virtual","(name, prefix, partial)","<p>Convert name, prefix, and partial into a virtual path string\n"],["wait","ActiveSupport::LogSubscriber::TestHelper","classes/ActiveSupport/LogSubscriber/TestHelper.html#method-i-wait","()","<p>Wait notifications to be published.\n"],["wait","ActiveSupport::Notifications::Fanout","classes/ActiveSupport/Notifications/Fanout.html#method-i-wait","()","<p>This is a sync queue, so there is no waiting.\n"],["warn","ActiveSupport::Deprecation::Reporting","classes/ActiveSupport/Deprecation/Reporting.html#method-i-warn","(message = nil, callstack = nil)","<p>Outputs a deprecation warning to the output configured by <code>ActiveSupport::Deprecation.behavior</code>.\n\n<pre><code>ActiveSupport::Deprecation.warn(&#39;something ...\n</code></pre>\n"],["watchable_dirs","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-watchable_dirs","()","<p>Add directories that should be watched for change. The key of the hashes should be directories and the â€¦\n"],["watchable_files","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-watchable_files","()","<p>Add files that should be watched for change.\n"],["weak_etag=","ActionDispatch::Http::Cache::Response","classes/ActionDispatch/Http/Cache/Response.html#method-i-weak_etag-3D","(weak_validators)",""],["weak_etag?","ActionDispatch::Http::Cache::Response","classes/ActionDispatch/Http/Cache/Response.html#method-i-weak_etag-3F","()","<p>True if an ETag is set and it&#39;s a weak validator (preceded with W/)\n"],["week","Numeric","classes/Numeric.html#method-i-week","()",""],["week_field","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-week_field","","<p>Wraps ActionView::Helpers::FormHelper#week_field for form builders:\n\n<pre><code>&lt;%= form_with model: @user do |f| ...\n</code></pre>\n"],["week_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-week_field","(object_name, method, options = {})","<p>Returns a text_field of type â€œweekâ€.\n\n<pre><code>week_field(&quot;user&quot;, &quot;born_on&quot;)\n# =&gt; &lt;input id=&quot;user_born_on&quot; ...\n</code></pre>\n"],["week_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-week_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type â€œweekâ€.\n<p>Options\n<p><code>:min</code> - The minimum acceptable value.\n"],["weekday_options_for_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-weekday_options_for_select","(selected = nil, index_as_value: false, day_format: :day_names, beginning_of_week: Date.beginning_of_week)","<p>Returns a string of option tags for the days of the week.\n<p>Options:\n<p><code>:index_as_value</code> - Defaults to false, â€¦\n"],["weekday_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-weekday_select","(method, options = {}, html_options = {})","<p>Wraps ActionView::Helpers::FormOptionsHelper#weekday_select for form builders:\n\n<pre><code>&lt;%= form_for @user do |f| ...\n</code></pre>\n"],["weekday_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-weekday_select","(object, method, options = {}, html_options = {}, &block)","<p>Returns select and option tags for the given object and method, using <code>weekday_options_for_select</code> to generate â€¦\n"],["weeks","Numeric","classes/Numeric.html#method-i-weeks","()","<p>Returns a Duration instance matching the number of weeks provided.\n\n<pre><code>2.weeks # =&gt; 2 weeks\n</code></pre>\n"],["weeks_ago","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-weeks_ago","(weeks)","<p>Returns a new date/time the specified number of weeks ago.\n"],["weeks_since","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-weeks_since","(weeks)","<p>Returns a new date/time the specified number of weeks in the future.\n"],["where","ActionCable::RemoteConnections","classes/ActionCable/RemoteConnections.html#method-i-where","(identifier)",""],["where","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-where","(attribute, type = nil, **options)","<p>Search for errors matching <code>attribute</code>, <code>type</code>, or <code>options</code>.\n<p>Only supplied params will be matched.\n\n<pre><code>person.errors.where(:name) ...\n</code></pre>\n"],["where","ActiveRecord::Encryption::ExtendedDeterministicQueries::RelationQueries","classes/ActiveRecord/Encryption/ExtendedDeterministicQueries/RelationQueries.html#method-i-where","(*args)",""],["where","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-where","(*args)","<p>Returns a new relation, which is the result of filtering the current relation according to the conditions â€¦\n"],["while_preventing_writes","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-while_preventing_writes","(enabled = true)","<p>Prevent writing to the database regardless of role.\n<p>In some cases you may want to prevent writes to the â€¦\n"],["while_preventing_writes","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-while_preventing_writes","(enabled = true, &block)","<p>Prevent writing to the database regardless of role.\n<p>In some cases you may want to prevent writes to the â€¦\n"],["will_save_change_to_attribute?","ActiveRecord::AttributeMethods::Dirty","classes/ActiveRecord/AttributeMethods/Dirty.html#method-i-will_save_change_to_attribute-3F","(attr_name, **options)","<p>Will this attribute change the next time we save?\n<p>This method is useful in validations and before callbacks â€¦\n"],["with","AbstractController::Railties::RoutesHelpers","classes/AbstractController/Railties/RoutesHelpers.html#method-c-with","(routes, include_path_helpers = true)",""],["with","ActionMailer::Parameterized::ClassMethods","classes/ActionMailer/Parameterized/ClassMethods.html#method-i-with","(params)","<p>Provide the parameters to the mailer in order to use them in the instance methods and callbacks.\n\n<pre><code>InvitationsMailer.with(inviter: ...\n</code></pre>\n"],["with","ActiveSupport::Cache::ConnectionPoolLike","classes/ActiveSupport/Cache/ConnectionPoolLike.html#method-i-with","()",""],["with_all_rich_text","ActionText::Attribute","classes/ActionText/Attribute.html#method-i-with_all_rich_text","()","<p>Eager load all dependent RichText models in bulk.\n"],["with_backend","ActiveSupport::XmlMini","classes/ActiveSupport/XmlMini.html#method-i-with_backend","(name)",""],["with_connection","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-with_connection","()","<p>If a connection obtained through #connection or #with_connection methods already exists yield it to the â€¦\n"],["with_context","ActiveRecord::Encryption::Scheme","classes/ActiveRecord/Encryption/Scheme.html#method-i-with_context","(&block)",""],["with_database_connections","ActionCable::Server::Worker::ActiveRecordConnectionManagement","classes/ActionCable/Server/Worker/ActiveRecordConnectionManagement.html#method-i-with_database_connections","(&block)",""],["with_default_scope","ActionDispatch::Routing::Mapper::Base","classes/ActionDispatch/Routing/Mapper/Base.html#method-i-with_default_scope","(scope, &block)",""],["with_defaults","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-with_defaults","(other_hash)",""],["with_defaults","ActionController::Renderer","classes/ActionController/Renderer.html#method-i-with_defaults","(defaults)","<p>Create a new renderer for the same controller but with new defaults.\n"],["with_defaults","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-with_defaults","(other_hash)",""],["with_defaults","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-with_defaults","(other_hash)",""],["with_defaults","Hash","classes/Hash.html#method-i-with_defaults","(other_hash)",""],["with_defaults!","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-with_defaults-21","(other_hash)",""],["with_defaults!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-with_defaults-21","(other_hash)",""],["with_defaults!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-with_defaults-21","(other_hash)",""],["with_defaults!","Hash","classes/Hash.html#method-i-with_defaults-21","(other_hash)",""],["with_encryption_context","ActiveRecord::Encryption::Contexts","classes/ActiveRecord/Encryption/Contexts.html#method-i-with_encryption_context","(properties)","<p>Configures a custom encryption context to use when running the provided block of code.\n<p>It supports overriding â€¦\n"],["with_full_attributes","ActionText::Attachment","classes/ActionText/Attachment.html#method-i-with_full_attributes","()",""],["with_indentation","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-with_indentation","(&block)","<p>Manage <code>Gemfile</code> indentation for a DSL action block\n"],["with_indifferent_access","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-with_indifferent_access","()",""],["with_indifferent_access","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-with_indifferent_access","()",""],["with_indifferent_access","Hash","classes/Hash.html#method-i-with_indifferent_access","()","<p>Returns an ActiveSupport::HashWithIndifferentAccess out of its receiver:\n\n<pre><code>{ a: 1 }.with_indifferent_access[&#39;a&#39;] ...\n</code></pre>\n"],["with_local_cache","ActiveSupport::Cache::Strategy::LocalCache","classes/ActiveSupport/Cache/Strategy/LocalCache.html#method-i-with_local_cache","(&block)","<p>Use a local cache for the duration of block.\n"],["with_lock","ActiveRecord::Locking::Pessimistic","classes/ActiveRecord/Locking/Pessimistic.html#method-i-with_lock","(*args)","<p>Wraps the passed block in a transaction, locking the object before yielding. You can pass the SQL locking â€¦\n"],["with_options","Object","classes/Object.html#method-i-with_options","(options, &block)","<p>An elegant way to factor duplication out of options passed to a series of method calls. Each method called â€¦\n"],["with_routing","ActionDispatch::Assertions::RoutingAssertions","classes/ActionDispatch/Assertions/RoutingAssertions.html#method-i-with_routing","()","<p>A helper to make it easier to test different route configurations. This method temporarily replaces @routes â€¦\n"],["with_scope_level","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-with_scope_level","(kind)",""],["with_warnings","Kernel","classes/Kernel.html#method-i-with_warnings","(flag)","<p>Sets $VERBOSE for the duration of the block and back to its original value afterwards.\n"],["without","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-without","(*records)",""],["without","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-without","(*keys)",""],["without","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-without","(*keys)",""],["without","Array","classes/Array.html#method-i-without","(*elements)",""],["without","Enumerable","classes/Enumerable.html#method-i-without","(*elements)",""],["without_encryption","ActiveRecord::Encryption::Contexts","classes/ActiveRecord/Encryption/Contexts.html#method-i-without_encryption","(&block)","<p>Runs the provided block in an encryption context where encryption is disabled:\n<p>Reading encrypted content â€¦\n"],["without_modules","ActionController::API","classes/ActionController/API.html#method-c-without_modules","(*modules)","<p>Shortcut helper that returns all the ActionController::API modules except the ones passed as arguments: â€¦\n"],["without_modules","ActionController::Base","classes/ActionController/Base.html#method-c-without_modules","(*modules)","<p>Shortcut helper that returns all the modules included in ActionController::Base except the ones passed â€¦\n"],["word_wrap","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-word_wrap","(text, line_width: 80, break_sequence: \"\\n\")","<p>Wraps the <code>text</code> into lines no longer than <code>line_width</code> width. This method breaks on the first whitespace â€¦\n"],["work_from_queue","ActiveSupport::Testing::Parallelization::Worker","classes/ActiveSupport/Testing/Parallelization/Worker.html#method-i-work_from_queue","()",""],["worker_pool","ActionCable::Server::Base","classes/ActionCable/Server/Base.html#method-i-worker_pool","()","<p>The worker pool is where we run connection callbacks and channel actions. We do as little as possible â€¦\n"],["wrap","ActionText::Fragment","classes/ActionText/Fragment.html#method-c-wrap","(fragment_or_html)",""],["wrap","ActiveStorage::Filename","classes/ActiveStorage/Filename.html#method-c-wrap","(filename)","<p>Returns a Filename instance based on the given filename. If the filename is a Filename, it is returned â€¦\n"],["wrap","ActiveStorage::Variation","classes/ActiveStorage/Variation.html#method-c-wrap","(variator)","<p>Returns a Variation instance based on the given variator. If the variator is a Variation, it is returned â€¦\n"],["wrap","ActiveSupport::ExecutionWrapper","classes/ActiveSupport/ExecutionWrapper.html#method-c-wrap","()","<p>Perform the work in the supplied block as an execution.\n"],["wrap","ActiveSupport::Reloader","classes/ActiveSupport/Reloader.html#method-c-wrap","()","<p>Run the supplied block as a work unit, reloading code as needed\n"],["wrap","Array","classes/Array.html#method-c-wrap","(object)","<p>Wraps its argument in an array unless it is already an array (or array-like).\n<p>Specifically:\n<p>If the argument â€¦\n"],["wrap","Mail::Address","classes/Mail/Address.html#method-c-wrap","(address)",""],["wrap_parameters","ActionController::ParamsWrapper::Options::ClassMethods","classes/ActionController/ParamsWrapper/Options/ClassMethods.html#method-i-wrap_parameters","(name_or_model_or_options, options = {})","<p>Sets the name of the wrapper key, or the model which <code>ParamsWrapper</code> would use to determine the attribute â€¦\n"],["wrap_with_namespace","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-i-wrap_with_namespace","(content)",""],["write","ActionController::Live::SSE","classes/ActionController/Live/SSE.html#method-i-write","(object, options = {})",""],["write","ActionDispatch::RailsEntityStore","classes/ActionDispatch/RailsEntityStore.html#method-i-write","(body)",""],["write","ActionDispatch::RailsMetaStore","classes/ActionDispatch/RailsMetaStore.html#method-i-write","(key, value)",""],["write","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-write","(string)",""],["write","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-write","(text = \"\")",""],["write","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-write","(name, value, options = nil)","<p>Writes the value to the cache, with the key.\n<p>Options are passed to the underlying cache implementation. â€¦\n"],["write","ActiveSupport::EncryptedConfiguration","classes/ActiveSupport/EncryptedConfiguration.html#method-i-write","(contents)",""],["write","ActiveSupport::EncryptedFile","classes/ActiveSupport/EncryptedFile.html#method-i-write","(contents)",""],["write_attribute","ActiveRecord::AttributeMethods::Write","classes/ActiveRecord/AttributeMethods/Write.html#method-i-write_attribute","(attr_name, value)","<p>Updates the attribute identified by <code>attr_name</code> with the specified <code>value</code>. Empty strings for Integer and â€¦\n"],["write_entry","ActiveSupport::Cache::MemCacheStore::DupLocalCache::DupLocalStore","classes/ActiveSupport/Cache/MemCacheStore/DupLocalCache/DupLocalStore.html#method-i-write_entry","(_key, entry)",""],["write_entry","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","classes/ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-write_entry","(key, entry)",""],["write_fragment","AbstractController::Caching::Fragments","classes/AbstractController/Caching/Fragments.html#method-i-write_fragment","(key, content, options = nil)","<p>Writes <code>content</code> to the location signified by <code>key</code> (see <code>expire_fragment</code> for acceptable formats).\n"],["write_multi","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-write_multi","(hash, options = nil)","<p>Cache Storage API to write multiple values at once.\n"],["write_query?","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-write_query-3F","(sql)","<p>Determines whether the SQL statement is a write query.\n"],["write_session","ActionDispatch::Session::CacheStore","classes/ActionDispatch/Session/CacheStore.html#method-i-write_session","(env, sid, session, options)","<p>Set a session in the cache.\n"],["write_store_attribute","ActiveRecord::Store","classes/ActiveRecord/Store.html#method-i-write_store_attribute","(store_attribute, key, value)",""],["writes_pending","ActionCable::Connection::StreamEventLoop","classes/ActionCable/Connection/StreamEventLoop.html#method-i-writes_pending","(io)",""],["x_original_to_addresses","Mail::Message","classes/Mail/Message.html#method-i-x_original_to_addresses","()",""],["xhr?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-xhr-3F","()",""],["xml","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-xml","",""],["xml_http_request?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-xml_http_request-3F","()","<p>Returns true if the â€œX-Requested-Withâ€ header contains â€œXMLHttpRequestâ€ (case-insensitive), â€¦\n"],["xml_name_escape","ERB::Util","classes/ERB/Util.html#method-c-xml_name_escape","(name)","<p>A utility method for escaping XML names of tags and names of attributes.\n\n<pre><code>xml_name_escape(&#39;1 &lt; 2 &amp; 3&#39;) ...\n</code></pre>\n"],["xmlschema","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-xmlschema","(fraction_digits = 0)","<p>Returns a string of the object&#39;s date and time in the ISO 8601 standard format.\n\n<pre><code>Time.zone.now.xmlschema ...\n</code></pre>\n"],["xmlschema","Date","classes/Date.html#method-i-xmlschema","()","<p>Returns a string which represents the time in used time zone as DateTime defined by XML Schema:\n\n<pre><code>date = ...\n</code></pre>\n"],["xor_byte_strings","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-xor_byte_strings","(s1, s2)",""],["year","Integer","classes/Integer.html#method-i-year","()",""],["years","Integer","classes/Integer.html#method-i-years","()","<p>Returns a Duration instance matching the number of years provided.\n\n<pre><code>2.years # =&gt; 2 years\n</code></pre>\n"],["years_ago","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-years_ago","(years)","<p>Returns a new date/time the specified number of years ago.\n"],["years_since","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-years_since","(years)","<p>Returns a new date/time the specified number of years in the future.\n"],["yesterday","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-yesterday","()","<p>Returns the previous date in this time zone.\n"],["yesterday","Date","classes/Date.html#method-c-yesterday","()","<p>Returns a new Date representing the date 1 day ago (i.e. yesterday&#39;s date).\n"],["yesterday","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-yesterday","()","<p>Returns a new date/time representing yesterday.\n"],["yesterday?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-yesterday-3F","()","<p>Returns true if the current object&#39;s time falls within the previous day (yesterday).\n"],["yesterday?","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-yesterday-3F","()","<p>Returns true if the date/time is yesterday.\n"],["yield_shares","ActiveSupport::Concurrency::ShareLock","classes/ActiveSupport/Concurrency/ShareLock.html#method-i-yield_shares","(purpose: nil, compatible: [], block_share: false)","<p>Temporarily give up all held Share locks while executing the supplied block, allowing any <code>compatible</code> â€¦\n"],["zone","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-zone","()","<p>Returns the time zone abbreviation.\n\n<pre><code>Time.zone = &#39;Eastern Time (US &amp; Canada)&#39;   # =&gt; &quot;Eastern Time (US ...\n</code></pre>\n"],["zone","Time","classes/Time.html#method-c-zone","()","<p>Returns the TimeZone for the current request, if this has been set (via Time.zone=). If <code>Time.zone</code> has â€¦\n"],["zone=","Time","classes/Time.html#method-c-zone-3D","(time_zone)","<p>Sets <code>Time.zone</code> to a TimeZone object for the current request/thread.\n<p>This method accepts any of the following: â€¦\n"],["README","","files/actioncable/README_md.html","","<p>Action Cable â€“ Integrated WebSockets for Rails\n<p>Action Cable seamlessly integrates WebSockets with the â€¦\n"],["README","","files/actionmailbox/README_md.html","","<p>Action Mailbox\n<p>Action Mailbox routes incoming emails to controller-like mailboxes for processing in Rails â€¦\n"],["README","","files/actionmailer/README_rdoc.html","","<p>Action Mailer â€“ Easy email delivery and testing\n<p>Action Mailer is a framework for designing email service â€¦\n"],["README","","files/actionpack/README_rdoc.html","","<p>Action Pack â€“ From request to response\n<p>Action Pack is a framework for handling and responding to web â€¦\n"],["README","","files/actiontext/README_md.html","","<p>Action Text\n<p>Action Text brings rich text content and editing to Rails. It includes the Trix editor that â€¦\n"],["README","","files/actionview/README_rdoc.html","","<p>Action View\n<p>Action View is a framework for handling view template lookup and rendering, and provides view â€¦\n"],["README","","files/activejob/README_md.html","","<p>Active Job â€“ Make work happen later\n<p>Active Job is a framework for declaring jobs and making them run on â€¦\n"],["README","","files/activemodel/README_rdoc.html","","<p>Active Model â€“ model interfaces for Rails\n<p>Active Model provides a known set of interfaces for usage in â€¦\n"],["README","","files/activerecord/README_rdoc.html","","<p>Active Record â€“ Object-relational mapping in Rails\n<p>Active Record connects classes to relational database â€¦\n"],["README","","files/activestorage/README_md.html","","<p>Active Storage\n<p>Active Storage makes it simple to upload and reference files in cloud services like Amazon â€¦\n"],["README","","files/activesupport/README_rdoc.html","","<p>Active Support â€“ Utility classes and Ruby extensions from Rails\n<p>Active Support is a collection of utility â€¦\n"],["RDOC_MAIN","","files/railties/RDOC_MAIN_rdoc.html","","<p>Welcome to Rails\n<p>What&#39;s Rails\n<p>Rails is a web-application framework that includes everything needed â€¦\n"],["README","","files/railties/README_rdoc.html","","<p>Railties â€“ Gluing the Engine to the Rails\n<p>Railties is responsible for gluing all frameworks together. â€¦\n"]]}}
