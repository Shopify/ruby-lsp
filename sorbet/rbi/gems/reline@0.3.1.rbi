# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `reline` gem.
# Please instead update this file by running `bin/tapioca gem reline`.

module Reline
  extend ::Forwardable
  extend ::SingleForwardable

  def eof?(*args, **_arg1, &block); end

  private

  def readline(*args, **_arg1, &block); end
  def readmultiline(*args, **_arg1, &block); end

  class << self
    def add_dialog_proc(*args, **_arg1, &block); end
    def ambiguous_width(*args, **_arg1, &block); end
    def auto_indent_proc(*args, **_arg1, &block); end
    def auto_indent_proc=(*args, **_arg1, &block); end
    def autocompletion(*args, **_arg1, &block); end
    def autocompletion=(*args, **_arg1, &block); end
    def basic_quote_characters(*args, **_arg1, &block); end
    def basic_quote_characters=(*args, **_arg1, &block); end
    def basic_word_break_characters(*args, **_arg1, &block); end
    def basic_word_break_characters=(*args, **_arg1, &block); end
    def completer_quote_characters(*args, **_arg1, &block); end
    def completer_quote_characters=(*args, **_arg1, &block); end
    def completer_word_break_characters(*args, **_arg1, &block); end
    def completer_word_break_characters=(*args, **_arg1, &block); end
    def completion_append_character(*args, **_arg1, &block); end
    def completion_append_character=(*args, **_arg1, &block); end
    def completion_case_fold(*args, **_arg1, &block); end
    def completion_case_fold=(*args, **_arg1, &block); end
    def completion_proc(*args, **_arg1, &block); end
    def completion_proc=(*args, **_arg1, &block); end
    def completion_quote_character(*args, **_arg1, &block); end
    def core; end
    def delete_text(*args, **_arg1, &block); end
    def dialog_proc(*args, **_arg1, &block); end
    def dig_perfect_match_proc(*args, **_arg1, &block); end
    def dig_perfect_match_proc=(*args, **_arg1, &block); end
    def emacs_editing_mode(*args, **_arg1, &block); end
    def emacs_editing_mode?(*args, **_arg1, &block); end
    def encoding_system_needs; end
    def eof?(*args, **_arg1, &block); end
    def filename_quote_characters(*args, **_arg1, &block); end
    def filename_quote_characters=(*args, **_arg1, &block); end
    def get_screen_size(*args, **_arg1, &block); end
    def input=(*args, **_arg1, &block); end
    def insert_text(*args, &block); end
    def last_incremental_search(*args, **_arg1, &block); end
    def last_incremental_search=(*args, **_arg1, &block); end
    def line_buffer(*args, **_arg1, &block); end
    def line_editor; end
    def output=(*args, **_arg1, &block); end
    def output_modifier_proc(*args, **_arg1, &block); end
    def output_modifier_proc=(*args, **_arg1, &block); end
    def point(*args, **_arg1, &block); end
    def point=(*args, **_arg1, &block); end
    def pre_input_hook(*args, **_arg1, &block); end
    def pre_input_hook=(*args, **_arg1, &block); end
    def prompt_proc(*args, **_arg1, &block); end
    def prompt_proc=(*args, **_arg1, &block); end
    def readline(*args, **_arg1, &block); end
    def readmultiline(*args, **_arg1, &block); end
    def redisplay(*args, **_arg1, &block); end
    def special_prefixes(*args, **_arg1, &block); end
    def special_prefixes=(*args, **_arg1, &block); end
    def ungetc(c); end
    def vi_editing_mode(*args, **_arg1, &block); end
    def vi_editing_mode?(*args, **_arg1, &block); end
  end
end

class Reline::ANSI
  class << self
    def clear_screen; end
    def cursor_pos; end
    def deprep(otio); end

    # @return [Boolean]
    def empty_buffer?; end

    def encoding; end
    def erase_after_cursor; end
    def get_screen_size; end
    def getc; end
    def getc_with_bracketed_paste; end
    def hide_cursor; end

    # @return [Boolean]
    def in_pasting?; end

    def inner_getc; end
    def input=(val); end
    def move_cursor_column(x); end
    def move_cursor_down(x); end
    def move_cursor_up(x); end
    def output=(val); end
    def prep; end
    def retrieve_keybuffer; end
    def scroll_down(x); end
    def set_default_key_bindings(config); end
    def set_default_key_bindings_comprehensive_list(config); end
    def set_default_key_bindings_terminfo(config); end
    def set_screen_size(rows, columns); end
    def set_winch_handler(&handler); end
    def show_cursor; end
    def ungetc(c); end

    # @return [Boolean]
    def win?; end
  end
end

Reline::ANSI::CAPNAME_KEY_BINDINGS = T.let(T.unsafe(nil), Hash)
Reline::ANSI::END_BRACKETED_PASTE = T.let(T.unsafe(nil), String)
Reline::ANSI::START_BRACKETED_PASTE = T.let(T.unsafe(nil), String)

class Reline::Config
  # @return [Config] a new instance of Config
  def initialize; end

  def add_default_key_binding(keystroke, target); end
  def add_default_key_binding_by_keymap(keymap, keystroke, target); end
  def add_oneshot_key_binding(keystroke, target); end
  def autocompletion; end
  def autocompletion=(val); end
  def bind_key(key, func_name); end
  def bind_tty_special_chars; end
  def bind_tty_special_chars=(_arg0); end
  def bind_variable(name, value); end
  def blink_matching_paren; end
  def blink_matching_paren=(_arg0); end
  def byte_oriented; end
  def byte_oriented=(_arg0); end
  def completion_ignore_case; end
  def completion_ignore_case=(_arg0); end
  def convert_meta; end
  def convert_meta=(_arg0); end
  def disable_completion; end
  def disable_completion=(_arg0); end
  def editing_mode; end
  def editing_mode=(val); end

  # @return [Boolean]
  def editing_mode_is?(*val); end

  def emacs_mode_string; end
  def emacs_mode_string=(_arg0); end
  def enable_bracketed_paste; end
  def enable_bracketed_paste=(_arg0); end
  def enable_keypad; end
  def enable_keypad=(_arg0); end
  def expand_tilde; end
  def expand_tilde=(_arg0); end
  def handle_directive(directive, file, no); end
  def history_preserve_point; end
  def history_preserve_point=(_arg0); end
  def history_size; end
  def history_size=(_arg0); end
  def horizontal_scroll_mode; end
  def horizontal_scroll_mode=(_arg0); end
  def input_meta; end
  def input_meta=(_arg0); end
  def inputrc_path; end
  def isearch_terminators; end
  def isearch_terminators=(_arg0); end
  def key_bindings; end
  def key_notation_to_code(notation); end
  def keymap; end
  def keyseq_timeout; end
  def keyseq_timeout=(_arg0); end
  def mark_directories; end
  def mark_directories=(_arg0); end
  def mark_modified_lines; end
  def mark_modified_lines=(_arg0); end
  def mark_symlinked_directories; end
  def mark_symlinked_directories=(_arg0); end
  def match_hidden_files; end
  def match_hidden_files=(_arg0); end
  def meta_flag; end
  def meta_flag=(_arg0); end
  def output_meta; end
  def output_meta=(_arg0); end
  def page_completions; end
  def page_completions=(_arg0); end
  def parse_keyseq(str); end
  def prefer_visible_bell; end
  def prefer_visible_bell=(_arg0); end
  def print_completions_horizontally; end
  def print_completions_horizontally=(_arg0); end
  def read(file = T.unsafe(nil)); end
  def read_lines(lines, file = T.unsafe(nil)); end
  def reset; end
  def reset_default_key_bindings; end
  def reset_oneshot_key_bindings; end
  def retrieve_string(str); end
  def show_all_if_ambiguous; end
  def show_all_if_ambiguous=(_arg0); end
  def show_all_if_unmodified; end
  def show_all_if_unmodified=(_arg0); end
  def show_mode_in_prompt; end
  def show_mode_in_prompt=(_arg0); end

  # Returns the value of attribute test_mode.
  def test_mode; end

  def vi_cmd_mode_string; end
  def vi_cmd_mode_string=(_arg0); end
  def vi_ins_mode_string; end
  def vi_ins_mode_string=(_arg0); end
  def visible_stats; end
  def visible_stats=(_arg0); end

  private

  def default_inputrc_path; end

  # @return [Boolean]
  def seven_bit_encoding?(encoding); end
end

class Reline::Config::InvalidInputrc < ::RuntimeError
  # Returns the value of attribute file.
  def file; end

  # Sets the attribute file
  #
  # @param value the value to set the attribute file to.
  def file=(_arg0); end

  # Returns the value of attribute lineno.
  def lineno; end

  # Sets the attribute lineno
  #
  # @param value the value to set the attribute lineno to.
  def lineno=(_arg0); end
end

Reline::Config::KEYSEQ_PATTERN = T.let(T.unsafe(nil), Regexp)
Reline::Config::VARIABLE_NAMES = T.let(T.unsafe(nil), Array)
Reline::Config::VARIABLE_NAME_SYMBOLS = T.let(T.unsafe(nil), Array)
class Reline::ConfigEncodingConversionError < ::StandardError; end

class Reline::Core
  # @return [Core] a new instance of Core
  # @yield [_self]
  # @yieldparam _self [Reline::Core] the object that the method was called on
  def initialize; end

  # @raise [ArgumentError]
  def add_dialog_proc(name_sym, p, context = T.unsafe(nil)); end

  def ambiguous_width; end
  def auto_indent_proc; end

  # @raise [ArgumentError]
  def auto_indent_proc=(p); end

  def autocompletion; end
  def autocompletion=(val); end
  def basic_quote_characters; end
  def basic_quote_characters=(v); end
  def basic_word_break_characters; end
  def basic_word_break_characters=(v); end
  def completer_quote_characters; end
  def completer_quote_characters=(v); end
  def completer_word_break_characters; end
  def completer_word_break_characters=(v); end
  def completion_append_character; end
  def completion_append_character=(val); end
  def completion_case_fold; end
  def completion_case_fold=(v); end
  def completion_proc; end

  # @raise [ArgumentError]
  def completion_proc=(p); end

  def completion_quote_character; end

  # Returns the value of attribute config.
  def config; end

  # Sets the attribute config
  #
  # @param value the value to set the attribute config to.
  def config=(_arg0); end

  def dialog_proc(name_sym); end
  def dig_perfect_match_proc; end

  # @raise [ArgumentError]
  def dig_perfect_match_proc=(p); end

  def emacs_editing_mode; end

  # @return [Boolean]
  def emacs_editing_mode?; end

  def encoding; end
  def filename_quote_characters; end
  def filename_quote_characters=(v); end
  def get_screen_size; end

  # @raise [TypeError]
  def input=(val); end

  # Returns the value of attribute key_stroke.
  def key_stroke; end

  # Sets the attribute key_stroke
  #
  # @param value the value to set the attribute key_stroke to.
  def key_stroke=(_arg0); end

  # Returns the value of attribute last_incremental_search.
  def last_incremental_search; end

  # Sets the attribute last_incremental_search
  #
  # @param value the value to set the attribute last_incremental_search to.
  def last_incremental_search=(_arg0); end

  # Returns the value of attribute line_editor.
  def line_editor; end

  # Sets the attribute line_editor
  #
  # @param value the value to set the attribute line_editor to.
  def line_editor=(_arg0); end

  # Returns the value of attribute output.
  def output; end

  # @raise [TypeError]
  def output=(val); end

  def output_modifier_proc; end

  # @raise [ArgumentError]
  def output_modifier_proc=(p); end

  def pre_input_hook; end
  def pre_input_hook=(p); end
  def prompt_proc; end

  # @raise [ArgumentError]
  def prompt_proc=(p); end

  def readline(prompt = T.unsafe(nil), add_hist = T.unsafe(nil)); end
  def readmultiline(prompt = T.unsafe(nil), add_hist = T.unsafe(nil), &confirm_multiline_termination); end
  def special_prefixes; end
  def special_prefixes=(v); end
  def vi_editing_mode; end

  # @return [Boolean]
  def vi_editing_mode?; end

  private

  def inner_readline(prompt, add_hist, multiline, &confirm_multiline_termination); end
  def may_req_ambiguous_char_width; end
  def read_2nd_character_of_key_sequence(keyseq_timeout, buffer, c, block); end
  def read_escaped_key(keyseq_timeout, c, block); end

  # GNU Readline waits for "keyseq-timeout" milliseconds to see if the ESC
  # is followed by a character, and times out and treats it as a standalone
  # ESC if the second character does not arrive. If the second character
  # comes before timed out, it is treated as a modifier key with the
  # meta-property of meta-key, so that it can be distinguished from
  # multibyte characters with the 8th bit turned on.
  #
  # GNU Readline will wait for the 2nd character with "keyseq-timeout"
  # milli-seconds but wait forever after 3rd characters.
  def read_io(keyseq_timeout, &block); end
end

Reline::Core::ATTR_READER_NAMES = T.let(T.unsafe(nil), Array)

class Reline::Core::DialogProc < ::Struct
  # Returns the value of attribute context
  #
  # @return [Object] the current value of context
  def context; end

  # Sets the attribute context
  #
  # @param value [Object] the value to set the attribute context to.
  # @return [Object] the newly set value
  def context=(_); end

  # Returns the value of attribute dialog_proc
  #
  # @return [Object] the current value of dialog_proc
  def dialog_proc; end

  # Sets the attribute dialog_proc
  #
  # @param value [Object] the value to set the attribute dialog_proc to.
  # @return [Object] the newly set value
  def dialog_proc=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class Reline::CursorPos < ::Struct
  # Returns the value of attribute x
  #
  # @return [Object] the current value of x
  def x; end

  # Sets the attribute x
  #
  # @param value [Object] the value to set the attribute x to.
  # @return [Object] the newly set value
  def x=(_); end

  # Returns the value of attribute y
  #
  # @return [Object] the current value of y
  def y; end

  # Sets the attribute y
  #
  # @param value [Object] the value to set the attribute y to.
  # @return [Object] the newly set value
  def y=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

Reline::DEFAULT_DIALOG_CONTEXT = T.let(T.unsafe(nil), Array)
Reline::DEFAULT_DIALOG_PROC_AUTOCOMPLETE = T.let(T.unsafe(nil), Proc)

class Reline::DialogRenderInfo < ::Struct
  # Returns the value of attribute bg_color
  #
  # @return [Object] the current value of bg_color
  def bg_color; end

  # Sets the attribute bg_color
  #
  # @param value [Object] the value to set the attribute bg_color to.
  # @return [Object] the newly set value
  def bg_color=(_); end

  # Returns the value of attribute contents
  #
  # @return [Object] the current value of contents
  def contents; end

  # Sets the attribute contents
  #
  # @param value [Object] the value to set the attribute contents to.
  # @return [Object] the newly set value
  def contents=(_); end

  # Returns the value of attribute height
  #
  # @return [Object] the current value of height
  def height; end

  # Sets the attribute height
  #
  # @param value [Object] the value to set the attribute height to.
  # @return [Object] the newly set value
  def height=(_); end

  # Returns the value of attribute pos
  #
  # @return [Object] the current value of pos
  def pos; end

  # Sets the attribute pos
  #
  # @param value [Object] the value to set the attribute pos to.
  # @return [Object] the newly set value
  def pos=(_); end

  # Returns the value of attribute scrollbar
  #
  # @return [Object] the current value of scrollbar
  def scrollbar; end

  # Sets the attribute scrollbar
  #
  # @param value [Object] the value to set the attribute scrollbar to.
  # @return [Object] the newly set value
  def scrollbar=(_); end

  # Returns the value of attribute width
  #
  # @return [Object] the current value of width
  def width; end

  # Sets the attribute width
  #
  # @param value [Object] the value to set the attribute width to.
  # @return [Object] the newly set value
  def width=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class Reline::GeneralIO
  class << self
    def clear_screen; end
    def cursor_pos; end
    def deprep(otio); end
    def encoding; end
    def erase_after_cursor; end
    def finish_pasting; end
    def get_screen_size; end
    def getc; end

    # @return [Boolean]
    def in_pasting?; end

    def input=(val); end
    def move_cursor_column(val); end
    def move_cursor_down(val); end
    def move_cursor_up(val); end
    def prep; end
    def reset(encoding: T.unsafe(nil)); end
    def scroll_down(val); end
    def set_default_key_bindings(_); end
    def set_screen_size(rows, columns); end
    def set_winch_handler(&handler); end
    def start_pasting; end
    def ungetc(c); end

    # @return [Boolean]
    def win?; end
  end
end

Reline::HISTORY = T.let(T.unsafe(nil), Reline::History)

class Reline::History < ::Array
  # @return [History] a new instance of History
  def initialize(config); end

  def <<(val); end
  def [](index); end
  def []=(index, val); end
  def concat(*val); end
  def delete_at(index); end
  def push(*val); end
  def to_s; end

  private

  # @raise [IndexError]
  def check_index(index); end
end

Reline::IOGate = Reline::ANSI
Reline::Key = Struct
module Reline::KeyActor; end

class Reline::KeyActor::Base
  # @return [Base] a new instance of Base
  def initialize; end

  def default_key_bindings; end
  def get_method(key); end
  def reset_default_key_bindings; end
end

Reline::KeyActor::Base::MAPPING = T.let(T.unsafe(nil), Array)
class Reline::KeyActor::Emacs < ::Reline::KeyActor::Base; end
Reline::KeyActor::Emacs::MAPPING = T.let(T.unsafe(nil), Array)
class Reline::KeyActor::ViCommand < ::Reline::KeyActor::Base; end
Reline::KeyActor::ViCommand::MAPPING = T.let(T.unsafe(nil), Array)
class Reline::KeyActor::ViInsert < ::Reline::KeyActor::Base; end
Reline::KeyActor::ViInsert::MAPPING = T.let(T.unsafe(nil), Array)

class Reline::KeyStroke
  # @return [KeyStroke] a new instance of KeyStroke
  def initialize(config); end

  def compress_meta_key(ary); end

  # @return [Boolean]
  def equal?(me, other); end

  def expand(input); end
  def match_status(input); end

  # @return [Boolean]
  def start_with?(me, other); end

  private

  def key_mapping; end
end

class Reline::KillRing
  include ::Enumerable

  # @return [KillRing] a new instance of KillRing
  def initialize(max = T.unsafe(nil)); end

  def append(string, before_p = T.unsafe(nil)); end
  def each; end
  def process; end
  def yank; end
  def yank_pop; end
end

class Reline::KillRing::RingBuffer
  # @return [RingBuffer] a new instance of RingBuffer
  def initialize(max = T.unsafe(nil)); end

  def <<(point); end

  # @return [Boolean]
  def empty?; end

  # Returns the value of attribute head.
  def head; end

  # Returns the value of attribute size.
  def size; end
end

class Reline::KillRing::RingPoint < ::Struct
  # @return [RingPoint] a new instance of RingPoint
  def initialize(str); end

  def ==(other); end

  # Returns the value of attribute backward
  #
  # @return [Object] the current value of backward
  def backward; end

  # Sets the attribute backward
  #
  # @param value [Object] the value to set the attribute backward to.
  # @return [Object] the newly set value
  def backward=(_); end

  # Returns the value of attribute forward
  #
  # @return [Object] the current value of forward
  def forward; end

  # Sets the attribute forward
  #
  # @param value [Object] the value to set the attribute forward to.
  # @return [Object] the newly set value
  def forward=(_); end

  # Returns the value of attribute str
  #
  # @return [Object] the current value of str
  def str; end

  # Sets the attribute str
  #
  # @param value [Object] the value to set the attribute str to.
  # @return [Object] the newly set value
  def str=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

module Reline::KillRing::State; end
Reline::KillRing::State::CONTINUED = T.let(T.unsafe(nil), Symbol)
Reline::KillRing::State::FRESH = T.let(T.unsafe(nil), Symbol)
Reline::KillRing::State::PROCESSED = T.let(T.unsafe(nil), Symbol)
Reline::KillRing::State::YANK = T.let(T.unsafe(nil), Symbol)

class Reline::LineEditor
  # @return [LineEditor] a new instance of LineEditor
  def initialize(config, encoding); end

  def add_dialog_proc(name, p, context = T.unsafe(nil)); end

  # Returns the value of attribute auto_indent_proc.
  def auto_indent_proc; end

  # Sets the attribute auto_indent_proc
  #
  # @param value the value to set the attribute auto_indent_proc to.
  def auto_indent_proc=(_arg0); end

  # Returns the value of attribute byte_pointer.
  def byte_pointer; end

  def byte_pointer=(val); end
  def call_completion_proc; end
  def call_completion_proc_with_checking_args(pre, target, post); end

  # Returns the value of attribute completion_append_character.
  def completion_append_character; end

  # Sets the attribute completion_append_character
  #
  # @param value the value to set the attribute completion_append_character to.
  def completion_append_character=(_arg0); end

  # Returns the value of attribute completion_proc.
  def completion_proc; end

  # Sets the attribute completion_proc
  #
  # @param value the value to set the attribute completion_proc to.
  def completion_proc=(_arg0); end

  def confirm_multiline_termination; end

  # Returns the value of attribute confirm_multiline_termination_proc.
  def confirm_multiline_termination_proc; end

  # Sets the attribute confirm_multiline_termination_proc
  #
  # @param value the value to set the attribute confirm_multiline_termination_proc to.
  def confirm_multiline_termination_proc=(_arg0); end

  def delete_text(start = T.unsafe(nil), length = T.unsafe(nil)); end

  # Returns the value of attribute dig_perfect_match_proc.
  def dig_perfect_match_proc; end

  # Sets the attribute dig_perfect_match_proc
  #
  # @param value the value to set the attribute dig_perfect_match_proc to.
  def dig_perfect_match_proc=(_arg0); end

  def editing_mode; end

  # @return [Boolean]
  def eof?; end

  def finalize; end
  def finish; end

  # @return [Boolean]
  def finished?; end

  def input_key(key); end
  def insert_text(text); end
  def just_move_cursor; end

  # TODO: undo
  # TODO: Use "private alias_method" idiom after drop Ruby 2.5.
  def line; end

  def multiline_off; end
  def multiline_on; end

  # Sets the attribute output
  #
  # @param value the value to set the attribute output to.
  def output=(_arg0); end

  # Returns the value of attribute output_modifier_proc.
  def output_modifier_proc; end

  # Sets the attribute output_modifier_proc
  #
  # @param value the value to set the attribute output_modifier_proc to.
  def output_modifier_proc=(_arg0); end

  # Returns the value of attribute pre_input_hook.
  def pre_input_hook; end

  # Sets the attribute pre_input_hook
  #
  # @param value the value to set the attribute pre_input_hook to.
  def pre_input_hook=(_arg0); end

  # Returns the value of attribute prompt_proc.
  def prompt_proc; end

  # Sets the attribute prompt_proc
  #
  # @param value the value to set the attribute prompt_proc to.
  def prompt_proc=(_arg0); end

  def rerender; end
  def rerender_all; end
  def reset(prompt = T.unsafe(nil), encoding:); end
  def reset_line; end
  def reset_variables(prompt = T.unsafe(nil), encoding:); end
  def resize; end
  def retrieve_completion_block(set_completion_quote_character = T.unsafe(nil)); end
  def set_pasting_state(in_pasting); end
  def set_signal_handlers; end

  # @return [Boolean]
  def simplified_rendering?; end

  def whole_buffer; end
  def whole_lines(index: T.unsafe(nil), line: T.unsafe(nil)); end
  def wrap_method_call(method_symbol, method_obj, key, with_operator = T.unsafe(nil)); end

  private

  # @return [Boolean]
  def argumentable?(method_obj); end

  def backward_char(key, arg: T.unsafe(nil)); end
  def backward_delete_char(key, arg: T.unsafe(nil)); end
  def backward_word(key); end
  def beginning_of_line(key); end
  def byteinsert(str, byte_pointer, other); end
  def byteslice!(str, byte_pointer, size); end
  def calculate_height_by_lines(lines, prompt); end
  def calculate_height_by_width(width); end
  def calculate_nearest_cursor(line_to_calc = T.unsafe(nil), cursor = T.unsafe(nil), started_from = T.unsafe(nil), byte_pointer = T.unsafe(nil), update = T.unsafe(nil)); end
  def calculate_scroll_partial_screen(highest_in_all, cursor_y); end
  def calculate_width(str, allow_escape_code = T.unsafe(nil)); end
  def capitalize_word(key); end
  def check_mode_string; end
  def check_multiline_prompt(buffer); end
  def clear_dialog; end
  def clear_each_dialog(dialog); end
  def clear_screen(key); end
  def clear_screen_buffer(prompt, prompt_list, prompt_width); end
  def complete(list, just_show_list = T.unsafe(nil)); end
  def complete_internal_proc(list, is_menu); end
  def copy_for_vi(text); end
  def delete_char(key); end
  def delete_char_or_list(key); end
  def downcase_word(key); end
  def ed_argument_digit(key); end
  def ed_clear_screen(key); end
  def ed_delete_next_char(key, arg: T.unsafe(nil)); end
  def ed_delete_prev_char(key, arg: T.unsafe(nil)); end
  def ed_delete_prev_word(key); end

  # Editline:: +ed-insert+ (vi input: almost all; emacs: printable characters)
  #            In insert mode, insert the input character left of the cursor
  #            position. In replace mode, overwrite the character at the
  #            cursor and move the cursor to the right by one character
  #            position. Accept an argument to do this repeatedly. It is an
  #            error if the input character is the NUL character (+Ctrl-@+).
  #            Failure to enlarge the edit buffer also results in an error.
  # Editline:: +ed-digit+ (emacs: 0 to 9) If in argument input mode, append
  #            the input digit to the argument being read. Otherwise, call
  #            +ed-insert+. It is an error if the input character is not a
  #            digit or if the existing argument is already greater than a
  #            million.
  # GNU Readline:: +self-insert+ (a, b, A, 1, !, …) Insert yourself.
  def ed_digit(key); end

  # Editline:: +ed-insert+ (vi input: almost all; emacs: printable characters)
  #            In insert mode, insert the input character left of the cursor
  #            position. In replace mode, overwrite the character at the
  #            cursor and move the cursor to the right by one character
  #            position. Accept an argument to do this repeatedly. It is an
  #            error if the input character is the NUL character (+Ctrl-@+).
  #            Failure to enlarge the edit buffer also results in an error.
  # Editline:: +ed-digit+ (emacs: 0 to 9) If in argument input mode, append
  #            the input digit to the argument being read. Otherwise, call
  #            +ed-insert+. It is an error if the input character is not a
  #            digit or if the existing argument is already greater than a
  #            million.
  # GNU Readline:: +self-insert+ (a, b, A, 1, !, …) Insert yourself.
  def ed_insert(key); end

  # Editline:: +ed-kill-line+ (vi command: +D+, +Ctrl-K+; emacs: +Ctrl-K+,
  #            +Ctrl-U+) + Kill from the cursor to the end of the line.
  # GNU Readline:: +kill-line+ (+C-k+) Kill the text from point to the end of
  #                the line. With a negative numeric argument, kill backward
  #                from the cursor to the beginning of the current line.
  def ed_kill_line(key); end

  def ed_move_to_beg(key); end
  def ed_move_to_end(key); end
  def ed_newline(key); end
  def ed_next_char(key, arg: T.unsafe(nil)); end
  def ed_next_history(key, arg: T.unsafe(nil)); end
  def ed_prev_char(key, arg: T.unsafe(nil)); end
  def ed_prev_history(key, arg: T.unsafe(nil)); end
  def ed_prev_word(key); end
  def ed_quoted_insert(str, arg: T.unsafe(nil)); end
  def ed_search_next_history(key, arg: T.unsafe(nil)); end
  def ed_search_prev_history(key, arg: T.unsafe(nil)); end
  def ed_transpose_chars(key); end
  def ed_transpose_words(key); end

  # do nothing
  def ed_unassigned(key); end

  def em_capitol_case(key); end
  def em_delete(key); end
  def em_delete_next_word(key); end
  def em_delete_or_list(key); end
  def em_delete_prev_char(key, arg: T.unsafe(nil)); end
  def em_exchange_mark(key); end

  # Editline:: +em-kill-line+ (not bound) Delete the entire contents of the
  #            edit buffer and save it to the cut buffer. +vi-kill-line-prev+
  # GNU Readline:: +kill-whole-line+ (not bound) Kill all characters on the
  #                current line, no matter where point is.
  def em_kill_line(key); end

  def em_kill_region(key); end
  def em_lower_case(key); end
  def em_next_word(key); end
  def em_set_mark(key); end
  def em_upper_case(key); end
  def em_yank(key); end
  def em_yank_pop(key); end
  def end_of_line(key); end
  def exchange_point_and_mark(key); end
  def forward_char(key, arg: T.unsafe(nil)); end
  def forward_search_history(key); end
  def forward_word(key); end
  def generate_searcher; end
  def history_search_backward(key, arg: T.unsafe(nil)); end
  def history_search_forward(key, arg: T.unsafe(nil)); end

  # @return [Boolean]
  def inclusive?(method_obj); end

  def incremental_search_history(key); end
  def insert_new_line(cursor_line, next_line); end
  def key_delete(key); end
  def key_newline(key); end

  # Editline:: +ed-kill-line+ (vi command: +D+, +Ctrl-K+; emacs: +Ctrl-K+,
  #            +Ctrl-U+) + Kill from the cursor to the end of the line.
  # GNU Readline:: +kill-line+ (+C-k+) Kill the text from point to the end of
  #                the line. With a negative numeric argument, kill backward
  #                from the cursor to the beginning of the current line.
  def kill_line(key); end

  # Editline:: +em-kill-line+ (not bound) Delete the entire contents of the
  #            edit buffer and save it to the cut buffer. +vi-kill-line-prev+
  # GNU Readline:: +kill-whole-line+ (not bound) Kill all characters on the
  #                current line, no matter where point is.
  def kill_whole_line(key); end

  def menu(target, list); end
  def modify_lines(before); end
  def move_completed_list(list, direction); end
  def move_cursor_down(val); end
  def move_cursor_up(val); end
  def next_history(key, arg: T.unsafe(nil)); end
  def normal_char(key); end
  def padding_space_with_escape_sequences(str, width); end
  def previous_history(key, arg: T.unsafe(nil)); end
  def process_auto_indent; end
  def process_insert(force: T.unsafe(nil)); end
  def process_key(key, method_symbol); end
  def quoted_insert(str, arg: T.unsafe(nil)); end
  def render_dialog(cursor_column); end
  def render_each_dialog(dialog, cursor_column); end
  def render_partial(prompt, prompt_width, line_to_render, this_started_from, with_control: T.unsafe(nil)); end
  def render_whole_lines(lines, prompt, prompt_width); end
  def rerender_added_newline(prompt, prompt_width); end
  def rerender_all_lines; end
  def rerender_changed_current_line; end
  def reset_dialog(dialog, old_dialog); end
  def reverse_search_history(key); end
  def run_for_operators(key, method_symbol, &block); end
  def scroll_down(val); end
  def search_next_char(key, arg, need_prev_char: T.unsafe(nil), inclusive: T.unsafe(nil)); end
  def search_prev_char(key, arg, need_next_char = T.unsafe(nil)); end

  # Editline:: +ed-insert+ (vi input: almost all; emacs: printable characters)
  #            In insert mode, insert the input character left of the cursor
  #            position. In replace mode, overwrite the character at the
  #            cursor and move the cursor to the right by one character
  #            position. Accept an argument to do this repeatedly. It is an
  #            error if the input character is the NUL character (+Ctrl-@+).
  #            Failure to enlarge the edit buffer also results in an error.
  # Editline:: +ed-digit+ (emacs: 0 to 9) If in argument input mode, append
  #            the input digit to the argument being read. Otherwise, call
  #            +ed-insert+. It is an error if the input character is not a
  #            digit or if the existing argument is already greater than a
  #            million.
  # GNU Readline:: +self-insert+ (a, b, A, 1, !, …) Insert yourself.
  def self_insert(key); end

  def set_mark(key); end
  def show_menu; end
  def split_by_width(str, max_width); end
  def transpose_chars(key); end
  def transpose_words(key); end

  # Editline:: +vi-kill-line-prev+ (vi: +Ctrl-U+) Delete the string from the
  #            beginning  of the edit buffer to the cursor and save it to the
  #            cut buffer.
  # GNU Readline:: +unix-line-discard+ (+C-u+) Kill backward from the cursor
  #                to the beginning of the current line.
  def unix_line_discard(key); end

  def unix_word_rubout(key); end
  def upcase_word(key); end
  def vi_add(key); end
  def vi_add_at_eol(key); end
  def vi_change_meta(key, arg: T.unsafe(nil)); end
  def vi_command_mode(key); end
  def vi_delete_meta(key, arg: T.unsafe(nil)); end
  def vi_delete_prev_char(key); end
  def vi_end_big_word(key, arg: T.unsafe(nil), inclusive: T.unsafe(nil)); end
  def vi_end_of_transmission(key); end
  def vi_end_word(key, arg: T.unsafe(nil), inclusive: T.unsafe(nil)); end
  def vi_eof_maybe(key); end
  def vi_first_print(key); end
  def vi_histedit(key); end
  def vi_insert(key); end
  def vi_insert_at_bol(key); end
  def vi_join_lines(key, arg: T.unsafe(nil)); end

  # Editline:: +vi-kill-line-prev+ (vi: +Ctrl-U+) Delete the string from the
  #            beginning  of the edit buffer to the cursor and save it to the
  #            cut buffer.
  # GNU Readline:: +unix-line-discard+ (+C-u+) Kill backward from the cursor
  #                to the beginning of the current line.
  def vi_kill_line_prev(key); end

  def vi_list_or_eof(key); end
  def vi_movement_mode(key); end
  def vi_next_big_word(key, arg: T.unsafe(nil)); end
  def vi_next_char(key, arg: T.unsafe(nil), inclusive: T.unsafe(nil)); end
  def vi_next_word(key, arg: T.unsafe(nil)); end
  def vi_paste_next(key, arg: T.unsafe(nil)); end
  def vi_paste_prev(key, arg: T.unsafe(nil)); end
  def vi_prev_big_word(key, arg: T.unsafe(nil)); end
  def vi_prev_char(key, arg: T.unsafe(nil)); end
  def vi_prev_word(key, arg: T.unsafe(nil)); end
  def vi_replace_char(key, arg: T.unsafe(nil)); end
  def vi_search_next(key); end
  def vi_search_prev(key); end
  def vi_to_column(key, arg: T.unsafe(nil)); end
  def vi_to_history_line(key); end
  def vi_to_next_char(key, arg: T.unsafe(nil), inclusive: T.unsafe(nil)); end
  def vi_to_prev_char(key, arg: T.unsafe(nil)); end
  def vi_yank(key, arg: T.unsafe(nil)); end
  def vi_zero(key); end
  def yank(key); end
  def yank_pop(key); end
end

Reline::LineEditor::CompletionJourneyData = Struct
module Reline::LineEditor::CompletionState; end
Reline::LineEditor::CompletionState::COMPLETION = T.let(T.unsafe(nil), Symbol)
Reline::LineEditor::CompletionState::JOURNEY = T.let(T.unsafe(nil), Symbol)
Reline::LineEditor::CompletionState::MENU = T.let(T.unsafe(nil), Symbol)
Reline::LineEditor::CompletionState::MENU_WITH_PERFECT_MATCH = T.let(T.unsafe(nil), Symbol)
Reline::LineEditor::CompletionState::NORMAL = T.let(T.unsafe(nil), Symbol)
Reline::LineEditor::CompletionState::PERFECT_MATCH = T.let(T.unsafe(nil), Symbol)
Reline::LineEditor::DIALOG_DEFAULT_HEIGHT = T.let(T.unsafe(nil), Integer)

class Reline::LineEditor::Dialog
  # @return [Dialog] a new instance of Dialog
  def initialize(name, config, proc_scope); end

  def call(key); end

  # Returns the value of attribute column.
  def column; end

  # Sets the attribute column
  #
  # @param value the value to set the attribute column to.
  def column=(_arg0); end

  # Returns the value of attribute contents.
  def contents; end

  def contents=(contents); end

  # Returns the value of attribute lines_backup.
  def lines_backup; end

  # Sets the attribute lines_backup
  #
  # @param value the value to set the attribute lines_backup to.
  def lines_backup=(_arg0); end

  # Returns the value of attribute name.
  def name; end

  # Returns the value of attribute pointer.
  def pointer; end

  # Sets the attribute pointer
  #
  # @param value the value to set the attribute pointer to.
  def pointer=(_arg0); end

  # Returns the value of attribute scroll_top.
  def scroll_top; end

  # Sets the attribute scroll_top
  #
  # @param value the value to set the attribute scroll_top to.
  def scroll_top=(_arg0); end

  # Returns the value of attribute scrollbar_pos.
  def scrollbar_pos; end

  # Sets the attribute scrollbar_pos
  #
  # @param value the value to set the attribute scrollbar_pos to.
  def scrollbar_pos=(_arg0); end

  def set_cursor_pos(col, row); end

  # Returns the value of attribute trap_key.
  def trap_key; end

  # Sets the attribute trap_key
  #
  # @param value the value to set the attribute trap_key to.
  def trap_key=(_arg0); end

  # Returns the value of attribute vertical_offset.
  def vertical_offset; end

  # Sets the attribute vertical_offset
  #
  # @param value the value to set the attribute vertical_offset to.
  def vertical_offset=(_arg0); end

  # Returns the value of attribute width.
  def width; end

  def width=(v); end
end

class Reline::LineEditor::DialogProcScope
  # @return [DialogProcScope] a new instance of DialogProcScope
  def initialize(line_editor, config, proc_to_exec, context); end

  def call; end
  def call_completion_proc_with_checking_args(pre, target, post); end
  def completion_journey_data; end
  def config; end
  def context; end
  def cursor_pos; end
  def dialog; end
  def just_cursor_moving; end
  def key; end
  def retrieve_completion_block(set_completion_quote_character = T.unsafe(nil)); end
  def screen_width; end
  def set_cursor_pos(col, row); end
  def set_dialog(dialog); end
  def set_key(key); end
end

Reline::LineEditor::MenuInfo = Struct
Reline::LineEditor::PROMPT_LIST_CACHE_TIMEOUT = T.let(T.unsafe(nil), Float)
Reline::LineEditor::VI_MOTIONS = T.let(T.unsafe(nil), Array)

module Reline::Terminfo
  extend ::Fiddle
  extend ::Fiddle::CParser
  extend ::Fiddle::Importer

  class << self
    def curses_dl; end
    def curses_dl_files; end

    # @return [Boolean]
    def enabled?; end

    def setupterm(term, fildes); end
    def tigetflag(capname); end
    def tigetnum(capname); end
    def tigetstr(capname); end
    def tiparm(str, *args); end
  end
end

class Reline::Terminfo::StringWithTiparm < ::String
  # for method chain
  def tiparm(*args); end
end

class Reline::Terminfo::TerminfoError < ::StandardError; end

class Reline::Unicode
  class << self
    def calculate_width(str, allow_escape_code = T.unsafe(nil)); end
    def ed_transpose_words(line, byte_pointer); end
    def em_backward_word(line, byte_pointer); end
    def em_big_backward_word(line, byte_pointer); end
    def em_forward_word(line, byte_pointer); end
    def em_forward_word_with_capitalization(line, byte_pointer); end
    def escape_for_print(str); end
    def get_mbchar_byte_size_by_first_char(c); end
    def get_mbchar_width(mbchar); end
    def get_next_mbchar_size(line, byte_pointer); end
    def get_prev_mbchar_size(line, byte_pointer); end
    def split_by_width(str, max_width, encoding = T.unsafe(nil)); end

    # Take a chunk of a String cut by width with escape sequences.
    def take_range(str, start_col, max_width, encoding = T.unsafe(nil)); end

    def vi_backward_word(line, byte_pointer); end
    def vi_big_backward_word(line, byte_pointer); end
    def vi_big_forward_end_word(line, byte_pointer); end
    def vi_big_forward_word(line, byte_pointer); end
    def vi_first_print(line); end
    def vi_forward_end_word(line, byte_pointer); end
    def vi_forward_word(line, byte_pointer, drop_terminate_spaces = T.unsafe(nil)); end
  end
end

Reline::Unicode::CSI_REGEXP = T.let(T.unsafe(nil), Regexp)
Reline::Unicode::CSI_REGEXP_INDEX = T.let(T.unsafe(nil), Integer)
class Reline::Unicode::EastAsianWidth; end

# Ambiguous
Reline::Unicode::EastAsianWidth::TYPE_A = T.let(T.unsafe(nil), Regexp)

# Fullwidth
Reline::Unicode::EastAsianWidth::TYPE_F = T.let(T.unsafe(nil), Regexp)

# Halfwidth
Reline::Unicode::EastAsianWidth::TYPE_H = T.let(T.unsafe(nil), Regexp)

# Neutral
Reline::Unicode::EastAsianWidth::TYPE_N = T.let(T.unsafe(nil), Regexp)

# Narrow
Reline::Unicode::EastAsianWidth::TYPE_NA = T.let(T.unsafe(nil), Regexp)

# Wide
Reline::Unicode::EastAsianWidth::TYPE_W = T.let(T.unsafe(nil), Regexp)

# C-? C-8
Reline::Unicode::EscapedChars = T.let(T.unsafe(nil), Array)

Reline::Unicode::EscapedPairs = T.let(T.unsafe(nil), Hash)
Reline::Unicode::GRAPHEME_CLUSTER_INDEX = T.let(T.unsafe(nil), Integer)
Reline::Unicode::HalfwidthDakutenHandakuten = T.let(T.unsafe(nil), Regexp)
Reline::Unicode::MBCharWidthRE = T.let(T.unsafe(nil), Regexp)
Reline::Unicode::NON_PRINTING_END = T.let(T.unsafe(nil), String)
Reline::Unicode::NON_PRINTING_END_INDEX = T.let(T.unsafe(nil), Integer)
Reline::Unicode::NON_PRINTING_START = T.let(T.unsafe(nil), String)
Reline::Unicode::NON_PRINTING_START_INDEX = T.let(T.unsafe(nil), Integer)
Reline::Unicode::OSC_REGEXP = T.let(T.unsafe(nil), Regexp)
Reline::Unicode::OSC_REGEXP_INDEX = T.let(T.unsafe(nil), Integer)
Reline::Unicode::WIDTH_SCANNER = T.let(T.unsafe(nil), Regexp)
Reline::VERSION = T.let(T.unsafe(nil), String)
