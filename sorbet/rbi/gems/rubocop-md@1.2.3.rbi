# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rubocop-md` gem.
# Please instead update this file by running `bin/tapioca gem rubocop-md`.


# source://rubocop-md//lib/rubocop/markdown/version.rb#3
module RuboCop; end

# Plugin to run Rubocop against Markdown files
#
# source://rubocop-md//lib/rubocop/markdown/version.rb#4
module RuboCop::Markdown; end

# source://rubocop-md//lib/rubocop/markdown.rb#10
RuboCop::Markdown::CONFIG_DEFAULT = T.let(T.unsafe(nil), Pathname)

# source://rubocop-md//lib/rubocop/markdown.rb#9
RuboCop::Markdown::PROJECT_ROOT = T.let(T.unsafe(nil), Pathname)

# Transform source Markdown file into valid Ruby file
# by commenting out all non-code lines
#
# source://rubocop-md//lib/rubocop/markdown/preprocess.rb#9
class RuboCop::Markdown::Preprocess
  # @return [Preprocess] a new instance of Preprocess
  #
  # source://rubocop-md//lib/rubocop/markdown/preprocess.rb#55
  def initialize(file); end

  # source://rubocop-md//lib/rubocop/markdown/preprocess.rb#60
  def call(src); end

  # Returns the value of attribute config.
  #
  # source://rubocop-md//lib/rubocop/markdown/preprocess.rb#53
  def config; end

  private

  # Whether to try to detect Ruby by parsing codeblock.
  # If it's set to false we lint only implicitly specified Ruby blocks.
  #
  # @return [Boolean]
  #
  # source://rubocop-md//lib/rubocop/markdown/preprocess.rb#116
  def autodetect?; end

  # source://rubocop-md//lib/rubocop/markdown/preprocess.rb#120
  def comment_lines(src); end

  # Check codeblock attribute to prevent from parsing
  # non-Ruby snippets and avoid false positives
  #
  # @return [Boolean]
  #
  # source://rubocop-md//lib/rubocop/markdown/preprocess.rb#91
  def maybe_ruby?(syntax); end

  # Check codeblack attribute if it's defined and of Ruby type
  #
  # @return [Boolean]
  #
  # source://rubocop-md//lib/rubocop/markdown/preprocess.rb#96
  def ruby?(syntax); end

  # @return [Boolean]
  #
  # source://rubocop-md//lib/rubocop/markdown/preprocess.rb#85
  def ruby_codeblock?(syntax, src); end

  # Try to parse with Ripper
  # Invalid Ruby code (or non-Ruby) returns `nil`.
  # Return true if it's explicit Ruby and warn_invalid?
  #
  # @return [Boolean]
  #
  # source://rubocop-md//lib/rubocop/markdown/preprocess.rb#103
  def valid_syntax?(syntax, src); end

  # Whether to show warning when snippet is not a valid Ruby
  #
  # @return [Boolean]
  #
  # source://rubocop-md//lib/rubocop/markdown/preprocess.rb#110
  def warn_invalid?; end

  class << self
    # source://rubocop-md//lib/rubocop/markdown/preprocess.rb#48
    def restore!(src); end

    # Revert preprocess changes.
    #
    # When autocorrect is applied, RuboCop re-writes the file
    # using preproccessed source buffer.
    #
    # We have to restore it.
    #
    # source://rubocop-md//lib/rubocop/markdown/preprocess.rb#42
    def restore_and_save!(file); end
  end
end

# source://rubocop-md//lib/rubocop/markdown/preprocess.rb#23
RuboCop::Markdown::Preprocess::MARKER = T.let(T.unsafe(nil), String)

# This is a regexp to parse code blocks from .md files.
#
# Only recognizes backticks-style code blocks.
#
# Try it: https://rubular.com/r/YMqSWiBuh2TKIJ
#
# source://rubocop-md//lib/rubocop/markdown/preprocess.rb#15
RuboCop::Markdown::Preprocess::MD_REGEXP = T.let(T.unsafe(nil), Regexp)

# See https://github.com/github/linguist/blob/v5.3.3/lib/linguist/languages.yml#L3925
#
# source://rubocop-md//lib/rubocop/markdown/preprocess.rb#26
RuboCop::Markdown::Preprocess::RUBY_TYPES = T.let(T.unsafe(nil), Array)

# source://rubocop-md//lib/rubocop/markdown/version.rb#5
RuboCop::Markdown::VERSION = T.let(T.unsafe(nil), String)
