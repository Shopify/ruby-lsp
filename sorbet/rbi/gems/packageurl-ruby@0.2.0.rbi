# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `packageurl-ruby` gem.
# Please instead update this file by running `bin/tapioca gem packageurl-ruby`.


# A package URL, or _purl_, is a URL string used to
# identify and locate a software package in a mostly universal and uniform way
# across programing languages, package managers, packaging conventions, tools,
# APIs and databases.
#
# A purl is a URL composed of seven components:
#
# ```
# scheme:type/namespace/name@version?qualifiers#subpath
# ```
#
# For example,
# the package URL for this Ruby package at version 0.1.0 is
# `pkg:ruby/mattt/packageurl-ruby@0.1.0`.
#
# source://packageurl-ruby//lib/package_url/version.rb#3
class PackageURL
  # Constructs a package URL from its components
  #
  # @param type [String] The package type or protocol.
  # @param namespace [String] A name prefix, specific to the type of package.
  # @param name [String] The name of the package.
  # @param version [String] The version of the package.
  # @param qualifiers [Hash] Extra qualifying data for a package, specific to the type of package.
  # @param subpath [String] An extra subpath within a package, relative to the package root.
  # @raise [ArgumentError]
  # @return [PackageURL] a new instance of PackageURL
  #
  # source://packageurl-ruby//lib/package_url.rb#58
  def initialize(type:, name:, namespace: T.unsafe(nil), version: T.unsafe(nil), qualifiers: T.unsafe(nil), subpath: T.unsafe(nil)); end

  # Returns an array containing the
  # scheme, type, namespace, name, version, qualifiers, and subpath components
  # of the package URL.
  #
  # source://packageurl-ruby//lib/package_url.rb#375
  def deconstruct; end

  # Returns a hash containing the
  # scheme, type, namespace, name, version, qualifiers, and subpath components
  # of the package URL.
  #
  # source://packageurl-ruby//lib/package_url.rb#382
  def deconstruct_keys(_keys); end

  # The name of the package.
  #
  # source://packageurl-ruby//lib/package_url.rb#39
  def name; end

  # A name prefix, specific to the type of package.
  # For example, an npm scope, a Docker image owner, or a GitHub user.
  #
  # source://packageurl-ruby//lib/package_url.rb#36
  def namespace; end

  # Extra qualifying data for a package, specific to the type of package.
  # For example, the operating system or architecture.
  #
  # source://packageurl-ruby//lib/package_url.rb#46
  def qualifiers; end

  # The URL scheme, which has a constant value of `"pkg"`.
  #
  # source://packageurl-ruby//lib/package_url.rb#27
  def scheme; end

  # An extra subpath within a package, relative to the package root.
  #
  # source://packageurl-ruby//lib/package_url.rb#49
  def subpath; end

  # Returns a hash containing the
  # scheme, type, namespace, name, version, qualifiers, and subpath components
  # of the package URL.
  #
  # source://packageurl-ruby//lib/package_url.rb#230
  def to_h; end

  # Returns a string representation of the package URL.
  # Package URL representations are created according to the instructions from
  # https://github.com/package-url/purl-spec/blob/0b1559f76b79829e789c4f20e6d832c7314762c5/PURL-SPECIFICATION.rst#how-to-build-purl-string-from-its-components.
  #
  # source://packageurl-ruby//lib/package_url.rb#245
  def to_s; end

  # The package type or protocol, such as `"gem"`, `"npm"`, and `"github"`.
  #
  # source://packageurl-ruby//lib/package_url.rb#32
  def type; end

  # The version of the package.
  #
  # source://packageurl-ruby//lib/package_url.rb#42
  def version; end

  class << self
    # Creates a new PackageURL from a string.
    #
    # @param string [String] The package URL string.
    # @raise [InvalidPackageURL] If the string is not a valid package URL.
    # @return [PackageURL]
    #
    # source://packageurl-ruby//lib/package_url.rb#74
    def parse(string); end
  end
end

# Raised when attempting to parse an invalid package URL string.
#
# @see #parse
#
# source://packageurl-ruby//lib/package_url.rb#24
class PackageURL::InvalidPackageURL < ::ArgumentError; end

# source://packageurl-ruby//lib/package_url/version.rb#5
PackageURL::VERSION = T.let(T.unsafe(nil), String)
