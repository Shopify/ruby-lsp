# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `yarp` gem.
# Please instead update this file by running `bin/tapioca gem yarp`.

# Reopening the YARP module after yarp/node is required so that constant
# reflection APIs will find the constants defined in the node file before these.
# This block is meant to contain extra APIs we define on YARP nodes that aren't
# templated and are meant as convenience methods.
#
# source://yarp//lib/yarp.rb#3
module YARP
  class << self
    # Mirror the YARP.dump API by using the serialization API.
    def dump(*_arg0); end

    # Mirror the YARP.dump_file API by using the serialization API.
    def dump_file(_arg0); end

    # Mirror the YARP.lex API by using the serialization API.
    def lex(*_arg0); end

    # Returns an array of tokens that closely resembles that of the Ripper lexer.
    # The only difference is that since we don't keep track of lexer state in the
    # same way, it's going to always return the NONE state.
    #
    # source://yarp//lib/yarp/lex_compat.rb#804
    def lex_compat(source, filepath = T.unsafe(nil)); end

    # Mirror the YARP.lex_file API by using the serialization API.
    def lex_file(_arg0); end

    # This lexes with the Ripper lex. It drops any space events but otherwise
    # returns the same tokens. Raises SyntaxError if the syntax in source is
    # invalid.
    #
    # source://yarp//lib/yarp/lex_compat.rb#811
    def lex_ripper(source); end

    # Load the serialized AST using the source as a reference into a tree.
    #
    # source://yarp//lib/yarp.rb#380
    def load(source, serialized); end

    # Mirror the YARP.parse API by using the serialization API.
    def parse(*_arg0); end

    # Mirror the YARP.parse_file API by using the serialization API. This uses
    # native strings instead of Ruby strings because it allows us to use mmap when
    # it is available.
    def parse_file(_arg0); end

    # Mirror the YARP.parse_lex API by using the serialization API.
    def parse_lex(*_arg0); end

    # Mirror the YARP.parse_lex_file API by using the serialization API.
    def parse_lex_file(_arg0); end
  end
end

# Represents the use of the `alias` keyword to alias a global variable.
#
#     alias $foo $bar
#     ^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#13
class YARP::AliasGlobalVariableNode < ::YARP::Node
  # def initialize: (new_name: Node, old_name: Node, keyword_loc: Location, location: Location) -> void
  #
  # @return [AliasGlobalVariableNode] a new instance of AliasGlobalVariableNode
  #
  # source://yarp//lib/yarp/node.rb#24
  def initialize(new_name, old_name, keyword_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#32
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#37
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#47
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#42
  def compact_child_nodes; end

  # def copy: (**params) -> AliasGlobalVariableNode
  #
  # source://yarp//lib/yarp/node.rb#52
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#37
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#65
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#87
  def human; end

  # source://yarp//lib/yarp/node.rb#74
  def inspect(inspector = T.unsafe(nil)); end

  # def keyword: () -> String
  #
  # source://yarp//lib/yarp/node.rb#70
  def keyword; end

  # attr_reader keyword_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#21
  def keyword_loc; end

  # attr_reader new_name: Node
  #
  # source://yarp//lib/yarp/node.rb#15
  def new_name; end

  # attr_reader old_name: Node
  #
  # source://yarp//lib/yarp/node.rb#18
  def old_name; end
end

# Represents the use of the `alias` keyword to alias a method.
#
#     alias foo bar
#     ^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#96
class YARP::AliasMethodNode < ::YARP::Node
  # def initialize: (new_name: Node, old_name: Node, keyword_loc: Location, location: Location) -> void
  #
  # @return [AliasMethodNode] a new instance of AliasMethodNode
  #
  # source://yarp//lib/yarp/node.rb#107
  def initialize(new_name, old_name, keyword_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#115
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#120
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#130
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#125
  def compact_child_nodes; end

  # def copy: (**params) -> AliasMethodNode
  #
  # source://yarp//lib/yarp/node.rb#135
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#120
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#148
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#170
  def human; end

  # source://yarp//lib/yarp/node.rb#157
  def inspect(inspector = T.unsafe(nil)); end

  # def keyword: () -> String
  #
  # source://yarp//lib/yarp/node.rb#153
  def keyword; end

  # attr_reader keyword_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#104
  def keyword_loc; end

  # attr_reader new_name: Node
  #
  # source://yarp//lib/yarp/node.rb#98
  def new_name; end

  # attr_reader old_name: Node
  #
  # source://yarp//lib/yarp/node.rb#101
  def old_name; end
end

# Represents an alternation pattern in pattern matching.
#
#     foo => bar | baz
#            ^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#179
class YARP::AlternationPatternNode < ::YARP::Node
  # def initialize: (left: Node, right: Node, operator_loc: Location, location: Location) -> void
  #
  # @return [AlternationPatternNode] a new instance of AlternationPatternNode
  #
  # source://yarp//lib/yarp/node.rb#190
  def initialize(left, right, operator_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#198
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#203
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#213
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#208
  def compact_child_nodes; end

  # def copy: (**params) -> AlternationPatternNode
  #
  # source://yarp//lib/yarp/node.rb#218
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#203
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#231
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#253
  def human; end

  # source://yarp//lib/yarp/node.rb#240
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader left: Node
  #
  # source://yarp//lib/yarp/node.rb#181
  def left; end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#236
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#187
  def operator_loc; end

  # attr_reader right: Node
  #
  # source://yarp//lib/yarp/node.rb#184
  def right; end
end

# Represents the use of the `&&` operator or the `and` keyword.
#
#     left and right
#     ^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#262
class YARP::AndNode < ::YARP::Node
  # def initialize: (left: Node, right: Node, operator_loc: Location, location: Location) -> void
  #
  # @return [AndNode] a new instance of AndNode
  #
  # source://yarp//lib/yarp/node.rb#273
  def initialize(left, right, operator_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#281
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#286
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#296
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#291
  def compact_child_nodes; end

  # def copy: (**params) -> AndNode
  #
  # source://yarp//lib/yarp/node.rb#301
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#286
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#314
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#336
  def human; end

  # source://yarp//lib/yarp/node.rb#323
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader left: Node
  #
  # source://yarp//lib/yarp/node.rb#264
  def left; end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#319
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#270
  def operator_loc; end

  # attr_reader right: Node
  #
  # source://yarp//lib/yarp/node.rb#267
  def right; end
end

# Represents a set of arguments to a method or a keyword.
#
#     return foo, bar, baz
#            ^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#345
class YARP::ArgumentsNode < ::YARP::Node
  # def initialize: (arguments: Array[Node], location: Location) -> void
  #
  # @return [ArgumentsNode] a new instance of ArgumentsNode
  #
  # source://yarp//lib/yarp/node.rb#350
  def initialize(arguments, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#356
  def accept(visitor); end

  # attr_reader arguments: Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#347
  def arguments; end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#361
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#371
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#366
  def compact_child_nodes; end

  # def copy: (**params) -> ArgumentsNode
  #
  # source://yarp//lib/yarp/node.rb#376
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#361
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#387
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#400
  def human; end

  # source://yarp//lib/yarp/node.rb#391
  def inspect(inspector = T.unsafe(nil)); end
end

# Represents an array literal. This can be a regular array using brackets or
# a special array using % like %w or %i.
#
#     [1, 2, 3]
#     ^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#410
class YARP::ArrayNode < ::YARP::Node
  # def initialize: (elements: Array[Node], opening_loc: Location?, closing_loc: Location?, location: Location) -> void
  #
  # @return [ArrayNode] a new instance of ArrayNode
  #
  # source://yarp//lib/yarp/node.rb#421
  def initialize(elements, opening_loc, closing_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#429
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#434
  def child_nodes; end

  # def closing: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#472
  def closing; end

  # attr_reader closing_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#418
  def closing_loc; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#444
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#439
  def compact_child_nodes; end

  # def copy: (**params) -> ArrayNode
  #
  # source://yarp//lib/yarp/node.rb#449
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#434
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#462
  def deconstruct_keys(keys); end

  # attr_reader elements: Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#412
  def elements; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#487
  def human; end

  # source://yarp//lib/yarp/node.rb#476
  def inspect(inspector = T.unsafe(nil)); end

  # def opening: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#467
  def opening; end

  # attr_reader opening_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#415
  def opening_loc; end
end

# Represents an array pattern in pattern matching.
#
#     foo in 1, 2
#     ^^^^^^^^^^^
#
#     foo in [1, 2]
#     ^^^^^^^^^^^^^
#
#     foo in *1
#     ^^^^^^^^^
#
#     foo in Bar[]
#     ^^^^^^^^^^^^
#
#     foo in Bar[1, 2, 3]
#     ^^^^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#508
class YARP::ArrayPatternNode < ::YARP::Node
  # def initialize: (constant: Node?, requireds: Array[Node], rest: Node?, posts: Array[Node], opening_loc: Location?, closing_loc: Location?, location: Location) -> void
  #
  # @return [ArrayPatternNode] a new instance of ArrayPatternNode
  #
  # source://yarp//lib/yarp/node.rb#528
  def initialize(constant, requireds, rest, posts, opening_loc, closing_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#539
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#544
  def child_nodes; end

  # def closing: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#590
  def closing; end

  # attr_reader closing_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#525
  def closing_loc; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#559
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#549
  def compact_child_nodes; end

  # attr_reader constant: Node?
  #
  # source://yarp//lib/yarp/node.rb#510
  def constant; end

  # def copy: (**params) -> ArrayPatternNode
  #
  # source://yarp//lib/yarp/node.rb#564
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#544
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#580
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#618
  def human; end

  # source://yarp//lib/yarp/node.rb#594
  def inspect(inspector = T.unsafe(nil)); end

  # def opening: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#585
  def opening; end

  # attr_reader opening_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#522
  def opening_loc; end

  # attr_reader posts: Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#519
  def posts; end

  # attr_reader requireds: Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#513
  def requireds; end

  # attr_reader rest: Node?
  #
  # source://yarp//lib/yarp/node.rb#516
  def rest; end
end

# Represents a hash key/value pair.
#
#     { a => b }
#       ^^^^^^
#
# source://yarp//lib/yarp/node.rb#627
class YARP::AssocNode < ::YARP::Node
  # def initialize: (key: Node, value: Node?, operator_loc: Location?, location: Location) -> void
  #
  # @return [AssocNode] a new instance of AssocNode
  #
  # source://yarp//lib/yarp/node.rb#638
  def initialize(key, value, operator_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#646
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#651
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#664
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#656
  def compact_child_nodes; end

  # def copy: (**params) -> AssocNode
  #
  # source://yarp//lib/yarp/node.rb#669
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#651
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#682
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#708
  def human; end

  # source://yarp//lib/yarp/node.rb#691
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader key: Node
  #
  # source://yarp//lib/yarp/node.rb#629
  def key; end

  # def operator: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#687
  def operator; end

  # attr_reader operator_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#635
  def operator_loc; end

  # attr_reader value: Node?
  #
  # source://yarp//lib/yarp/node.rb#632
  def value; end
end

# Represents a splat in a hash literal.
#
#     { **foo }
#       ^^^^^
#
# source://yarp//lib/yarp/node.rb#717
class YARP::AssocSplatNode < ::YARP::Node
  # def initialize: (value: Node?, operator_loc: Location, location: Location) -> void
  #
  # @return [AssocSplatNode] a new instance of AssocSplatNode
  #
  # source://yarp//lib/yarp/node.rb#725
  def initialize(value, operator_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#732
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#737
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#749
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#742
  def compact_child_nodes; end

  # def copy: (**params) -> AssocSplatNode
  #
  # source://yarp//lib/yarp/node.rb#754
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#737
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#766
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#790
  def human; end

  # source://yarp//lib/yarp/node.rb#775
  def inspect(inspector = T.unsafe(nil)); end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#771
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#722
  def operator_loc; end

  # attr_reader value: Node?
  #
  # source://yarp//lib/yarp/node.rb#719
  def value; end
end

YARP::BACKEND = T.let(T.unsafe(nil), Symbol)

# Represents reading a reference to a field in the previous match.
#
#     $'
#     ^^
#
# source://yarp//lib/yarp/node.rb#799
class YARP::BackReferenceReadNode < ::YARP::Node
  # def initialize: (location: Location) -> void
  #
  # @return [BackReferenceReadNode] a new instance of BackReferenceReadNode
  #
  # source://yarp//lib/yarp/node.rb#801
  def initialize(location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#806
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#811
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#821
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#816
  def compact_child_nodes; end

  # def copy: (**params) -> BackReferenceReadNode
  #
  # source://yarp//lib/yarp/node.rb#826
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#811
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#836
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#848
  def human; end

  # source://yarp//lib/yarp/node.rb#840
  def inspect(inspector = T.unsafe(nil)); end
end

# A class that knows how to walk down the tree. None of the individual visit
# methods are implemented on this visitor, so it forces the consumer to
# implement each one that they need. For a default implementation that
# continues walking the tree, see the Visitor class.
#
# source://yarp//lib/yarp.rb#209
class YARP::BasicVisitor
  # source://yarp//lib/yarp.rb#210
  def visit(node); end

  # source://yarp//lib/yarp.rb#214
  def visit_all(nodes); end

  # source://yarp//lib/yarp.rb#218
  def visit_child_nodes(node); end
end

# Represents a begin statement.
#
#     begin
#       foo
#     end
#     ^^^^^
#
# source://yarp//lib/yarp/node.rb#859
class YARP::BeginNode < ::YARP::Node
  # def initialize: (begin_keyword_loc: Location?, statements: StatementsNode?, rescue_clause: RescueNode?, else_clause: ElseNode?, ensure_clause: EnsureNode?, end_keyword_loc: Location?, location: Location) -> void
  #
  # @return [BeginNode] a new instance of BeginNode
  #
  # source://yarp//lib/yarp/node.rb#879
  def initialize(begin_keyword_loc, statements, rescue_clause, else_clause, ensure_clause, end_keyword_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#890
  def accept(visitor); end

  # def begin_keyword: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#940
  def begin_keyword; end

  # attr_reader begin_keyword_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#861
  def begin_keyword_loc; end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#899
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#914
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#904
  def compact_child_nodes; end

  # def copy: (**params) -> BeginNode
  #
  # source://yarp//lib/yarp/node.rb#919
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#899
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#935
  def deconstruct_keys(keys); end

  # attr_reader else_clause: ElseNode?
  #
  # source://yarp//lib/yarp/node.rb#870
  def else_clause; end

  # def end_keyword: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#945
  def end_keyword; end

  # attr_reader end_keyword_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#876
  def end_keyword_loc; end

  # attr_reader ensure_clause: EnsureNode?
  #
  # source://yarp//lib/yarp/node.rb#873
  def ensure_clause; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#983
  def human; end

  # source://yarp//lib/yarp/node.rb#949
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader rescue_clause: RescueNode?
  #
  # source://yarp//lib/yarp/node.rb#867
  def rescue_clause; end

  # source://yarp//lib/yarp/node.rb#894
  def set_newline_flag(newline_marked); end

  # attr_reader statements: StatementsNode?
  #
  # source://yarp//lib/yarp/node.rb#864
  def statements; end
end

# Represents block method arguments.
#
#     bar(&args)
#     ^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#992
class YARP::BlockArgumentNode < ::YARP::Node
  # def initialize: (expression: Node?, operator_loc: Location, location: Location) -> void
  #
  # @return [BlockArgumentNode] a new instance of BlockArgumentNode
  #
  # source://yarp//lib/yarp/node.rb#1000
  def initialize(expression, operator_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#1007
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#1012
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#1024
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#1017
  def compact_child_nodes; end

  # def copy: (**params) -> BlockArgumentNode
  #
  # source://yarp//lib/yarp/node.rb#1029
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#1012
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#1041
  def deconstruct_keys(keys); end

  # attr_reader expression: Node?
  #
  # source://yarp//lib/yarp/node.rb#994
  def expression; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#1065
  def human; end

  # source://yarp//lib/yarp/node.rb#1050
  def inspect(inspector = T.unsafe(nil)); end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#1046
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#997
  def operator_loc; end
end

# Represents a block local variable.
#
#     a { |; b| }
#            ^
#
# source://yarp//lib/yarp/node.rb#1074
class YARP::BlockLocalVariableNode < ::YARP::Node
  # def initialize: (name: Symbol, location: Location) -> void
  #
  # @return [BlockLocalVariableNode] a new instance of BlockLocalVariableNode
  #
  # source://yarp//lib/yarp/node.rb#1079
  def initialize(name, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#1085
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#1090
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#1100
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#1095
  def compact_child_nodes; end

  # def copy: (**params) -> BlockLocalVariableNode
  #
  # source://yarp//lib/yarp/node.rb#1105
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#1090
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#1116
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#1129
  def human; end

  # source://yarp//lib/yarp/node.rb#1120
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#1076
  def name; end
end

# Represents a block of ruby code.
#
# [1, 2, 3].each { |i| puts x }
#                ^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#1138
class YARP::BlockNode < ::YARP::Node
  # def initialize: (locals: Array[Symbol], parameters: BlockParametersNode?, body: Node?, opening_loc: Location, closing_loc: Location, location: Location) -> void
  #
  # @return [BlockNode] a new instance of BlockNode
  #
  # source://yarp//lib/yarp/node.rb#1155
  def initialize(locals, parameters, body, opening_loc, closing_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#1165
  def accept(visitor); end

  # attr_reader body: Node?
  #
  # source://yarp//lib/yarp/node.rb#1146
  def body; end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#1170
  def child_nodes; end

  # def closing: () -> String
  #
  # source://yarp//lib/yarp/node.rb#1213
  def closing; end

  # attr_reader closing_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#1152
  def closing_loc; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#1183
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#1175
  def compact_child_nodes; end

  # def copy: (**params) -> BlockNode
  #
  # source://yarp//lib/yarp/node.rb#1188
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#1170
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#1203
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#1240
  def human; end

  # source://yarp//lib/yarp/node.rb#1217
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader locals: Array[Symbol]
  #
  # source://yarp//lib/yarp/node.rb#1140
  def locals; end

  # def opening: () -> String
  #
  # source://yarp//lib/yarp/node.rb#1208
  def opening; end

  # attr_reader opening_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#1149
  def opening_loc; end

  # attr_reader parameters: BlockParametersNode?
  #
  # source://yarp//lib/yarp/node.rb#1143
  def parameters; end
end

# Represents a block parameter to a method, block, or lambda definition.
#
#     def a(&b)
#           ^^
#     end
#
# source://yarp//lib/yarp/node.rb#1250
class YARP::BlockParameterNode < ::YARP::Node
  # def initialize: (name: Symbol?, name_loc: Location?, operator_loc: Location, location: Location) -> void
  #
  # @return [BlockParameterNode] a new instance of BlockParameterNode
  #
  # source://yarp//lib/yarp/node.rb#1261
  def initialize(name, name_loc, operator_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#1269
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#1274
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#1284
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#1279
  def compact_child_nodes; end

  # def copy: (**params) -> BlockParameterNode
  #
  # source://yarp//lib/yarp/node.rb#1289
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#1274
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#1302
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#1322
  def human; end

  # source://yarp//lib/yarp/node.rb#1311
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol?
  #
  # source://yarp//lib/yarp/node.rb#1252
  def name; end

  # attr_reader name_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#1255
  def name_loc; end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#1307
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#1258
  def operator_loc; end
end

# Represents a block's parameters declaration.
#
#     -> (a, b = 1; local) { }
#        ^^^^^^^^^^^^^^^^^
#
#     foo do |a, b = 1; local|
#            ^^^^^^^^^^^^^^^^^
#     end
#
# source://yarp//lib/yarp/node.rb#1335
class YARP::BlockParametersNode < ::YARP::Node
  # def initialize: (parameters: ParametersNode?, locals: Array[Node], opening_loc: Location?, closing_loc: Location?, location: Location) -> void
  #
  # @return [BlockParametersNode] a new instance of BlockParametersNode
  #
  # source://yarp//lib/yarp/node.rb#1349
  def initialize(parameters, locals, opening_loc, closing_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#1358
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#1363
  def child_nodes; end

  # def closing: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#1405
  def closing; end

  # attr_reader closing_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#1346
  def closing_loc; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#1376
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#1368
  def compact_child_nodes; end

  # def copy: (**params) -> BlockParametersNode
  #
  # source://yarp//lib/yarp/node.rb#1381
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#1363
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#1395
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#1426
  def human; end

  # source://yarp//lib/yarp/node.rb#1409
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader locals: Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#1340
  def locals; end

  # def opening: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#1400
  def opening; end

  # attr_reader opening_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#1343
  def opening_loc; end

  # attr_reader parameters: ParametersNode?
  #
  # source://yarp//lib/yarp/node.rb#1337
  def parameters; end
end

# Represents the use of the `break` keyword.
#
#     break foo
#     ^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#1435
class YARP::BreakNode < ::YARP::Node
  # def initialize: (arguments: ArgumentsNode?, keyword_loc: Location, location: Location) -> void
  #
  # @return [BreakNode] a new instance of BreakNode
  #
  # source://yarp//lib/yarp/node.rb#1443
  def initialize(arguments, keyword_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#1450
  def accept(visitor); end

  # attr_reader arguments: ArgumentsNode?
  #
  # source://yarp//lib/yarp/node.rb#1437
  def arguments; end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#1455
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#1467
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#1460
  def compact_child_nodes; end

  # def copy: (**params) -> BreakNode
  #
  # source://yarp//lib/yarp/node.rb#1472
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#1455
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#1484
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#1508
  def human; end

  # source://yarp//lib/yarp/node.rb#1493
  def inspect(inspector = T.unsafe(nil)); end

  # def keyword: () -> String
  #
  # source://yarp//lib/yarp/node.rb#1489
  def keyword; end

  # attr_reader keyword_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#1440
  def keyword_loc; end
end

# Represents the use of the `&&=` operator on a call.
#
#     foo.bar &&= value
#     ^^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#1517
class YARP::CallAndWriteNode < ::YARP::Node
  # def initialize: (receiver: Node?, call_operator_loc: Location?, message_loc: Location?, opening_loc: Location?, arguments: ArgumentsNode?, closing_loc: Location?, flags: Integer, read_name: String, write_name: String, operator_loc: Location, value: Node, location: Location) -> void
  #
  # @return [CallAndWriteNode] a new instance of CallAndWriteNode
  #
  # source://yarp//lib/yarp/node.rb#1552
  def initialize(receiver, call_operator_loc, message_loc, opening_loc, arguments, closing_loc, flags, read_name, write_name, operator_loc, value, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#1568
  def accept(visitor); end

  # attr_reader arguments: ArgumentsNode?
  #
  # source://yarp//lib/yarp/node.rb#1531
  def arguments; end

  # def call_operator: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#1618
  def call_operator; end

  # attr_reader call_operator_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#1522
  def call_operator_loc; end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#1573
  def child_nodes; end

  # def closing: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#1633
  def closing; end

  # attr_reader closing_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#1534
  def closing_loc; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#1587
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#1578
  def compact_child_nodes; end

  # def copy: (**params) -> CallAndWriteNode
  #
  # source://yarp//lib/yarp/node.rb#1592
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#1573
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#1613
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#1683
  def human; end

  # source://yarp//lib/yarp/node.rb#1652
  def inspect(inspector = T.unsafe(nil)); end

  # def message: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#1623
  def message; end

  # attr_reader message_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#1525
  def message_loc; end

  # def opening: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#1628
  def opening; end

  # attr_reader opening_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#1528
  def opening_loc; end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#1648
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#1546
  def operator_loc; end

  # attr_reader read_name: String
  #
  # source://yarp//lib/yarp/node.rb#1540
  def read_name; end

  # attr_reader receiver: Node?
  #
  # source://yarp//lib/yarp/node.rb#1519
  def receiver; end

  # def safe_navigation?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#1638
  def safe_navigation?; end

  # attr_reader value: Node
  #
  # source://yarp//lib/yarp/node.rb#1549
  def value; end

  # def variable_call?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#1643
  def variable_call?; end

  # attr_reader write_name: String
  #
  # source://yarp//lib/yarp/node.rb#1543
  def write_name; end

  private

  # Returns the value of attribute flags.
  #
  # source://yarp//lib/yarp/node.rb#1537
  def flags; end
end

# Represents a method call, in all of the various forms that can take.
#
#     foo
#     ^^^
#
#     foo()
#     ^^^^^
#
#     +foo
#     ^^^^
#
#     foo + bar
#     ^^^^^^^^^
#
#     foo.bar
#     ^^^^^^^
#
#     foo&.bar
#     ^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#1707
class YARP::CallNode < ::YARP::Node
  # def initialize: (receiver: Node?, call_operator_loc: Location?, message_loc: Location?, opening_loc: Location?, arguments: ArgumentsNode?, closing_loc: Location?, block: BlockNode?, flags: Integer, name: String, location: Location) -> void
  #
  # @return [CallNode] a new instance of CallNode
  #
  # source://yarp//lib/yarp/node.rb#1736
  def initialize(receiver, call_operator_loc, message_loc, opening_loc, arguments, closing_loc, block, flags, name, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#1750
  def accept(visitor); end

  # attr_reader arguments: ArgumentsNode?
  #
  # source://yarp//lib/yarp/node.rb#1721
  def arguments; end

  # attr_reader block: BlockNode?
  #
  # source://yarp//lib/yarp/node.rb#1727
  def block; end

  # def call_operator: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#1798
  def call_operator; end

  # attr_reader call_operator_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#1712
  def call_operator_loc; end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#1755
  def child_nodes; end

  # def closing: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#1813
  def closing; end

  # attr_reader closing_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#1724
  def closing_loc; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#1769
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#1760
  def compact_child_nodes; end

  # def copy: (**params) -> CallNode
  #
  # source://yarp//lib/yarp/node.rb#1774
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#1755
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#1793
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#1860
  def human; end

  # source://yarp//lib/yarp/node.rb#1827
  def inspect(inspector = T.unsafe(nil)); end

  # def message: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#1803
  def message; end

  # attr_reader message_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#1715
  def message_loc; end

  # attr_reader name: String
  #
  # source://yarp//lib/yarp/node.rb#1733
  def name; end

  # def opening: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#1808
  def opening; end

  # attr_reader opening_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#1718
  def opening_loc; end

  # attr_reader receiver: Node?
  #
  # source://yarp//lib/yarp/node.rb#1709
  def receiver; end

  # def safe_navigation?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#1818
  def safe_navigation?; end

  # def variable_call?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#1823
  def variable_call?; end

  private

  # Returns the value of attribute flags.
  #
  # source://yarp//lib/yarp/node.rb#1730
  def flags; end
end

# source://yarp//lib/yarp/node.rb#12895
module YARP::CallNodeFlags; end

# &. operator
#
# source://yarp//lib/yarp/node.rb#12897
YARP::CallNodeFlags::SAFE_NAVIGATION = T.let(T.unsafe(nil), Integer)

# a call that could have been a local variable
#
# source://yarp//lib/yarp/node.rb#12900
YARP::CallNodeFlags::VARIABLE_CALL = T.let(T.unsafe(nil), Integer)

# Represents the use of an assignment operator on a call.
#
#     foo.bar += baz
#     ^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#1869
class YARP::CallOperatorWriteNode < ::YARP::Node
  # def initialize: (receiver: Node?, call_operator_loc: Location?, message_loc: Location?, opening_loc: Location?, arguments: ArgumentsNode?, closing_loc: Location?, flags: Integer, read_name: String, write_name: String, operator: Symbol, operator_loc: Location, value: Node, location: Location) -> void
  #
  # @return [CallOperatorWriteNode] a new instance of CallOperatorWriteNode
  #
  # source://yarp//lib/yarp/node.rb#1907
  def initialize(receiver, call_operator_loc, message_loc, opening_loc, arguments, closing_loc, flags, read_name, write_name, operator, operator_loc, value, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#1924
  def accept(visitor); end

  # attr_reader arguments: ArgumentsNode?
  #
  # source://yarp//lib/yarp/node.rb#1883
  def arguments; end

  # def call_operator: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#1975
  def call_operator; end

  # attr_reader call_operator_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#1874
  def call_operator_loc; end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#1929
  def child_nodes; end

  # def closing: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#1990
  def closing; end

  # attr_reader closing_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#1886
  def closing_loc; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#1943
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#1934
  def compact_child_nodes; end

  # def copy: (**params) -> CallOperatorWriteNode
  #
  # source://yarp//lib/yarp/node.rb#1948
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#1929
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#1970
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#2036
  def human; end

  # source://yarp//lib/yarp/node.rb#2004
  def inspect(inspector = T.unsafe(nil)); end

  # def message: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#1980
  def message; end

  # attr_reader message_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#1877
  def message_loc; end

  # def opening: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#1985
  def opening; end

  # attr_reader opening_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#1880
  def opening_loc; end

  # attr_reader operator: Symbol
  #
  # source://yarp//lib/yarp/node.rb#1898
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#1901
  def operator_loc; end

  # attr_reader read_name: String
  #
  # source://yarp//lib/yarp/node.rb#1892
  def read_name; end

  # attr_reader receiver: Node?
  #
  # source://yarp//lib/yarp/node.rb#1871
  def receiver; end

  # def safe_navigation?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#1995
  def safe_navigation?; end

  # attr_reader value: Node
  #
  # source://yarp//lib/yarp/node.rb#1904
  def value; end

  # def variable_call?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#2000
  def variable_call?; end

  # attr_reader write_name: String
  #
  # source://yarp//lib/yarp/node.rb#1895
  def write_name; end

  private

  # Returns the value of attribute flags.
  #
  # source://yarp//lib/yarp/node.rb#1889
  def flags; end
end

# Represents the use of the `||=` operator on a call.
#
#     foo.bar ||= value
#     ^^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#2045
class YARP::CallOrWriteNode < ::YARP::Node
  # def initialize: (receiver: Node?, call_operator_loc: Location?, message_loc: Location?, opening_loc: Location?, arguments: ArgumentsNode?, closing_loc: Location?, flags: Integer, read_name: String, write_name: String, operator_loc: Location, value: Node, location: Location) -> void
  #
  # @return [CallOrWriteNode] a new instance of CallOrWriteNode
  #
  # source://yarp//lib/yarp/node.rb#2080
  def initialize(receiver, call_operator_loc, message_loc, opening_loc, arguments, closing_loc, flags, read_name, write_name, operator_loc, value, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#2096
  def accept(visitor); end

  # attr_reader arguments: ArgumentsNode?
  #
  # source://yarp//lib/yarp/node.rb#2059
  def arguments; end

  # def call_operator: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#2146
  def call_operator; end

  # attr_reader call_operator_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#2050
  def call_operator_loc; end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#2101
  def child_nodes; end

  # def closing: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#2161
  def closing; end

  # attr_reader closing_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#2062
  def closing_loc; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#2115
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#2106
  def compact_child_nodes; end

  # def copy: (**params) -> CallOrWriteNode
  #
  # source://yarp//lib/yarp/node.rb#2120
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#2101
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#2141
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#2211
  def human; end

  # source://yarp//lib/yarp/node.rb#2180
  def inspect(inspector = T.unsafe(nil)); end

  # def message: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#2151
  def message; end

  # attr_reader message_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#2053
  def message_loc; end

  # def opening: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#2156
  def opening; end

  # attr_reader opening_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#2056
  def opening_loc; end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#2176
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#2074
  def operator_loc; end

  # attr_reader read_name: String
  #
  # source://yarp//lib/yarp/node.rb#2068
  def read_name; end

  # attr_reader receiver: Node?
  #
  # source://yarp//lib/yarp/node.rb#2047
  def receiver; end

  # def safe_navigation?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#2166
  def safe_navigation?; end

  # attr_reader value: Node
  #
  # source://yarp//lib/yarp/node.rb#2077
  def value; end

  # def variable_call?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#2171
  def variable_call?; end

  # attr_reader write_name: String
  #
  # source://yarp//lib/yarp/node.rb#2071
  def write_name; end

  private

  # Returns the value of attribute flags.
  #
  # source://yarp//lib/yarp/node.rb#2065
  def flags; end
end

# Represents assigning to a local variable in pattern matching.
#
#     foo => [bar => baz]
#            ^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#2220
class YARP::CapturePatternNode < ::YARP::Node
  # def initialize: (value: Node, target: Node, operator_loc: Location, location: Location) -> void
  #
  # @return [CapturePatternNode] a new instance of CapturePatternNode
  #
  # source://yarp//lib/yarp/node.rb#2231
  def initialize(value, target, operator_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#2239
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#2244
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#2254
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#2249
  def compact_child_nodes; end

  # def copy: (**params) -> CapturePatternNode
  #
  # source://yarp//lib/yarp/node.rb#2259
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#2244
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#2272
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#2294
  def human; end

  # source://yarp//lib/yarp/node.rb#2281
  def inspect(inspector = T.unsafe(nil)); end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#2277
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#2228
  def operator_loc; end

  # attr_reader target: Node
  #
  # source://yarp//lib/yarp/node.rb#2225
  def target; end

  # attr_reader value: Node
  #
  # source://yarp//lib/yarp/node.rb#2222
  def value; end
end

# Represents the use of a case statement.
#
# case true
# ^^^^^^^^^
# when false
# end
#
# source://yarp//lib/yarp/node.rb#2305
class YARP::CaseNode < ::YARP::Node
  # def initialize: (predicate: Node?, conditions: Array[Node], consequent: ElseNode?, case_keyword_loc: Location, end_keyword_loc: Location, location: Location) -> void
  #
  # @return [CaseNode] a new instance of CaseNode
  #
  # source://yarp//lib/yarp/node.rb#2322
  def initialize(predicate, conditions, consequent, case_keyword_loc, end_keyword_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#2332
  def accept(visitor); end

  # def case_keyword: () -> String
  #
  # source://yarp//lib/yarp/node.rb#2376
  def case_keyword; end

  # attr_reader case_keyword_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#2316
  def case_keyword_loc; end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#2337
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#2351
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#2342
  def compact_child_nodes; end

  # attr_reader conditions: Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#2310
  def conditions; end

  # attr_reader consequent: ElseNode?
  #
  # source://yarp//lib/yarp/node.rb#2313
  def consequent; end

  # def copy: (**params) -> CaseNode
  #
  # source://yarp//lib/yarp/node.rb#2356
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#2337
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#2371
  def deconstruct_keys(keys); end

  # def end_keyword: () -> String
  #
  # source://yarp//lib/yarp/node.rb#2381
  def end_keyword; end

  # attr_reader end_keyword_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#2319
  def end_keyword_loc; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#2408
  def human; end

  # source://yarp//lib/yarp/node.rb#2385
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader predicate: Node?
  #
  # source://yarp//lib/yarp/node.rb#2307
  def predicate; end
end

# Represents a class declaration involving the `class` keyword.
#
#     class Foo end
#     ^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#2417
class YARP::ClassNode < ::YARP::Node
  # def initialize: (locals: Array[Symbol], class_keyword_loc: Location, constant_path: Node, inheritance_operator_loc: Location?, superclass: Node?, body: Node?, end_keyword_loc: Location, name: Symbol, location: Location) -> void
  #
  # @return [ClassNode] a new instance of ClassNode
  #
  # source://yarp//lib/yarp/node.rb#2443
  def initialize(locals, class_keyword_loc, constant_path, inheritance_operator_loc, superclass, body, end_keyword_loc, name, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#2456
  def accept(visitor); end

  # attr_reader body: Node?
  #
  # source://yarp//lib/yarp/node.rb#2434
  def body; end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#2461
  def child_nodes; end

  # def class_keyword: () -> String
  #
  # source://yarp//lib/yarp/node.rb#2503
  def class_keyword; end

  # attr_reader class_keyword_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#2422
  def class_keyword_loc; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#2475
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#2466
  def compact_child_nodes; end

  # attr_reader constant_path: Node
  #
  # source://yarp//lib/yarp/node.rb#2425
  def constant_path; end

  # def copy: (**params) -> ClassNode
  #
  # source://yarp//lib/yarp/node.rb#2480
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#2461
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#2498
  def deconstruct_keys(keys); end

  # def end_keyword: () -> String
  #
  # source://yarp//lib/yarp/node.rb#2513
  def end_keyword; end

  # attr_reader end_keyword_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#2437
  def end_keyword_loc; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#2544
  def human; end

  # def inheritance_operator: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#2508
  def inheritance_operator; end

  # attr_reader inheritance_operator_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#2428
  def inheritance_operator_loc; end

  # source://yarp//lib/yarp/node.rb#2517
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader locals: Array[Symbol]
  #
  # source://yarp//lib/yarp/node.rb#2419
  def locals; end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#2440
  def name; end

  # attr_reader superclass: Node?
  #
  # source://yarp//lib/yarp/node.rb#2431
  def superclass; end
end

# Represents the use of the `&&=` operator for assignment to a class variable.
#
#     @@target &&= value
#     ^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#2553
class YARP::ClassVariableAndWriteNode < ::YARP::Node
  # def initialize: (name: Symbol, name_loc: Location, operator_loc: Location, value: Node, location: Location) -> void
  #
  # @return [ClassVariableAndWriteNode] a new instance of ClassVariableAndWriteNode
  #
  # source://yarp//lib/yarp/node.rb#2567
  def initialize(name, name_loc, operator_loc, value, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#2576
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#2581
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#2591
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#2586
  def compact_child_nodes; end

  # def copy: (**params) -> ClassVariableAndWriteNode
  #
  # source://yarp//lib/yarp/node.rb#2596
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#2581
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#2610
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#2632
  def human; end

  # source://yarp//lib/yarp/node.rb#2619
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#2555
  def name; end

  # attr_reader name_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#2558
  def name_loc; end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#2615
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#2561
  def operator_loc; end

  # attr_reader value: Node
  #
  # source://yarp//lib/yarp/node.rb#2564
  def value; end
end

# Represents assigning to a class variable using an operator that isn't `=`.
#
#     @@target += value
#     ^^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#2641
class YARP::ClassVariableOperatorWriteNode < ::YARP::Node
  # def initialize: (name: Symbol, name_loc: Location, operator_loc: Location, value: Node, operator: Symbol, location: Location) -> void
  #
  # @return [ClassVariableOperatorWriteNode] a new instance of ClassVariableOperatorWriteNode
  #
  # source://yarp//lib/yarp/node.rb#2658
  def initialize(name, name_loc, operator_loc, value, operator, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#2668
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#2673
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#2683
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#2678
  def compact_child_nodes; end

  # def copy: (**params) -> ClassVariableOperatorWriteNode
  #
  # source://yarp//lib/yarp/node.rb#2688
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#2673
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#2703
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#2721
  def human; end

  # source://yarp//lib/yarp/node.rb#2707
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#2643
  def name; end

  # attr_reader name_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#2646
  def name_loc; end

  # attr_reader operator: Symbol
  #
  # source://yarp//lib/yarp/node.rb#2655
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#2649
  def operator_loc; end

  # attr_reader value: Node
  #
  # source://yarp//lib/yarp/node.rb#2652
  def value; end
end

# Represents the use of the `||=` operator for assignment to a class variable.
#
#     @@target ||= value
#     ^^^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#2730
class YARP::ClassVariableOrWriteNode < ::YARP::Node
  # def initialize: (name: Symbol, name_loc: Location, operator_loc: Location, value: Node, location: Location) -> void
  #
  # @return [ClassVariableOrWriteNode] a new instance of ClassVariableOrWriteNode
  #
  # source://yarp//lib/yarp/node.rb#2744
  def initialize(name, name_loc, operator_loc, value, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#2753
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#2758
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#2768
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#2763
  def compact_child_nodes; end

  # def copy: (**params) -> ClassVariableOrWriteNode
  #
  # source://yarp//lib/yarp/node.rb#2773
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#2758
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#2787
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#2809
  def human; end

  # source://yarp//lib/yarp/node.rb#2796
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#2732
  def name; end

  # attr_reader name_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#2735
  def name_loc; end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#2792
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#2738
  def operator_loc; end

  # attr_reader value: Node
  #
  # source://yarp//lib/yarp/node.rb#2741
  def value; end
end

# Represents referencing a class variable.
#
#     @@foo
#     ^^^^^
#
# source://yarp//lib/yarp/node.rb#2818
class YARP::ClassVariableReadNode < ::YARP::Node
  # def initialize: (name: Symbol, location: Location) -> void
  #
  # @return [ClassVariableReadNode] a new instance of ClassVariableReadNode
  #
  # source://yarp//lib/yarp/node.rb#2823
  def initialize(name, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#2829
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#2834
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#2844
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#2839
  def compact_child_nodes; end

  # def copy: (**params) -> ClassVariableReadNode
  #
  # source://yarp//lib/yarp/node.rb#2849
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#2834
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#2860
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#2873
  def human; end

  # source://yarp//lib/yarp/node.rb#2864
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#2820
  def name; end
end

# Represents writing to a class variable in a context that doesn't have an explicit value.
#
#     @@foo, @@bar = baz
#     ^^^^^  ^^^^^
#
# source://yarp//lib/yarp/node.rb#2882
class YARP::ClassVariableTargetNode < ::YARP::Node
  # def initialize: (name: Symbol, location: Location) -> void
  #
  # @return [ClassVariableTargetNode] a new instance of ClassVariableTargetNode
  #
  # source://yarp//lib/yarp/node.rb#2887
  def initialize(name, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#2893
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#2898
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#2908
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#2903
  def compact_child_nodes; end

  # def copy: (**params) -> ClassVariableTargetNode
  #
  # source://yarp//lib/yarp/node.rb#2913
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#2898
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#2924
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#2937
  def human; end

  # source://yarp//lib/yarp/node.rb#2928
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#2884
  def name; end
end

# Represents writing to a class variable.
#
#     @@foo = 1
#     ^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#2946
class YARP::ClassVariableWriteNode < ::YARP::Node
  # def initialize: (name: Symbol, name_loc: Location, value: Node, operator_loc: Location?, location: Location) -> void
  #
  # @return [ClassVariableWriteNode] a new instance of ClassVariableWriteNode
  #
  # source://yarp//lib/yarp/node.rb#2960
  def initialize(name, name_loc, value, operator_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#2969
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#2974
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#2984
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#2979
  def compact_child_nodes; end

  # def copy: (**params) -> ClassVariableWriteNode
  #
  # source://yarp//lib/yarp/node.rb#2989
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#2974
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#3003
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#3025
  def human; end

  # source://yarp//lib/yarp/node.rb#3012
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#2948
  def name; end

  # attr_reader name_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#2951
  def name_loc; end

  # def operator: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#3008
  def operator; end

  # attr_reader operator_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#2957
  def operator_loc; end

  # attr_reader value: Node
  #
  # source://yarp//lib/yarp/node.rb#2954
  def value; end
end

# This represents a comment that was encountered during parsing.
#
# source://yarp//lib/yarp.rb#145
class YARP::Comment
  # @return [Comment] a new instance of Comment
  #
  # source://yarp//lib/yarp.rb#150
  def initialize(type, location); end

  # source://yarp//lib/yarp.rb#155
  def deconstruct_keys(keys); end

  # source://yarp//lib/yarp.rb#164
  def inspect; end

  # Returns the value of attribute location.
  #
  # source://yarp//lib/yarp.rb#148
  def location; end

  # Returns true if the comment happens on the same line as other code and false if the comment is by itself
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp.rb#160
  def trailing?; end

  # Returns the value of attribute type.
  #
  # source://yarp//lib/yarp.rb#148
  def type; end
end

# source://yarp//lib/yarp.rb#146
YARP::Comment::TYPES = T.let(T.unsafe(nil), Array)

# Represents the use of the `&&=` operator for assignment to a constant.
#
#     Target &&= value
#     ^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#3034
class YARP::ConstantAndWriteNode < ::YARP::Node
  # def initialize: (name: Symbol, name_loc: Location, operator_loc: Location, value: Node, location: Location) -> void
  #
  # @return [ConstantAndWriteNode] a new instance of ConstantAndWriteNode
  #
  # source://yarp//lib/yarp/node.rb#3048
  def initialize(name, name_loc, operator_loc, value, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#3057
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#3062
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#3072
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#3067
  def compact_child_nodes; end

  # def copy: (**params) -> ConstantAndWriteNode
  #
  # source://yarp//lib/yarp/node.rb#3077
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#3062
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#3091
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#3113
  def human; end

  # source://yarp//lib/yarp/node.rb#3100
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#3036
  def name; end

  # attr_reader name_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#3039
  def name_loc; end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#3096
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#3042
  def operator_loc; end

  # attr_reader value: Node
  #
  # source://yarp//lib/yarp/node.rb#3045
  def value; end
end

# Represents assigning to a constant using an operator that isn't `=`.
#
#     Target += value
#     ^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#3122
class YARP::ConstantOperatorWriteNode < ::YARP::Node
  # def initialize: (name: Symbol, name_loc: Location, operator_loc: Location, value: Node, operator: Symbol, location: Location) -> void
  #
  # @return [ConstantOperatorWriteNode] a new instance of ConstantOperatorWriteNode
  #
  # source://yarp//lib/yarp/node.rb#3139
  def initialize(name, name_loc, operator_loc, value, operator, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#3149
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#3154
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#3164
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#3159
  def compact_child_nodes; end

  # def copy: (**params) -> ConstantOperatorWriteNode
  #
  # source://yarp//lib/yarp/node.rb#3169
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#3154
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#3184
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#3202
  def human; end

  # source://yarp//lib/yarp/node.rb#3188
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#3124
  def name; end

  # attr_reader name_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#3127
  def name_loc; end

  # attr_reader operator: Symbol
  #
  # source://yarp//lib/yarp/node.rb#3136
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#3130
  def operator_loc; end

  # attr_reader value: Node
  #
  # source://yarp//lib/yarp/node.rb#3133
  def value; end
end

# Represents the use of the `||=` operator for assignment to a constant.
#
#     Target ||= value
#     ^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#3211
class YARP::ConstantOrWriteNode < ::YARP::Node
  # def initialize: (name: Symbol, name_loc: Location, operator_loc: Location, value: Node, location: Location) -> void
  #
  # @return [ConstantOrWriteNode] a new instance of ConstantOrWriteNode
  #
  # source://yarp//lib/yarp/node.rb#3225
  def initialize(name, name_loc, operator_loc, value, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#3234
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#3239
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#3249
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#3244
  def compact_child_nodes; end

  # def copy: (**params) -> ConstantOrWriteNode
  #
  # source://yarp//lib/yarp/node.rb#3254
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#3239
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#3268
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#3290
  def human; end

  # source://yarp//lib/yarp/node.rb#3277
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#3213
  def name; end

  # attr_reader name_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#3216
  def name_loc; end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#3273
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#3219
  def operator_loc; end

  # attr_reader value: Node
  #
  # source://yarp//lib/yarp/node.rb#3222
  def value; end
end

# Represents the use of the `&&=` operator for assignment to a constant path.
#
#     Parent::Child &&= value
#     ^^^^^^^^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#3299
class YARP::ConstantPathAndWriteNode < ::YARP::Node
  # def initialize: (target: ConstantPathNode, operator_loc: Location, value: Node, location: Location) -> void
  #
  # @return [ConstantPathAndWriteNode] a new instance of ConstantPathAndWriteNode
  #
  # source://yarp//lib/yarp/node.rb#3310
  def initialize(target, operator_loc, value, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#3318
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#3323
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#3333
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#3328
  def compact_child_nodes; end

  # def copy: (**params) -> ConstantPathAndWriteNode
  #
  # source://yarp//lib/yarp/node.rb#3338
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#3323
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#3351
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#3373
  def human; end

  # source://yarp//lib/yarp/node.rb#3360
  def inspect(inspector = T.unsafe(nil)); end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#3356
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#3304
  def operator_loc; end

  # attr_reader target: ConstantPathNode
  #
  # source://yarp//lib/yarp/node.rb#3301
  def target; end

  # attr_reader value: Node
  #
  # source://yarp//lib/yarp/node.rb#3307
  def value; end
end

# Represents accessing a constant through a path of `::` operators.
#
#     Foo::Bar
#     ^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#3382
class YARP::ConstantPathNode < ::YARP::Node
  # def initialize: (parent: Node?, child: Node, delimiter_loc: Location, location: Location) -> void
  #
  # @return [ConstantPathNode] a new instance of ConstantPathNode
  #
  # source://yarp//lib/yarp/node.rb#3393
  def initialize(parent, child, delimiter_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#3401
  def accept(visitor); end

  # attr_reader child: Node
  #
  # source://yarp//lib/yarp/node.rb#3387
  def child; end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#3406
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#3419
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#3411
  def compact_child_nodes; end

  # def copy: (**params) -> ConstantPathNode
  #
  # source://yarp//lib/yarp/node.rb#3424
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#3406
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#3437
  def deconstruct_keys(keys); end

  # def delimiter: () -> String
  #
  # source://yarp//lib/yarp/node.rb#3442
  def delimiter; end

  # attr_reader delimiter_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#3390
  def delimiter_loc; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#3463
  def human; end

  # source://yarp//lib/yarp/node.rb#3446
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader parent: Node?
  #
  # source://yarp//lib/yarp/node.rb#3384
  def parent; end
end

# Represents assigning to a constant path using an operator that isn't `=`.
#
#     Parent::Child += value
#     ^^^^^^^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#3472
class YARP::ConstantPathOperatorWriteNode < ::YARP::Node
  # def initialize: (target: ConstantPathNode, operator_loc: Location, value: Node, operator: Symbol, location: Location) -> void
  #
  # @return [ConstantPathOperatorWriteNode] a new instance of ConstantPathOperatorWriteNode
  #
  # source://yarp//lib/yarp/node.rb#3486
  def initialize(target, operator_loc, value, operator, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#3495
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#3500
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#3510
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#3505
  def compact_child_nodes; end

  # def copy: (**params) -> ConstantPathOperatorWriteNode
  #
  # source://yarp//lib/yarp/node.rb#3515
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#3500
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#3529
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#3547
  def human; end

  # source://yarp//lib/yarp/node.rb#3533
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader operator: Symbol
  #
  # source://yarp//lib/yarp/node.rb#3483
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#3477
  def operator_loc; end

  # attr_reader target: ConstantPathNode
  #
  # source://yarp//lib/yarp/node.rb#3474
  def target; end

  # attr_reader value: Node
  #
  # source://yarp//lib/yarp/node.rb#3480
  def value; end
end

# Represents the use of the `||=` operator for assignment to a constant path.
#
#     Parent::Child ||= value
#     ^^^^^^^^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#3556
class YARP::ConstantPathOrWriteNode < ::YARP::Node
  # def initialize: (target: ConstantPathNode, operator_loc: Location, value: Node, location: Location) -> void
  #
  # @return [ConstantPathOrWriteNode] a new instance of ConstantPathOrWriteNode
  #
  # source://yarp//lib/yarp/node.rb#3567
  def initialize(target, operator_loc, value, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#3575
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#3580
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#3590
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#3585
  def compact_child_nodes; end

  # def copy: (**params) -> ConstantPathOrWriteNode
  #
  # source://yarp//lib/yarp/node.rb#3595
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#3580
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#3608
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#3630
  def human; end

  # source://yarp//lib/yarp/node.rb#3617
  def inspect(inspector = T.unsafe(nil)); end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#3613
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#3561
  def operator_loc; end

  # attr_reader target: ConstantPathNode
  #
  # source://yarp//lib/yarp/node.rb#3558
  def target; end

  # attr_reader value: Node
  #
  # source://yarp//lib/yarp/node.rb#3564
  def value; end
end

# Represents writing to a constant path in a context that doesn't have an explicit value.
#
#     Foo::Foo, Bar::Bar = baz
#     ^^^^^^^^  ^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#3639
class YARP::ConstantPathTargetNode < ::YARP::Node
  # def initialize: (parent: Node?, child: Node, delimiter_loc: Location, location: Location) -> void
  #
  # @return [ConstantPathTargetNode] a new instance of ConstantPathTargetNode
  #
  # source://yarp//lib/yarp/node.rb#3650
  def initialize(parent, child, delimiter_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#3658
  def accept(visitor); end

  # attr_reader child: Node
  #
  # source://yarp//lib/yarp/node.rb#3644
  def child; end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#3663
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#3676
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#3668
  def compact_child_nodes; end

  # def copy: (**params) -> ConstantPathTargetNode
  #
  # source://yarp//lib/yarp/node.rb#3681
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#3663
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#3694
  def deconstruct_keys(keys); end

  # def delimiter: () -> String
  #
  # source://yarp//lib/yarp/node.rb#3699
  def delimiter; end

  # attr_reader delimiter_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#3647
  def delimiter_loc; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#3720
  def human; end

  # source://yarp//lib/yarp/node.rb#3703
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader parent: Node?
  #
  # source://yarp//lib/yarp/node.rb#3641
  def parent; end
end

# Represents writing to a constant path.
#
#     ::Foo = 1
#     ^^^^^^^^^
#
#     Foo::Bar = 1
#     ^^^^^^^^^^^^
#
#     ::Foo::Bar = 1
#     ^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#3735
class YARP::ConstantPathWriteNode < ::YARP::Node
  # def initialize: (target: ConstantPathNode, operator_loc: Location, value: Node, location: Location) -> void
  #
  # @return [ConstantPathWriteNode] a new instance of ConstantPathWriteNode
  #
  # source://yarp//lib/yarp/node.rb#3746
  def initialize(target, operator_loc, value, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#3754
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#3759
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#3769
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#3764
  def compact_child_nodes; end

  # def copy: (**params) -> ConstantPathWriteNode
  #
  # source://yarp//lib/yarp/node.rb#3774
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#3759
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#3787
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#3809
  def human; end

  # source://yarp//lib/yarp/node.rb#3796
  def inspect(inspector = T.unsafe(nil)); end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#3792
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#3740
  def operator_loc; end

  # attr_reader target: ConstantPathNode
  #
  # source://yarp//lib/yarp/node.rb#3737
  def target; end

  # attr_reader value: Node
  #
  # source://yarp//lib/yarp/node.rb#3743
  def value; end
end

# Represents referencing a constant.
#
#     Foo
#     ^^^
#
# source://yarp//lib/yarp/node.rb#3818
class YARP::ConstantReadNode < ::YARP::Node
  # def initialize: (name: Symbol, location: Location) -> void
  #
  # @return [ConstantReadNode] a new instance of ConstantReadNode
  #
  # source://yarp//lib/yarp/node.rb#3823
  def initialize(name, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#3829
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#3834
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#3844
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#3839
  def compact_child_nodes; end

  # def copy: (**params) -> ConstantReadNode
  #
  # source://yarp//lib/yarp/node.rb#3849
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#3834
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#3860
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#3873
  def human; end

  # source://yarp//lib/yarp/node.rb#3864
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#3820
  def name; end
end

# Represents writing to a constant in a context that doesn't have an explicit value.
#
#     Foo, Bar = baz
#     ^^^  ^^^
#
# source://yarp//lib/yarp/node.rb#3882
class YARP::ConstantTargetNode < ::YARP::Node
  # def initialize: (name: Symbol, location: Location) -> void
  #
  # @return [ConstantTargetNode] a new instance of ConstantTargetNode
  #
  # source://yarp//lib/yarp/node.rb#3887
  def initialize(name, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#3893
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#3898
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#3908
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#3903
  def compact_child_nodes; end

  # def copy: (**params) -> ConstantTargetNode
  #
  # source://yarp//lib/yarp/node.rb#3913
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#3898
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#3924
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#3937
  def human; end

  # source://yarp//lib/yarp/node.rb#3928
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#3884
  def name; end
end

# Represents writing to a constant.
#
#     Foo = 1
#     ^^^^^^^
#
# source://yarp//lib/yarp/node.rb#3946
class YARP::ConstantWriteNode < ::YARP::Node
  # def initialize: (name: Symbol, name_loc: Location, value: Node, operator_loc: Location, location: Location) -> void
  #
  # @return [ConstantWriteNode] a new instance of ConstantWriteNode
  #
  # source://yarp//lib/yarp/node.rb#3960
  def initialize(name, name_loc, value, operator_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#3969
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#3974
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#3984
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#3979
  def compact_child_nodes; end

  # def copy: (**params) -> ConstantWriteNode
  #
  # source://yarp//lib/yarp/node.rb#3989
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#3974
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#4003
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#4025
  def human; end

  # source://yarp//lib/yarp/node.rb#4012
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#3948
  def name; end

  # attr_reader name_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#3951
  def name_loc; end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#4008
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#3957
  def operator_loc; end

  # attr_reader value: Node
  #
  # source://yarp//lib/yarp/node.rb#3954
  def value; end
end

# source://yarp//lib/yarp/node.rb#14408
module YARP::DSL
  private

  # Create a new AliasGlobalVariableNode node
  #
  # source://yarp//lib/yarp/node.rb#14417
  def AliasGlobalVariableNode(new_name, old_name, keyword_loc, location = T.unsafe(nil)); end

  # Create a new AliasMethodNode node
  #
  # source://yarp//lib/yarp/node.rb#14422
  def AliasMethodNode(new_name, old_name, keyword_loc, location = T.unsafe(nil)); end

  # Create a new AlternationPatternNode node
  #
  # source://yarp//lib/yarp/node.rb#14427
  def AlternationPatternNode(left, right, operator_loc, location = T.unsafe(nil)); end

  # Create a new AndNode node
  #
  # source://yarp//lib/yarp/node.rb#14432
  def AndNode(left, right, operator_loc, location = T.unsafe(nil)); end

  # Create a new ArgumentsNode node
  #
  # source://yarp//lib/yarp/node.rb#14437
  def ArgumentsNode(arguments, location = T.unsafe(nil)); end

  # Create a new ArrayNode node
  #
  # source://yarp//lib/yarp/node.rb#14442
  def ArrayNode(elements, opening_loc, closing_loc, location = T.unsafe(nil)); end

  # Create a new ArrayPatternNode node
  #
  # source://yarp//lib/yarp/node.rb#14447
  def ArrayPatternNode(constant, requireds, rest, posts, opening_loc, closing_loc, location = T.unsafe(nil)); end

  # Create a new AssocNode node
  #
  # source://yarp//lib/yarp/node.rb#14452
  def AssocNode(key, value, operator_loc, location = T.unsafe(nil)); end

  # Create a new AssocSplatNode node
  #
  # source://yarp//lib/yarp/node.rb#14457
  def AssocSplatNode(value, operator_loc, location = T.unsafe(nil)); end

  # Create a new BackReferenceReadNode node
  #
  # source://yarp//lib/yarp/node.rb#14462
  def BackReferenceReadNode(location = T.unsafe(nil)); end

  # Create a new BeginNode node
  #
  # source://yarp//lib/yarp/node.rb#14467
  def BeginNode(begin_keyword_loc, statements, rescue_clause, else_clause, ensure_clause, end_keyword_loc, location = T.unsafe(nil)); end

  # Create a new BlockArgumentNode node
  #
  # source://yarp//lib/yarp/node.rb#14472
  def BlockArgumentNode(expression, operator_loc, location = T.unsafe(nil)); end

  # Create a new BlockLocalVariableNode node
  #
  # source://yarp//lib/yarp/node.rb#14477
  def BlockLocalVariableNode(name, location = T.unsafe(nil)); end

  # Create a new BlockNode node
  #
  # source://yarp//lib/yarp/node.rb#14482
  def BlockNode(locals, parameters, body, opening_loc, closing_loc, location = T.unsafe(nil)); end

  # Create a new BlockParameterNode node
  #
  # source://yarp//lib/yarp/node.rb#14487
  def BlockParameterNode(name, name_loc, operator_loc, location = T.unsafe(nil)); end

  # Create a new BlockParametersNode node
  #
  # source://yarp//lib/yarp/node.rb#14492
  def BlockParametersNode(parameters, locals, opening_loc, closing_loc, location = T.unsafe(nil)); end

  # Create a new BreakNode node
  #
  # source://yarp//lib/yarp/node.rb#14497
  def BreakNode(arguments, keyword_loc, location = T.unsafe(nil)); end

  # Create a new CallAndWriteNode node
  #
  # source://yarp//lib/yarp/node.rb#14502
  def CallAndWriteNode(receiver, call_operator_loc, message_loc, opening_loc, arguments, closing_loc, flags, read_name, write_name, operator_loc, value, location = T.unsafe(nil)); end

  # Create a new CallNode node
  #
  # source://yarp//lib/yarp/node.rb#14507
  def CallNode(receiver, call_operator_loc, message_loc, opening_loc, arguments, closing_loc, block, flags, name, location = T.unsafe(nil)); end

  # Create a new CallOperatorWriteNode node
  #
  # source://yarp//lib/yarp/node.rb#14512
  def CallOperatorWriteNode(receiver, call_operator_loc, message_loc, opening_loc, arguments, closing_loc, flags, read_name, write_name, operator, operator_loc, value, location = T.unsafe(nil)); end

  # Create a new CallOrWriteNode node
  #
  # source://yarp//lib/yarp/node.rb#14517
  def CallOrWriteNode(receiver, call_operator_loc, message_loc, opening_loc, arguments, closing_loc, flags, read_name, write_name, operator_loc, value, location = T.unsafe(nil)); end

  # Create a new CapturePatternNode node
  #
  # source://yarp//lib/yarp/node.rb#14522
  def CapturePatternNode(value, target, operator_loc, location = T.unsafe(nil)); end

  # Create a new CaseNode node
  #
  # source://yarp//lib/yarp/node.rb#14527
  def CaseNode(predicate, conditions, consequent, case_keyword_loc, end_keyword_loc, location = T.unsafe(nil)); end

  # Create a new ClassNode node
  #
  # source://yarp//lib/yarp/node.rb#14532
  def ClassNode(locals, class_keyword_loc, constant_path, inheritance_operator_loc, superclass, body, end_keyword_loc, name, location = T.unsafe(nil)); end

  # Create a new ClassVariableAndWriteNode node
  #
  # source://yarp//lib/yarp/node.rb#14537
  def ClassVariableAndWriteNode(name, name_loc, operator_loc, value, location = T.unsafe(nil)); end

  # Create a new ClassVariableOperatorWriteNode node
  #
  # source://yarp//lib/yarp/node.rb#14542
  def ClassVariableOperatorWriteNode(name, name_loc, operator_loc, value, operator, location = T.unsafe(nil)); end

  # Create a new ClassVariableOrWriteNode node
  #
  # source://yarp//lib/yarp/node.rb#14547
  def ClassVariableOrWriteNode(name, name_loc, operator_loc, value, location = T.unsafe(nil)); end

  # Create a new ClassVariableReadNode node
  #
  # source://yarp//lib/yarp/node.rb#14552
  def ClassVariableReadNode(name, location = T.unsafe(nil)); end

  # Create a new ClassVariableTargetNode node
  #
  # source://yarp//lib/yarp/node.rb#14557
  def ClassVariableTargetNode(name, location = T.unsafe(nil)); end

  # Create a new ClassVariableWriteNode node
  #
  # source://yarp//lib/yarp/node.rb#14562
  def ClassVariableWriteNode(name, name_loc, value, operator_loc, location = T.unsafe(nil)); end

  # Create a new ConstantAndWriteNode node
  #
  # source://yarp//lib/yarp/node.rb#14567
  def ConstantAndWriteNode(name, name_loc, operator_loc, value, location = T.unsafe(nil)); end

  # Create a new ConstantOperatorWriteNode node
  #
  # source://yarp//lib/yarp/node.rb#14572
  def ConstantOperatorWriteNode(name, name_loc, operator_loc, value, operator, location = T.unsafe(nil)); end

  # Create a new ConstantOrWriteNode node
  #
  # source://yarp//lib/yarp/node.rb#14577
  def ConstantOrWriteNode(name, name_loc, operator_loc, value, location = T.unsafe(nil)); end

  # Create a new ConstantPathAndWriteNode node
  #
  # source://yarp//lib/yarp/node.rb#14582
  def ConstantPathAndWriteNode(target, operator_loc, value, location = T.unsafe(nil)); end

  # Create a new ConstantPathNode node
  #
  # source://yarp//lib/yarp/node.rb#14587
  def ConstantPathNode(parent, child, delimiter_loc, location = T.unsafe(nil)); end

  # Create a new ConstantPathOperatorWriteNode node
  #
  # source://yarp//lib/yarp/node.rb#14592
  def ConstantPathOperatorWriteNode(target, operator_loc, value, operator, location = T.unsafe(nil)); end

  # Create a new ConstantPathOrWriteNode node
  #
  # source://yarp//lib/yarp/node.rb#14597
  def ConstantPathOrWriteNode(target, operator_loc, value, location = T.unsafe(nil)); end

  # Create a new ConstantPathTargetNode node
  #
  # source://yarp//lib/yarp/node.rb#14602
  def ConstantPathTargetNode(parent, child, delimiter_loc, location = T.unsafe(nil)); end

  # Create a new ConstantPathWriteNode node
  #
  # source://yarp//lib/yarp/node.rb#14607
  def ConstantPathWriteNode(target, operator_loc, value, location = T.unsafe(nil)); end

  # Create a new ConstantReadNode node
  #
  # source://yarp//lib/yarp/node.rb#14612
  def ConstantReadNode(name, location = T.unsafe(nil)); end

  # Create a new ConstantTargetNode node
  #
  # source://yarp//lib/yarp/node.rb#14617
  def ConstantTargetNode(name, location = T.unsafe(nil)); end

  # Create a new ConstantWriteNode node
  #
  # source://yarp//lib/yarp/node.rb#14622
  def ConstantWriteNode(name, name_loc, value, operator_loc, location = T.unsafe(nil)); end

  # Create a new DefNode node
  #
  # source://yarp//lib/yarp/node.rb#14627
  def DefNode(name, name_loc, receiver, parameters, body, locals, def_keyword_loc, operator_loc, lparen_loc, rparen_loc, equal_loc, end_keyword_loc, location = T.unsafe(nil)); end

  # Create a new DefinedNode node
  #
  # source://yarp//lib/yarp/node.rb#14632
  def DefinedNode(lparen_loc, value, rparen_loc, keyword_loc, location = T.unsafe(nil)); end

  # Create a new ElseNode node
  #
  # source://yarp//lib/yarp/node.rb#14637
  def ElseNode(else_keyword_loc, statements, end_keyword_loc, location = T.unsafe(nil)); end

  # Create a new EmbeddedStatementsNode node
  #
  # source://yarp//lib/yarp/node.rb#14642
  def EmbeddedStatementsNode(opening_loc, statements, closing_loc, location = T.unsafe(nil)); end

  # Create a new EmbeddedVariableNode node
  #
  # source://yarp//lib/yarp/node.rb#14647
  def EmbeddedVariableNode(operator_loc, variable, location = T.unsafe(nil)); end

  # Create a new EnsureNode node
  #
  # source://yarp//lib/yarp/node.rb#14652
  def EnsureNode(ensure_keyword_loc, statements, end_keyword_loc, location = T.unsafe(nil)); end

  # Create a new FalseNode node
  #
  # source://yarp//lib/yarp/node.rb#14657
  def FalseNode(location = T.unsafe(nil)); end

  # Create a new FindPatternNode node
  #
  # source://yarp//lib/yarp/node.rb#14662
  def FindPatternNode(constant, left, requireds, right, opening_loc, closing_loc, location = T.unsafe(nil)); end

  # Create a new FlipFlopNode node
  #
  # source://yarp//lib/yarp/node.rb#14667
  def FlipFlopNode(left, right, operator_loc, flags, location = T.unsafe(nil)); end

  # Create a new FloatNode node
  #
  # source://yarp//lib/yarp/node.rb#14672
  def FloatNode(location = T.unsafe(nil)); end

  # Create a new ForNode node
  #
  # source://yarp//lib/yarp/node.rb#14677
  def ForNode(index, collection, statements, for_keyword_loc, in_keyword_loc, do_keyword_loc, end_keyword_loc, location = T.unsafe(nil)); end

  # Create a new ForwardingArgumentsNode node
  #
  # source://yarp//lib/yarp/node.rb#14682
  def ForwardingArgumentsNode(location = T.unsafe(nil)); end

  # Create a new ForwardingParameterNode node
  #
  # source://yarp//lib/yarp/node.rb#14687
  def ForwardingParameterNode(location = T.unsafe(nil)); end

  # Create a new ForwardingSuperNode node
  #
  # source://yarp//lib/yarp/node.rb#14692
  def ForwardingSuperNode(block, location = T.unsafe(nil)); end

  # Create a new GlobalVariableAndWriteNode node
  #
  # source://yarp//lib/yarp/node.rb#14697
  def GlobalVariableAndWriteNode(name, name_loc, operator_loc, value, location = T.unsafe(nil)); end

  # Create a new GlobalVariableOperatorWriteNode node
  #
  # source://yarp//lib/yarp/node.rb#14702
  def GlobalVariableOperatorWriteNode(name, name_loc, operator_loc, value, operator, location = T.unsafe(nil)); end

  # Create a new GlobalVariableOrWriteNode node
  #
  # source://yarp//lib/yarp/node.rb#14707
  def GlobalVariableOrWriteNode(name, name_loc, operator_loc, value, location = T.unsafe(nil)); end

  # Create a new GlobalVariableReadNode node
  #
  # source://yarp//lib/yarp/node.rb#14712
  def GlobalVariableReadNode(name, location = T.unsafe(nil)); end

  # Create a new GlobalVariableTargetNode node
  #
  # source://yarp//lib/yarp/node.rb#14717
  def GlobalVariableTargetNode(name, location = T.unsafe(nil)); end

  # Create a new GlobalVariableWriteNode node
  #
  # source://yarp//lib/yarp/node.rb#14722
  def GlobalVariableWriteNode(name, name_loc, value, operator_loc, location = T.unsafe(nil)); end

  # Create a new HashNode node
  #
  # source://yarp//lib/yarp/node.rb#14727
  def HashNode(opening_loc, elements, closing_loc, location = T.unsafe(nil)); end

  # Create a new HashPatternNode node
  #
  # source://yarp//lib/yarp/node.rb#14732
  def HashPatternNode(constant, assocs, kwrest, opening_loc, closing_loc, location = T.unsafe(nil)); end

  # Create a new IfNode node
  #
  # source://yarp//lib/yarp/node.rb#14737
  def IfNode(if_keyword_loc, predicate, statements, consequent, end_keyword_loc, location = T.unsafe(nil)); end

  # Create a new ImaginaryNode node
  #
  # source://yarp//lib/yarp/node.rb#14742
  def ImaginaryNode(numeric, location = T.unsafe(nil)); end

  # Create a new ImplicitNode node
  #
  # source://yarp//lib/yarp/node.rb#14747
  def ImplicitNode(value, location = T.unsafe(nil)); end

  # Create a new InNode node
  #
  # source://yarp//lib/yarp/node.rb#14752
  def InNode(pattern, statements, in_loc, then_loc, location = T.unsafe(nil)); end

  # Create a new InstanceVariableAndWriteNode node
  #
  # source://yarp//lib/yarp/node.rb#14757
  def InstanceVariableAndWriteNode(name, name_loc, operator_loc, value, location = T.unsafe(nil)); end

  # Create a new InstanceVariableOperatorWriteNode node
  #
  # source://yarp//lib/yarp/node.rb#14762
  def InstanceVariableOperatorWriteNode(name, name_loc, operator_loc, value, operator, location = T.unsafe(nil)); end

  # Create a new InstanceVariableOrWriteNode node
  #
  # source://yarp//lib/yarp/node.rb#14767
  def InstanceVariableOrWriteNode(name, name_loc, operator_loc, value, location = T.unsafe(nil)); end

  # Create a new InstanceVariableReadNode node
  #
  # source://yarp//lib/yarp/node.rb#14772
  def InstanceVariableReadNode(name, location = T.unsafe(nil)); end

  # Create a new InstanceVariableTargetNode node
  #
  # source://yarp//lib/yarp/node.rb#14777
  def InstanceVariableTargetNode(name, location = T.unsafe(nil)); end

  # Create a new InstanceVariableWriteNode node
  #
  # source://yarp//lib/yarp/node.rb#14782
  def InstanceVariableWriteNode(name, name_loc, value, operator_loc, location = T.unsafe(nil)); end

  # Create a new IntegerNode node
  #
  # source://yarp//lib/yarp/node.rb#14787
  def IntegerNode(flags, location = T.unsafe(nil)); end

  # Create a new InterpolatedMatchLastLineNode node
  #
  # source://yarp//lib/yarp/node.rb#14792
  def InterpolatedMatchLastLineNode(opening_loc, parts, closing_loc, flags, location = T.unsafe(nil)); end

  # Create a new InterpolatedRegularExpressionNode node
  #
  # source://yarp//lib/yarp/node.rb#14797
  def InterpolatedRegularExpressionNode(opening_loc, parts, closing_loc, flags, location = T.unsafe(nil)); end

  # Create a new InterpolatedStringNode node
  #
  # source://yarp//lib/yarp/node.rb#14802
  def InterpolatedStringNode(opening_loc, parts, closing_loc, location = T.unsafe(nil)); end

  # Create a new InterpolatedSymbolNode node
  #
  # source://yarp//lib/yarp/node.rb#14807
  def InterpolatedSymbolNode(opening_loc, parts, closing_loc, location = T.unsafe(nil)); end

  # Create a new InterpolatedXStringNode node
  #
  # source://yarp//lib/yarp/node.rb#14812
  def InterpolatedXStringNode(opening_loc, parts, closing_loc, location = T.unsafe(nil)); end

  # Create a new KeywordHashNode node
  #
  # source://yarp//lib/yarp/node.rb#14817
  def KeywordHashNode(elements, location = T.unsafe(nil)); end

  # Create a new KeywordParameterNode node
  #
  # source://yarp//lib/yarp/node.rb#14822
  def KeywordParameterNode(name, name_loc, value, location = T.unsafe(nil)); end

  # Create a new KeywordRestParameterNode node
  #
  # source://yarp//lib/yarp/node.rb#14827
  def KeywordRestParameterNode(name, name_loc, operator_loc, location = T.unsafe(nil)); end

  # Create a new LambdaNode node
  #
  # source://yarp//lib/yarp/node.rb#14832
  def LambdaNode(locals, operator_loc, opening_loc, closing_loc, parameters, body, location = T.unsafe(nil)); end

  # Create a new LocalVariableAndWriteNode node
  #
  # source://yarp//lib/yarp/node.rb#14837
  def LocalVariableAndWriteNode(name_loc, operator_loc, value, name, depth, location = T.unsafe(nil)); end

  # Create a new LocalVariableOperatorWriteNode node
  #
  # source://yarp//lib/yarp/node.rb#14842
  def LocalVariableOperatorWriteNode(name_loc, operator_loc, value, name, operator, depth, location = T.unsafe(nil)); end

  # Create a new LocalVariableOrWriteNode node
  #
  # source://yarp//lib/yarp/node.rb#14847
  def LocalVariableOrWriteNode(name_loc, operator_loc, value, name, depth, location = T.unsafe(nil)); end

  # Create a new LocalVariableReadNode node
  #
  # source://yarp//lib/yarp/node.rb#14852
  def LocalVariableReadNode(name, depth, location = T.unsafe(nil)); end

  # Create a new LocalVariableTargetNode node
  #
  # source://yarp//lib/yarp/node.rb#14857
  def LocalVariableTargetNode(name, depth, location = T.unsafe(nil)); end

  # Create a new LocalVariableWriteNode node
  #
  # source://yarp//lib/yarp/node.rb#14862
  def LocalVariableWriteNode(name, depth, name_loc, value, operator_loc, location = T.unsafe(nil)); end

  # Create a new Location object
  #
  # source://yarp//lib/yarp/node.rb#14412
  def Location(source = T.unsafe(nil), start_offset = T.unsafe(nil), length = T.unsafe(nil)); end

  # Create a new MatchLastLineNode node
  #
  # source://yarp//lib/yarp/node.rb#14867
  def MatchLastLineNode(opening_loc, content_loc, closing_loc, unescaped, flags, location = T.unsafe(nil)); end

  # Create a new MatchPredicateNode node
  #
  # source://yarp//lib/yarp/node.rb#14872
  def MatchPredicateNode(value, pattern, operator_loc, location = T.unsafe(nil)); end

  # Create a new MatchRequiredNode node
  #
  # source://yarp//lib/yarp/node.rb#14877
  def MatchRequiredNode(value, pattern, operator_loc, location = T.unsafe(nil)); end

  # Create a new MatchWriteNode node
  #
  # source://yarp//lib/yarp/node.rb#14882
  def MatchWriteNode(call, locals, location = T.unsafe(nil)); end

  # Create a new MissingNode node
  #
  # source://yarp//lib/yarp/node.rb#14887
  def MissingNode(location = T.unsafe(nil)); end

  # Create a new ModuleNode node
  #
  # source://yarp//lib/yarp/node.rb#14892
  def ModuleNode(locals, module_keyword_loc, constant_path, body, end_keyword_loc, name, location = T.unsafe(nil)); end

  # Create a new MultiTargetNode node
  #
  # source://yarp//lib/yarp/node.rb#14897
  def MultiTargetNode(targets, lparen_loc, rparen_loc, location = T.unsafe(nil)); end

  # Create a new MultiWriteNode node
  #
  # source://yarp//lib/yarp/node.rb#14902
  def MultiWriteNode(targets, lparen_loc, rparen_loc, operator_loc, value, location = T.unsafe(nil)); end

  # Create a new NextNode node
  #
  # source://yarp//lib/yarp/node.rb#14907
  def NextNode(arguments, keyword_loc, location = T.unsafe(nil)); end

  # Create a new NilNode node
  #
  # source://yarp//lib/yarp/node.rb#14912
  def NilNode(location = T.unsafe(nil)); end

  # Create a new NoKeywordsParameterNode node
  #
  # source://yarp//lib/yarp/node.rb#14917
  def NoKeywordsParameterNode(operator_loc, keyword_loc, location = T.unsafe(nil)); end

  # Create a new NumberedReferenceReadNode node
  #
  # source://yarp//lib/yarp/node.rb#14922
  def NumberedReferenceReadNode(number, location = T.unsafe(nil)); end

  # Create a new OptionalParameterNode node
  #
  # source://yarp//lib/yarp/node.rb#14927
  def OptionalParameterNode(name, name_loc, operator_loc, value, location = T.unsafe(nil)); end

  # Create a new OrNode node
  #
  # source://yarp//lib/yarp/node.rb#14932
  def OrNode(left, right, operator_loc, location = T.unsafe(nil)); end

  # Create a new ParametersNode node
  #
  # source://yarp//lib/yarp/node.rb#14937
  def ParametersNode(requireds, optionals, rest, posts, keywords, keyword_rest, block, location = T.unsafe(nil)); end

  # Create a new ParenthesesNode node
  #
  # source://yarp//lib/yarp/node.rb#14942
  def ParenthesesNode(body, opening_loc, closing_loc, location = T.unsafe(nil)); end

  # Create a new PinnedExpressionNode node
  #
  # source://yarp//lib/yarp/node.rb#14947
  def PinnedExpressionNode(expression, operator_loc, lparen_loc, rparen_loc, location = T.unsafe(nil)); end

  # Create a new PinnedVariableNode node
  #
  # source://yarp//lib/yarp/node.rb#14952
  def PinnedVariableNode(variable, operator_loc, location = T.unsafe(nil)); end

  # Create a new PostExecutionNode node
  #
  # source://yarp//lib/yarp/node.rb#14957
  def PostExecutionNode(statements, keyword_loc, opening_loc, closing_loc, location = T.unsafe(nil)); end

  # Create a new PreExecutionNode node
  #
  # source://yarp//lib/yarp/node.rb#14962
  def PreExecutionNode(statements, keyword_loc, opening_loc, closing_loc, location = T.unsafe(nil)); end

  # Create a new ProgramNode node
  #
  # source://yarp//lib/yarp/node.rb#14967
  def ProgramNode(locals, statements, location = T.unsafe(nil)); end

  # Create a new RangeNode node
  #
  # source://yarp//lib/yarp/node.rb#14972
  def RangeNode(left, right, operator_loc, flags, location = T.unsafe(nil)); end

  # Create a new RationalNode node
  #
  # source://yarp//lib/yarp/node.rb#14977
  def RationalNode(numeric, location = T.unsafe(nil)); end

  # Create a new RedoNode node
  #
  # source://yarp//lib/yarp/node.rb#14982
  def RedoNode(location = T.unsafe(nil)); end

  # Create a new RegularExpressionNode node
  #
  # source://yarp//lib/yarp/node.rb#14987
  def RegularExpressionNode(opening_loc, content_loc, closing_loc, unescaped, flags, location = T.unsafe(nil)); end

  # Create a new RequiredDestructuredParameterNode node
  #
  # source://yarp//lib/yarp/node.rb#14992
  def RequiredDestructuredParameterNode(parameters, opening_loc, closing_loc, location = T.unsafe(nil)); end

  # Create a new RequiredParameterNode node
  #
  # source://yarp//lib/yarp/node.rb#14997
  def RequiredParameterNode(name, location = T.unsafe(nil)); end

  # Create a new RescueModifierNode node
  #
  # source://yarp//lib/yarp/node.rb#15002
  def RescueModifierNode(expression, keyword_loc, rescue_expression, location = T.unsafe(nil)); end

  # Create a new RescueNode node
  #
  # source://yarp//lib/yarp/node.rb#15007
  def RescueNode(keyword_loc, exceptions, operator_loc, reference, statements, consequent, location = T.unsafe(nil)); end

  # Create a new RestParameterNode node
  #
  # source://yarp//lib/yarp/node.rb#15012
  def RestParameterNode(name, name_loc, operator_loc, location = T.unsafe(nil)); end

  # Create a new RetryNode node
  #
  # source://yarp//lib/yarp/node.rb#15017
  def RetryNode(location = T.unsafe(nil)); end

  # Create a new ReturnNode node
  #
  # source://yarp//lib/yarp/node.rb#15022
  def ReturnNode(keyword_loc, arguments, location = T.unsafe(nil)); end

  # Create a new SelfNode node
  #
  # source://yarp//lib/yarp/node.rb#15027
  def SelfNode(location = T.unsafe(nil)); end

  # Create a new SingletonClassNode node
  #
  # source://yarp//lib/yarp/node.rb#15032
  def SingletonClassNode(locals, class_keyword_loc, operator_loc, expression, body, end_keyword_loc, location = T.unsafe(nil)); end

  # Create a new SourceEncodingNode node
  #
  # source://yarp//lib/yarp/node.rb#15037
  def SourceEncodingNode(location = T.unsafe(nil)); end

  # Create a new SourceFileNode node
  #
  # source://yarp//lib/yarp/node.rb#15042
  def SourceFileNode(filepath, location = T.unsafe(nil)); end

  # Create a new SourceLineNode node
  #
  # source://yarp//lib/yarp/node.rb#15047
  def SourceLineNode(location = T.unsafe(nil)); end

  # Create a new SplatNode node
  #
  # source://yarp//lib/yarp/node.rb#15052
  def SplatNode(operator_loc, expression, location = T.unsafe(nil)); end

  # Create a new StatementsNode node
  #
  # source://yarp//lib/yarp/node.rb#15057
  def StatementsNode(body, location = T.unsafe(nil)); end

  # Create a new StringConcatNode node
  #
  # source://yarp//lib/yarp/node.rb#15062
  def StringConcatNode(left, right, location = T.unsafe(nil)); end

  # Create a new StringNode node
  #
  # source://yarp//lib/yarp/node.rb#15067
  def StringNode(flags, opening_loc, content_loc, closing_loc, unescaped, location = T.unsafe(nil)); end

  # Create a new SuperNode node
  #
  # source://yarp//lib/yarp/node.rb#15072
  def SuperNode(keyword_loc, lparen_loc, arguments, rparen_loc, block, location = T.unsafe(nil)); end

  # Create a new SymbolNode node
  #
  # source://yarp//lib/yarp/node.rb#15077
  def SymbolNode(opening_loc, value_loc, closing_loc, unescaped, location = T.unsafe(nil)); end

  # Create a new TrueNode node
  #
  # source://yarp//lib/yarp/node.rb#15082
  def TrueNode(location = T.unsafe(nil)); end

  # Create a new UndefNode node
  #
  # source://yarp//lib/yarp/node.rb#15087
  def UndefNode(names, keyword_loc, location = T.unsafe(nil)); end

  # Create a new UnlessNode node
  #
  # source://yarp//lib/yarp/node.rb#15092
  def UnlessNode(keyword_loc, predicate, statements, consequent, end_keyword_loc, location = T.unsafe(nil)); end

  # Create a new UntilNode node
  #
  # source://yarp//lib/yarp/node.rb#15097
  def UntilNode(keyword_loc, closing_loc, predicate, statements, flags, location = T.unsafe(nil)); end

  # Create a new WhenNode node
  #
  # source://yarp//lib/yarp/node.rb#15102
  def WhenNode(keyword_loc, conditions, statements, location = T.unsafe(nil)); end

  # Create a new WhileNode node
  #
  # source://yarp//lib/yarp/node.rb#15107
  def WhileNode(keyword_loc, closing_loc, predicate, statements, flags, location = T.unsafe(nil)); end

  # Create a new XStringNode node
  #
  # source://yarp//lib/yarp/node.rb#15112
  def XStringNode(opening_loc, content_loc, closing_loc, unescaped, location = T.unsafe(nil)); end

  # Create a new YieldNode node
  #
  # source://yarp//lib/yarp/node.rb#15117
  def YieldNode(keyword_loc, lparen_loc, arguments, rparen_loc, location = T.unsafe(nil)); end
end

# This module is used for testing and debugging and is not meant to be used by
# consumers of this library.
#
# source://yarp//lib/yarp.rb#386
module YARP::Debug
  class << self
    # For the given source, compiles with CRuby and returns a list of all of the
    # sets of local variables that were encountered.
    #
    # source://yarp//lib/yarp.rb#427
    def cruby_locals(source); end

    def memsize(_arg0); end
    def named_captures(_arg0); end

    # source://yarp//lib/yarp.rb#529
    def newlines(source); end

    # source://yarp//lib/yarp.rb#533
    def parse_serialize_file(filepath); end

    def parse_serialize_file_metadata(_arg0, _arg1); end
    def profile_file(_arg0); end
    def unescape_all(_arg0); end
    def unescape_minimal(_arg0); end
    def unescape_none(_arg0); end

    # For the given source, parses with YARP and returns a list of all of the
    # sets of local variables that were encountered.
    #
    # source://yarp//lib/yarp.rb#462
    def yarp_locals(source); end
  end
end

# source://yarp//lib/yarp.rb#387
class YARP::Debug::ISeq
  # @return [ISeq] a new instance of ISeq
  #
  # source://yarp//lib/yarp.rb#390
  def initialize(parts); end

  # source://yarp//lib/yarp.rb#406
  def each_child; end

  # source://yarp//lib/yarp.rb#402
  def instructions; end

  # source://yarp//lib/yarp.rb#398
  def local_table; end

  # Returns the value of attribute parts.
  #
  # source://yarp//lib/yarp.rb#388
  def parts; end

  # source://yarp//lib/yarp.rb#394
  def type; end
end

# Represents a method definition.
#
#     def method
#     end
#     ^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#4035
class YARP::DefNode < ::YARP::Node
  # def initialize: (name: Symbol, name_loc: Location, receiver: Node?, parameters: ParametersNode?, body: Node?, locals: Array[Symbol], def_keyword_loc: Location, operator_loc: Location?, lparen_loc: Location?, rparen_loc: Location?, equal_loc: Location?, end_keyword_loc: Location?, location: Location) -> void
  #
  # @return [DefNode] a new instance of DefNode
  #
  # source://yarp//lib/yarp/node.rb#4073
  def initialize(name, name_loc, receiver, parameters, body, locals, def_keyword_loc, operator_loc, lparen_loc, rparen_loc, equal_loc, end_keyword_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#4090
  def accept(visitor); end

  # attr_reader body: Node?
  #
  # source://yarp//lib/yarp/node.rb#4049
  def body; end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#4095
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#4109
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#4100
  def compact_child_nodes; end

  # def copy: (**params) -> DefNode
  #
  # source://yarp//lib/yarp/node.rb#4114
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#4095
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#4136
  def deconstruct_keys(keys); end

  # def def_keyword: () -> String
  #
  # source://yarp//lib/yarp/node.rb#4141
  def def_keyword; end

  # attr_reader def_keyword_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#4055
  def def_keyword_loc; end

  # def end_keyword: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#4166
  def end_keyword; end

  # attr_reader end_keyword_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#4070
  def end_keyword_loc; end

  # def equal: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#4161
  def equal; end

  # attr_reader equal_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#4067
  def equal_loc; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#4205
  def human; end

  # source://yarp//lib/yarp/node.rb#4170
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader locals: Array[Symbol]
  #
  # source://yarp//lib/yarp/node.rb#4052
  def locals; end

  # def lparen: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#4151
  def lparen; end

  # attr_reader lparen_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#4061
  def lparen_loc; end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#4037
  def name; end

  # attr_reader name_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#4040
  def name_loc; end

  # def operator: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#4146
  def operator; end

  # attr_reader operator_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#4058
  def operator_loc; end

  # attr_reader parameters: ParametersNode?
  #
  # source://yarp//lib/yarp/node.rb#4046
  def parameters; end

  # attr_reader receiver: Node?
  #
  # source://yarp//lib/yarp/node.rb#4043
  def receiver; end

  # def rparen: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#4156
  def rparen; end

  # attr_reader rparen_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#4064
  def rparen_loc; end
end

# Represents the use of the `defined?` keyword.
#
#     defined?(a)
#     ^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#4214
class YARP::DefinedNode < ::YARP::Node
  # def initialize: (lparen_loc: Location?, value: Node, rparen_loc: Location?, keyword_loc: Location, location: Location) -> void
  #
  # @return [DefinedNode] a new instance of DefinedNode
  #
  # source://yarp//lib/yarp/node.rb#4228
  def initialize(lparen_loc, value, rparen_loc, keyword_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#4237
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#4242
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#4252
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#4247
  def compact_child_nodes; end

  # def copy: (**params) -> DefinedNode
  #
  # source://yarp//lib/yarp/node.rb#4257
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#4242
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#4271
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#4303
  def human; end

  # source://yarp//lib/yarp/node.rb#4290
  def inspect(inspector = T.unsafe(nil)); end

  # def keyword: () -> String
  #
  # source://yarp//lib/yarp/node.rb#4286
  def keyword; end

  # attr_reader keyword_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#4225
  def keyword_loc; end

  # def lparen: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#4276
  def lparen; end

  # attr_reader lparen_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#4216
  def lparen_loc; end

  # def rparen: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#4281
  def rparen; end

  # attr_reader rparen_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#4222
  def rparen_loc; end

  # attr_reader value: Node
  #
  # source://yarp//lib/yarp/node.rb#4219
  def value; end
end

# source://yarp//lib/yarp/desugar_visitor.rb#4
class YARP::DesugarVisitor < ::YARP::MutationVisitor
  # @@foo &&= bar
  #
  # becomes
  #
  # @@foo && @@foo = bar
  #
  # source://yarp//lib/yarp/desugar_visitor.rb#10
  def visit_class_variable_and_write_node(node); end

  # @@foo += bar
  #
  # becomes
  #
  # @@foo = @@foo + bar
  #
  # source://yarp//lib/yarp/desugar_visitor.rb#28
  def visit_class_variable_operator_write_node(node); end

  # @@foo ||= bar
  #
  # becomes
  #
  # defined?(@@foo) ? @@foo : @@foo = bar
  #
  # source://yarp//lib/yarp/desugar_visitor.rb#19
  def visit_class_variable_or_write_node(node); end

  # Foo &&= bar
  #
  # becomes
  #
  # Foo && Foo = bar
  #
  # source://yarp//lib/yarp/desugar_visitor.rb#37
  def visit_constant_and_write_node(node); end

  # Foo += bar
  #
  # becomes
  #
  # Foo = Foo + bar
  #
  # source://yarp//lib/yarp/desugar_visitor.rb#55
  def visit_constant_operator_write_node(node); end

  # Foo ||= bar
  #
  # becomes
  #
  # defined?(Foo) ? Foo : Foo = bar
  #
  # source://yarp//lib/yarp/desugar_visitor.rb#46
  def visit_constant_or_write_node(node); end

  # $foo &&= bar
  #
  # becomes
  #
  # $foo && $foo = bar
  #
  # source://yarp//lib/yarp/desugar_visitor.rb#64
  def visit_global_variable_and_write_node(node); end

  # $foo += bar
  #
  # becomes
  #
  # $foo = $foo + bar
  #
  # source://yarp//lib/yarp/desugar_visitor.rb#82
  def visit_global_variable_operator_write_node(node); end

  # $foo ||= bar
  #
  # becomes
  #
  # defined?($foo) ? $foo : $foo = bar
  #
  # source://yarp//lib/yarp/desugar_visitor.rb#73
  def visit_global_variable_or_write_node(node); end

  # becomes
  #
  # source://yarp//lib/yarp/desugar_visitor.rb#91
  def visit_instance_variable_and_write_node(node); end

  # becomes
  #
  # source://yarp//lib/yarp/desugar_visitor.rb#109
  def visit_instance_variable_operator_write_node(node); end

  # becomes
  #
  # source://yarp//lib/yarp/desugar_visitor.rb#100
  def visit_instance_variable_or_write_node(node); end

  # foo &&= bar
  #
  # becomes
  #
  # foo && foo = bar
  #
  # source://yarp//lib/yarp/desugar_visitor.rb#118
  def visit_local_variable_and_write_node(node); end

  # foo += bar
  #
  # becomes
  #
  # foo = foo + bar
  #
  # source://yarp//lib/yarp/desugar_visitor.rb#136
  def visit_local_variable_operator_write_node(node); end

  # foo ||= bar
  #
  # becomes
  #
  # foo || foo = bar
  #
  # source://yarp//lib/yarp/desugar_visitor.rb#127
  def visit_local_variable_or_write_node(node); end

  private

  # Desugar `x &&= y` to `x && x = y`
  #
  # source://yarp//lib/yarp/desugar_visitor.rb#143
  def desugar_and_write_node(node, read_class, write_class, *arguments); end

  # Desugar `x += y` to `x = x + y`
  #
  # source://yarp//lib/yarp/desugar_visitor.rb#153
  def desugar_operator_write_node(node, read_class, write_class, *arguments); end

  # Desugar `x ||= y` to `defined?(x) ? x : x = y`
  #
  # source://yarp//lib/yarp/desugar_visitor.rb#185
  def desugar_or_write_defined_node(node, read_class, write_class, *arguments); end

  # Desugar `x ||= y` to `x || x = y`
  #
  # source://yarp//lib/yarp/desugar_visitor.rb#175
  def desugar_or_write_node(node, read_class, write_class, *arguments); end
end

# The dispatcher class fires events for nodes that are found while walking an AST to all registered listeners. It's
# useful for performing different types of analysis on the AST without having to repeat the same visits multiple times
#
# source://yarp//lib/yarp/node.rb#13385
class YARP::Dispatcher
  # @return [Dispatcher] a new instance of Dispatcher
  #
  # source://yarp//lib/yarp/node.rb#13389
  def initialize; end

  # Walks `root` dispatching events to all registered listeners
  #
  # def dispatch: (Node) -> void
  #
  # source://yarp//lib/yarp/node.rb#13403
  def dispatch(root); end

  # Dispatches a single event for `node` to all registered listeners
  #
  # def dispatch_once: (Node) -> void
  #
  # source://yarp//lib/yarp/node.rb#13979
  def dispatch_once(node); end

  # attr_reader listeners: Hash[Symbol, Array[Listener]]
  #
  # source://yarp//lib/yarp/node.rb#13387
  def listeners; end

  # Register a listener for one or more events
  #
  # def register: (Listener, *Symbol) -> void
  #
  # source://yarp//lib/yarp/node.rb#13396
  def register(listener, *events); end
end

# Represents an `else` clause in a `case`, `if`, or `unless` statement.
#
#     if a then b else c end
#                 ^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#4312
class YARP::ElseNode < ::YARP::Node
  # def initialize: (else_keyword_loc: Location, statements: StatementsNode?, end_keyword_loc: Location?, location: Location) -> void
  #
  # @return [ElseNode] a new instance of ElseNode
  #
  # source://yarp//lib/yarp/node.rb#4323
  def initialize(else_keyword_loc, statements, end_keyword_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#4331
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#4336
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#4348
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#4341
  def compact_child_nodes; end

  # def copy: (**params) -> ElseNode
  #
  # source://yarp//lib/yarp/node.rb#4353
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#4336
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#4366
  def deconstruct_keys(keys); end

  # def else_keyword: () -> String
  #
  # source://yarp//lib/yarp/node.rb#4371
  def else_keyword; end

  # attr_reader else_keyword_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#4314
  def else_keyword_loc; end

  # def end_keyword: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#4376
  def end_keyword; end

  # attr_reader end_keyword_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#4320
  def end_keyword_loc; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#4396
  def human; end

  # source://yarp//lib/yarp/node.rb#4380
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader statements: StatementsNode?
  #
  # source://yarp//lib/yarp/node.rb#4317
  def statements; end
end

# Represents an interpolated set of statements.
#
#     "foo #{bar}"
#          ^^^^^^
#
# source://yarp//lib/yarp/node.rb#4405
class YARP::EmbeddedStatementsNode < ::YARP::Node
  # def initialize: (opening_loc: Location, statements: StatementsNode?, closing_loc: Location, location: Location) -> void
  #
  # @return [EmbeddedStatementsNode] a new instance of EmbeddedStatementsNode
  #
  # source://yarp//lib/yarp/node.rb#4416
  def initialize(opening_loc, statements, closing_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#4424
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#4429
  def child_nodes; end

  # def closing: () -> String
  #
  # source://yarp//lib/yarp/node.rb#4469
  def closing; end

  # attr_reader closing_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#4413
  def closing_loc; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#4441
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#4434
  def compact_child_nodes; end

  # def copy: (**params) -> EmbeddedStatementsNode
  #
  # source://yarp//lib/yarp/node.rb#4446
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#4429
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#4459
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#4489
  def human; end

  # source://yarp//lib/yarp/node.rb#4473
  def inspect(inspector = T.unsafe(nil)); end

  # def opening: () -> String
  #
  # source://yarp//lib/yarp/node.rb#4464
  def opening; end

  # attr_reader opening_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#4407
  def opening_loc; end

  # attr_reader statements: StatementsNode?
  #
  # source://yarp//lib/yarp/node.rb#4410
  def statements; end
end

# Represents an interpolated variable.
#
#     "foo #@bar"
#          ^^^^^
#
# source://yarp//lib/yarp/node.rb#4498
class YARP::EmbeddedVariableNode < ::YARP::Node
  # def initialize: (operator_loc: Location, variable: Node, location: Location) -> void
  #
  # @return [EmbeddedVariableNode] a new instance of EmbeddedVariableNode
  #
  # source://yarp//lib/yarp/node.rb#4506
  def initialize(operator_loc, variable, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#4513
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#4518
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#4528
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#4523
  def compact_child_nodes; end

  # def copy: (**params) -> EmbeddedVariableNode
  #
  # source://yarp//lib/yarp/node.rb#4533
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#4518
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#4545
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#4565
  def human; end

  # source://yarp//lib/yarp/node.rb#4554
  def inspect(inspector = T.unsafe(nil)); end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#4550
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#4500
  def operator_loc; end

  # attr_reader variable: Node
  #
  # source://yarp//lib/yarp/node.rb#4503
  def variable; end
end

# Represents an `ensure` clause in a `begin` statement.
#
#     begin
#       foo
#     ensure
#     ^^^^^^
#       bar
#     end
#
# source://yarp//lib/yarp/node.rb#4578
class YARP::EnsureNode < ::YARP::Node
  # def initialize: (ensure_keyword_loc: Location, statements: StatementsNode?, end_keyword_loc: Location, location: Location) -> void
  #
  # @return [EnsureNode] a new instance of EnsureNode
  #
  # source://yarp//lib/yarp/node.rb#4589
  def initialize(ensure_keyword_loc, statements, end_keyword_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#4597
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#4602
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#4614
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#4607
  def compact_child_nodes; end

  # def copy: (**params) -> EnsureNode
  #
  # source://yarp//lib/yarp/node.rb#4619
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#4602
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#4632
  def deconstruct_keys(keys); end

  # def end_keyword: () -> String
  #
  # source://yarp//lib/yarp/node.rb#4642
  def end_keyword; end

  # attr_reader end_keyword_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#4586
  def end_keyword_loc; end

  # def ensure_keyword: () -> String
  #
  # source://yarp//lib/yarp/node.rb#4637
  def ensure_keyword; end

  # attr_reader ensure_keyword_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#4580
  def ensure_keyword_loc; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#4662
  def human; end

  # source://yarp//lib/yarp/node.rb#4646
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader statements: StatementsNode?
  #
  # source://yarp//lib/yarp/node.rb#4583
  def statements; end
end

# Represents the use of the literal `false` keyword.
#
#     false
#     ^^^^^
#
# source://yarp//lib/yarp/node.rb#4671
class YARP::FalseNode < ::YARP::Node
  # def initialize: (location: Location) -> void
  #
  # @return [FalseNode] a new instance of FalseNode
  #
  # source://yarp//lib/yarp/node.rb#4673
  def initialize(location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#4678
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#4683
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#4693
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#4688
  def compact_child_nodes; end

  # def copy: (**params) -> FalseNode
  #
  # source://yarp//lib/yarp/node.rb#4698
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#4683
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#4708
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#4720
  def human; end

  # source://yarp//lib/yarp/node.rb#4712
  def inspect(inspector = T.unsafe(nil)); end
end

# Represents a find pattern in pattern matching.
#
#     foo in *bar, baz, *qux
#     ^^^^^^^^^^^^^^^^^^^^^^
#
#     foo in [*bar, baz, *qux]
#     ^^^^^^^^^^^^^^^^^^^^^^^^
#
#     foo in Foo(*bar, baz, *qux)
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#4735
class YARP::FindPatternNode < ::YARP::Node
  # def initialize: (constant: Node?, left: Node, requireds: Array[Node], right: Node, opening_loc: Location?, closing_loc: Location?, location: Location) -> void
  #
  # @return [FindPatternNode] a new instance of FindPatternNode
  #
  # source://yarp//lib/yarp/node.rb#4755
  def initialize(constant, left, requireds, right, opening_loc, closing_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#4766
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#4771
  def child_nodes; end

  # def closing: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#4817
  def closing; end

  # attr_reader closing_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#4752
  def closing_loc; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#4786
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#4776
  def compact_child_nodes; end

  # attr_reader constant: Node?
  #
  # source://yarp//lib/yarp/node.rb#4737
  def constant; end

  # def copy: (**params) -> FindPatternNode
  #
  # source://yarp//lib/yarp/node.rb#4791
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#4771
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#4807
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#4842
  def human; end

  # source://yarp//lib/yarp/node.rb#4821
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader left: Node
  #
  # source://yarp//lib/yarp/node.rb#4740
  def left; end

  # def opening: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#4812
  def opening; end

  # attr_reader opening_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#4749
  def opening_loc; end

  # attr_reader requireds: Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#4743
  def requireds; end

  # attr_reader right: Node
  #
  # source://yarp//lib/yarp/node.rb#4746
  def right; end
end

# Represents the use of the `..` or `...` operators to create flip flops.
#
#     baz if foo .. bar
#            ^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#4851
class YARP::FlipFlopNode < ::YARP::Node
  # def initialize: (left: Node?, right: Node?, operator_loc: Location, flags: Integer, location: Location) -> void
  #
  # @return [FlipFlopNode] a new instance of FlipFlopNode
  #
  # source://yarp//lib/yarp/node.rb#4865
  def initialize(left, right, operator_loc, flags, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#4874
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#4879
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#4892
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#4884
  def compact_child_nodes; end

  # def copy: (**params) -> FlipFlopNode
  #
  # source://yarp//lib/yarp/node.rb#4897
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#4879
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#4911
  def deconstruct_keys(keys); end

  # def exclude_end?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#4921
  def exclude_end?; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#4948
  def human; end

  # source://yarp//lib/yarp/node.rb#4925
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader left: Node?
  #
  # source://yarp//lib/yarp/node.rb#4853
  def left; end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#4916
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#4859
  def operator_loc; end

  # attr_reader right: Node?
  #
  # source://yarp//lib/yarp/node.rb#4856
  def right; end

  private

  # Returns the value of attribute flags.
  #
  # source://yarp//lib/yarp/node.rb#4862
  def flags; end
end

# Represents a floating point number literal.
#
#     1.0
#     ^^^
#
# source://yarp//lib/yarp/node.rb#4957
class YARP::FloatNode < ::YARP::Node
  # def initialize: (location: Location) -> void
  #
  # @return [FloatNode] a new instance of FloatNode
  #
  # source://yarp//lib/yarp/node.rb#4959
  def initialize(location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#4964
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#4969
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#4979
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#4974
  def compact_child_nodes; end

  # def copy: (**params) -> FloatNode
  #
  # source://yarp//lib/yarp/node.rb#4984
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#4969
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#4994
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#5006
  def human; end

  # source://yarp//lib/yarp/node.rb#4998
  def inspect(inspector = T.unsafe(nil)); end

  # Returns the value of the node as a Ruby Float.
  #
  # source://yarp//lib/yarp.rb#569
  def value; end
end

# Represents the use of the `for` keyword.
#
#     for i in a end
#     ^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#5015
class YARP::ForNode < ::YARP::Node
  # def initialize: (index: Node, collection: Node, statements: StatementsNode?, for_keyword_loc: Location, in_keyword_loc: Location, do_keyword_loc: Location?, end_keyword_loc: Location, location: Location) -> void
  #
  # @return [ForNode] a new instance of ForNode
  #
  # source://yarp//lib/yarp/node.rb#5038
  def initialize(index, collection, statements, for_keyword_loc, in_keyword_loc, do_keyword_loc, end_keyword_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#5050
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#5055
  def child_nodes; end

  # attr_reader collection: Node
  #
  # source://yarp//lib/yarp/node.rb#5020
  def collection; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#5069
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#5060
  def compact_child_nodes; end

  # def copy: (**params) -> ForNode
  #
  # source://yarp//lib/yarp/node.rb#5074
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#5055
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#5091
  def deconstruct_keys(keys); end

  # def do_keyword: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#5106
  def do_keyword; end

  # attr_reader do_keyword_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#5032
  def do_keyword_loc; end

  # def end_keyword: () -> String
  #
  # source://yarp//lib/yarp/node.rb#5111
  def end_keyword; end

  # attr_reader end_keyword_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#5035
  def end_keyword_loc; end

  # def for_keyword: () -> String
  #
  # source://yarp//lib/yarp/node.rb#5096
  def for_keyword; end

  # attr_reader for_keyword_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#5026
  def for_keyword_loc; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#5137
  def human; end

  # def in_keyword: () -> String
  #
  # source://yarp//lib/yarp/node.rb#5101
  def in_keyword; end

  # attr_reader in_keyword_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#5029
  def in_keyword_loc; end

  # attr_reader index: Node
  #
  # source://yarp//lib/yarp/node.rb#5017
  def index; end

  # source://yarp//lib/yarp/node.rb#5115
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader statements: StatementsNode?
  #
  # source://yarp//lib/yarp/node.rb#5023
  def statements; end
end

# Represents forwarding all arguments to this method to another method.
#
#     def foo(...)
#       bar(...)
#       ^^^^^^^^
#     end
#
# source://yarp//lib/yarp/node.rb#5148
class YARP::ForwardingArgumentsNode < ::YARP::Node
  # def initialize: (location: Location) -> void
  #
  # @return [ForwardingArgumentsNode] a new instance of ForwardingArgumentsNode
  #
  # source://yarp//lib/yarp/node.rb#5150
  def initialize(location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#5155
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#5160
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#5170
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#5165
  def compact_child_nodes; end

  # def copy: (**params) -> ForwardingArgumentsNode
  #
  # source://yarp//lib/yarp/node.rb#5175
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#5160
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#5185
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#5197
  def human; end

  # source://yarp//lib/yarp/node.rb#5189
  def inspect(inspector = T.unsafe(nil)); end
end

# Represents the use of the forwarding parameter in a method, block, or lambda declaration.
#
#     def foo(...)
#             ^^^
#     end
#
# source://yarp//lib/yarp/node.rb#5207
class YARP::ForwardingParameterNode < ::YARP::Node
  # def initialize: (location: Location) -> void
  #
  # @return [ForwardingParameterNode] a new instance of ForwardingParameterNode
  #
  # source://yarp//lib/yarp/node.rb#5209
  def initialize(location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#5214
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#5219
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#5229
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#5224
  def compact_child_nodes; end

  # def copy: (**params) -> ForwardingParameterNode
  #
  # source://yarp//lib/yarp/node.rb#5234
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#5219
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#5244
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#5256
  def human; end

  # source://yarp//lib/yarp/node.rb#5248
  def inspect(inspector = T.unsafe(nil)); end
end

# Represents the use of the `super` keyword without parentheses or arguments.
#
#     super
#     ^^^^^
#
# source://yarp//lib/yarp/node.rb#5265
class YARP::ForwardingSuperNode < ::YARP::Node
  # def initialize: (block: BlockNode?, location: Location) -> void
  #
  # @return [ForwardingSuperNode] a new instance of ForwardingSuperNode
  #
  # source://yarp//lib/yarp/node.rb#5270
  def initialize(block, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#5276
  def accept(visitor); end

  # attr_reader block: BlockNode?
  #
  # source://yarp//lib/yarp/node.rb#5267
  def block; end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#5281
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#5293
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#5286
  def compact_child_nodes; end

  # def copy: (**params) -> ForwardingSuperNode
  #
  # source://yarp//lib/yarp/node.rb#5298
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#5281
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#5309
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#5327
  def human; end

  # source://yarp//lib/yarp/node.rb#5313
  def inspect(inspector = T.unsafe(nil)); end
end

# Represents the use of the `&&=` operator for assignment to a global variable.
#
#     $target &&= value
#     ^^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#5336
class YARP::GlobalVariableAndWriteNode < ::YARP::Node
  # def initialize: (name: Symbol, name_loc: Location, operator_loc: Location, value: Node, location: Location) -> void
  #
  # @return [GlobalVariableAndWriteNode] a new instance of GlobalVariableAndWriteNode
  #
  # source://yarp//lib/yarp/node.rb#5350
  def initialize(name, name_loc, operator_loc, value, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#5359
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#5364
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#5374
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#5369
  def compact_child_nodes; end

  # def copy: (**params) -> GlobalVariableAndWriteNode
  #
  # source://yarp//lib/yarp/node.rb#5379
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#5364
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#5393
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#5415
  def human; end

  # source://yarp//lib/yarp/node.rb#5402
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#5338
  def name; end

  # attr_reader name_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#5341
  def name_loc; end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#5398
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#5344
  def operator_loc; end

  # attr_reader value: Node
  #
  # source://yarp//lib/yarp/node.rb#5347
  def value; end
end

# Represents assigning to a global variable using an operator that isn't `=`.
#
#     $target += value
#     ^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#5424
class YARP::GlobalVariableOperatorWriteNode < ::YARP::Node
  # def initialize: (name: Symbol, name_loc: Location, operator_loc: Location, value: Node, operator: Symbol, location: Location) -> void
  #
  # @return [GlobalVariableOperatorWriteNode] a new instance of GlobalVariableOperatorWriteNode
  #
  # source://yarp//lib/yarp/node.rb#5441
  def initialize(name, name_loc, operator_loc, value, operator, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#5451
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#5456
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#5466
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#5461
  def compact_child_nodes; end

  # def copy: (**params) -> GlobalVariableOperatorWriteNode
  #
  # source://yarp//lib/yarp/node.rb#5471
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#5456
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#5486
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#5504
  def human; end

  # source://yarp//lib/yarp/node.rb#5490
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#5426
  def name; end

  # attr_reader name_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#5429
  def name_loc; end

  # attr_reader operator: Symbol
  #
  # source://yarp//lib/yarp/node.rb#5438
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#5432
  def operator_loc; end

  # attr_reader value: Node
  #
  # source://yarp//lib/yarp/node.rb#5435
  def value; end
end

# Represents the use of the `||=` operator for assignment to a global variable.
#
#     $target ||= value
#     ^^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#5513
class YARP::GlobalVariableOrWriteNode < ::YARP::Node
  # def initialize: (name: Symbol, name_loc: Location, operator_loc: Location, value: Node, location: Location) -> void
  #
  # @return [GlobalVariableOrWriteNode] a new instance of GlobalVariableOrWriteNode
  #
  # source://yarp//lib/yarp/node.rb#5527
  def initialize(name, name_loc, operator_loc, value, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#5536
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#5541
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#5551
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#5546
  def compact_child_nodes; end

  # def copy: (**params) -> GlobalVariableOrWriteNode
  #
  # source://yarp//lib/yarp/node.rb#5556
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#5541
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#5570
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#5592
  def human; end

  # source://yarp//lib/yarp/node.rb#5579
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#5515
  def name; end

  # attr_reader name_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#5518
  def name_loc; end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#5575
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#5521
  def operator_loc; end

  # attr_reader value: Node
  #
  # source://yarp//lib/yarp/node.rb#5524
  def value; end
end

# Represents referencing a global variable.
#
#     $foo
#     ^^^^
#
# source://yarp//lib/yarp/node.rb#5601
class YARP::GlobalVariableReadNode < ::YARP::Node
  # def initialize: (name: Symbol, location: Location) -> void
  #
  # @return [GlobalVariableReadNode] a new instance of GlobalVariableReadNode
  #
  # source://yarp//lib/yarp/node.rb#5606
  def initialize(name, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#5612
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#5617
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#5627
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#5622
  def compact_child_nodes; end

  # def copy: (**params) -> GlobalVariableReadNode
  #
  # source://yarp//lib/yarp/node.rb#5632
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#5617
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#5643
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#5656
  def human; end

  # source://yarp//lib/yarp/node.rb#5647
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#5603
  def name; end
end

# Represents writing to a global variable in a context that doesn't have an explicit value.
#
#     $foo, $bar = baz
#     ^^^^  ^^^^
#
# source://yarp//lib/yarp/node.rb#5665
class YARP::GlobalVariableTargetNode < ::YARP::Node
  # def initialize: (name: Symbol, location: Location) -> void
  #
  # @return [GlobalVariableTargetNode] a new instance of GlobalVariableTargetNode
  #
  # source://yarp//lib/yarp/node.rb#5670
  def initialize(name, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#5676
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#5681
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#5691
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#5686
  def compact_child_nodes; end

  # def copy: (**params) -> GlobalVariableTargetNode
  #
  # source://yarp//lib/yarp/node.rb#5696
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#5681
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#5707
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#5720
  def human; end

  # source://yarp//lib/yarp/node.rb#5711
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#5667
  def name; end
end

# Represents writing to a global variable.
#
#     $foo = 1
#     ^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#5729
class YARP::GlobalVariableWriteNode < ::YARP::Node
  # def initialize: (name: Symbol, name_loc: Location, value: Node, operator_loc: Location, location: Location) -> void
  #
  # @return [GlobalVariableWriteNode] a new instance of GlobalVariableWriteNode
  #
  # source://yarp//lib/yarp/node.rb#5743
  def initialize(name, name_loc, value, operator_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#5752
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#5757
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#5767
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#5762
  def compact_child_nodes; end

  # def copy: (**params) -> GlobalVariableWriteNode
  #
  # source://yarp//lib/yarp/node.rb#5772
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#5757
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#5786
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#5808
  def human; end

  # source://yarp//lib/yarp/node.rb#5795
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#5731
  def name; end

  # attr_reader name_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#5734
  def name_loc; end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#5791
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#5740
  def operator_loc; end

  # attr_reader value: Node
  #
  # source://yarp//lib/yarp/node.rb#5737
  def value; end
end

# Represents a hash literal.
#
#     { a => b }
#     ^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#5817
class YARP::HashNode < ::YARP::Node
  # def initialize: (opening_loc: Location, elements: Array[Node], closing_loc: Location, location: Location) -> void
  #
  # @return [HashNode] a new instance of HashNode
  #
  # source://yarp//lib/yarp/node.rb#5828
  def initialize(opening_loc, elements, closing_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#5836
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#5841
  def child_nodes; end

  # def closing: () -> String
  #
  # source://yarp//lib/yarp/node.rb#5879
  def closing; end

  # attr_reader closing_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#5825
  def closing_loc; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#5851
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#5846
  def compact_child_nodes; end

  # def copy: (**params) -> HashNode
  #
  # source://yarp//lib/yarp/node.rb#5856
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#5841
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#5869
  def deconstruct_keys(keys); end

  # attr_reader elements: Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#5822
  def elements; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#5894
  def human; end

  # source://yarp//lib/yarp/node.rb#5883
  def inspect(inspector = T.unsafe(nil)); end

  # def opening: () -> String
  #
  # source://yarp//lib/yarp/node.rb#5874
  def opening; end

  # attr_reader opening_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#5819
  def opening_loc; end
end

# Represents a hash pattern in pattern matching.
#
#     foo => { a: 1, b: 2 }
#            ^^^^^^^^^^^^^^
#
#     foo => { a: 1, b: 2, **c }
#            ^^^^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#5906
class YARP::HashPatternNode < ::YARP::Node
  # def initialize: (constant: Node?, assocs: Array[Node], kwrest: Node?, opening_loc: Location?, closing_loc: Location?, location: Location) -> void
  #
  # @return [HashPatternNode] a new instance of HashPatternNode
  #
  # source://yarp//lib/yarp/node.rb#5923
  def initialize(constant, assocs, kwrest, opening_loc, closing_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#5933
  def accept(visitor); end

  # attr_reader assocs: Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#5911
  def assocs; end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#5938
  def child_nodes; end

  # def closing: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#5982
  def closing; end

  # attr_reader closing_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#5920
  def closing_loc; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#5952
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#5943
  def compact_child_nodes; end

  # attr_reader constant: Node?
  #
  # source://yarp//lib/yarp/node.rb#5908
  def constant; end

  # def copy: (**params) -> HashPatternNode
  #
  # source://yarp//lib/yarp/node.rb#5957
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#5938
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#5972
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#6009
  def human; end

  # source://yarp//lib/yarp/node.rb#5986
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader kwrest: Node?
  #
  # source://yarp//lib/yarp/node.rb#5914
  def kwrest; end

  # def opening: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#5977
  def opening; end

  # attr_reader opening_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#5917
  def opening_loc; end
end

# Represents the use of the `if` keyword, either in the block form or the modifier form.
#
#     bar if foo
#     ^^^^^^^^^^
#
#     if foo then bar end
#     ^^^^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#6021
class YARP::IfNode < ::YARP::Node
  # def initialize: (if_keyword_loc: Location?, predicate: Node, statements: StatementsNode?, consequent: Node?, end_keyword_loc: Location?, location: Location) -> void
  #
  # @return [IfNode] a new instance of IfNode
  #
  # source://yarp//lib/yarp/node.rb#6038
  def initialize(if_keyword_loc, predicate, statements, consequent, end_keyword_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#6048
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#6057
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#6071
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#6062
  def compact_child_nodes; end

  # attr_reader consequent: Node?
  #
  # source://yarp//lib/yarp/node.rb#6032
  def consequent; end

  # def copy: (**params) -> IfNode
  #
  # source://yarp//lib/yarp/node.rb#6076
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#6057
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#6091
  def deconstruct_keys(keys); end

  # def end_keyword: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#6101
  def end_keyword; end

  # attr_reader end_keyword_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#6035
  def end_keyword_loc; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#6129
  def human; end

  # def if_keyword: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#6096
  def if_keyword; end

  # attr_reader if_keyword_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#6023
  def if_keyword_loc; end

  # source://yarp//lib/yarp/node.rb#6105
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader predicate: Node
  #
  # source://yarp//lib/yarp/node.rb#6026
  def predicate; end

  # source://yarp//lib/yarp/node.rb#6052
  def set_newline_flag(newline_marked); end

  # attr_reader statements: StatementsNode?
  #
  # source://yarp//lib/yarp/node.rb#6029
  def statements; end
end

# Represents an imaginary number literal.
#
#     1.0i
#     ^^^^
#
# source://yarp//lib/yarp/node.rb#6138
class YARP::ImaginaryNode < ::YARP::Node
  # def initialize: (numeric: Node, location: Location) -> void
  #
  # @return [ImaginaryNode] a new instance of ImaginaryNode
  #
  # source://yarp//lib/yarp/node.rb#6143
  def initialize(numeric, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#6149
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#6154
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#6164
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#6159
  def compact_child_nodes; end

  # def copy: (**params) -> ImaginaryNode
  #
  # source://yarp//lib/yarp/node.rb#6169
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#6154
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#6180
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#6194
  def human; end

  # source://yarp//lib/yarp/node.rb#6184
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader numeric: Node
  #
  # source://yarp//lib/yarp/node.rb#6140
  def numeric; end

  # Returns the value of the node as a Ruby Complex.
  #
  # source://yarp//lib/yarp.rb#576
  def value; end
end

# Represents a node that is implicitly being added to the tree but doesn't
# correspond directly to a node in the source.
#
#     { foo: }
#       ^^^^
#
#     { Foo: }
#       ^^^^
#
# source://yarp//lib/yarp/node.rb#6207
class YARP::ImplicitNode < ::YARP::Node
  # def initialize: (value: Node, location: Location) -> void
  #
  # @return [ImplicitNode] a new instance of ImplicitNode
  #
  # source://yarp//lib/yarp/node.rb#6212
  def initialize(value, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#6218
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#6223
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#6233
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#6228
  def compact_child_nodes; end

  # def copy: (**params) -> ImplicitNode
  #
  # source://yarp//lib/yarp/node.rb#6238
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#6223
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#6249
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#6263
  def human; end

  # source://yarp//lib/yarp/node.rb#6253
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader value: Node
  #
  # source://yarp//lib/yarp/node.rb#6209
  def value; end
end

# Represents the use of the `in` keyword in a case statement.
#
#     case a; in b then c end
#             ^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#6272
class YARP::InNode < ::YARP::Node
  # def initialize: (pattern: Node, statements: StatementsNode?, in_loc: Location, then_loc: Location?, location: Location) -> void
  #
  # @return [InNode] a new instance of InNode
  #
  # source://yarp//lib/yarp/node.rb#6286
  def initialize(pattern, statements, in_loc, then_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#6295
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#6300
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#6313
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#6305
  def compact_child_nodes; end

  # def copy: (**params) -> InNode
  #
  # source://yarp//lib/yarp/node.rb#6318
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#6300
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#6332
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#6364
  def human; end

  # def in: () -> String
  #
  # source://yarp//lib/yarp/node.rb#6337
  def in; end

  # attr_reader in_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#6280
  def in_loc; end

  # source://yarp//lib/yarp/node.rb#6346
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader pattern: Node
  #
  # source://yarp//lib/yarp/node.rb#6274
  def pattern; end

  # attr_reader statements: StatementsNode?
  #
  # source://yarp//lib/yarp/node.rb#6277
  def statements; end

  # def then: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#6342
  def then; end

  # attr_reader then_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#6283
  def then_loc; end
end

# Represents the use of the `&&=` operator for assignment to an instance variable.
#
#     @target &&= value
#     ^^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#6373
class YARP::InstanceVariableAndWriteNode < ::YARP::Node
  # def initialize: (name: Symbol, name_loc: Location, operator_loc: Location, value: Node, location: Location) -> void
  #
  # @return [InstanceVariableAndWriteNode] a new instance of InstanceVariableAndWriteNode
  #
  # source://yarp//lib/yarp/node.rb#6387
  def initialize(name, name_loc, operator_loc, value, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#6396
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#6401
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#6411
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#6406
  def compact_child_nodes; end

  # def copy: (**params) -> InstanceVariableAndWriteNode
  #
  # source://yarp//lib/yarp/node.rb#6416
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#6401
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#6430
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#6452
  def human; end

  # source://yarp//lib/yarp/node.rb#6439
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#6375
  def name; end

  # attr_reader name_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#6378
  def name_loc; end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#6435
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#6381
  def operator_loc; end

  # attr_reader value: Node
  #
  # source://yarp//lib/yarp/node.rb#6384
  def value; end
end

# Represents assigning to an instance variable using an operator that isn't `=`.
#
#     @target += value
#     ^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#6461
class YARP::InstanceVariableOperatorWriteNode < ::YARP::Node
  # def initialize: (name: Symbol, name_loc: Location, operator_loc: Location, value: Node, operator: Symbol, location: Location) -> void
  #
  # @return [InstanceVariableOperatorWriteNode] a new instance of InstanceVariableOperatorWriteNode
  #
  # source://yarp//lib/yarp/node.rb#6478
  def initialize(name, name_loc, operator_loc, value, operator, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#6488
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#6493
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#6503
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#6498
  def compact_child_nodes; end

  # def copy: (**params) -> InstanceVariableOperatorWriteNode
  #
  # source://yarp//lib/yarp/node.rb#6508
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#6493
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#6523
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#6541
  def human; end

  # source://yarp//lib/yarp/node.rb#6527
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#6463
  def name; end

  # attr_reader name_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#6466
  def name_loc; end

  # attr_reader operator: Symbol
  #
  # source://yarp//lib/yarp/node.rb#6475
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#6469
  def operator_loc; end

  # attr_reader value: Node
  #
  # source://yarp//lib/yarp/node.rb#6472
  def value; end
end

# Represents the use of the `||=` operator for assignment to an instance variable.
#
#     @target ||= value
#     ^^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#6550
class YARP::InstanceVariableOrWriteNode < ::YARP::Node
  # def initialize: (name: Symbol, name_loc: Location, operator_loc: Location, value: Node, location: Location) -> void
  #
  # @return [InstanceVariableOrWriteNode] a new instance of InstanceVariableOrWriteNode
  #
  # source://yarp//lib/yarp/node.rb#6564
  def initialize(name, name_loc, operator_loc, value, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#6573
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#6578
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#6588
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#6583
  def compact_child_nodes; end

  # def copy: (**params) -> InstanceVariableOrWriteNode
  #
  # source://yarp//lib/yarp/node.rb#6593
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#6578
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#6607
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#6629
  def human; end

  # source://yarp//lib/yarp/node.rb#6616
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#6552
  def name; end

  # attr_reader name_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#6555
  def name_loc; end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#6612
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#6558
  def operator_loc; end

  # attr_reader value: Node
  #
  # source://yarp//lib/yarp/node.rb#6561
  def value; end
end

# Represents referencing an instance variable.
#
#     @foo
#     ^^^^
#
# source://yarp//lib/yarp/node.rb#6638
class YARP::InstanceVariableReadNode < ::YARP::Node
  # def initialize: (name: Symbol, location: Location) -> void
  #
  # @return [InstanceVariableReadNode] a new instance of InstanceVariableReadNode
  #
  # source://yarp//lib/yarp/node.rb#6643
  def initialize(name, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#6649
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#6654
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#6664
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#6659
  def compact_child_nodes; end

  # def copy: (**params) -> InstanceVariableReadNode
  #
  # source://yarp//lib/yarp/node.rb#6669
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#6654
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#6680
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#6693
  def human; end

  # source://yarp//lib/yarp/node.rb#6684
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#6640
  def name; end
end

# Represents writing to an instance variable in a context that doesn't have an explicit value.
#
#     @foo, @bar = baz
#     ^^^^  ^^^^
#
# source://yarp//lib/yarp/node.rb#6702
class YARP::InstanceVariableTargetNode < ::YARP::Node
  # def initialize: (name: Symbol, location: Location) -> void
  #
  # @return [InstanceVariableTargetNode] a new instance of InstanceVariableTargetNode
  #
  # source://yarp//lib/yarp/node.rb#6707
  def initialize(name, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#6713
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#6718
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#6728
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#6723
  def compact_child_nodes; end

  # def copy: (**params) -> InstanceVariableTargetNode
  #
  # source://yarp//lib/yarp/node.rb#6733
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#6718
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#6744
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#6757
  def human; end

  # source://yarp//lib/yarp/node.rb#6748
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#6704
  def name; end
end

# Represents writing to an instance variable.
#
#     @foo = 1
#     ^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#6766
class YARP::InstanceVariableWriteNode < ::YARP::Node
  # def initialize: (name: Symbol, name_loc: Location, value: Node, operator_loc: Location, location: Location) -> void
  #
  # @return [InstanceVariableWriteNode] a new instance of InstanceVariableWriteNode
  #
  # source://yarp//lib/yarp/node.rb#6780
  def initialize(name, name_loc, value, operator_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#6789
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#6794
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#6804
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#6799
  def compact_child_nodes; end

  # def copy: (**params) -> InstanceVariableWriteNode
  #
  # source://yarp//lib/yarp/node.rb#6809
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#6794
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#6823
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#6845
  def human; end

  # source://yarp//lib/yarp/node.rb#6832
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#6768
  def name; end

  # attr_reader name_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#6771
  def name_loc; end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#6828
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#6777
  def operator_loc; end

  # attr_reader value: Node
  #
  # source://yarp//lib/yarp/node.rb#6774
  def value; end
end

# source://yarp//lib/yarp/node.rb#12903
module YARP::IntegerBaseFlags; end

# 0b prefix
#
# source://yarp//lib/yarp/node.rb#12905
YARP::IntegerBaseFlags::BINARY = T.let(T.unsafe(nil), Integer)

# 0d or no prefix
#
# source://yarp//lib/yarp/node.rb#12911
YARP::IntegerBaseFlags::DECIMAL = T.let(T.unsafe(nil), Integer)

# 0x prefix
#
# source://yarp//lib/yarp/node.rb#12914
YARP::IntegerBaseFlags::HEXADECIMAL = T.let(T.unsafe(nil), Integer)

# 0o or 0 prefix
#
# source://yarp//lib/yarp/node.rb#12908
YARP::IntegerBaseFlags::OCTAL = T.let(T.unsafe(nil), Integer)

# Represents an integer number literal.
#
#     1
#     ^
#
# source://yarp//lib/yarp/node.rb#6854
class YARP::IntegerNode < ::YARP::Node
  # def initialize: (flags: Integer, location: Location) -> void
  #
  # @return [IntegerNode] a new instance of IntegerNode
  #
  # source://yarp//lib/yarp/node.rb#6859
  def initialize(flags, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#6865
  def accept(visitor); end

  # def binary?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#6901
  def binary?; end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#6870
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#6880
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#6875
  def compact_child_nodes; end

  # def copy: (**params) -> IntegerNode
  #
  # source://yarp//lib/yarp/node.rb#6885
  def copy(**params); end

  # def decimal?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#6911
  def decimal?; end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#6870
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#6896
  def deconstruct_keys(keys); end

  # def hexadecimal?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#6916
  def hexadecimal?; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#6930
  def human; end

  # source://yarp//lib/yarp/node.rb#6920
  def inspect(inspector = T.unsafe(nil)); end

  # def octal?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#6906
  def octal?; end

  # Returns the value of the node as a Ruby Integer.
  #
  # source://yarp//lib/yarp.rb#583
  def value; end

  private

  # Returns the value of attribute flags.
  #
  # source://yarp//lib/yarp/node.rb#6856
  def flags; end
end

# Represents a regular expression literal that contains interpolation that
# is being used in the predicate of a conditional to implicitly match
# against the last line read by an IO object.
#
#     if /foo #{bar} baz/ then end
#        ^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#6941
class YARP::InterpolatedMatchLastLineNode < ::YARP::Node
  # def initialize: (opening_loc: Location, parts: Array[Node], closing_loc: Location, flags: Integer, location: Location) -> void
  #
  # @return [InterpolatedMatchLastLineNode] a new instance of InterpolatedMatchLastLineNode
  #
  # source://yarp//lib/yarp/node.rb#6955
  def initialize(opening_loc, parts, closing_loc, flags, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#6964
  def accept(visitor); end

  # def ascii_8bit?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#7038
  def ascii_8bit?; end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#6974
  def child_nodes; end

  # def closing: () -> String
  #
  # source://yarp//lib/yarp/node.rb#7013
  def closing; end

  # attr_reader closing_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#6949
  def closing_loc; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#6984
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#6979
  def compact_child_nodes; end

  # def copy: (**params) -> InterpolatedMatchLastLineNode
  #
  # source://yarp//lib/yarp/node.rb#6989
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#6974
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#7003
  def deconstruct_keys(keys); end

  # def euc_jp?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#7033
  def euc_jp?; end

  # def extended?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#7023
  def extended?; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#7070
  def human; end

  # def ignore_case?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#7018
  def ignore_case?; end

  # source://yarp//lib/yarp/node.rb#7057
  def inspect(inspector = T.unsafe(nil)); end

  # def multi_line?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#7028
  def multi_line?; end

  # def once?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#7053
  def once?; end

  # def opening: () -> String
  #
  # source://yarp//lib/yarp/node.rb#7008
  def opening; end

  # attr_reader opening_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#6943
  def opening_loc; end

  # attr_reader parts: Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#6946
  def parts; end

  # source://yarp//lib/yarp/node.rb#6968
  def set_newline_flag(newline_marked); end

  # def utf_8?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#7048
  def utf_8?; end

  # def windows_31j?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#7043
  def windows_31j?; end

  private

  # Returns the value of attribute flags.
  #
  # source://yarp//lib/yarp/node.rb#6952
  def flags; end
end

# Represents a regular expression literal that contains interpolation.
#
#     /foo #{bar} baz/
#     ^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#7079
class YARP::InterpolatedRegularExpressionNode < ::YARP::Node
  # def initialize: (opening_loc: Location, parts: Array[Node], closing_loc: Location, flags: Integer, location: Location) -> void
  #
  # @return [InterpolatedRegularExpressionNode] a new instance of InterpolatedRegularExpressionNode
  #
  # source://yarp//lib/yarp/node.rb#7093
  def initialize(opening_loc, parts, closing_loc, flags, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#7102
  def accept(visitor); end

  # def ascii_8bit?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#7176
  def ascii_8bit?; end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#7112
  def child_nodes; end

  # def closing: () -> String
  #
  # source://yarp//lib/yarp/node.rb#7151
  def closing; end

  # attr_reader closing_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#7087
  def closing_loc; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#7122
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#7117
  def compact_child_nodes; end

  # def copy: (**params) -> InterpolatedRegularExpressionNode
  #
  # source://yarp//lib/yarp/node.rb#7127
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#7112
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#7141
  def deconstruct_keys(keys); end

  # def euc_jp?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#7171
  def euc_jp?; end

  # def extended?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#7161
  def extended?; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#7208
  def human; end

  # def ignore_case?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#7156
  def ignore_case?; end

  # source://yarp//lib/yarp/node.rb#7195
  def inspect(inspector = T.unsafe(nil)); end

  # def multi_line?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#7166
  def multi_line?; end

  # def once?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#7191
  def once?; end

  # def opening: () -> String
  #
  # source://yarp//lib/yarp/node.rb#7146
  def opening; end

  # attr_reader opening_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#7081
  def opening_loc; end

  # Returns a numeric value that represents the flags that were used to create
  # the regular expression.
  #
  # source://yarp//lib/yarp.rb#591
  def options; end

  # attr_reader parts: Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#7084
  def parts; end

  # source://yarp//lib/yarp/node.rb#7106
  def set_newline_flag(newline_marked); end

  # def utf_8?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#7186
  def utf_8?; end

  # def windows_31j?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#7181
  def windows_31j?; end

  private

  # Returns the value of attribute flags.
  #
  # source://yarp//lib/yarp/node.rb#7090
  def flags; end
end

# Represents a string literal that contains interpolation.
#
#     "foo #{bar} baz"
#     ^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#7217
class YARP::InterpolatedStringNode < ::YARP::Node
  # def initialize: (opening_loc: Location?, parts: Array[Node], closing_loc: Location?, location: Location) -> void
  #
  # @return [InterpolatedStringNode] a new instance of InterpolatedStringNode
  #
  # source://yarp//lib/yarp/node.rb#7228
  def initialize(opening_loc, parts, closing_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#7236
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#7246
  def child_nodes; end

  # def closing: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#7284
  def closing; end

  # attr_reader closing_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#7225
  def closing_loc; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#7256
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#7251
  def compact_child_nodes; end

  # def copy: (**params) -> InterpolatedStringNode
  #
  # source://yarp//lib/yarp/node.rb#7261
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#7246
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#7274
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#7299
  def human; end

  # source://yarp//lib/yarp/node.rb#7288
  def inspect(inspector = T.unsafe(nil)); end

  # def opening: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#7279
  def opening; end

  # attr_reader opening_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#7219
  def opening_loc; end

  # attr_reader parts: Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#7222
  def parts; end

  # source://yarp//lib/yarp/node.rb#7240
  def set_newline_flag(newline_marked); end
end

# Represents a symbol literal that contains interpolation.
#
#     :"foo #{bar} baz"
#     ^^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#7308
class YARP::InterpolatedSymbolNode < ::YARP::Node
  # def initialize: (opening_loc: Location?, parts: Array[Node], closing_loc: Location?, location: Location) -> void
  #
  # @return [InterpolatedSymbolNode] a new instance of InterpolatedSymbolNode
  #
  # source://yarp//lib/yarp/node.rb#7319
  def initialize(opening_loc, parts, closing_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#7327
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#7337
  def child_nodes; end

  # def closing: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#7375
  def closing; end

  # attr_reader closing_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#7316
  def closing_loc; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#7347
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#7342
  def compact_child_nodes; end

  # def copy: (**params) -> InterpolatedSymbolNode
  #
  # source://yarp//lib/yarp/node.rb#7352
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#7337
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#7365
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#7390
  def human; end

  # source://yarp//lib/yarp/node.rb#7379
  def inspect(inspector = T.unsafe(nil)); end

  # def opening: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#7370
  def opening; end

  # attr_reader opening_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#7310
  def opening_loc; end

  # attr_reader parts: Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#7313
  def parts; end

  # source://yarp//lib/yarp/node.rb#7331
  def set_newline_flag(newline_marked); end
end

# Represents an xstring literal that contains interpolation.
#
#     `foo #{bar} baz`
#     ^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#7399
class YARP::InterpolatedXStringNode < ::YARP::Node
  # def initialize: (opening_loc: Location, parts: Array[Node], closing_loc: Location, location: Location) -> void
  #
  # @return [InterpolatedXStringNode] a new instance of InterpolatedXStringNode
  #
  # source://yarp//lib/yarp/node.rb#7410
  def initialize(opening_loc, parts, closing_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#7418
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#7428
  def child_nodes; end

  # def closing: () -> String
  #
  # source://yarp//lib/yarp/node.rb#7466
  def closing; end

  # attr_reader closing_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#7407
  def closing_loc; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#7438
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#7433
  def compact_child_nodes; end

  # def copy: (**params) -> InterpolatedXStringNode
  #
  # source://yarp//lib/yarp/node.rb#7443
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#7428
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#7456
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#7481
  def human; end

  # source://yarp//lib/yarp/node.rb#7470
  def inspect(inspector = T.unsafe(nil)); end

  # def opening: () -> String
  #
  # source://yarp//lib/yarp/node.rb#7461
  def opening; end

  # attr_reader opening_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#7401
  def opening_loc; end

  # attr_reader parts: Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#7404
  def parts; end

  # source://yarp//lib/yarp/node.rb#7422
  def set_newline_flag(newline_marked); end
end

# Represents a hash literal without opening and closing braces.
#
#     foo(a: b)
#         ^^^^
#
# source://yarp//lib/yarp/node.rb#7490
class YARP::KeywordHashNode < ::YARP::Node
  # def initialize: (elements: Array[Node], location: Location) -> void
  #
  # @return [KeywordHashNode] a new instance of KeywordHashNode
  #
  # source://yarp//lib/yarp/node.rb#7495
  def initialize(elements, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#7501
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#7506
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#7516
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#7511
  def compact_child_nodes; end

  # def copy: (**params) -> KeywordHashNode
  #
  # source://yarp//lib/yarp/node.rb#7521
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#7506
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#7532
  def deconstruct_keys(keys); end

  # attr_reader elements: Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#7492
  def elements; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#7545
  def human; end

  # source://yarp//lib/yarp/node.rb#7536
  def inspect(inspector = T.unsafe(nil)); end
end

# Represents a keyword parameter to a method, block, or lambda definition.
#
#     def a(b:)
#           ^^
#     end
#
#     def a(b: 1)
#           ^^^^
#     end
#
# source://yarp//lib/yarp/node.rb#7559
class YARP::KeywordParameterNode < ::YARP::Node
  # def initialize: (name: Symbol, name_loc: Location, value: Node?, location: Location) -> void
  #
  # @return [KeywordParameterNode] a new instance of KeywordParameterNode
  #
  # source://yarp//lib/yarp/node.rb#7570
  def initialize(name, name_loc, value, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#7578
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#7583
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#7595
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#7588
  def compact_child_nodes; end

  # def copy: (**params) -> KeywordParameterNode
  #
  # source://yarp//lib/yarp/node.rb#7600
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#7583
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#7613
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#7633
  def human; end

  # source://yarp//lib/yarp/node.rb#7617
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#7561
  def name; end

  # attr_reader name_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#7564
  def name_loc; end

  # attr_reader value: Node?
  #
  # source://yarp//lib/yarp/node.rb#7567
  def value; end
end

# Represents a keyword rest parameter to a method, block, or lambda definition.
#
#     def a(**b)
#           ^^^
#     end
#
# source://yarp//lib/yarp/node.rb#7643
class YARP::KeywordRestParameterNode < ::YARP::Node
  # def initialize: (name: Symbol?, name_loc: Location?, operator_loc: Location, location: Location) -> void
  #
  # @return [KeywordRestParameterNode] a new instance of KeywordRestParameterNode
  #
  # source://yarp//lib/yarp/node.rb#7654
  def initialize(name, name_loc, operator_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#7662
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#7667
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#7677
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#7672
  def compact_child_nodes; end

  # def copy: (**params) -> KeywordRestParameterNode
  #
  # source://yarp//lib/yarp/node.rb#7682
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#7667
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#7695
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#7715
  def human; end

  # source://yarp//lib/yarp/node.rb#7704
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol?
  #
  # source://yarp//lib/yarp/node.rb#7645
  def name; end

  # attr_reader name_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#7648
  def name_loc; end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#7700
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#7651
  def operator_loc; end
end

# Represents using a lambda literal (not the lambda method call).
#
#     ->(value) { value * 2 }
#     ^^^^^^^^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#7724
class YARP::LambdaNode < ::YARP::Node
  # def initialize: (locals: Array[Symbol], operator_loc: Location, opening_loc: Location, closing_loc: Location, parameters: BlockParametersNode?, body: Node?, location: Location) -> void
  #
  # @return [LambdaNode] a new instance of LambdaNode
  #
  # source://yarp//lib/yarp/node.rb#7744
  def initialize(locals, operator_loc, opening_loc, closing_loc, parameters, body, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#7755
  def accept(visitor); end

  # attr_reader body: Node?
  #
  # source://yarp//lib/yarp/node.rb#7741
  def body; end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#7760
  def child_nodes; end

  # def closing: () -> String
  #
  # source://yarp//lib/yarp/node.rb#7809
  def closing; end

  # attr_reader closing_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#7735
  def closing_loc; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#7773
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#7765
  def compact_child_nodes; end

  # def copy: (**params) -> LambdaNode
  #
  # source://yarp//lib/yarp/node.rb#7778
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#7760
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#7794
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#7837
  def human; end

  # source://yarp//lib/yarp/node.rb#7813
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader locals: Array[Symbol]
  #
  # source://yarp//lib/yarp/node.rb#7726
  def locals; end

  # def opening: () -> String
  #
  # source://yarp//lib/yarp/node.rb#7804
  def opening; end

  # attr_reader opening_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#7732
  def opening_loc; end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#7799
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#7729
  def operator_loc; end

  # attr_reader parameters: BlockParametersNode?
  #
  # source://yarp//lib/yarp/node.rb#7738
  def parameters; end
end

# This class is responsible for lexing the source using YARP and then
# converting those tokens to be compatible with Ripper. In the vast majority
# of cases, this is a one-to-one mapping of the token type. Everything else
# generally lines up. However, there are a few cases that require special
# handling.
#
# source://yarp//lib/yarp/lex_compat.rb#11
class YARP::LexCompat
  # @return [LexCompat] a new instance of LexCompat
  #
  # source://yarp//lib/yarp/lex_compat.rb#554
  def initialize(source, filepath = T.unsafe(nil)); end

  # Returns the value of attribute filepath.
  #
  # source://yarp//lib/yarp/lex_compat.rb#552
  def filepath; end

  # source://yarp//lib/yarp/lex_compat.rb#559
  def result; end

  # Returns the value of attribute source.
  #
  # source://yarp//lib/yarp/lex_compat.rb#552
  def source; end
end

# Ripper doesn't include the rest of the token in the event, so we need to
# trim it down to just the content on the first line when comparing.
#
# source://yarp//lib/yarp/lex_compat.rb#205
class YARP::LexCompat::EndContentToken < ::YARP::LexCompat::Token
  # source://yarp//lib/yarp/lex_compat.rb#206
  def ==(other); end
end

# A heredoc in this case is a list of tokens that belong to the body of the
# heredoc that should be appended onto the list of tokens when the heredoc
# closes.
#
# source://yarp//lib/yarp/lex_compat.rb#266
module YARP::LexCompat::Heredoc
  class << self
    # Here we will split between the two types of heredocs and return the
    # object that will store their tokens.
    #
    # source://yarp//lib/yarp/lex_compat.rb#540
    def build(opening); end
  end
end

# Dash heredocs are a little more complicated. They are a list of tokens
# that need to be split on "\\\n" to mimic Ripper's behavior. We also need
# to keep track of the state that the heredoc was opened in.
#
# source://yarp//lib/yarp/lex_compat.rb#290
class YARP::LexCompat::Heredoc::DashHeredoc
  # @return [DashHeredoc] a new instance of DashHeredoc
  #
  # source://yarp//lib/yarp/lex_compat.rb#293
  def initialize(split); end

  # source://yarp//lib/yarp/lex_compat.rb#298
  def <<(token); end

  # Returns the value of attribute split.
  #
  # source://yarp//lib/yarp/lex_compat.rb#291
  def split; end

  # source://yarp//lib/yarp/lex_compat.rb#302
  def to_a; end

  # Returns the value of attribute tokens.
  #
  # source://yarp//lib/yarp/lex_compat.rb#291
  def tokens; end
end

# Heredocs that are dedenting heredocs are a little more complicated.
# Ripper outputs on_ignored_sp tokens for the whitespace that is being
# removed from the output. YARP only modifies the node itself and keeps
# the token the same. This simplifies YARP, but makes comparing against
# Ripper much harder because there is a length mismatch.
#
# Fortunately, we already have to pull out the heredoc tokens in order to
# insert them into the stream in the correct order. As such, we can do
# some extra manipulation on the tokens to make them match Ripper's
# output by mirroring the dedent logic that Ripper uses.
#
# source://yarp//lib/yarp/lex_compat.rb#349
class YARP::LexCompat::Heredoc::DedentingHeredoc
  # @return [DedentingHeredoc] a new instance of DedentingHeredoc
  #
  # source://yarp//lib/yarp/lex_compat.rb#354
  def initialize; end

  # As tokens are coming in, we track the minimum amount of common leading
  # whitespace on plain string content tokens. This allows us to later
  # remove that amount of whitespace from the beginning of each line.
  #
  # source://yarp//lib/yarp/lex_compat.rb#364
  def <<(token); end

  # Returns the value of attribute dedent.
  #
  # source://yarp//lib/yarp/lex_compat.rb#352
  def dedent; end

  # Returns the value of attribute dedent_next.
  #
  # source://yarp//lib/yarp/lex_compat.rb#352
  def dedent_next; end

  # Returns the value of attribute embexpr_balance.
  #
  # source://yarp//lib/yarp/lex_compat.rb#352
  def embexpr_balance; end

  # source://yarp//lib/yarp/lex_compat.rb#396
  def to_a; end

  # Returns the value of attribute tokens.
  #
  # source://yarp//lib/yarp/lex_compat.rb#352
  def tokens; end
end

# source://yarp//lib/yarp/lex_compat.rb#350
YARP::LexCompat::Heredoc::DedentingHeredoc::TAB_WIDTH = T.let(T.unsafe(nil), Integer)

# Heredocs that are no dash or tilde heredocs are just a list of tokens.
# We need to keep them around so that we can insert them in the correct
# order back into the token stream and set the state of the last token to
# the state that the heredoc was opened in.
#
# source://yarp//lib/yarp/lex_compat.rb#271
class YARP::LexCompat::Heredoc::PlainHeredoc
  # @return [PlainHeredoc] a new instance of PlainHeredoc
  #
  # source://yarp//lib/yarp/lex_compat.rb#274
  def initialize; end

  # source://yarp//lib/yarp/lex_compat.rb#278
  def <<(token); end

  # source://yarp//lib/yarp/lex_compat.rb#282
  def to_a; end

  # Returns the value of attribute tokens.
  #
  # source://yarp//lib/yarp/lex_compat.rb#272
  def tokens; end
end

# Ident tokens for the most part are exactly the same, except sometimes we
# know an ident is a local when ripper doesn't (when they are introduced
# through named captures in regular expressions). In that case we don't
# compare the state.
#
# source://yarp//lib/yarp/lex_compat.rb#223
class YARP::LexCompat::IdentToken < ::YARP::LexCompat::Token
  # source://yarp//lib/yarp/lex_compat.rb#224
  def ==(other); end
end

# Tokens where state should be ignored
# used for :on_comment, :on_heredoc_end, :on_embexpr_end
#
# source://yarp//lib/yarp/lex_compat.rb#213
class YARP::LexCompat::IgnoreStateToken < ::YARP::LexCompat::Token
  # source://yarp//lib/yarp/lex_compat.rb#214
  def ==(other); end
end

# Ignored newlines can occasionally have a LABEL state attached to them, so
# we compare the state differently here.
#
# source://yarp//lib/yarp/lex_compat.rb#234
class YARP::LexCompat::IgnoredNewlineToken < ::YARP::LexCompat::Token
  # source://yarp//lib/yarp/lex_compat.rb#235
  def ==(other); end
end

# If we have an identifier that follows a method name like:
#
#     def foo bar
#
# then Ripper will mark bar as END|LABEL if there is a local in a parent
# scope named bar because it hasn't pushed the local table yet. We do this
# more accurately, so we need to allow comparing against both END and
# END|LABEL.
#
# source://yarp//lib/yarp/lex_compat.rb#254
class YARP::LexCompat::ParamToken < ::YARP::LexCompat::Token
  # source://yarp//lib/yarp/lex_compat.rb#255
  def ==(other); end
end

# This is a mapping of YARP token types to Ripper token types. This is a
# many-to-one mapping because we split up our token types, whereas Ripper
# tends to group them.
#
# source://yarp//lib/yarp/lex_compat.rb#15
YARP::LexCompat::RIPPER = T.let(T.unsafe(nil), Hash)

# When we produce tokens, we produce the same arrays that Ripper does.
# However, we add a couple of convenience methods onto them to make them a
# little easier to work with. We delegate all other methods to the array.
#
# source://yarp//lib/yarp/lex_compat.rb#185
class YARP::LexCompat::Token < ::SimpleDelegator
  # source://yarp//lib/yarp/lex_compat.rb#190
  def event; end

  # source://yarp//lib/yarp/lex_compat.rb#186
  def location; end

  # source://yarp//lib/yarp/lex_compat.rb#198
  def state; end

  # source://yarp//lib/yarp/lex_compat.rb#194
  def value; end
end

# Represents the use of the `&&=` operator for assignment to a local variable.
#
#     target &&= value
#     ^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#7846
class YARP::LocalVariableAndWriteNode < ::YARP::Node
  # def initialize: (name_loc: Location, operator_loc: Location, value: Node, name: Symbol, depth: Integer, location: Location) -> void
  #
  # @return [LocalVariableAndWriteNode] a new instance of LocalVariableAndWriteNode
  #
  # source://yarp//lib/yarp/node.rb#7863
  def initialize(name_loc, operator_loc, value, name, depth, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#7873
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#7878
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#7888
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#7883
  def compact_child_nodes; end

  # def copy: (**params) -> LocalVariableAndWriteNode
  #
  # source://yarp//lib/yarp/node.rb#7893
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#7878
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#7908
  def deconstruct_keys(keys); end

  # attr_reader depth: Integer
  #
  # source://yarp//lib/yarp/node.rb#7860
  def depth; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#7931
  def human; end

  # source://yarp//lib/yarp/node.rb#7917
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#7857
  def name; end

  # attr_reader name_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#7848
  def name_loc; end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#7913
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#7851
  def operator_loc; end

  # attr_reader value: Node
  #
  # source://yarp//lib/yarp/node.rb#7854
  def value; end
end

# Represents assigning to a local variable using an operator that isn't `=`.
#
#     target += value
#     ^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#7940
class YARP::LocalVariableOperatorWriteNode < ::YARP::Node
  # def initialize: (name_loc: Location, operator_loc: Location, value: Node, name: Symbol, operator: Symbol, depth: Integer, location: Location) -> void
  #
  # @return [LocalVariableOperatorWriteNode] a new instance of LocalVariableOperatorWriteNode
  #
  # source://yarp//lib/yarp/node.rb#7960
  def initialize(name_loc, operator_loc, value, name, operator, depth, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#7971
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#7976
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#7986
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#7981
  def compact_child_nodes; end

  # def copy: (**params) -> LocalVariableOperatorWriteNode
  #
  # source://yarp//lib/yarp/node.rb#7991
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#7976
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#8007
  def deconstruct_keys(keys); end

  # attr_reader depth: Integer
  #
  # source://yarp//lib/yarp/node.rb#7957
  def depth; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#8026
  def human; end

  # source://yarp//lib/yarp/node.rb#8011
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#7951
  def name; end

  # attr_reader name_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#7942
  def name_loc; end

  # attr_reader operator: Symbol
  #
  # source://yarp//lib/yarp/node.rb#7954
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#7945
  def operator_loc; end

  # attr_reader value: Node
  #
  # source://yarp//lib/yarp/node.rb#7948
  def value; end
end

# Represents the use of the `||=` operator for assignment to a local variable.
#
#     target ||= value
#     ^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#8035
class YARP::LocalVariableOrWriteNode < ::YARP::Node
  # def initialize: (name_loc: Location, operator_loc: Location, value: Node, name: Symbol, depth: Integer, location: Location) -> void
  #
  # @return [LocalVariableOrWriteNode] a new instance of LocalVariableOrWriteNode
  #
  # source://yarp//lib/yarp/node.rb#8052
  def initialize(name_loc, operator_loc, value, name, depth, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#8062
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#8067
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#8077
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#8072
  def compact_child_nodes; end

  # def copy: (**params) -> LocalVariableOrWriteNode
  #
  # source://yarp//lib/yarp/node.rb#8082
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#8067
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#8097
  def deconstruct_keys(keys); end

  # attr_reader depth: Integer
  #
  # source://yarp//lib/yarp/node.rb#8049
  def depth; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#8120
  def human; end

  # source://yarp//lib/yarp/node.rb#8106
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#8046
  def name; end

  # attr_reader name_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#8037
  def name_loc; end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#8102
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#8040
  def operator_loc; end

  # attr_reader value: Node
  #
  # source://yarp//lib/yarp/node.rb#8043
  def value; end
end

# Represents reading a local variable. Note that this requires that a local
# variable of the same name has already been written to in the same scope,
# otherwise it is parsed as a method call.
#
#     foo
#     ^^^
#
# source://yarp//lib/yarp/node.rb#8131
class YARP::LocalVariableReadNode < ::YARP::Node
  # def initialize: (name: Symbol, depth: Integer, location: Location) -> void
  #
  # @return [LocalVariableReadNode] a new instance of LocalVariableReadNode
  #
  # source://yarp//lib/yarp/node.rb#8139
  def initialize(name, depth, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#8146
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#8151
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#8161
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#8156
  def compact_child_nodes; end

  # def copy: (**params) -> LocalVariableReadNode
  #
  # source://yarp//lib/yarp/node.rb#8166
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#8151
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#8178
  def deconstruct_keys(keys); end

  # attr_reader depth: Integer
  #
  # source://yarp//lib/yarp/node.rb#8136
  def depth; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#8192
  def human; end

  # source://yarp//lib/yarp/node.rb#8182
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#8133
  def name; end
end

# Represents writing to a local variable in a context that doesn't have an explicit value.
#
#     foo, bar = baz
#     ^^^  ^^^
#
# source://yarp//lib/yarp/node.rb#8201
class YARP::LocalVariableTargetNode < ::YARP::Node
  # def initialize: (name: Symbol, depth: Integer, location: Location) -> void
  #
  # @return [LocalVariableTargetNode] a new instance of LocalVariableTargetNode
  #
  # source://yarp//lib/yarp/node.rb#8209
  def initialize(name, depth, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#8216
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#8221
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#8231
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#8226
  def compact_child_nodes; end

  # def copy: (**params) -> LocalVariableTargetNode
  #
  # source://yarp//lib/yarp/node.rb#8236
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#8221
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#8248
  def deconstruct_keys(keys); end

  # attr_reader depth: Integer
  #
  # source://yarp//lib/yarp/node.rb#8206
  def depth; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#8262
  def human; end

  # source://yarp//lib/yarp/node.rb#8252
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#8203
  def name; end
end

# Represents writing to a local variable.
#
#     foo = 1
#     ^^^^^^^
#
# source://yarp//lib/yarp/node.rb#8271
class YARP::LocalVariableWriteNode < ::YARP::Node
  # def initialize: (name: Symbol, depth: Integer, name_loc: Location, value: Node, operator_loc: Location, location: Location) -> void
  #
  # @return [LocalVariableWriteNode] a new instance of LocalVariableWriteNode
  #
  # source://yarp//lib/yarp/node.rb#8288
  def initialize(name, depth, name_loc, value, operator_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#8298
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#8303
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#8313
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#8308
  def compact_child_nodes; end

  # def copy: (**params) -> LocalVariableWriteNode
  #
  # source://yarp//lib/yarp/node.rb#8318
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#8303
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#8333
  def deconstruct_keys(keys); end

  # attr_reader depth: Integer
  #
  # source://yarp//lib/yarp/node.rb#8276
  def depth; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#8356
  def human; end

  # source://yarp//lib/yarp/node.rb#8342
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#8273
  def name; end

  # attr_reader name_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#8279
  def name_loc; end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#8338
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#8285
  def operator_loc; end

  # attr_reader value: Node
  #
  # source://yarp//lib/yarp/node.rb#8282
  def value; end
end

# This represents a location in the source.
#
# source://yarp//lib/yarp.rb#41
class YARP::Location
  # @return [Location] a new instance of Location
  #
  # source://yarp//lib/yarp.rb#56
  def initialize(source, start_offset, length); end

  # source://yarp//lib/yarp.rb#123
  def ==(other); end

  # The list of comments attached to this location
  #
  # source://yarp//lib/yarp.rb#54
  def comments; end

  # Create a new location object with the given options.
  #
  # source://yarp//lib/yarp.rb#64
  def copy(**options); end

  # source://yarp//lib/yarp.rb#115
  def deconstruct_keys(keys); end

  # The column number in bytes where this location ends from the start of the
  # line.
  #
  # source://yarp//lib/yarp.rb#111
  def end_column; end

  # The line number where this location ends.
  #
  # source://yarp//lib/yarp.rb#99
  def end_line; end

  # The byte offset from the beginning of the source where this location ends.
  #
  # source://yarp//lib/yarp.rb#83
  def end_offset; end

  # Returns a string representation of this location.
  #
  # source://yarp//lib/yarp.rb#73
  def inspect; end

  # Returns a new location that stretches from this location to the given
  # other location. Raises an error if this location is not before the other
  # location or if they don't share the same source.
  #
  # source://yarp//lib/yarp.rb#132
  def join(other); end

  # The length of this location in bytes.
  #
  # source://yarp//lib/yarp.rb#51
  def length; end

  # source://yarp//lib/yarp.rb#119
  def pretty_print(q); end

  # The source code that this location represents.
  #
  # source://yarp//lib/yarp.rb#78
  def slice; end

  # The column number in bytes where this location starts from the start of
  # the line.
  #
  # source://yarp//lib/yarp.rb#105
  def start_column; end

  # The line number where this location starts.
  #
  # source://yarp//lib/yarp.rb#88
  def start_line; end

  # The content of the line where this location starts before this location.
  #
  # source://yarp//lib/yarp.rb#93
  def start_line_slice; end

  # The byte offset from the beginning of the source where this location
  # starts.
  #
  # source://yarp//lib/yarp.rb#48
  def start_offset; end

  protected

  # Returns the value of attribute source.
  #
  # source://yarp//lib/yarp.rb#44
  def source; end

  class << self
    # source://yarp//lib/yarp.rb#139
    def null; end
  end
end

# source://yarp//lib/yarp/node.rb#12917
module YARP::LoopFlags; end

# a loop after a begin statement, so the body is executed first before the condition
#
# source://yarp//lib/yarp/node.rb#12919
YARP::LoopFlags::BEGIN_MODIFIER = T.let(T.unsafe(nil), Integer)

# Represents a regular expression literal used in the predicate of a
# conditional to implicitly match against the last line read by an IO
# object.
#
#     if /foo/i then end
#        ^^^^^^
#
# source://yarp//lib/yarp/node.rb#8367
class YARP::MatchLastLineNode < ::YARP::Node
  # def initialize: (opening_loc: Location, content_loc: Location, closing_loc: Location, unescaped: String, flags: Integer, location: Location) -> void
  #
  # @return [MatchLastLineNode] a new instance of MatchLastLineNode
  #
  # source://yarp//lib/yarp/node.rb#8384
  def initialize(opening_loc, content_loc, closing_loc, unescaped, flags, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#8394
  def accept(visitor); end

  # def ascii_8bit?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#8469
  def ascii_8bit?; end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#8399
  def child_nodes; end

  # def closing: () -> String
  #
  # source://yarp//lib/yarp/node.rb#8444
  def closing; end

  # attr_reader closing_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#8375
  def closing_loc; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#8409
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#8404
  def compact_child_nodes; end

  # def content: () -> String
  #
  # source://yarp//lib/yarp/node.rb#8439
  def content; end

  # attr_reader content_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#8372
  def content_loc; end

  # def copy: (**params) -> MatchLastLineNode
  #
  # source://yarp//lib/yarp/node.rb#8414
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#8399
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#8429
  def deconstruct_keys(keys); end

  # def euc_jp?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#8464
  def euc_jp?; end

  # def extended?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#8454
  def extended?; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#8502
  def human; end

  # def ignore_case?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#8449
  def ignore_case?; end

  # source://yarp//lib/yarp/node.rb#8488
  def inspect(inspector = T.unsafe(nil)); end

  # def multi_line?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#8459
  def multi_line?; end

  # def once?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#8484
  def once?; end

  # def opening: () -> String
  #
  # source://yarp//lib/yarp/node.rb#8434
  def opening; end

  # attr_reader opening_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#8369
  def opening_loc; end

  # attr_reader unescaped: String
  #
  # source://yarp//lib/yarp/node.rb#8378
  def unescaped; end

  # def utf_8?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#8479
  def utf_8?; end

  # def windows_31j?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#8474
  def windows_31j?; end

  private

  # Returns the value of attribute flags.
  #
  # source://yarp//lib/yarp/node.rb#8381
  def flags; end
end

# Represents the use of the modifier `in` operator.
#
#     foo in bar
#     ^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#8511
class YARP::MatchPredicateNode < ::YARP::Node
  # def initialize: (value: Node, pattern: Node, operator_loc: Location, location: Location) -> void
  #
  # @return [MatchPredicateNode] a new instance of MatchPredicateNode
  #
  # source://yarp//lib/yarp/node.rb#8522
  def initialize(value, pattern, operator_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#8530
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#8535
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#8545
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#8540
  def compact_child_nodes; end

  # def copy: (**params) -> MatchPredicateNode
  #
  # source://yarp//lib/yarp/node.rb#8550
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#8535
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#8563
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#8585
  def human; end

  # source://yarp//lib/yarp/node.rb#8572
  def inspect(inspector = T.unsafe(nil)); end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#8568
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#8519
  def operator_loc; end

  # attr_reader pattern: Node
  #
  # source://yarp//lib/yarp/node.rb#8516
  def pattern; end

  # attr_reader value: Node
  #
  # source://yarp//lib/yarp/node.rb#8513
  def value; end
end

# Represents the use of the `=>` operator.
#
#     foo => bar
#     ^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#8594
class YARP::MatchRequiredNode < ::YARP::Node
  # def initialize: (value: Node, pattern: Node, operator_loc: Location, location: Location) -> void
  #
  # @return [MatchRequiredNode] a new instance of MatchRequiredNode
  #
  # source://yarp//lib/yarp/node.rb#8605
  def initialize(value, pattern, operator_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#8613
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#8618
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#8628
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#8623
  def compact_child_nodes; end

  # def copy: (**params) -> MatchRequiredNode
  #
  # source://yarp//lib/yarp/node.rb#8633
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#8618
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#8646
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#8668
  def human; end

  # source://yarp//lib/yarp/node.rb#8655
  def inspect(inspector = T.unsafe(nil)); end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#8651
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#8602
  def operator_loc; end

  # attr_reader pattern: Node
  #
  # source://yarp//lib/yarp/node.rb#8599
  def pattern; end

  # attr_reader value: Node
  #
  # source://yarp//lib/yarp/node.rb#8596
  def value; end
end

# Represents writing local variables using a regular expression match with
# named capture groups.
#
#     /(?<foo>bar)/ =~ baz
#     ^^^^^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#8678
class YARP::MatchWriteNode < ::YARP::Node
  # def initialize: (call: CallNode, locals: Array[Symbol], location: Location) -> void
  #
  # @return [MatchWriteNode] a new instance of MatchWriteNode
  #
  # source://yarp//lib/yarp/node.rb#8686
  def initialize(call, locals, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#8693
  def accept(visitor); end

  # attr_reader call: CallNode
  #
  # source://yarp//lib/yarp/node.rb#8680
  def call; end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#8698
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#8708
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#8703
  def compact_child_nodes; end

  # def copy: (**params) -> MatchWriteNode
  #
  # source://yarp//lib/yarp/node.rb#8713
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#8698
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#8725
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#8740
  def human; end

  # source://yarp//lib/yarp/node.rb#8729
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader locals: Array[Symbol]
  #
  # source://yarp//lib/yarp/node.rb#8683
  def locals; end
end

# Represents a node that is missing from the source and results in a syntax
# error.
#
# source://yarp//lib/yarp/node.rb#8747
class YARP::MissingNode < ::YARP::Node
  # def initialize: (location: Location) -> void
  #
  # @return [MissingNode] a new instance of MissingNode
  #
  # source://yarp//lib/yarp/node.rb#8749
  def initialize(location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#8754
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#8759
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#8769
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#8764
  def compact_child_nodes; end

  # def copy: (**params) -> MissingNode
  #
  # source://yarp//lib/yarp/node.rb#8774
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#8759
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#8784
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#8796
  def human; end

  # source://yarp//lib/yarp/node.rb#8788
  def inspect(inspector = T.unsafe(nil)); end
end

# Represents a module declaration involving the `module` keyword.
#
#     module Foo end
#     ^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#8805
class YARP::ModuleNode < ::YARP::Node
  # def initialize: (locals: Array[Symbol], module_keyword_loc: Location, constant_path: Node, body: Node?, end_keyword_loc: Location, name: Symbol, location: Location) -> void
  #
  # @return [ModuleNode] a new instance of ModuleNode
  #
  # source://yarp//lib/yarp/node.rb#8825
  def initialize(locals, module_keyword_loc, constant_path, body, end_keyword_loc, name, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#8836
  def accept(visitor); end

  # attr_reader body: Node?
  #
  # source://yarp//lib/yarp/node.rb#8816
  def body; end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#8841
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#8854
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#8846
  def compact_child_nodes; end

  # attr_reader constant_path: Node
  #
  # source://yarp//lib/yarp/node.rb#8813
  def constant_path; end

  # def copy: (**params) -> ModuleNode
  #
  # source://yarp//lib/yarp/node.rb#8859
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#8841
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#8875
  def deconstruct_keys(keys); end

  # def end_keyword: () -> String
  #
  # source://yarp//lib/yarp/node.rb#8885
  def end_keyword; end

  # attr_reader end_keyword_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#8819
  def end_keyword_loc; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#8909
  def human; end

  # source://yarp//lib/yarp/node.rb#8889
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader locals: Array[Symbol]
  #
  # source://yarp//lib/yarp/node.rb#8807
  def locals; end

  # def module_keyword: () -> String
  #
  # source://yarp//lib/yarp/node.rb#8880
  def module_keyword; end

  # attr_reader module_keyword_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#8810
  def module_keyword_loc; end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#8822
  def name; end
end

# Represents a multi-target expression.
#
#     a, b, c = 1, 2, 3
#     ^^^^^^^
#
# source://yarp//lib/yarp/node.rb#8918
class YARP::MultiTargetNode < ::YARP::Node
  # def initialize: (targets: Array[Node], lparen_loc: Location?, rparen_loc: Location?, location: Location) -> void
  #
  # @return [MultiTargetNode] a new instance of MultiTargetNode
  #
  # source://yarp//lib/yarp/node.rb#8929
  def initialize(targets, lparen_loc, rparen_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#8937
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#8942
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#8952
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#8947
  def compact_child_nodes; end

  # def copy: (**params) -> MultiTargetNode
  #
  # source://yarp//lib/yarp/node.rb#8957
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#8942
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#8970
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#8995
  def human; end

  # source://yarp//lib/yarp/node.rb#8984
  def inspect(inspector = T.unsafe(nil)); end

  # def lparen: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#8975
  def lparen; end

  # attr_reader lparen_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#8923
  def lparen_loc; end

  # def rparen: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#8980
  def rparen; end

  # attr_reader rparen_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#8926
  def rparen_loc; end

  # attr_reader targets: Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#8920
  def targets; end
end

# Represents a write to a multi-target expression.
#
#     a, b, c = 1, 2, 3
#     ^^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#9004
class YARP::MultiWriteNode < ::YARP::Node
  # def initialize: (targets: Array[Node], lparen_loc: Location?, rparen_loc: Location?, operator_loc: Location, value: Node, location: Location) -> void
  #
  # @return [MultiWriteNode] a new instance of MultiWriteNode
  #
  # source://yarp//lib/yarp/node.rb#9021
  def initialize(targets, lparen_loc, rparen_loc, operator_loc, value, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#9031
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#9036
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#9046
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#9041
  def compact_child_nodes; end

  # def copy: (**params) -> MultiWriteNode
  #
  # source://yarp//lib/yarp/node.rb#9051
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#9036
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#9066
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#9099
  def human; end

  # source://yarp//lib/yarp/node.rb#9085
  def inspect(inspector = T.unsafe(nil)); end

  # def lparen: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#9071
  def lparen; end

  # attr_reader lparen_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#9009
  def lparen_loc; end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#9081
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#9015
  def operator_loc; end

  # def rparen: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#9076
  def rparen; end

  # attr_reader rparen_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#9012
  def rparen_loc; end

  # attr_reader targets: Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#9006
  def targets; end

  # attr_reader value: Node
  #
  # source://yarp//lib/yarp/node.rb#9018
  def value; end
end

# This visitor walks through the tree and copies each node as it is being
# visited. This is useful for consumers that want to mutate the tree, as you
# can change subtrees in place without effecting the rest of the tree.
#
# source://yarp//lib/yarp/mutation_visitor.rb#12
class YARP::MutationVisitor < ::YARP::BasicVisitor
  # Copy a AliasGlobalVariableNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#14
  def visit_alias_global_variable_node(node); end

  # Copy a AliasMethodNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#19
  def visit_alias_method_node(node); end

  # Copy a AlternationPatternNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#24
  def visit_alternation_pattern_node(node); end

  # Copy a AndNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#29
  def visit_and_node(node); end

  # Copy a ArgumentsNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#34
  def visit_arguments_node(node); end

  # Copy a ArrayNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#39
  def visit_array_node(node); end

  # Copy a ArrayPatternNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#44
  def visit_array_pattern_node(node); end

  # Copy a AssocNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#49
  def visit_assoc_node(node); end

  # Copy a AssocSplatNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#54
  def visit_assoc_splat_node(node); end

  # Copy a BackReferenceReadNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#59
  def visit_back_reference_read_node(node); end

  # Copy a BeginNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#64
  def visit_begin_node(node); end

  # Copy a BlockArgumentNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#69
  def visit_block_argument_node(node); end

  # Copy a BlockLocalVariableNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#74
  def visit_block_local_variable_node(node); end

  # Copy a BlockNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#79
  def visit_block_node(node); end

  # Copy a BlockParameterNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#84
  def visit_block_parameter_node(node); end

  # Copy a BlockParametersNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#89
  def visit_block_parameters_node(node); end

  # Copy a BreakNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#94
  def visit_break_node(node); end

  # Copy a CallAndWriteNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#99
  def visit_call_and_write_node(node); end

  # Copy a CallNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#104
  def visit_call_node(node); end

  # Copy a CallOperatorWriteNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#109
  def visit_call_operator_write_node(node); end

  # Copy a CallOrWriteNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#114
  def visit_call_or_write_node(node); end

  # Copy a CapturePatternNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#119
  def visit_capture_pattern_node(node); end

  # Copy a CaseNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#124
  def visit_case_node(node); end

  # Copy a ClassNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#129
  def visit_class_node(node); end

  # Copy a ClassVariableAndWriteNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#134
  def visit_class_variable_and_write_node(node); end

  # Copy a ClassVariableOperatorWriteNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#139
  def visit_class_variable_operator_write_node(node); end

  # Copy a ClassVariableOrWriteNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#144
  def visit_class_variable_or_write_node(node); end

  # Copy a ClassVariableReadNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#149
  def visit_class_variable_read_node(node); end

  # Copy a ClassVariableTargetNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#154
  def visit_class_variable_target_node(node); end

  # Copy a ClassVariableWriteNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#159
  def visit_class_variable_write_node(node); end

  # Copy a ConstantAndWriteNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#164
  def visit_constant_and_write_node(node); end

  # Copy a ConstantOperatorWriteNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#169
  def visit_constant_operator_write_node(node); end

  # Copy a ConstantOrWriteNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#174
  def visit_constant_or_write_node(node); end

  # Copy a ConstantPathAndWriteNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#179
  def visit_constant_path_and_write_node(node); end

  # Copy a ConstantPathNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#184
  def visit_constant_path_node(node); end

  # Copy a ConstantPathOperatorWriteNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#189
  def visit_constant_path_operator_write_node(node); end

  # Copy a ConstantPathOrWriteNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#194
  def visit_constant_path_or_write_node(node); end

  # Copy a ConstantPathTargetNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#199
  def visit_constant_path_target_node(node); end

  # Copy a ConstantPathWriteNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#204
  def visit_constant_path_write_node(node); end

  # Copy a ConstantReadNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#209
  def visit_constant_read_node(node); end

  # Copy a ConstantTargetNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#214
  def visit_constant_target_node(node); end

  # Copy a ConstantWriteNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#219
  def visit_constant_write_node(node); end

  # Copy a DefNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#224
  def visit_def_node(node); end

  # Copy a DefinedNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#229
  def visit_defined_node(node); end

  # Copy a ElseNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#234
  def visit_else_node(node); end

  # Copy a EmbeddedStatementsNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#239
  def visit_embedded_statements_node(node); end

  # Copy a EmbeddedVariableNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#244
  def visit_embedded_variable_node(node); end

  # Copy a EnsureNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#249
  def visit_ensure_node(node); end

  # Copy a FalseNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#254
  def visit_false_node(node); end

  # Copy a FindPatternNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#259
  def visit_find_pattern_node(node); end

  # Copy a FlipFlopNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#264
  def visit_flip_flop_node(node); end

  # Copy a FloatNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#269
  def visit_float_node(node); end

  # Copy a ForNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#274
  def visit_for_node(node); end

  # Copy a ForwardingArgumentsNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#279
  def visit_forwarding_arguments_node(node); end

  # Copy a ForwardingParameterNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#284
  def visit_forwarding_parameter_node(node); end

  # Copy a ForwardingSuperNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#289
  def visit_forwarding_super_node(node); end

  # Copy a GlobalVariableAndWriteNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#294
  def visit_global_variable_and_write_node(node); end

  # Copy a GlobalVariableOperatorWriteNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#299
  def visit_global_variable_operator_write_node(node); end

  # Copy a GlobalVariableOrWriteNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#304
  def visit_global_variable_or_write_node(node); end

  # Copy a GlobalVariableReadNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#309
  def visit_global_variable_read_node(node); end

  # Copy a GlobalVariableTargetNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#314
  def visit_global_variable_target_node(node); end

  # Copy a GlobalVariableWriteNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#319
  def visit_global_variable_write_node(node); end

  # Copy a HashNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#324
  def visit_hash_node(node); end

  # Copy a HashPatternNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#329
  def visit_hash_pattern_node(node); end

  # Copy a IfNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#334
  def visit_if_node(node); end

  # Copy a ImaginaryNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#339
  def visit_imaginary_node(node); end

  # Copy a ImplicitNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#344
  def visit_implicit_node(node); end

  # Copy a InNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#349
  def visit_in_node(node); end

  # Copy a InstanceVariableAndWriteNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#354
  def visit_instance_variable_and_write_node(node); end

  # Copy a InstanceVariableOperatorWriteNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#359
  def visit_instance_variable_operator_write_node(node); end

  # Copy a InstanceVariableOrWriteNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#364
  def visit_instance_variable_or_write_node(node); end

  # Copy a InstanceVariableReadNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#369
  def visit_instance_variable_read_node(node); end

  # Copy a InstanceVariableTargetNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#374
  def visit_instance_variable_target_node(node); end

  # Copy a InstanceVariableWriteNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#379
  def visit_instance_variable_write_node(node); end

  # Copy a IntegerNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#384
  def visit_integer_node(node); end

  # Copy a InterpolatedMatchLastLineNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#389
  def visit_interpolated_match_last_line_node(node); end

  # Copy a InterpolatedRegularExpressionNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#394
  def visit_interpolated_regular_expression_node(node); end

  # Copy a InterpolatedStringNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#399
  def visit_interpolated_string_node(node); end

  # Copy a InterpolatedSymbolNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#404
  def visit_interpolated_symbol_node(node); end

  # Copy a InterpolatedXStringNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#409
  def visit_interpolated_x_string_node(node); end

  # Copy a KeywordHashNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#414
  def visit_keyword_hash_node(node); end

  # Copy a KeywordParameterNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#419
  def visit_keyword_parameter_node(node); end

  # Copy a KeywordRestParameterNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#424
  def visit_keyword_rest_parameter_node(node); end

  # Copy a LambdaNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#429
  def visit_lambda_node(node); end

  # Copy a LocalVariableAndWriteNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#434
  def visit_local_variable_and_write_node(node); end

  # Copy a LocalVariableOperatorWriteNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#439
  def visit_local_variable_operator_write_node(node); end

  # Copy a LocalVariableOrWriteNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#444
  def visit_local_variable_or_write_node(node); end

  # Copy a LocalVariableReadNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#449
  def visit_local_variable_read_node(node); end

  # Copy a LocalVariableTargetNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#454
  def visit_local_variable_target_node(node); end

  # Copy a LocalVariableWriteNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#459
  def visit_local_variable_write_node(node); end

  # Copy a MatchLastLineNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#464
  def visit_match_last_line_node(node); end

  # Copy a MatchPredicateNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#469
  def visit_match_predicate_node(node); end

  # Copy a MatchRequiredNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#474
  def visit_match_required_node(node); end

  # Copy a MatchWriteNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#479
  def visit_match_write_node(node); end

  # Copy a MissingNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#484
  def visit_missing_node(node); end

  # Copy a ModuleNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#489
  def visit_module_node(node); end

  # Copy a MultiTargetNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#494
  def visit_multi_target_node(node); end

  # Copy a MultiWriteNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#499
  def visit_multi_write_node(node); end

  # Copy a NextNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#504
  def visit_next_node(node); end

  # Copy a NilNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#509
  def visit_nil_node(node); end

  # Copy a NoKeywordsParameterNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#514
  def visit_no_keywords_parameter_node(node); end

  # Copy a NumberedReferenceReadNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#519
  def visit_numbered_reference_read_node(node); end

  # Copy a OptionalParameterNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#524
  def visit_optional_parameter_node(node); end

  # Copy a OrNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#529
  def visit_or_node(node); end

  # Copy a ParametersNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#534
  def visit_parameters_node(node); end

  # Copy a ParenthesesNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#539
  def visit_parentheses_node(node); end

  # Copy a PinnedExpressionNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#544
  def visit_pinned_expression_node(node); end

  # Copy a PinnedVariableNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#549
  def visit_pinned_variable_node(node); end

  # Copy a PostExecutionNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#554
  def visit_post_execution_node(node); end

  # Copy a PreExecutionNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#559
  def visit_pre_execution_node(node); end

  # Copy a ProgramNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#564
  def visit_program_node(node); end

  # Copy a RangeNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#569
  def visit_range_node(node); end

  # Copy a RationalNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#574
  def visit_rational_node(node); end

  # Copy a RedoNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#579
  def visit_redo_node(node); end

  # Copy a RegularExpressionNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#584
  def visit_regular_expression_node(node); end

  # Copy a RequiredDestructuredParameterNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#589
  def visit_required_destructured_parameter_node(node); end

  # Copy a RequiredParameterNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#594
  def visit_required_parameter_node(node); end

  # Copy a RescueModifierNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#599
  def visit_rescue_modifier_node(node); end

  # Copy a RescueNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#604
  def visit_rescue_node(node); end

  # Copy a RestParameterNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#609
  def visit_rest_parameter_node(node); end

  # Copy a RetryNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#614
  def visit_retry_node(node); end

  # Copy a ReturnNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#619
  def visit_return_node(node); end

  # Copy a SelfNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#624
  def visit_self_node(node); end

  # Copy a SingletonClassNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#629
  def visit_singleton_class_node(node); end

  # Copy a SourceEncodingNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#634
  def visit_source_encoding_node(node); end

  # Copy a SourceFileNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#639
  def visit_source_file_node(node); end

  # Copy a SourceLineNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#644
  def visit_source_line_node(node); end

  # Copy a SplatNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#649
  def visit_splat_node(node); end

  # Copy a StatementsNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#654
  def visit_statements_node(node); end

  # Copy a StringConcatNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#659
  def visit_string_concat_node(node); end

  # Copy a StringNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#664
  def visit_string_node(node); end

  # Copy a SuperNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#669
  def visit_super_node(node); end

  # Copy a SymbolNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#674
  def visit_symbol_node(node); end

  # Copy a TrueNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#679
  def visit_true_node(node); end

  # Copy a UndefNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#684
  def visit_undef_node(node); end

  # Copy a UnlessNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#689
  def visit_unless_node(node); end

  # Copy a UntilNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#694
  def visit_until_node(node); end

  # Copy a WhenNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#699
  def visit_when_node(node); end

  # Copy a WhileNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#704
  def visit_while_node(node); end

  # Copy a XStringNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#709
  def visit_x_string_node(node); end

  # Copy a YieldNode node
  #
  # source://yarp//lib/yarp/mutation_visitor.rb#714
  def visit_yield_node(node); end
end

# Represents the use of the `next` keyword.
#
#     next 1
#     ^^^^^^
#
# source://yarp//lib/yarp/node.rb#9108
class YARP::NextNode < ::YARP::Node
  # def initialize: (arguments: ArgumentsNode?, keyword_loc: Location, location: Location) -> void
  #
  # @return [NextNode] a new instance of NextNode
  #
  # source://yarp//lib/yarp/node.rb#9116
  def initialize(arguments, keyword_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#9123
  def accept(visitor); end

  # attr_reader arguments: ArgumentsNode?
  #
  # source://yarp//lib/yarp/node.rb#9110
  def arguments; end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#9128
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#9140
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#9133
  def compact_child_nodes; end

  # def copy: (**params) -> NextNode
  #
  # source://yarp//lib/yarp/node.rb#9145
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#9128
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#9157
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#9181
  def human; end

  # source://yarp//lib/yarp/node.rb#9166
  def inspect(inspector = T.unsafe(nil)); end

  # def keyword: () -> String
  #
  # source://yarp//lib/yarp/node.rb#9162
  def keyword; end

  # attr_reader keyword_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#9113
  def keyword_loc; end
end

# Represents the use of the `nil` keyword.
#
#     nil
#     ^^^
#
# source://yarp//lib/yarp/node.rb#9190
class YARP::NilNode < ::YARP::Node
  # def initialize: (location: Location) -> void
  #
  # @return [NilNode] a new instance of NilNode
  #
  # source://yarp//lib/yarp/node.rb#9192
  def initialize(location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#9197
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#9202
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#9212
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#9207
  def compact_child_nodes; end

  # def copy: (**params) -> NilNode
  #
  # source://yarp//lib/yarp/node.rb#9217
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#9202
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#9227
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#9239
  def human; end

  # source://yarp//lib/yarp/node.rb#9231
  def inspect(inspector = T.unsafe(nil)); end
end

# Represents the use of `**nil` inside method arguments.
#
#     def a(**nil)
#           ^^^^^
#     end
#
# source://yarp//lib/yarp/node.rb#9249
class YARP::NoKeywordsParameterNode < ::YARP::Node
  # def initialize: (operator_loc: Location, keyword_loc: Location, location: Location) -> void
  #
  # @return [NoKeywordsParameterNode] a new instance of NoKeywordsParameterNode
  #
  # source://yarp//lib/yarp/node.rb#9257
  def initialize(operator_loc, keyword_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#9264
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#9269
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#9279
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#9274
  def compact_child_nodes; end

  # def copy: (**params) -> NoKeywordsParameterNode
  #
  # source://yarp//lib/yarp/node.rb#9284
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#9269
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#9296
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#9320
  def human; end

  # source://yarp//lib/yarp/node.rb#9310
  def inspect(inspector = T.unsafe(nil)); end

  # def keyword: () -> String
  #
  # source://yarp//lib/yarp/node.rb#9306
  def keyword; end

  # attr_reader keyword_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#9254
  def keyword_loc; end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#9301
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#9251
  def operator_loc; end
end

# This represents a node in the tree.
#
# source://yarp//lib/yarp.rb#289
class YARP::Node
  # Returns the value of attribute location.
  #
  # source://yarp//lib/yarp.rb#290
  def location; end

  # @return [Boolean]
  #
  # source://yarp//lib/yarp.rb#292
  def newline?; end

  # source://yarp//lib/yarp.rb#309
  def pretty_print(q); end

  # source://yarp//lib/yarp.rb#296
  def set_newline_flag(newline_marked); end

  # Slice the location of the node from the source.
  #
  # source://yarp//lib/yarp.rb#305
  def slice; end
end

# This object is responsible for generating the output for the inspect method
# implementations of child nodes.
#
# source://yarp//lib/yarp.rb#316
class YARP::NodeInspector
  # @return [NodeInspector] a new instance of NodeInspector
  #
  # source://yarp//lib/yarp.rb#319
  def initialize(prefix = T.unsafe(nil)); end

  # Appends a line to the output with the current prefix.
  #
  # source://yarp//lib/yarp.rb#325
  def <<(line); end

  # Returns a new inspector that can be used to inspect a child node.
  #
  # source://yarp//lib/yarp.rb#369
  def child_inspector(append); end

  # Generates a string that represents a child node.
  #
  # source://yarp//lib/yarp.rb#364
  def child_node(node, append); end

  # This generates a string that is used as the header of the inspect output
  # for any given node.
  #
  # source://yarp//lib/yarp.rb#331
  def header(node); end

  # Generates a string that represents a list of nodes. It handles properly
  # using the box drawing characters to make the output look nice.
  #
  # source://yarp//lib/yarp.rb#341
  def list(prefix, nodes); end

  # Generates a string that represents a location field on a node.
  #
  # source://yarp//lib/yarp.rb#355
  def location(value); end

  # Returns the value of attribute output.
  #
  # source://yarp//lib/yarp.rb#317
  def output; end

  # Returns the value of attribute prefix.
  #
  # source://yarp//lib/yarp.rb#317
  def prefix; end

  # Returns the output as a string.
  #
  # source://yarp//lib/yarp.rb#374
  def to_str; end
end

# Represents reading a numbered reference to a capture in the previous match.
#
#     $1
#     ^^
#
# source://yarp//lib/yarp/node.rb#9329
class YARP::NumberedReferenceReadNode < ::YARP::Node
  # def initialize: (number: Integer, location: Location) -> void
  #
  # @return [NumberedReferenceReadNode] a new instance of NumberedReferenceReadNode
  #
  # source://yarp//lib/yarp/node.rb#9334
  def initialize(number, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#9340
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#9345
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#9355
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#9350
  def compact_child_nodes; end

  # def copy: (**params) -> NumberedReferenceReadNode
  #
  # source://yarp//lib/yarp/node.rb#9360
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#9345
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#9371
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#9384
  def human; end

  # source://yarp//lib/yarp/node.rb#9375
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader number: Integer
  #
  # source://yarp//lib/yarp/node.rb#9331
  def number; end
end

# Represents an optional parameter to a method, block, or lambda definition.
#
#     def a(b = 1)
#           ^^^^^
#     end
#
# source://yarp//lib/yarp/node.rb#9394
class YARP::OptionalParameterNode < ::YARP::Node
  # def initialize: (name: Symbol, name_loc: Location, operator_loc: Location, value: Node, location: Location) -> void
  #
  # @return [OptionalParameterNode] a new instance of OptionalParameterNode
  #
  # source://yarp//lib/yarp/node.rb#9408
  def initialize(name, name_loc, operator_loc, value, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#9417
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#9422
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#9432
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#9427
  def compact_child_nodes; end

  # def copy: (**params) -> OptionalParameterNode
  #
  # source://yarp//lib/yarp/node.rb#9437
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#9422
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#9451
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#9473
  def human; end

  # source://yarp//lib/yarp/node.rb#9460
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#9396
  def name; end

  # attr_reader name_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#9399
  def name_loc; end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#9456
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#9402
  def operator_loc; end

  # attr_reader value: Node
  #
  # source://yarp//lib/yarp/node.rb#9405
  def value; end
end

# Represents the use of the `||` operator or the `or` keyword.
#
#     left or right
#     ^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#9482
class YARP::OrNode < ::YARP::Node
  # def initialize: (left: Node, right: Node, operator_loc: Location, location: Location) -> void
  #
  # @return [OrNode] a new instance of OrNode
  #
  # source://yarp//lib/yarp/node.rb#9493
  def initialize(left, right, operator_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#9501
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#9506
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#9516
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#9511
  def compact_child_nodes; end

  # def copy: (**params) -> OrNode
  #
  # source://yarp//lib/yarp/node.rb#9521
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#9506
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#9534
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#9556
  def human; end

  # source://yarp//lib/yarp/node.rb#9543
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader left: Node
  #
  # source://yarp//lib/yarp/node.rb#9484
  def left; end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#9539
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#9490
  def operator_loc; end

  # attr_reader right: Node
  #
  # source://yarp//lib/yarp/node.rb#9487
  def right; end
end

# source://yarp//lib/yarp/pack.rb#4
module YARP::Pack
  class << self
    def parse(_arg0, _arg1, _arg2); end
  end
end

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::AGNOSTIC_ENDIAN = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::BACK = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::BER = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::BIG_ENDIAN = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::COMMENT = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#57
class YARP::Pack::Directive
  # @return [Directive] a new instance of Directive
  #
  # source://yarp//lib/yarp/pack.rb#60
  def initialize(version, variant, source, type, signed, endian, size, length_type, length); end

  # source://yarp//lib/yarp/pack.rb#98
  def describe; end

  # Returns the value of attribute endian.
  #
  # source://yarp//lib/yarp/pack.rb#58
  def endian; end

  # Returns the value of attribute length.
  #
  # source://yarp//lib/yarp/pack.rb#58
  def length; end

  # Returns the value of attribute length_type.
  #
  # source://yarp//lib/yarp/pack.rb#58
  def length_type; end

  # Returns the value of attribute signed.
  #
  # source://yarp//lib/yarp/pack.rb#58
  def signed; end

  # Returns the value of attribute size.
  #
  # source://yarp//lib/yarp/pack.rb#58
  def size; end

  # Returns the value of attribute source.
  #
  # source://yarp//lib/yarp/pack.rb#58
  def source; end

  # Returns the value of attribute type.
  #
  # source://yarp//lib/yarp/pack.rb#58
  def type; end

  # Returns the value of attribute variant.
  #
  # source://yarp//lib/yarp/pack.rb#58
  def variant; end

  # Returns the value of attribute version.
  #
  # source://yarp//lib/yarp/pack.rb#58
  def version; end
end

# source://yarp//lib/yarp/pack.rb#72
YARP::Pack::Directive::ENDIAN_DESCRIPTIONS = T.let(T.unsafe(nil), Hash)

# source://yarp//lib/yarp/pack.rb#80
YARP::Pack::Directive::SIGNED_DESCRIPTIONS = T.let(T.unsafe(nil), Hash)

# source://yarp//lib/yarp/pack.rb#86
YARP::Pack::Directive::SIZE_DESCRIPTIONS = T.let(T.unsafe(nil), Hash)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::ENDIAN_NA = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::FLOAT = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#162
class YARP::Pack::Format
  # @return [Format] a new instance of Format
  #
  # source://yarp//lib/yarp/pack.rb#165
  def initialize(directives, encoding); end

  # source://yarp//lib/yarp/pack.rb#170
  def describe; end

  # Returns the value of attribute directives.
  #
  # source://yarp//lib/yarp/pack.rb#163
  def directives; end

  # Returns the value of attribute encoding.
  #
  # source://yarp//lib/yarp/pack.rb#163
  def encoding; end
end

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::INTEGER = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::LENGTH_FIXED = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::LENGTH_MAX = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::LENGTH_NA = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::LENGTH_RELATIVE = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::LITTLE_ENDIAN = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::MOVE = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::NATIVE_ENDIAN = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::NULL = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::SIGNED = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::SIGNED_NA = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::SIZE_16 = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::SIZE_32 = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::SIZE_64 = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::SIZE_8 = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::SIZE_INT = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::SIZE_LONG = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::SIZE_LONG_LONG = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::SIZE_NA = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::SIZE_P = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::SIZE_SHORT = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::SPACE = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::STRING_BASE64 = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::STRING_FIXED = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::STRING_HEX_HIGH = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::STRING_HEX_LOW = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::STRING_LSB = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::STRING_MIME = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::STRING_MSB = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::STRING_NULL_PADDED = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::STRING_NULL_TERMINATED = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::STRING_POINTER = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::STRING_SPACE_PADDED = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::STRING_UU = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::UNSIGNED = T.let(T.unsafe(nil), Symbol)

# source://yarp//lib/yarp/pack.rb#54
YARP::Pack::UTF8 = T.let(T.unsafe(nil), Symbol)

# Represents the list of parameters on a method, block, or lambda definition.
#
#     def a(b, c, d)
#           ^^^^^^^
#     end
#
# source://yarp//lib/yarp/node.rb#9566
class YARP::ParametersNode < ::YARP::Node
  # def initialize: (requireds: Array[Node], optionals: Array[Node], rest: RestParameterNode?, posts: Array[Node], keywords: Array[Node], keyword_rest: Node?, block: BlockParameterNode?, location: Location) -> void
  #
  # @return [ParametersNode] a new instance of ParametersNode
  #
  # source://yarp//lib/yarp/node.rb#9589
  def initialize(requireds, optionals, rest, posts, keywords, keyword_rest, block, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#9601
  def accept(visitor); end

  # attr_reader block: BlockParameterNode?
  #
  # source://yarp//lib/yarp/node.rb#9586
  def block; end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#9606
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#9624
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#9611
  def compact_child_nodes; end

  # def copy: (**params) -> ParametersNode
  #
  # source://yarp//lib/yarp/node.rb#9629
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#9606
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#9646
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#9680
  def human; end

  # source://yarp//lib/yarp/node.rb#9650
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader keyword_rest: Node?
  #
  # source://yarp//lib/yarp/node.rb#9583
  def keyword_rest; end

  # attr_reader keywords: Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#9580
  def keywords; end

  # attr_reader optionals: Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#9571
  def optionals; end

  # attr_reader posts: Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#9577
  def posts; end

  # attr_reader requireds: Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#9568
  def requireds; end

  # attr_reader rest: RestParameterNode?
  #
  # source://yarp//lib/yarp/node.rb#9574
  def rest; end
end

# Represents a parenthesized expression
#
#     (10 + 34)
#     ^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#9689
class YARP::ParenthesesNode < ::YARP::Node
  # def initialize: (body: Node?, opening_loc: Location, closing_loc: Location, location: Location) -> void
  #
  # @return [ParenthesesNode] a new instance of ParenthesesNode
  #
  # source://yarp//lib/yarp/node.rb#9700
  def initialize(body, opening_loc, closing_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#9708
  def accept(visitor); end

  # attr_reader body: Node?
  #
  # source://yarp//lib/yarp/node.rb#9691
  def body; end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#9717
  def child_nodes; end

  # def closing: () -> String
  #
  # source://yarp//lib/yarp/node.rb#9757
  def closing; end

  # attr_reader closing_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#9697
  def closing_loc; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#9729
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#9722
  def compact_child_nodes; end

  # def copy: (**params) -> ParenthesesNode
  #
  # source://yarp//lib/yarp/node.rb#9734
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#9717
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#9747
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#9777
  def human; end

  # source://yarp//lib/yarp/node.rb#9761
  def inspect(inspector = T.unsafe(nil)); end

  # def opening: () -> String
  #
  # source://yarp//lib/yarp/node.rb#9752
  def opening; end

  # attr_reader opening_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#9694
  def opening_loc; end

  # source://yarp//lib/yarp/node.rb#9712
  def set_newline_flag(newline_marked); end
end

# This represents an error that was encountered during parsing.
#
# source://yarp//lib/yarp.rb#170
class YARP::ParseError
  # @return [ParseError] a new instance of ParseError
  #
  # source://yarp//lib/yarp.rb#173
  def initialize(message, location); end

  # source://yarp//lib/yarp.rb#178
  def deconstruct_keys(keys); end

  # source://yarp//lib/yarp.rb#182
  def inspect; end

  # Returns the value of attribute location.
  #
  # source://yarp//lib/yarp.rb#171
  def location; end

  # Returns the value of attribute message.
  #
  # source://yarp//lib/yarp.rb#171
  def message; end
end

# This represents the result of a call to ::parse or ::parse_file. It contains
# the AST, any comments that were encounters, and any errors that were
# encountered.
#
# source://yarp//lib/yarp.rb#229
class YARP::ParseResult
  # @return [ParseResult] a new instance of ParseResult
  #
  # source://yarp//lib/yarp.rb#232
  def initialize(value, comments, errors, warnings, source); end

  # Attach the list of comments to their respective locations in the tree.
  #
  # source://yarp//lib/yarp/parse_result/comments.rb#168
  def attach_comments!; end

  # Returns the value of attribute comments.
  #
  # source://yarp//lib/yarp.rb#230
  def comments; end

  # source://yarp//lib/yarp.rb#240
  def deconstruct_keys(keys); end

  # Returns the value of attribute errors.
  #
  # source://yarp//lib/yarp.rb#230
  def errors; end

  # @return [Boolean]
  #
  # source://yarp//lib/yarp.rb#248
  def failure?; end

  # Walk the tree and mark nodes that are on a new line.
  #
  # source://yarp//lib/yarp/parse_result/newlines.rb#56
  def mark_newlines!; end

  # Returns the value of attribute source.
  #
  # source://yarp//lib/yarp.rb#230
  def source; end

  # @return [Boolean]
  #
  # source://yarp//lib/yarp.rb#244
  def success?; end

  # Returns the value of attribute value.
  #
  # source://yarp//lib/yarp.rb#230
  def value; end

  # Returns the value of attribute warnings.
  #
  # source://yarp//lib/yarp.rb#230
  def warnings; end
end

# When we've parsed the source, we have both the syntax tree and the list of
# comments that we found in the source. This class is responsible for
# walking the tree and finding the nearest location to attach each comment.
#
# It does this by first finding the nearest locations to each comment.
# Locations can either come from nodes directly or from location fields on
# nodes. For example, a `ClassNode` has an overall location encompassing the
# entire class, but it also has a location for the `class` keyword.
#
# Once the nearest locations are found, it determines which one to attach
# to. If it's a trailing comment (a comment on the same line as other source
# code), it will favor attaching to the nearest location that occurs before
# the comment. Otherwise it will favor attaching to the nearest location
# that is after the comment.
#
# source://yarp//lib/yarp/parse_result/comments.rb#19
class YARP::ParseResult::Comments
  # @return [Comments] a new instance of Comments
  #
  # source://yarp//lib/yarp/parse_result/comments.rb#75
  def initialize(parse_result); end

  # source://yarp//lib/yarp/parse_result/comments.rb#79
  def attach!; end

  # Returns the value of attribute parse_result.
  #
  # source://yarp//lib/yarp/parse_result/comments.rb#73
  def parse_result; end

  private

  # Responsible for finding the nearest targets to the given comment within
  # the context of the given encapsulating node.
  #
  # source://yarp//lib/yarp/parse_result/comments.rb#98
  def nearest_targets(node, comment); end
end

# A target for attaching comments that is based on a location field on a
# node. For example, the `end` token of a ClassNode.
#
# source://yarp//lib/yarp/parse_result/comments.rb#49
class YARP::ParseResult::Comments::LocationTarget
  # @return [LocationTarget] a new instance of LocationTarget
  #
  # source://yarp//lib/yarp/parse_result/comments.rb#52
  def initialize(location); end

  # source://yarp//lib/yarp/parse_result/comments.rb#68
  def <<(comment); end

  # @return [Boolean]
  #
  # source://yarp//lib/yarp/parse_result/comments.rb#64
  def encloses?(comment); end

  # source://yarp//lib/yarp/parse_result/comments.rb#60
  def end_offset; end

  # Returns the value of attribute location.
  #
  # source://yarp//lib/yarp/parse_result/comments.rb#50
  def location; end

  # source://yarp//lib/yarp/parse_result/comments.rb#56
  def start_offset; end
end

# A target for attaching comments that is based on a specific node's
# location.
#
# source://yarp//lib/yarp/parse_result/comments.rb#22
class YARP::ParseResult::Comments::NodeTarget
  # @return [NodeTarget] a new instance of NodeTarget
  #
  # source://yarp//lib/yarp/parse_result/comments.rb#25
  def initialize(node); end

  # source://yarp//lib/yarp/parse_result/comments.rb#42
  def <<(comment); end

  # @return [Boolean]
  #
  # source://yarp//lib/yarp/parse_result/comments.rb#37
  def encloses?(comment); end

  # source://yarp//lib/yarp/parse_result/comments.rb#33
  def end_offset; end

  # Returns the value of attribute node.
  #
  # source://yarp//lib/yarp/parse_result/comments.rb#23
  def node; end

  # source://yarp//lib/yarp/parse_result/comments.rb#29
  def start_offset; end
end

# The :line tracepoint event gets fired whenever the Ruby VM encounters an
# expression on a new line. The types of expressions that can trigger this
# event are:
#
# * if statements
# * unless statements
# * nodes that are children of statements lists
#
# In order to keep track of the newlines, we have a list of offsets that
# come back from the parser. We assign these offsets to the first nodes that
# we find in the tree that are on those lines.
#
# Note that the logic in this file should be kept in sync with the Java
# MarkNewlinesVisitor, since that visitor is responsible for marking the
# newlines for JRuby/TruffleRuby.
#
# source://yarp//lib/yarp/parse_result/newlines.rb#20
class YARP::ParseResult::Newlines < ::YARP::Visitor
  # @return [Newlines] a new instance of Newlines
  #
  # source://yarp//lib/yarp/parse_result/newlines.rb#21
  def initialize(newline_marked); end

  # source://yarp//lib/yarp/parse_result/newlines.rb#25
  def visit_block_node(node); end

  # source://yarp//lib/yarp/parse_result/newlines.rb#38
  def visit_if_node(node); end

  # source://yarp//lib/yarp/parse_result/newlines.rb#25
  def visit_lambda_node(node); end

  # source://yarp//lib/yarp/parse_result/newlines.rb#45
  def visit_statements_node(node); end

  # source://yarp//lib/yarp/parse_result/newlines.rb#38
  def visit_unless_node(node); end
end

# This represents a warning that was encountered during parsing.
#
# source://yarp//lib/yarp.rb#188
class YARP::ParseWarning
  # @return [ParseWarning] a new instance of ParseWarning
  #
  # source://yarp//lib/yarp.rb#191
  def initialize(message, location); end

  # source://yarp//lib/yarp.rb#196
  def deconstruct_keys(keys); end

  # source://yarp//lib/yarp.rb#200
  def inspect; end

  # Returns the value of attribute location.
  #
  # source://yarp//lib/yarp.rb#189
  def location; end

  # Returns the value of attribute message.
  #
  # source://yarp//lib/yarp.rb#189
  def message; end
end

# A pattern is an object that wraps a Ruby pattern matching expression. The
# expression would normally be passed to an `in` clause within a `case`
# expression or a rightward assignment expression. For example, in the
# following snippet:
#
#     case node
#     in ConstantPathNode[ConstantReadNode[name: :YARP], ConstantReadNode[name: :Pattern]]
#     end
#
# the pattern is the `ConstantPathNode[...]` expression.
#
# The pattern gets compiled into an object that responds to #call by running
# the #compile method. This method itself will run back through YARP to
# parse the expression into a tree, then walk the tree to generate the
# necessary callable objects. For example, if you wanted to compile the
# expression above into a callable, you would:
#
#     callable = YARP::Pattern.new("ConstantPathNode[ConstantReadNode[name: :YARP], ConstantReadNode[name: :Pattern]]").compile
#     callable.call(node)
#
# The callable object returned by #compile is guaranteed to respond to #call
# with a single argument, which is the node to match against. It also is
# guaranteed to respond to #===, which means it itself can be used in a `case`
# expression, as in:
#
#     case node
#     when callable
#     end
#
# If the query given to the initializer cannot be compiled into a valid
# matcher (either because of a syntax error or because it is using syntax we
# do not yet support) then a YARP::Pattern::CompilationError will be
# raised.
#
# source://yarp//lib/yarp/pattern.rb#37
class YARP::Pattern
  # @return [Pattern] a new instance of Pattern
  #
  # source://yarp//lib/yarp/pattern.rb#58
  def initialize(query); end

  # source://yarp//lib/yarp/pattern.rb#63
  def compile; end

  # Returns the value of attribute query.
  #
  # source://yarp//lib/yarp/pattern.rb#56
  def query; end

  # source://yarp//lib/yarp/pattern.rb#68
  def scan(root); end

  private

  # Shortcut for combining two procs into one that returns true if both return
  # true.
  #
  # source://yarp//lib/yarp/pattern.rb#84
  def combine_and(left, right); end

  # Shortcut for combining two procs into one that returns true if either
  # returns true.
  #
  # source://yarp//lib/yarp/pattern.rb#90
  def combine_or(left, right); end

  # in foo | bar
  #
  # source://yarp//lib/yarp/pattern.rb#125
  def compile_alternation_pattern_node(node); end

  # in [foo, bar, baz]
  #
  # source://yarp//lib/yarp/pattern.rb#100
  def compile_array_pattern_node(node); end

  # in YARP::ConstantReadNode
  #
  # source://yarp//lib/yarp/pattern.rb#130
  def compile_constant_path_node(node); end

  # in ConstantReadNode
  # in String
  #
  # source://yarp//lib/yarp/pattern.rb#142
  def compile_constant_read_node(node); end

  # Raise an error because the given node is not supported.
  #
  # @raise [CompilationError]
  #
  # source://yarp//lib/yarp/pattern.rb#95
  def compile_error(node); end

  # in InstanceVariableReadNode[name: Symbol]
  # in { name: Symbol }
  #
  # source://yarp//lib/yarp/pattern.rb#160
  def compile_hash_pattern_node(node); end

  # in nil
  #
  # source://yarp//lib/yarp/pattern.rb#185
  def compile_nil_node(node); end

  # Compile any kind of node. Dispatch out to the individual compilation
  # methods based on the type of node.
  #
  # source://yarp//lib/yarp/pattern.rb#214
  def compile_node(node); end

  # in /foo/
  #
  # source://yarp//lib/yarp/pattern.rb#190
  def compile_regular_expression_node(node); end

  # in ""
  # in "foo"
  #
  # source://yarp//lib/yarp/pattern.rb#198
  def compile_string_node(node); end

  # in :+
  # in :foo
  #
  # source://yarp//lib/yarp/pattern.rb#206
  def compile_symbol_node(node); end
end

# Raised when the query given to a pattern is either invalid Ruby syntax or
# is using syntax that we don't yet support.
#
# source://yarp//lib/yarp/pattern.rb#40
class YARP::Pattern::CompilationError < ::StandardError
  # @return [CompilationError] a new instance of CompilationError
  #
  # source://yarp//lib/yarp/pattern.rb#41
  def initialize(repr); end
end

# Represents the use of the `^` operator for pinning an expression in a
# pattern matching expression.
#
#     foo in ^(bar)
#            ^^^^^^
#
# source://yarp//lib/yarp/node.rb#9787
class YARP::PinnedExpressionNode < ::YARP::Node
  # def initialize: (expression: Node, operator_loc: Location, lparen_loc: Location, rparen_loc: Location, location: Location) -> void
  #
  # @return [PinnedExpressionNode] a new instance of PinnedExpressionNode
  #
  # source://yarp//lib/yarp/node.rb#9801
  def initialize(expression, operator_loc, lparen_loc, rparen_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#9810
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#9815
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#9825
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#9820
  def compact_child_nodes; end

  # def copy: (**params) -> PinnedExpressionNode
  #
  # source://yarp//lib/yarp/node.rb#9830
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#9815
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#9844
  def deconstruct_keys(keys); end

  # attr_reader expression: Node
  #
  # source://yarp//lib/yarp/node.rb#9789
  def expression; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#9876
  def human; end

  # source://yarp//lib/yarp/node.rb#9863
  def inspect(inspector = T.unsafe(nil)); end

  # def lparen: () -> String
  #
  # source://yarp//lib/yarp/node.rb#9854
  def lparen; end

  # attr_reader lparen_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#9795
  def lparen_loc; end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#9849
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#9792
  def operator_loc; end

  # def rparen: () -> String
  #
  # source://yarp//lib/yarp/node.rb#9859
  def rparen; end

  # attr_reader rparen_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#9798
  def rparen_loc; end
end

# Represents the use of the `^` operator for pinning a variable in a pattern
# matching expression.
#
#     foo in ^bar
#            ^^^^
#
# source://yarp//lib/yarp/node.rb#9886
class YARP::PinnedVariableNode < ::YARP::Node
  # def initialize: (variable: Node, operator_loc: Location, location: Location) -> void
  #
  # @return [PinnedVariableNode] a new instance of PinnedVariableNode
  #
  # source://yarp//lib/yarp/node.rb#9894
  def initialize(variable, operator_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#9901
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#9906
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#9916
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#9911
  def compact_child_nodes; end

  # def copy: (**params) -> PinnedVariableNode
  #
  # source://yarp//lib/yarp/node.rb#9921
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#9906
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#9933
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#9953
  def human; end

  # source://yarp//lib/yarp/node.rb#9942
  def inspect(inspector = T.unsafe(nil)); end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#9938
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#9891
  def operator_loc; end

  # attr_reader variable: Node
  #
  # source://yarp//lib/yarp/node.rb#9888
  def variable; end
end

# Represents the use of the `END` keyword.
#
#     END { foo }
#     ^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#9962
class YARP::PostExecutionNode < ::YARP::Node
  # def initialize: (statements: StatementsNode?, keyword_loc: Location, opening_loc: Location, closing_loc: Location, location: Location) -> void
  #
  # @return [PostExecutionNode] a new instance of PostExecutionNode
  #
  # source://yarp//lib/yarp/node.rb#9976
  def initialize(statements, keyword_loc, opening_loc, closing_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#9985
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#9990
  def child_nodes; end

  # def closing: () -> String
  #
  # source://yarp//lib/yarp/node.rb#10036
  def closing; end

  # attr_reader closing_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#9973
  def closing_loc; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#10002
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#9995
  def compact_child_nodes; end

  # def copy: (**params) -> PostExecutionNode
  #
  # source://yarp//lib/yarp/node.rb#10007
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#9990
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#10021
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#10057
  def human; end

  # source://yarp//lib/yarp/node.rb#10040
  def inspect(inspector = T.unsafe(nil)); end

  # def keyword: () -> String
  #
  # source://yarp//lib/yarp/node.rb#10026
  def keyword; end

  # attr_reader keyword_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#9967
  def keyword_loc; end

  # def opening: () -> String
  #
  # source://yarp//lib/yarp/node.rb#10031
  def opening; end

  # attr_reader opening_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#9970
  def opening_loc; end

  # attr_reader statements: StatementsNode?
  #
  # source://yarp//lib/yarp/node.rb#9964
  def statements; end
end

# Represents the use of the `BEGIN` keyword.
#
#     BEGIN { foo }
#     ^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#10066
class YARP::PreExecutionNode < ::YARP::Node
  # def initialize: (statements: StatementsNode?, keyword_loc: Location, opening_loc: Location, closing_loc: Location, location: Location) -> void
  #
  # @return [PreExecutionNode] a new instance of PreExecutionNode
  #
  # source://yarp//lib/yarp/node.rb#10080
  def initialize(statements, keyword_loc, opening_loc, closing_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#10089
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#10094
  def child_nodes; end

  # def closing: () -> String
  #
  # source://yarp//lib/yarp/node.rb#10140
  def closing; end

  # attr_reader closing_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#10077
  def closing_loc; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#10106
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#10099
  def compact_child_nodes; end

  # def copy: (**params) -> PreExecutionNode
  #
  # source://yarp//lib/yarp/node.rb#10111
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#10094
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#10125
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#10161
  def human; end

  # source://yarp//lib/yarp/node.rb#10144
  def inspect(inspector = T.unsafe(nil)); end

  # def keyword: () -> String
  #
  # source://yarp//lib/yarp/node.rb#10130
  def keyword; end

  # attr_reader keyword_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#10071
  def keyword_loc; end

  # def opening: () -> String
  #
  # source://yarp//lib/yarp/node.rb#10135
  def opening; end

  # attr_reader opening_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#10074
  def opening_loc; end

  # attr_reader statements: StatementsNode?
  #
  # source://yarp//lib/yarp/node.rb#10068
  def statements; end
end

# The top level node of any parse tree.
#
# source://yarp//lib/yarp/node.rb#10167
class YARP::ProgramNode < ::YARP::Node
  # def initialize: (locals: Array[Symbol], statements: StatementsNode, location: Location) -> void
  #
  # @return [ProgramNode] a new instance of ProgramNode
  #
  # source://yarp//lib/yarp/node.rb#10175
  def initialize(locals, statements, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#10182
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#10187
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#10197
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#10192
  def compact_child_nodes; end

  # def copy: (**params) -> ProgramNode
  #
  # source://yarp//lib/yarp/node.rb#10202
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#10187
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#10214
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#10229
  def human; end

  # source://yarp//lib/yarp/node.rb#10218
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader locals: Array[Symbol]
  #
  # source://yarp//lib/yarp/node.rb#10169
  def locals; end

  # attr_reader statements: StatementsNode
  #
  # source://yarp//lib/yarp/node.rb#10172
  def statements; end
end

# source://yarp//lib/yarp/node.rb#12922
module YARP::RangeFlags; end

# ... operator
#
# source://yarp//lib/yarp/node.rb#12924
YARP::RangeFlags::EXCLUDE_END = T.let(T.unsafe(nil), Integer)

# Represents the use of the `..` or `...` operators.
#
#     1..2
#     ^^^^
#
#     c if a =~ /left/ ... b =~ /right/
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#10241
class YARP::RangeNode < ::YARP::Node
  # def initialize: (left: Node?, right: Node?, operator_loc: Location, flags: Integer, location: Location) -> void
  #
  # @return [RangeNode] a new instance of RangeNode
  #
  # source://yarp//lib/yarp/node.rb#10255
  def initialize(left, right, operator_loc, flags, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#10264
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#10269
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#10282
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#10274
  def compact_child_nodes; end

  # def copy: (**params) -> RangeNode
  #
  # source://yarp//lib/yarp/node.rb#10287
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#10269
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#10301
  def deconstruct_keys(keys); end

  # def exclude_end?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#10311
  def exclude_end?; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#10338
  def human; end

  # source://yarp//lib/yarp/node.rb#10315
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader left: Node?
  #
  # source://yarp//lib/yarp/node.rb#10243
  def left; end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#10306
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#10249
  def operator_loc; end

  # attr_reader right: Node?
  #
  # source://yarp//lib/yarp/node.rb#10246
  def right; end

  private

  # Returns the value of attribute flags.
  #
  # source://yarp//lib/yarp/node.rb#10252
  def flags; end
end

# Represents a rational number literal.
#
#     1.0r
#     ^^^^
#
# source://yarp//lib/yarp/node.rb#10347
class YARP::RationalNode < ::YARP::Node
  # def initialize: (numeric: Node, location: Location) -> void
  #
  # @return [RationalNode] a new instance of RationalNode
  #
  # source://yarp//lib/yarp/node.rb#10352
  def initialize(numeric, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#10358
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#10363
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#10373
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#10368
  def compact_child_nodes; end

  # def copy: (**params) -> RationalNode
  #
  # source://yarp//lib/yarp/node.rb#10378
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#10363
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#10389
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#10403
  def human; end

  # source://yarp//lib/yarp/node.rb#10393
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader numeric: Node
  #
  # source://yarp//lib/yarp/node.rb#10349
  def numeric; end

  # Returns the value of the node as a Ruby Rational.
  #
  # source://yarp//lib/yarp.rb#601
  def value; end
end

# Represents the use of the `redo` keyword.
#
#     redo
#     ^^^^
#
# source://yarp//lib/yarp/node.rb#10412
class YARP::RedoNode < ::YARP::Node
  # def initialize: (location: Location) -> void
  #
  # @return [RedoNode] a new instance of RedoNode
  #
  # source://yarp//lib/yarp/node.rb#10414
  def initialize(location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#10419
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#10424
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#10434
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#10429
  def compact_child_nodes; end

  # def copy: (**params) -> RedoNode
  #
  # source://yarp//lib/yarp/node.rb#10439
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#10424
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#10449
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#10461
  def human; end

  # source://yarp//lib/yarp/node.rb#10453
  def inspect(inspector = T.unsafe(nil)); end
end

# source://yarp//lib/yarp/node.rb#12927
module YARP::RegularExpressionFlags; end

# n - forces the ASCII-8BIT encoding
#
# source://yarp//lib/yarp/node.rb#12941
YARP::RegularExpressionFlags::ASCII_8BIT = T.let(T.unsafe(nil), Integer)

# e - forces the EUC-JP encoding
#
# source://yarp//lib/yarp/node.rb#12938
YARP::RegularExpressionFlags::EUC_JP = T.let(T.unsafe(nil), Integer)

# x - ignores whitespace and allows comments in regular expressions
#
# source://yarp//lib/yarp/node.rb#12932
YARP::RegularExpressionFlags::EXTENDED = T.let(T.unsafe(nil), Integer)

# i - ignores the case of characters when matching
#
# source://yarp//lib/yarp/node.rb#12929
YARP::RegularExpressionFlags::IGNORE_CASE = T.let(T.unsafe(nil), Integer)

# m - allows $ to match the end of lines within strings
#
# source://yarp//lib/yarp/node.rb#12935
YARP::RegularExpressionFlags::MULTI_LINE = T.let(T.unsafe(nil), Integer)

# o - only interpolates values into the regular expression once
#
# source://yarp//lib/yarp/node.rb#12950
YARP::RegularExpressionFlags::ONCE = T.let(T.unsafe(nil), Integer)

# u - forces the UTF-8 encoding
#
# source://yarp//lib/yarp/node.rb#12947
YARP::RegularExpressionFlags::UTF_8 = T.let(T.unsafe(nil), Integer)

# s - forces the Windows-31J encoding
#
# source://yarp//lib/yarp/node.rb#12944
YARP::RegularExpressionFlags::WINDOWS_31J = T.let(T.unsafe(nil), Integer)

# Represents a regular expression literal with no interpolation.
#
#     /foo/i
#     ^^^^^^
#
# source://yarp//lib/yarp/node.rb#10470
class YARP::RegularExpressionNode < ::YARP::Node
  # def initialize: (opening_loc: Location, content_loc: Location, closing_loc: Location, unescaped: String, flags: Integer, location: Location) -> void
  #
  # @return [RegularExpressionNode] a new instance of RegularExpressionNode
  #
  # source://yarp//lib/yarp/node.rb#10487
  def initialize(opening_loc, content_loc, closing_loc, unescaped, flags, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#10497
  def accept(visitor); end

  # def ascii_8bit?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#10572
  def ascii_8bit?; end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#10502
  def child_nodes; end

  # def closing: () -> String
  #
  # source://yarp//lib/yarp/node.rb#10547
  def closing; end

  # attr_reader closing_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#10478
  def closing_loc; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#10512
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#10507
  def compact_child_nodes; end

  # def content: () -> String
  #
  # source://yarp//lib/yarp/node.rb#10542
  def content; end

  # attr_reader content_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#10475
  def content_loc; end

  # def copy: (**params) -> RegularExpressionNode
  #
  # source://yarp//lib/yarp/node.rb#10517
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#10502
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#10532
  def deconstruct_keys(keys); end

  # def euc_jp?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#10567
  def euc_jp?; end

  # def extended?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#10557
  def extended?; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#10605
  def human; end

  # def ignore_case?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#10552
  def ignore_case?; end

  # source://yarp//lib/yarp/node.rb#10591
  def inspect(inspector = T.unsafe(nil)); end

  # def multi_line?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#10562
  def multi_line?; end

  # def once?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#10587
  def once?; end

  # def opening: () -> String
  #
  # source://yarp//lib/yarp/node.rb#10537
  def opening; end

  # attr_reader opening_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#10472
  def opening_loc; end

  # Returns a numeric value that represents the flags that were used to create
  # the regular expression.
  #
  # source://yarp//lib/yarp.rb#609
  def options; end

  # attr_reader unescaped: String
  #
  # source://yarp//lib/yarp/node.rb#10481
  def unescaped; end

  # def utf_8?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#10582
  def utf_8?; end

  # def windows_31j?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#10577
  def windows_31j?; end

  private

  # Returns the value of attribute flags.
  #
  # source://yarp//lib/yarp/node.rb#10484
  def flags; end
end

# Represents a destructured required parameter node.
#
#     def foo((bar, baz))
#             ^^^^^^^^^^
#     end
#
# source://yarp//lib/yarp/node.rb#10615
class YARP::RequiredDestructuredParameterNode < ::YARP::Node
  # def initialize: (parameters: Array[Node], opening_loc: Location, closing_loc: Location, location: Location) -> void
  #
  # @return [RequiredDestructuredParameterNode] a new instance of RequiredDestructuredParameterNode
  #
  # source://yarp//lib/yarp/node.rb#10626
  def initialize(parameters, opening_loc, closing_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#10634
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#10639
  def child_nodes; end

  # def closing: () -> String
  #
  # source://yarp//lib/yarp/node.rb#10677
  def closing; end

  # attr_reader closing_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#10623
  def closing_loc; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#10649
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#10644
  def compact_child_nodes; end

  # def copy: (**params) -> RequiredDestructuredParameterNode
  #
  # source://yarp//lib/yarp/node.rb#10654
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#10639
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#10667
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#10692
  def human; end

  # source://yarp//lib/yarp/node.rb#10681
  def inspect(inspector = T.unsafe(nil)); end

  # def opening: () -> String
  #
  # source://yarp//lib/yarp/node.rb#10672
  def opening; end

  # attr_reader opening_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#10620
  def opening_loc; end

  # attr_reader parameters: Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#10617
  def parameters; end
end

# Represents a required parameter to a method, block, or lambda definition.
#
#     def a(b)
#           ^
#     end
#
# source://yarp//lib/yarp/node.rb#10702
class YARP::RequiredParameterNode < ::YARP::Node
  # def initialize: (name: Symbol, location: Location) -> void
  #
  # @return [RequiredParameterNode] a new instance of RequiredParameterNode
  #
  # source://yarp//lib/yarp/node.rb#10707
  def initialize(name, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#10713
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#10718
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#10728
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#10723
  def compact_child_nodes; end

  # def copy: (**params) -> RequiredParameterNode
  #
  # source://yarp//lib/yarp/node.rb#10733
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#10718
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#10744
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#10757
  def human; end

  # source://yarp//lib/yarp/node.rb#10748
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol
  #
  # source://yarp//lib/yarp/node.rb#10704
  def name; end
end

# Represents an expression modified with a rescue.
#
#   foo rescue nil
#   ^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#10766
class YARP::RescueModifierNode < ::YARP::Node
  # def initialize: (expression: Node, keyword_loc: Location, rescue_expression: Node, location: Location) -> void
  #
  # @return [RescueModifierNode] a new instance of RescueModifierNode
  #
  # source://yarp//lib/yarp/node.rb#10777
  def initialize(expression, keyword_loc, rescue_expression, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#10785
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#10794
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#10804
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#10799
  def compact_child_nodes; end

  # def copy: (**params) -> RescueModifierNode
  #
  # source://yarp//lib/yarp/node.rb#10809
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#10794
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#10822
  def deconstruct_keys(keys); end

  # attr_reader expression: Node
  #
  # source://yarp//lib/yarp/node.rb#10768
  def expression; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#10844
  def human; end

  # source://yarp//lib/yarp/node.rb#10831
  def inspect(inspector = T.unsafe(nil)); end

  # def keyword: () -> String
  #
  # source://yarp//lib/yarp/node.rb#10827
  def keyword; end

  # attr_reader keyword_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#10771
  def keyword_loc; end

  # attr_reader rescue_expression: Node
  #
  # source://yarp//lib/yarp/node.rb#10774
  def rescue_expression; end

  # source://yarp//lib/yarp/node.rb#10789
  def set_newline_flag(newline_marked); end
end

# Represents a rescue statement.
#
#     begin
#     rescue Foo, *splat, Bar => ex
#     ^^^^^^
#       foo
#     end
#
# `Foo, *splat, Bar` are in the `exceptions` field.
# `ex` is in the `exception` field.
#
# source://yarp//lib/yarp/node.rb#10859
class YARP::RescueNode < ::YARP::Node
  # def initialize: (keyword_loc: Location, exceptions: Array[Node], operator_loc: Location?, reference: Node?, statements: StatementsNode?, consequent: RescueNode?, location: Location) -> void
  #
  # @return [RescueNode] a new instance of RescueNode
  #
  # source://yarp//lib/yarp/node.rb#10879
  def initialize(keyword_loc, exceptions, operator_loc, reference, statements, consequent, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#10890
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#10895
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#10910
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#10900
  def compact_child_nodes; end

  # attr_reader consequent: RescueNode?
  #
  # source://yarp//lib/yarp/node.rb#10876
  def consequent; end

  # def copy: (**params) -> RescueNode
  #
  # source://yarp//lib/yarp/node.rb#10915
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#10895
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#10931
  def deconstruct_keys(keys); end

  # attr_reader exceptions: Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#10864
  def exceptions; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#10974
  def human; end

  # source://yarp//lib/yarp/node.rb#10945
  def inspect(inspector = T.unsafe(nil)); end

  # def keyword: () -> String
  #
  # source://yarp//lib/yarp/node.rb#10936
  def keyword; end

  # attr_reader keyword_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#10861
  def keyword_loc; end

  # def operator: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#10941
  def operator; end

  # attr_reader operator_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#10867
  def operator_loc; end

  # attr_reader reference: Node?
  #
  # source://yarp//lib/yarp/node.rb#10870
  def reference; end

  # attr_reader statements: StatementsNode?
  #
  # source://yarp//lib/yarp/node.rb#10873
  def statements; end
end

# Represents a rest parameter to a method, block, or lambda definition.
#
#     def a(*b)
#           ^^
#     end
#
# source://yarp//lib/yarp/node.rb#10984
class YARP::RestParameterNode < ::YARP::Node
  # def initialize: (name: Symbol?, name_loc: Location?, operator_loc: Location, location: Location) -> void
  #
  # @return [RestParameterNode] a new instance of RestParameterNode
  #
  # source://yarp//lib/yarp/node.rb#10995
  def initialize(name, name_loc, operator_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#11003
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#11008
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#11018
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#11013
  def compact_child_nodes; end

  # def copy: (**params) -> RestParameterNode
  #
  # source://yarp//lib/yarp/node.rb#11023
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#11008
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#11036
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#11056
  def human; end

  # source://yarp//lib/yarp/node.rb#11045
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader name: Symbol?
  #
  # source://yarp//lib/yarp/node.rb#10986
  def name; end

  # attr_reader name_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#10989
  def name_loc; end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#11041
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#10992
  def operator_loc; end
end

# Represents the use of the `retry` keyword.
#
#     retry
#     ^^^^^
#
# source://yarp//lib/yarp/node.rb#11065
class YARP::RetryNode < ::YARP::Node
  # def initialize: (location: Location) -> void
  #
  # @return [RetryNode] a new instance of RetryNode
  #
  # source://yarp//lib/yarp/node.rb#11067
  def initialize(location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#11072
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#11077
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#11087
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#11082
  def compact_child_nodes; end

  # def copy: (**params) -> RetryNode
  #
  # source://yarp//lib/yarp/node.rb#11092
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#11077
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#11102
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#11114
  def human; end

  # source://yarp//lib/yarp/node.rb#11106
  def inspect(inspector = T.unsafe(nil)); end
end

# Represents the use of the `return` keyword.
#
#     return 1
#     ^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#11123
class YARP::ReturnNode < ::YARP::Node
  # def initialize: (keyword_loc: Location, arguments: ArgumentsNode?, location: Location) -> void
  #
  # @return [ReturnNode] a new instance of ReturnNode
  #
  # source://yarp//lib/yarp/node.rb#11131
  def initialize(keyword_loc, arguments, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#11138
  def accept(visitor); end

  # attr_reader arguments: ArgumentsNode?
  #
  # source://yarp//lib/yarp/node.rb#11128
  def arguments; end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#11143
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#11155
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#11148
  def compact_child_nodes; end

  # def copy: (**params) -> ReturnNode
  #
  # source://yarp//lib/yarp/node.rb#11160
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#11143
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#11172
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#11196
  def human; end

  # source://yarp//lib/yarp/node.rb#11181
  def inspect(inspector = T.unsafe(nil)); end

  # def keyword: () -> String
  #
  # source://yarp//lib/yarp/node.rb#11177
  def keyword; end

  # attr_reader keyword_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#11125
  def keyword_loc; end
end

# This class is meant to provide a compatibility layer between YARP and
# Ripper. It functions by parsing the entire tree first and then walking it
# and executing each of the Ripper callbacks as it goes.
#
# This class is going to necessarily be slower than the native Ripper API. It
# is meant as a stopgap until developers migrate to using YARP. It is also
# meant as a test harness for the YARP parser.
#
# source://yarp//lib/yarp/ripper_compat.rb#13
class YARP::RipperCompat
  # @return [RipperCompat] a new instance of RipperCompat
  #
  # source://yarp//lib/yarp/ripper_compat.rb#59
  def initialize(source); end

  # Returns the value of attribute column.
  #
  # source://yarp//lib/yarp/ripper_compat.rb#57
  def column; end

  # Public interface
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/ripper_compat.rb#70
  def error?; end

  # Returns the value of attribute lineno.
  #
  # source://yarp//lib/yarp/ripper_compat.rb#57
  def lineno; end

  # source://yarp//lib/yarp/ripper_compat.rb#74
  def parse; end

  # Returns the value of attribute source.
  #
  # source://yarp//lib/yarp/ripper_compat.rb#57
  def source; end

  # Visitor methods
  #
  # source://yarp//lib/yarp/ripper_compat.rb#82
  def visit(node); end

  # source://yarp//lib/yarp/ripper_compat.rb#86
  def visit_call_node(node); end

  # source://yarp//lib/yarp/ripper_compat.rb#100
  def visit_integer_node(node); end

  # source://yarp//lib/yarp/ripper_compat.rb#125
  def visit_program_node(node); end

  # source://yarp//lib/yarp/ripper_compat.rb#105
  def visit_statements_node(node); end

  # source://yarp//lib/yarp/ripper_compat.rb#112
  def visit_token(node); end

  private

  # source://yarp//lib/yarp/ripper_compat.rb#162
  def _dispatch0; end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def _dispatch1(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def _dispatch2(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#165
  def _dispatch3(_, _, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#166
  def _dispatch4(_, _, _, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#167
  def _dispatch5(_, _, _, _, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#168
  def _dispatch7(_, _, _, _, _, _, _); end

  # This method is responsible for updating lineno and column information
  # to reflect the current node.
  #
  # This method could be drastically improved with some caching on the start
  # of every line, but for now it's good enough.
  #
  # source://yarp//lib/yarp/ripper_compat.rb#151
  def bounds(location); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_BEGIN(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_CHAR(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_END(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on___end__(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_alias(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_alias_error(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_aref(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_aref_field(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_arg_ambiguous(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_arg_paren(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_args_add(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_args_add_block(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_args_add_star(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#162
  def on_args_forward; end

  # source://yarp//lib/yarp/ripper_compat.rb#162
  def on_args_new; end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_array(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#166
  def on_aryptn(_, _, _, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_assign(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_assign_error(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_assoc_new(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_assoc_splat(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_assoclist_from_args(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_backref(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_backtick(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_bare_assoc_hash(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_begin(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#165
  def on_binary(_, _, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_block_var(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_blockarg(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#166
  def on_bodystmt(_, _, _, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_brace_block(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_break(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#165
  def on_call(_, _, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_case(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#165
  def on_class(_, _, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_class_name_error(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_comma(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_command(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#166
  def on_command_call(_, _, _, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_comment(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_const(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_const_path_field(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_const_path_ref(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_const_ref(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_cvar(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#165
  def on_def(_, _, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_defined(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#167
  def on_defs(_, _, _, _, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_do_block(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_dot2(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_dot3(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_dyna_symbol(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_else(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#165
  def on_elsif(_, _, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_embdoc(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_embdoc_beg(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_embdoc_end(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_embexpr_beg(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_embexpr_end(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_embvar(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_ensure(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#162
  def on_excessed_comma; end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_fcall(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#165
  def on_field(_, _, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_float(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#166
  def on_fndptn(_, _, _, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#165
  def on_for(_, _, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_gvar(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_hash(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_heredoc_beg(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_heredoc_dedent(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_heredoc_end(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#165
  def on_hshptn(_, _, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_ident(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#165
  def on_if(_, _, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_if_mod(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#165
  def on_ifop(_, _, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_ignored_nl(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_ignored_sp(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_imaginary(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#165
  def on_in(_, _, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_int(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_ivar(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_kw(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_kwrest_param(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_label(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_label_end(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_lambda(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_lbrace(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_lbracket(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_lparen(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_magic_comment(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_massign(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_method_add_arg(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_method_add_block(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_mlhs_add(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_mlhs_add_post(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_mlhs_add_star(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#162
  def on_mlhs_new; end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_mlhs_paren(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_module(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_mrhs_add(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_mrhs_add_star(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#162
  def on_mrhs_new; end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_mrhs_new_from_args(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_next(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_nl(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_nokw_param(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_op(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#165
  def on_opassign(_, _, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_operator_ambiguous(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_param_error(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#168
  def on_params(_, _, _, _, _, _, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_paren(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_parse_error(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_period(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_program(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_qsymbols_add(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_qsymbols_beg(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#162
  def on_qsymbols_new; end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_qwords_add(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_qwords_beg(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#162
  def on_qwords_new; end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_rational(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_rbrace(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_rbracket(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#162
  def on_redo; end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_regexp_add(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_regexp_beg(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_regexp_end(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_regexp_literal(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#162
  def on_regexp_new; end

  # source://yarp//lib/yarp/ripper_compat.rb#166
  def on_rescue(_, _, _, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_rescue_mod(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_rest_param(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#162
  def on_retry; end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_return(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#162
  def on_return0; end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_rparen(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_sclass(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_semicolon(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_sp(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_stmts_add(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#162
  def on_stmts_new; end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_string_add(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_string_concat(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#162
  def on_string_content; end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_string_dvar(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_string_embexpr(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_string_literal(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_super(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_symbeg(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_symbol(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_symbol_literal(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_symbols_add(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_symbols_beg(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#162
  def on_symbols_new; end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_tlambda(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_tlambeg(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_top_const_field(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_top_const_ref(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_tstring_beg(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_tstring_content(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_tstring_end(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_unary(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_undef(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#165
  def on_unless(_, _, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_unless_mod(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_until(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_until_mod(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_var_alias(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_var_field(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_var_ref(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_vcall(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#162
  def on_void_stmt; end

  # source://yarp//lib/yarp/ripper_compat.rb#165
  def on_when(_, _, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_while(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_while_mod(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_word_add(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#162
  def on_word_new; end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_words_add(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_words_beg(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#162
  def on_words_new; end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_words_sep(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#164
  def on_xstring_add(_, _); end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_xstring_literal(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#162
  def on_xstring_new; end

  # source://yarp//lib/yarp/ripper_compat.rb#163
  def on_yield(_); end

  # source://yarp//lib/yarp/ripper_compat.rb#162
  def on_yield0; end

  # source://yarp//lib/yarp/ripper_compat.rb#162
  def on_zsuper; end

  # source://yarp//lib/yarp/ripper_compat.rb#158
  def result; end

  class << self
    # This is a convenience method that runs the SexpBuilderPP subclass parser.
    #
    # source://yarp//lib/yarp/ripper_compat.rb#140
    def sexp(source); end

    # This is a convenience method that runs the SexpBuilder subclass parser.
    #
    # source://yarp//lib/yarp/ripper_compat.rb#135
    def sexp_raw(source); end
  end
end

# This class mirrors the ::Ripper::SexpBuilder subclass of ::Ripper that
# returns the arrays of [type, *children].
#
# source://yarp//lib/yarp/ripper_compat.rb#16
class YARP::RipperCompat::SexpBuilder < ::YARP::RipperCompat
  private

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_BEGIN(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_CHAR(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_END(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on___end__(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_alias(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_alias_error(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_aref(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_aref_field(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_arg_ambiguous(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_arg_paren(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_args_add(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_args_add_block(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_args_add_star(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_args_forward(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_args_new(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_array(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_aryptn(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_assign(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_assign_error(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_assoc_new(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_assoc_splat(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_assoclist_from_args(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_backref(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_backtick(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_bare_assoc_hash(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_begin(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_binary(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_block_var(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_blockarg(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_bodystmt(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_brace_block(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_break(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_call(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_case(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_class(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_class_name_error(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_comma(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_command(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_command_call(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_comment(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_const(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_const_path_field(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_const_path_ref(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_const_ref(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_cvar(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_def(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_defined(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_defs(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_do_block(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_dot2(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_dot3(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_dyna_symbol(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_else(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_elsif(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_embdoc(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_embdoc_beg(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_embdoc_end(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_embexpr_beg(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_embexpr_end(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_embvar(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_ensure(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_excessed_comma(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_fcall(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_field(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_float(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_fndptn(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_for(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_gvar(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_hash(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_heredoc_beg(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_heredoc_dedent(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_heredoc_end(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_hshptn(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_ident(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_if(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_if_mod(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_ifop(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_ignored_nl(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_ignored_sp(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_imaginary(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_in(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_int(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_ivar(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_kw(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_kwrest_param(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_label(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_label_end(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_lambda(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_lbrace(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_lbracket(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_lparen(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_magic_comment(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_massign(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_method_add_arg(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_method_add_block(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_mlhs_add(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_mlhs_add_post(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_mlhs_add_star(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_mlhs_new(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_mlhs_paren(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_module(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_mrhs_add(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_mrhs_add_star(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_mrhs_new(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_mrhs_new_from_args(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_next(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_nl(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_nokw_param(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_op(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_opassign(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_operator_ambiguous(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_param_error(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_params(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_paren(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_parse_error(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_period(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_program(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_qsymbols_add(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_qsymbols_beg(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_qsymbols_new(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_qwords_add(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_qwords_beg(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_qwords_new(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_rational(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_rbrace(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_rbracket(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_redo(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_regexp_add(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_regexp_beg(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_regexp_end(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_regexp_literal(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_regexp_new(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_rescue(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_rescue_mod(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_rest_param(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_retry(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_return(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_return0(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_rparen(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_sclass(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_semicolon(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_sp(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_stmts_add(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_stmts_new(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_string_add(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_string_concat(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_string_content(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_string_dvar(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_string_embexpr(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_string_literal(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_super(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_symbeg(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_symbol(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_symbol_literal(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_symbols_add(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_symbols_beg(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_symbols_new(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_tlambda(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_tlambeg(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_top_const_field(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_top_const_ref(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_tstring_beg(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_tstring_content(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_tstring_end(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_unary(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_undef(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_unless(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_unless_mod(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_until(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_until_mod(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_var_alias(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_var_field(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_var_ref(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_vcall(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_void_stmt(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_when(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_while(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_while_mod(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_word_add(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_word_new(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_words_add(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_words_beg(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_words_new(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#26
  def on_words_sep(value); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_xstring_add(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_xstring_literal(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_xstring_new(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_yield(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_yield0(*args); end

  # source://yarp//lib/yarp/ripper_compat.rb#20
  def on_zsuper(*args); end
end

# This class mirrors the ::Ripper::SexpBuilderPP subclass of ::Ripper that
# returns the same values as ::Ripper::SexpBuilder except with a couple of
# niceties that flatten linked lists into arrays.
#
# source://yarp//lib/yarp/ripper_compat.rb#35
class YARP::RipperCompat::SexpBuilderPP < ::YARP::RipperCompat::SexpBuilder
  private

  # source://yarp//lib/yarp/ripper_compat.rb#38
  def _dispatch_event_new; end

  # source://yarp//lib/yarp/ripper_compat.rb#42
  def _dispatch_event_push(list, item); end

  # source://yarp//lib/yarp/ripper_compat.rb#42
  def on_args_add(list, item); end

  # source://yarp//lib/yarp/ripper_compat.rb#38
  def on_args_new; end

  # source://yarp//lib/yarp/ripper_compat.rb#42
  def on_mlhs_add(list, item); end

  # source://yarp//lib/yarp/ripper_compat.rb#38
  def on_mlhs_new; end

  # source://yarp//lib/yarp/ripper_compat.rb#42
  def on_mrhs_add(list, item); end

  # source://yarp//lib/yarp/ripper_compat.rb#38
  def on_mrhs_new; end

  # source://yarp//lib/yarp/ripper_compat.rb#42
  def on_qsymbols_add(list, item); end

  # source://yarp//lib/yarp/ripper_compat.rb#38
  def on_qsymbols_new; end

  # source://yarp//lib/yarp/ripper_compat.rb#42
  def on_qwords_add(list, item); end

  # source://yarp//lib/yarp/ripper_compat.rb#38
  def on_qwords_new; end

  # source://yarp//lib/yarp/ripper_compat.rb#42
  def on_regexp_add(list, item); end

  # source://yarp//lib/yarp/ripper_compat.rb#38
  def on_regexp_new; end

  # source://yarp//lib/yarp/ripper_compat.rb#42
  def on_stmts_add(list, item); end

  # source://yarp//lib/yarp/ripper_compat.rb#38
  def on_stmts_new; end

  # source://yarp//lib/yarp/ripper_compat.rb#42
  def on_string_add(list, item); end

  # source://yarp//lib/yarp/ripper_compat.rb#42
  def on_symbols_add(list, item); end

  # source://yarp//lib/yarp/ripper_compat.rb#38
  def on_symbols_new; end

  # source://yarp//lib/yarp/ripper_compat.rb#42
  def on_word_add(list, item); end

  # source://yarp//lib/yarp/ripper_compat.rb#38
  def on_word_new; end

  # source://yarp//lib/yarp/ripper_compat.rb#42
  def on_words_add(list, item); end

  # source://yarp//lib/yarp/ripper_compat.rb#38
  def on_words_new; end

  # source://yarp//lib/yarp/ripper_compat.rb#42
  def on_xstring_add(list, item); end

  # source://yarp//lib/yarp/ripper_compat.rb#38
  def on_xstring_new; end
end

# Represents the `self` keyword.
#
#     self
#     ^^^^
#
# source://yarp//lib/yarp/node.rb#11205
class YARP::SelfNode < ::YARP::Node
  # def initialize: (location: Location) -> void
  #
  # @return [SelfNode] a new instance of SelfNode
  #
  # source://yarp//lib/yarp/node.rb#11207
  def initialize(location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#11212
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#11217
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#11227
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#11222
  def compact_child_nodes; end

  # def copy: (**params) -> SelfNode
  #
  # source://yarp//lib/yarp/node.rb#11232
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#11217
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#11242
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#11254
  def human; end

  # source://yarp//lib/yarp/node.rb#11246
  def inspect(inspector = T.unsafe(nil)); end
end

# source://yarp//lib/yarp/serialize.rb#22
module YARP::Serialize
  class << self
    # source://yarp//lib/yarp/serialize.rb#27
    def load(input, serialized); end

    # source://yarp//lib/yarp/serialize.rb#37
    def load_tokens(source, serialized); end
  end
end

# source://yarp//lib/yarp/serialize.rb#41
class YARP::Serialize::Loader
  # @return [Loader] a new instance of Loader
  #
  # source://yarp//lib/yarp/serialize.rb#45
  def initialize(source, serialized); end

  # Returns the value of attribute constant_pool.
  #
  # source://yarp//lib/yarp/serialize.rb#43
  def constant_pool; end

  # Returns the value of attribute constant_pool_offset.
  #
  # source://yarp//lib/yarp/serialize.rb#43
  def constant_pool_offset; end

  # Returns the value of attribute encoding.
  #
  # source://yarp//lib/yarp/serialize.rb#42
  def encoding; end

  # Returns the value of attribute input.
  #
  # source://yarp//lib/yarp/serialize.rb#42
  def input; end

  # Returns the value of attribute io.
  #
  # source://yarp//lib/yarp/serialize.rb#42
  def io; end

  # source://yarp//lib/yarp/serialize.rb#59
  def load_encoding; end

  # source://yarp//lib/yarp/serialize.rb#63
  def load_metadata; end

  # source://yarp//lib/yarp/serialize.rb#96
  def load_nodes; end

  # source://yarp//lib/yarp/serialize.rb#111
  def load_result; end

  # source://yarp//lib/yarp/serialize.rb#70
  def load_tokens; end

  # source://yarp//lib/yarp/serialize.rb#83
  def load_tokens_result; end

  # Returns the value of attribute serialized.
  #
  # source://yarp//lib/yarp/serialize.rb#42
  def serialized; end

  # Returns the value of attribute source.
  #
  # source://yarp//lib/yarp/serialize.rb#43
  def source; end

  private

  # source://yarp//lib/yarp/serialize.rb#168
  def load_constant(index); end

  # source://yarp//lib/yarp/serialize.rb#145
  def load_embedded_string; end

  # source://yarp//lib/yarp/serialize.rb#160
  def load_location; end

  # source://yarp//lib/yarp/serialize.rb#198
  def load_node; end

  # source://yarp//lib/yarp/serialize.rb#193
  def load_optional_constant; end

  # source://yarp//lib/yarp/serialize.rb#164
  def load_optional_location; end

  # source://yarp//lib/yarp/serialize.rb#138
  def load_optional_node; end

  # source://yarp//lib/yarp/serialize.rb#189
  def load_required_constant; end

  # source://yarp//lib/yarp/serialize.rb#134
  def load_serialized_length; end

  # source://yarp//lib/yarp/serialize.rb#149
  def load_string; end

  # variable-length integer using https://en.wikipedia.org/wiki/LEB128
  # This is also what protobuf uses: https://protobuf.dev/programming-guides/encoding/#varints
  #
  # source://yarp//lib/yarp/serialize.rb#120
  def load_varint; end
end

# source://yarp//lib/yarp/serialize.rb#23
YARP::Serialize::MAJOR_VERSION = T.let(T.unsafe(nil), Integer)

# source://yarp//lib/yarp/serialize.rb#24
YARP::Serialize::MINOR_VERSION = T.let(T.unsafe(nil), Integer)

# source://yarp//lib/yarp/serialize.rb#25
YARP::Serialize::PATCH_VERSION = T.let(T.unsafe(nil), Integer)

# source://yarp//lib/yarp/serialize.rb#490
YARP::Serialize::TOKEN_TYPES = T.let(T.unsafe(nil), Array)

# Represents a singleton class declaration involving the `class` keyword.
#
#     class << self end
#     ^^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#11263
class YARP::SingletonClassNode < ::YARP::Node
  # def initialize: (locals: Array[Symbol], class_keyword_loc: Location, operator_loc: Location, expression: Node, body: Node?, end_keyword_loc: Location, location: Location) -> void
  #
  # @return [SingletonClassNode] a new instance of SingletonClassNode
  #
  # source://yarp//lib/yarp/node.rb#11283
  def initialize(locals, class_keyword_loc, operator_loc, expression, body, end_keyword_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#11294
  def accept(visitor); end

  # attr_reader body: Node?
  #
  # source://yarp//lib/yarp/node.rb#11277
  def body; end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#11299
  def child_nodes; end

  # def class_keyword: () -> String
  #
  # source://yarp//lib/yarp/node.rb#11338
  def class_keyword; end

  # attr_reader class_keyword_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#11268
  def class_keyword_loc; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#11312
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#11304
  def compact_child_nodes; end

  # def copy: (**params) -> SingletonClassNode
  #
  # source://yarp//lib/yarp/node.rb#11317
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#11299
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#11333
  def deconstruct_keys(keys); end

  # def end_keyword: () -> String
  #
  # source://yarp//lib/yarp/node.rb#11348
  def end_keyword; end

  # attr_reader end_keyword_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#11280
  def end_keyword_loc; end

  # attr_reader expression: Node
  #
  # source://yarp//lib/yarp/node.rb#11274
  def expression; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#11372
  def human; end

  # source://yarp//lib/yarp/node.rb#11352
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader locals: Array[Symbol]
  #
  # source://yarp//lib/yarp/node.rb#11265
  def locals; end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#11343
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#11271
  def operator_loc; end
end

# This represents a source of Ruby code that has been parsed. It is used in
# conjunction with locations to allow them to resolve line numbers and source
# ranges.
#
# source://yarp//lib/yarp.rb#7
class YARP::Source
  # @return [Source] a new instance of Source
  #
  # source://yarp//lib/yarp.rb#10
  def initialize(source, offsets = T.unsafe(nil)); end

  # source://yarp//lib/yarp.rb#27
  def column(value); end

  # source://yarp//lib/yarp.rb#19
  def line(value); end

  # source://yarp//lib/yarp.rb#23
  def line_offset(value); end

  # Returns the value of attribute offsets.
  #
  # source://yarp//lib/yarp.rb#8
  def offsets; end

  # source://yarp//lib/yarp.rb#15
  def slice(offset, length); end

  # Returns the value of attribute source.
  #
  # source://yarp//lib/yarp.rb#8
  def source; end

  private

  # source://yarp//lib/yarp.rb#33
  def compute_offsets(code); end
end

# Represents the use of the `__ENCODING__` keyword.
#
#     __ENCODING__
#     ^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#11381
class YARP::SourceEncodingNode < ::YARP::Node
  # def initialize: (location: Location) -> void
  #
  # @return [SourceEncodingNode] a new instance of SourceEncodingNode
  #
  # source://yarp//lib/yarp/node.rb#11383
  def initialize(location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#11388
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#11393
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#11403
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#11398
  def compact_child_nodes; end

  # def copy: (**params) -> SourceEncodingNode
  #
  # source://yarp//lib/yarp/node.rb#11408
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#11393
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#11418
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#11430
  def human; end

  # source://yarp//lib/yarp/node.rb#11422
  def inspect(inspector = T.unsafe(nil)); end
end

# Represents the use of the `__FILE__` keyword.
#
#     __FILE__
#     ^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#11439
class YARP::SourceFileNode < ::YARP::Node
  # def initialize: (filepath: String, location: Location) -> void
  #
  # @return [SourceFileNode] a new instance of SourceFileNode
  #
  # source://yarp//lib/yarp/node.rb#11444
  def initialize(filepath, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#11450
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#11455
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#11465
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#11460
  def compact_child_nodes; end

  # def copy: (**params) -> SourceFileNode
  #
  # source://yarp//lib/yarp/node.rb#11470
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#11455
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#11481
  def deconstruct_keys(keys); end

  # attr_reader filepath: String
  #
  # source://yarp//lib/yarp/node.rb#11441
  def filepath; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#11494
  def human; end

  # source://yarp//lib/yarp/node.rb#11485
  def inspect(inspector = T.unsafe(nil)); end
end

# Represents the use of the `__LINE__` keyword.
#
#     __LINE__
#     ^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#11503
class YARP::SourceLineNode < ::YARP::Node
  # def initialize: (location: Location) -> void
  #
  # @return [SourceLineNode] a new instance of SourceLineNode
  #
  # source://yarp//lib/yarp/node.rb#11505
  def initialize(location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#11510
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#11515
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#11525
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#11520
  def compact_child_nodes; end

  # def copy: (**params) -> SourceLineNode
  #
  # source://yarp//lib/yarp/node.rb#11530
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#11515
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#11540
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#11552
  def human; end

  # source://yarp//lib/yarp/node.rb#11544
  def inspect(inspector = T.unsafe(nil)); end
end

# Represents the use of the splat operator.
#
#     [*a]
#      ^^
#
# source://yarp//lib/yarp/node.rb#11561
class YARP::SplatNode < ::YARP::Node
  # def initialize: (operator_loc: Location, expression: Node?, location: Location) -> void
  #
  # @return [SplatNode] a new instance of SplatNode
  #
  # source://yarp//lib/yarp/node.rb#11569
  def initialize(operator_loc, expression, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#11576
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#11581
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#11593
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#11586
  def compact_child_nodes; end

  # def copy: (**params) -> SplatNode
  #
  # source://yarp//lib/yarp/node.rb#11598
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#11581
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#11610
  def deconstruct_keys(keys); end

  # attr_reader expression: Node?
  #
  # source://yarp//lib/yarp/node.rb#11566
  def expression; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#11634
  def human; end

  # source://yarp//lib/yarp/node.rb#11619
  def inspect(inspector = T.unsafe(nil)); end

  # def operator: () -> String
  #
  # source://yarp//lib/yarp/node.rb#11615
  def operator; end

  # attr_reader operator_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#11563
  def operator_loc; end
end

# Represents a set of statements contained within some scope.
#
#     foo; bar; baz
#     ^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#11643
class YARP::StatementsNode < ::YARP::Node
  # def initialize: (body: Array[Node], location: Location) -> void
  #
  # @return [StatementsNode] a new instance of StatementsNode
  #
  # source://yarp//lib/yarp/node.rb#11648
  def initialize(body, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#11654
  def accept(visitor); end

  # attr_reader body: Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#11645
  def body; end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#11659
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#11669
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#11664
  def compact_child_nodes; end

  # def copy: (**params) -> StatementsNode
  #
  # source://yarp//lib/yarp/node.rb#11674
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#11659
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#11685
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#11698
  def human; end

  # source://yarp//lib/yarp/node.rb#11689
  def inspect(inspector = T.unsafe(nil)); end
end

# Represents the use of compile-time string concatenation.
#
#     "foo" "bar"
#     ^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#11707
class YARP::StringConcatNode < ::YARP::Node
  # def initialize: (left: Node, right: Node, location: Location) -> void
  #
  # @return [StringConcatNode] a new instance of StringConcatNode
  #
  # source://yarp//lib/yarp/node.rb#11715
  def initialize(left, right, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#11722
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#11727
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#11737
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#11732
  def compact_child_nodes; end

  # def copy: (**params) -> StringConcatNode
  #
  # source://yarp//lib/yarp/node.rb#11742
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#11727
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#11754
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#11770
  def human; end

  # source://yarp//lib/yarp/node.rb#11758
  def inspect(inspector = T.unsafe(nil)); end

  # attr_reader left: Node
  #
  # source://yarp//lib/yarp/node.rb#11709
  def left; end

  # attr_reader right: Node
  #
  # source://yarp//lib/yarp/node.rb#11712
  def right; end
end

# source://yarp//lib/yarp/node.rb#12953
module YARP::StringFlags; end

# frozen by virtue of a frozen_string_literal comment
#
# source://yarp//lib/yarp/node.rb#12955
YARP::StringFlags::FROZEN = T.let(T.unsafe(nil), Integer)

# Represents a string literal, a string contained within a `%w` list, or
# plain string content within an interpolated string.
#
#     "foo"
#     ^^^^^
#
#     %w[foo]
#        ^^^
#
#     "foo #{bar} baz"
#      ^^^^      ^^^^
#
# source://yarp//lib/yarp/node.rb#11786
class YARP::StringNode < ::YARP::Node
  # def initialize: (flags: Integer, opening_loc: Location?, content_loc: Location, closing_loc: Location?, unescaped: String, location: Location) -> void
  #
  # @return [StringNode] a new instance of StringNode
  #
  # source://yarp//lib/yarp/node.rb#11803
  def initialize(flags, opening_loc, content_loc, closing_loc, unescaped, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#11813
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#11818
  def child_nodes; end

  # def closing: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#11868
  def closing; end

  # attr_reader closing_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#11797
  def closing_loc; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#11828
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#11823
  def compact_child_nodes; end

  # def content: () -> String
  #
  # source://yarp//lib/yarp/node.rb#11863
  def content; end

  # attr_reader content_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#11794
  def content_loc; end

  # def copy: (**params) -> StringNode
  #
  # source://yarp//lib/yarp/node.rb#11833
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#11818
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#11848
  def deconstruct_keys(keys); end

  # def frozen?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#11853
  def frozen?; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#11886
  def human; end

  # source://yarp//lib/yarp/node.rb#11872
  def inspect(inspector = T.unsafe(nil)); end

  # def opening: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#11858
  def opening; end

  # attr_reader opening_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#11791
  def opening_loc; end

  # attr_reader unescaped: String
  #
  # source://yarp//lib/yarp/node.rb#11800
  def unescaped; end

  private

  # Returns the value of attribute flags.
  #
  # source://yarp//lib/yarp/node.rb#11788
  def flags; end
end

# Represents the use of the `super` keyword with parentheses or arguments.
#
#     super()
#     ^^^^^^^
#
#     super foo, bar
#     ^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#11898
class YARP::SuperNode < ::YARP::Node
  # def initialize: (keyword_loc: Location, lparen_loc: Location?, arguments: ArgumentsNode?, rparen_loc: Location?, block: BlockNode?, location: Location) -> void
  #
  # @return [SuperNode] a new instance of SuperNode
  #
  # source://yarp//lib/yarp/node.rb#11915
  def initialize(keyword_loc, lparen_loc, arguments, rparen_loc, block, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#11925
  def accept(visitor); end

  # attr_reader arguments: ArgumentsNode?
  #
  # source://yarp//lib/yarp/node.rb#11906
  def arguments; end

  # attr_reader block: BlockNode?
  #
  # source://yarp//lib/yarp/node.rb#11912
  def block; end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#11930
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#11943
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#11935
  def compact_child_nodes; end

  # def copy: (**params) -> SuperNode
  #
  # source://yarp//lib/yarp/node.rb#11948
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#11930
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#11963
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#12005
  def human; end

  # source://yarp//lib/yarp/node.rb#11982
  def inspect(inspector = T.unsafe(nil)); end

  # def keyword: () -> String
  #
  # source://yarp//lib/yarp/node.rb#11968
  def keyword; end

  # attr_reader keyword_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#11900
  def keyword_loc; end

  # def lparen: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#11973
  def lparen; end

  # attr_reader lparen_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#11903
  def lparen_loc; end

  # def rparen: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#11978
  def rparen; end

  # attr_reader rparen_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#11909
  def rparen_loc; end
end

# Represents a symbol literal or a symbol contained within a `%i` list.
#
#     :foo
#     ^^^^
#
#     %i[foo]
#        ^^^
#
# source://yarp//lib/yarp/node.rb#12017
class YARP::SymbolNode < ::YARP::Node
  # def initialize: (opening_loc: Location?, value_loc: Location?, closing_loc: Location?, unescaped: String, location: Location) -> void
  #
  # @return [SymbolNode] a new instance of SymbolNode
  #
  # source://yarp//lib/yarp/node.rb#12031
  def initialize(opening_loc, value_loc, closing_loc, unescaped, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#12040
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#12045
  def child_nodes; end

  # def closing: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#12089
  def closing; end

  # attr_reader closing_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#12025
  def closing_loc; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#12055
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#12050
  def compact_child_nodes; end

  # def copy: (**params) -> SymbolNode
  #
  # source://yarp//lib/yarp/node.rb#12060
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#12045
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#12074
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#12105
  def human; end

  # source://yarp//lib/yarp/node.rb#12093
  def inspect(inspector = T.unsafe(nil)); end

  # def opening: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#12079
  def opening; end

  # attr_reader opening_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#12019
  def opening_loc; end

  # attr_reader unescaped: String
  #
  # source://yarp//lib/yarp/node.rb#12028
  def unescaped; end

  # def value: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#12084
  def value; end

  # attr_reader value_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#12022
  def value_loc; end
end

# This represents a token from the Ruby source.
#
# source://yarp//lib/yarp.rb#254
class YARP::Token
  # @return [Token] a new instance of Token
  #
  # source://yarp//lib/yarp.rb#257
  def initialize(type, value, location); end

  # source://yarp//lib/yarp.rb#281
  def ==(other); end

  # source://yarp//lib/yarp.rb#263
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://yarp//lib/yarp.rb#255
  def location; end

  # source://yarp//lib/yarp.rb#267
  def pretty_print(q); end

  # Returns the value of attribute type.
  #
  # source://yarp//lib/yarp.rb#255
  def type; end

  # Returns the value of attribute value.
  #
  # source://yarp//lib/yarp.rb#255
  def value; end
end

# Represents the use of the literal `true` keyword.
#
#     true
#     ^^^^
#
# source://yarp//lib/yarp/node.rb#12114
class YARP::TrueNode < ::YARP::Node
  # def initialize: (location: Location) -> void
  #
  # @return [TrueNode] a new instance of TrueNode
  #
  # source://yarp//lib/yarp/node.rb#12116
  def initialize(location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#12121
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#12126
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#12136
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#12131
  def compact_child_nodes; end

  # def copy: (**params) -> TrueNode
  #
  # source://yarp//lib/yarp/node.rb#12141
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#12126
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#12151
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#12163
  def human; end

  # source://yarp//lib/yarp/node.rb#12155
  def inspect(inspector = T.unsafe(nil)); end
end

# Represents the use of the `undef` keyword.
#
#     undef :foo, :bar, :baz
#     ^^^^^^^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#12172
class YARP::UndefNode < ::YARP::Node
  # def initialize: (names: Array[Node], keyword_loc: Location, location: Location) -> void
  #
  # @return [UndefNode] a new instance of UndefNode
  #
  # source://yarp//lib/yarp/node.rb#12180
  def initialize(names, keyword_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#12187
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#12192
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#12202
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#12197
  def compact_child_nodes; end

  # def copy: (**params) -> UndefNode
  #
  # source://yarp//lib/yarp/node.rb#12207
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#12192
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#12219
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#12238
  def human; end

  # source://yarp//lib/yarp/node.rb#12228
  def inspect(inspector = T.unsafe(nil)); end

  # def keyword: () -> String
  #
  # source://yarp//lib/yarp/node.rb#12224
  def keyword; end

  # attr_reader keyword_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#12177
  def keyword_loc; end

  # attr_reader names: Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#12174
  def names; end
end

# Represents the use of the `unless` keyword, either in the block form or the modifier form.
#
#     bar unless foo
#     ^^^^^^^^^^^^^^
#
#     unless foo then bar end
#     ^^^^^^^^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#12250
class YARP::UnlessNode < ::YARP::Node
  # def initialize: (keyword_loc: Location, predicate: Node, statements: StatementsNode?, consequent: ElseNode?, end_keyword_loc: Location?, location: Location) -> void
  #
  # @return [UnlessNode] a new instance of UnlessNode
  #
  # source://yarp//lib/yarp/node.rb#12267
  def initialize(keyword_loc, predicate, statements, consequent, end_keyword_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#12277
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#12286
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#12300
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#12291
  def compact_child_nodes; end

  # attr_reader consequent: ElseNode?
  #
  # source://yarp//lib/yarp/node.rb#12261
  def consequent; end

  # def copy: (**params) -> UnlessNode
  #
  # source://yarp//lib/yarp/node.rb#12305
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#12286
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#12320
  def deconstruct_keys(keys); end

  # def end_keyword: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#12330
  def end_keyword; end

  # attr_reader end_keyword_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#12264
  def end_keyword_loc; end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#12358
  def human; end

  # source://yarp//lib/yarp/node.rb#12334
  def inspect(inspector = T.unsafe(nil)); end

  # def keyword: () -> String
  #
  # source://yarp//lib/yarp/node.rb#12325
  def keyword; end

  # attr_reader keyword_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#12252
  def keyword_loc; end

  # attr_reader predicate: Node
  #
  # source://yarp//lib/yarp/node.rb#12255
  def predicate; end

  # source://yarp//lib/yarp/node.rb#12281
  def set_newline_flag(newline_marked); end

  # attr_reader statements: StatementsNode?
  #
  # source://yarp//lib/yarp/node.rb#12258
  def statements; end
end

# Represents the use of the `until` keyword, either in the block form or the modifier form.
#
#     bar until foo
#     ^^^^^^^^^^^^^
#
#     until foo do bar end
#     ^^^^^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#12370
class YARP::UntilNode < ::YARP::Node
  # def initialize: (keyword_loc: Location, closing_loc: Location?, predicate: Node, statements: StatementsNode?, flags: Integer, location: Location) -> void
  #
  # @return [UntilNode] a new instance of UntilNode
  #
  # source://yarp//lib/yarp/node.rb#12387
  def initialize(keyword_loc, closing_loc, predicate, statements, flags, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#12397
  def accept(visitor); end

  # def begin_modifier?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#12454
  def begin_modifier?; end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#12406
  def child_nodes; end

  # def closing: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#12449
  def closing; end

  # attr_reader closing_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#12375
  def closing_loc; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#12419
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#12411
  def compact_child_nodes; end

  # def copy: (**params) -> UntilNode
  #
  # source://yarp//lib/yarp/node.rb#12424
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#12406
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#12439
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#12478
  def human; end

  # source://yarp//lib/yarp/node.rb#12458
  def inspect(inspector = T.unsafe(nil)); end

  # def keyword: () -> String
  #
  # source://yarp//lib/yarp/node.rb#12444
  def keyword; end

  # attr_reader keyword_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#12372
  def keyword_loc; end

  # attr_reader predicate: Node
  #
  # source://yarp//lib/yarp/node.rb#12378
  def predicate; end

  # source://yarp//lib/yarp/node.rb#12401
  def set_newline_flag(newline_marked); end

  # attr_reader statements: StatementsNode?
  #
  # source://yarp//lib/yarp/node.rb#12381
  def statements; end

  private

  # Returns the value of attribute flags.
  #
  # source://yarp//lib/yarp/node.rb#12384
  def flags; end
end

# The version constant is set by reading the result of calling yp_version.
YARP::VERSION = T.let(T.unsafe(nil), String)

# source://yarp//lib/yarp.rb#223
class YARP::Visitor < ::YARP::BasicVisitor
  # Visit a AliasGlobalVariableNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_alias_global_variable_node(node); end

  # Visit a AliasMethodNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_alias_method_node(node); end

  # Visit a AlternationPatternNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_alternation_pattern_node(node); end

  # Visit a AndNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_and_node(node); end

  # Visit a ArgumentsNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_arguments_node(node); end

  # Visit a ArrayNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_array_node(node); end

  # Visit a ArrayPatternNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_array_pattern_node(node); end

  # Visit a AssocNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_assoc_node(node); end

  # Visit a AssocSplatNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_assoc_splat_node(node); end

  # Visit a BackReferenceReadNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_back_reference_read_node(node); end

  # Visit a BeginNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_begin_node(node); end

  # Visit a BlockArgumentNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_block_argument_node(node); end

  # Visit a BlockLocalVariableNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_block_local_variable_node(node); end

  # Visit a BlockNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_block_node(node); end

  # Visit a BlockParameterNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_block_parameter_node(node); end

  # Visit a BlockParametersNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_block_parameters_node(node); end

  # Visit a BreakNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_break_node(node); end

  # Visit a CallAndWriteNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_call_and_write_node(node); end

  # Visit a CallNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_call_node(node); end

  # Visit a CallOperatorWriteNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_call_operator_write_node(node); end

  # Visit a CallOrWriteNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_call_or_write_node(node); end

  # Visit a CapturePatternNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_capture_pattern_node(node); end

  # Visit a CaseNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_case_node(node); end

  # Visit a ClassNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_class_node(node); end

  # Visit a ClassVariableAndWriteNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_class_variable_and_write_node(node); end

  # Visit a ClassVariableOperatorWriteNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_class_variable_operator_write_node(node); end

  # Visit a ClassVariableOrWriteNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_class_variable_or_write_node(node); end

  # Visit a ClassVariableReadNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_class_variable_read_node(node); end

  # Visit a ClassVariableTargetNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_class_variable_target_node(node); end

  # Visit a ClassVariableWriteNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_class_variable_write_node(node); end

  # Visit a ConstantAndWriteNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_constant_and_write_node(node); end

  # Visit a ConstantOperatorWriteNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_constant_operator_write_node(node); end

  # Visit a ConstantOrWriteNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_constant_or_write_node(node); end

  # Visit a ConstantPathAndWriteNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_constant_path_and_write_node(node); end

  # Visit a ConstantPathNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_constant_path_node(node); end

  # Visit a ConstantPathOperatorWriteNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_constant_path_operator_write_node(node); end

  # Visit a ConstantPathOrWriteNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_constant_path_or_write_node(node); end

  # Visit a ConstantPathTargetNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_constant_path_target_node(node); end

  # Visit a ConstantPathWriteNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_constant_path_write_node(node); end

  # Visit a ConstantReadNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_constant_read_node(node); end

  # Visit a ConstantTargetNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_constant_target_node(node); end

  # Visit a ConstantWriteNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_constant_write_node(node); end

  # Visit a DefNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_def_node(node); end

  # Visit a DefinedNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_defined_node(node); end

  # Visit a ElseNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_else_node(node); end

  # Visit a EmbeddedStatementsNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_embedded_statements_node(node); end

  # Visit a EmbeddedVariableNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_embedded_variable_node(node); end

  # Visit a EnsureNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_ensure_node(node); end

  # Visit a FalseNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_false_node(node); end

  # Visit a FindPatternNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_find_pattern_node(node); end

  # Visit a FlipFlopNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_flip_flop_node(node); end

  # Visit a FloatNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_float_node(node); end

  # Visit a ForNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_for_node(node); end

  # Visit a ForwardingArgumentsNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_forwarding_arguments_node(node); end

  # Visit a ForwardingParameterNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_forwarding_parameter_node(node); end

  # Visit a ForwardingSuperNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_forwarding_super_node(node); end

  # Visit a GlobalVariableAndWriteNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_global_variable_and_write_node(node); end

  # Visit a GlobalVariableOperatorWriteNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_global_variable_operator_write_node(node); end

  # Visit a GlobalVariableOrWriteNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_global_variable_or_write_node(node); end

  # Visit a GlobalVariableReadNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_global_variable_read_node(node); end

  # Visit a GlobalVariableTargetNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_global_variable_target_node(node); end

  # Visit a GlobalVariableWriteNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_global_variable_write_node(node); end

  # Visit a HashNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_hash_node(node); end

  # Visit a HashPatternNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_hash_pattern_node(node); end

  # Visit a IfNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_if_node(node); end

  # Visit a ImaginaryNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_imaginary_node(node); end

  # Visit a ImplicitNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_implicit_node(node); end

  # Visit a InNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_in_node(node); end

  # Visit a InstanceVariableAndWriteNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_instance_variable_and_write_node(node); end

  # Visit a InstanceVariableOperatorWriteNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_instance_variable_operator_write_node(node); end

  # Visit a InstanceVariableOrWriteNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_instance_variable_or_write_node(node); end

  # Visit a InstanceVariableReadNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_instance_variable_read_node(node); end

  # Visit a InstanceVariableTargetNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_instance_variable_target_node(node); end

  # Visit a InstanceVariableWriteNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_instance_variable_write_node(node); end

  # Visit a IntegerNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_integer_node(node); end

  # Visit a InterpolatedMatchLastLineNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_interpolated_match_last_line_node(node); end

  # Visit a InterpolatedRegularExpressionNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_interpolated_regular_expression_node(node); end

  # Visit a InterpolatedStringNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_interpolated_string_node(node); end

  # Visit a InterpolatedSymbolNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_interpolated_symbol_node(node); end

  # Visit a InterpolatedXStringNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_interpolated_x_string_node(node); end

  # Visit a KeywordHashNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_keyword_hash_node(node); end

  # Visit a KeywordParameterNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_keyword_parameter_node(node); end

  # Visit a KeywordRestParameterNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_keyword_rest_parameter_node(node); end

  # Visit a LambdaNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_lambda_node(node); end

  # Visit a LocalVariableAndWriteNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_local_variable_and_write_node(node); end

  # Visit a LocalVariableOperatorWriteNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_local_variable_operator_write_node(node); end

  # Visit a LocalVariableOrWriteNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_local_variable_or_write_node(node); end

  # Visit a LocalVariableReadNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_local_variable_read_node(node); end

  # Visit a LocalVariableTargetNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_local_variable_target_node(node); end

  # Visit a LocalVariableWriteNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_local_variable_write_node(node); end

  # Visit a MatchLastLineNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_match_last_line_node(node); end

  # Visit a MatchPredicateNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_match_predicate_node(node); end

  # Visit a MatchRequiredNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_match_required_node(node); end

  # Visit a MatchWriteNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_match_write_node(node); end

  # Visit a MissingNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_missing_node(node); end

  # Visit a ModuleNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_module_node(node); end

  # Visit a MultiTargetNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_multi_target_node(node); end

  # Visit a MultiWriteNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_multi_write_node(node); end

  # Visit a NextNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_next_node(node); end

  # Visit a NilNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_nil_node(node); end

  # Visit a NoKeywordsParameterNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_no_keywords_parameter_node(node); end

  # Visit a NumberedReferenceReadNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_numbered_reference_read_node(node); end

  # Visit a OptionalParameterNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_optional_parameter_node(node); end

  # Visit a OrNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_or_node(node); end

  # Visit a ParametersNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_parameters_node(node); end

  # Visit a ParenthesesNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_parentheses_node(node); end

  # Visit a PinnedExpressionNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_pinned_expression_node(node); end

  # Visit a PinnedVariableNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_pinned_variable_node(node); end

  # Visit a PostExecutionNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_post_execution_node(node); end

  # Visit a PreExecutionNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_pre_execution_node(node); end

  # Visit a ProgramNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_program_node(node); end

  # Visit a RangeNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_range_node(node); end

  # Visit a RationalNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_rational_node(node); end

  # Visit a RedoNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_redo_node(node); end

  # Visit a RegularExpressionNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_regular_expression_node(node); end

  # Visit a RequiredDestructuredParameterNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_required_destructured_parameter_node(node); end

  # Visit a RequiredParameterNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_required_parameter_node(node); end

  # Visit a RescueModifierNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_rescue_modifier_node(node); end

  # Visit a RescueNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_rescue_node(node); end

  # Visit a RestParameterNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_rest_parameter_node(node); end

  # Visit a RetryNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_retry_node(node); end

  # Visit a ReturnNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_return_node(node); end

  # Visit a SelfNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_self_node(node); end

  # Visit a SingletonClassNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_singleton_class_node(node); end

  # Visit a SourceEncodingNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_source_encoding_node(node); end

  # Visit a SourceFileNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_source_file_node(node); end

  # Visit a SourceLineNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_source_line_node(node); end

  # Visit a SplatNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_splat_node(node); end

  # Visit a StatementsNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_statements_node(node); end

  # Visit a StringConcatNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_string_concat_node(node); end

  # Visit a StringNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_string_node(node); end

  # Visit a SuperNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_super_node(node); end

  # Visit a SymbolNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_symbol_node(node); end

  # Visit a TrueNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_true_node(node); end

  # Visit a UndefNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_undef_node(node); end

  # Visit a UnlessNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_unless_node(node); end

  # Visit a UntilNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_until_node(node); end

  # Visit a WhenNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_when_node(node); end

  # Visit a WhileNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_while_node(node); end

  # Visit a XStringNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_x_string_node(node); end

  # Visit a YieldNode node
  #
  # source://yarp//lib/yarp.rb#218
  def visit_yield_node(node); end
end

# Represents the use of the `when` keyword within a case statement.
#
#     case true
#     when true
#     ^^^^^^^^^
#     end
#
# source://yarp//lib/yarp/node.rb#12489
class YARP::WhenNode < ::YARP::Node
  # def initialize: (keyword_loc: Location, conditions: Array[Node], statements: StatementsNode?, location: Location) -> void
  #
  # @return [WhenNode] a new instance of WhenNode
  #
  # source://yarp//lib/yarp/node.rb#12500
  def initialize(keyword_loc, conditions, statements, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#12508
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#12513
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#12526
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#12518
  def compact_child_nodes; end

  # attr_reader conditions: Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#12494
  def conditions; end

  # def copy: (**params) -> WhenNode
  #
  # source://yarp//lib/yarp/node.rb#12531
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#12513
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#12544
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#12569
  def human; end

  # source://yarp//lib/yarp/node.rb#12553
  def inspect(inspector = T.unsafe(nil)); end

  # def keyword: () -> String
  #
  # source://yarp//lib/yarp/node.rb#12549
  def keyword; end

  # attr_reader keyword_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#12491
  def keyword_loc; end

  # attr_reader statements: StatementsNode?
  #
  # source://yarp//lib/yarp/node.rb#12497
  def statements; end
end

# Represents the use of the `while` keyword, either in the block form or the modifier form.
#
#     bar while foo
#     ^^^^^^^^^^^^^
#
#     while foo do bar end
#     ^^^^^^^^^^^^^^^^^^^^
#
# source://yarp//lib/yarp/node.rb#12581
class YARP::WhileNode < ::YARP::Node
  # def initialize: (keyword_loc: Location, closing_loc: Location?, predicate: Node, statements: StatementsNode?, flags: Integer, location: Location) -> void
  #
  # @return [WhileNode] a new instance of WhileNode
  #
  # source://yarp//lib/yarp/node.rb#12598
  def initialize(keyword_loc, closing_loc, predicate, statements, flags, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#12608
  def accept(visitor); end

  # def begin_modifier?: () -> bool
  #
  # @return [Boolean]
  #
  # source://yarp//lib/yarp/node.rb#12665
  def begin_modifier?; end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#12617
  def child_nodes; end

  # def closing: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#12660
  def closing; end

  # attr_reader closing_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#12586
  def closing_loc; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#12630
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#12622
  def compact_child_nodes; end

  # def copy: (**params) -> WhileNode
  #
  # source://yarp//lib/yarp/node.rb#12635
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#12617
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#12650
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#12689
  def human; end

  # source://yarp//lib/yarp/node.rb#12669
  def inspect(inspector = T.unsafe(nil)); end

  # def keyword: () -> String
  #
  # source://yarp//lib/yarp/node.rb#12655
  def keyword; end

  # attr_reader keyword_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#12583
  def keyword_loc; end

  # attr_reader predicate: Node
  #
  # source://yarp//lib/yarp/node.rb#12589
  def predicate; end

  # source://yarp//lib/yarp/node.rb#12612
  def set_newline_flag(newline_marked); end

  # attr_reader statements: StatementsNode?
  #
  # source://yarp//lib/yarp/node.rb#12592
  def statements; end

  private

  # Returns the value of attribute flags.
  #
  # source://yarp//lib/yarp/node.rb#12595
  def flags; end
end

# Represents an xstring literal with no interpolation.
#
#     `foo`
#     ^^^^^
#
# source://yarp//lib/yarp/node.rb#12698
class YARP::XStringNode < ::YARP::Node
  # def initialize: (opening_loc: Location, content_loc: Location, closing_loc: Location, unescaped: String, location: Location) -> void
  #
  # @return [XStringNode] a new instance of XStringNode
  #
  # source://yarp//lib/yarp/node.rb#12712
  def initialize(opening_loc, content_loc, closing_loc, unescaped, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#12721
  def accept(visitor); end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#12726
  def child_nodes; end

  # def closing: () -> String
  #
  # source://yarp//lib/yarp/node.rb#12770
  def closing; end

  # attr_reader closing_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#12706
  def closing_loc; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#12736
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#12731
  def compact_child_nodes; end

  # def content: () -> String
  #
  # source://yarp//lib/yarp/node.rb#12765
  def content; end

  # attr_reader content_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#12703
  def content_loc; end

  # def copy: (**params) -> XStringNode
  #
  # source://yarp//lib/yarp/node.rb#12741
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#12726
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#12755
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#12786
  def human; end

  # source://yarp//lib/yarp/node.rb#12774
  def inspect(inspector = T.unsafe(nil)); end

  # def opening: () -> String
  #
  # source://yarp//lib/yarp/node.rb#12760
  def opening; end

  # attr_reader opening_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#12700
  def opening_loc; end

  # attr_reader unescaped: String
  #
  # source://yarp//lib/yarp/node.rb#12709
  def unescaped; end
end

# Represents the use of the `yield` keyword.
#
#     yield 1
#     ^^^^^^^
#
# source://yarp//lib/yarp/node.rb#12795
class YARP::YieldNode < ::YARP::Node
  # def initialize: (keyword_loc: Location, lparen_loc: Location?, arguments: ArgumentsNode?, rparen_loc: Location?, location: Location) -> void
  #
  # @return [YieldNode] a new instance of YieldNode
  #
  # source://yarp//lib/yarp/node.rb#12809
  def initialize(keyword_loc, lparen_loc, arguments, rparen_loc, location); end

  # def accept: (visitor: Visitor) -> void
  #
  # source://yarp//lib/yarp/node.rb#12818
  def accept(visitor); end

  # attr_reader arguments: ArgumentsNode?
  #
  # source://yarp//lib/yarp/node.rb#12803
  def arguments; end

  # def child_nodes: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#12823
  def child_nodes; end

  # def comment_targets: () -> Array[Node | Location]
  #
  # source://yarp//lib/yarp/node.rb#12835
  def comment_targets; end

  # def compact_child_nodes: () -> Array[Node]
  #
  # source://yarp//lib/yarp/node.rb#12828
  def compact_child_nodes; end

  # def copy: (**params) -> YieldNode
  #
  # source://yarp//lib/yarp/node.rb#12840
  def copy(**params); end

  # def child_nodes: () -> Array[nil | Node]
  # def deconstruct: () -> Array[nil | Node]
  #
  # source://yarp//lib/yarp/node.rb#12823
  def deconstruct; end

  # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
  #
  # source://yarp//lib/yarp/node.rb#12854
  def deconstruct_keys(keys); end

  # Returns a symbol representation of the type of node.
  #
  # def human: () -> Symbol
  #
  # source://yarp//lib/yarp/node.rb#12890
  def human; end

  # source://yarp//lib/yarp/node.rb#12873
  def inspect(inspector = T.unsafe(nil)); end

  # def keyword: () -> String
  #
  # source://yarp//lib/yarp/node.rb#12859
  def keyword; end

  # attr_reader keyword_loc: Location
  #
  # source://yarp//lib/yarp/node.rb#12797
  def keyword_loc; end

  # def lparen: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#12864
  def lparen; end

  # attr_reader lparen_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#12800
  def lparen_loc; end

  # def rparen: () -> String?
  #
  # source://yarp//lib/yarp/node.rb#12869
  def rparen; end

  # attr_reader rparen_loc: Location?
  #
  # source://yarp//lib/yarp/node.rb#12806
  def rparen_loc; end
end
