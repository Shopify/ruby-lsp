# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `json_rpc_handler` gem.
# Please instead update this file by running `bin/tapioca gem json_rpc_handler`.


# source://json_rpc_handler//lib/json_rpc_handler/version.rb#3
module JsonRpcHandler
  private

  # source://json_rpc_handler//lib/json_rpc_handler.rb#137
  def error_response(id:, error:); end

  # source://json_rpc_handler//lib/json_rpc_handler.rb#21
  def handle(request, &method_finder); end

  # source://json_rpc_handler//lib/json_rpc_handler.rb#49
  def handle_json(request_json, &method_finder); end

  # source://json_rpc_handler//lib/json_rpc_handler.rb#64
  def process_request(request, &method_finder); end

  # source://json_rpc_handler//lib/json_rpc_handler.rb#129
  def success_response(id:, result:); end

  # source://json_rpc_handler//lib/json_rpc_handler.rb#117
  def valid_id?(id); end

  # source://json_rpc_handler//lib/json_rpc_handler.rb#121
  def valid_method_name?(method); end

  # source://json_rpc_handler//lib/json_rpc_handler.rb#125
  def valid_params?(params); end

  # source://json_rpc_handler//lib/json_rpc_handler.rb#113
  def valid_version?(version); end

  class << self
    # source://json_rpc_handler//lib/json_rpc_handler.rb#137
    def error_response(id:, error:); end

    # source://json_rpc_handler//lib/json_rpc_handler.rb#21
    def handle(request, &method_finder); end

    # source://json_rpc_handler//lib/json_rpc_handler.rb#49
    def handle_json(request_json, &method_finder); end

    # source://json_rpc_handler//lib/json_rpc_handler.rb#64
    def process_request(request, &method_finder); end

    # source://json_rpc_handler//lib/json_rpc_handler.rb#129
    def success_response(id:, result:); end

    # @return [Boolean]
    #
    # source://json_rpc_handler//lib/json_rpc_handler.rb#117
    def valid_id?(id); end

    # @return [Boolean]
    #
    # source://json_rpc_handler//lib/json_rpc_handler.rb#121
    def valid_method_name?(method); end

    # @return [Boolean]
    #
    # source://json_rpc_handler//lib/json_rpc_handler.rb#125
    def valid_params?(params); end

    # @return [Boolean]
    #
    # source://json_rpc_handler//lib/json_rpc_handler.rb#113
    def valid_version?(version); end
  end
end

# source://json_rpc_handler//lib/json_rpc_handler.rb#11
class JsonRpcHandler::ErrorCode; end

# source://json_rpc_handler//lib/json_rpc_handler.rb#15
JsonRpcHandler::ErrorCode::InternalError = T.let(T.unsafe(nil), Integer)

# source://json_rpc_handler//lib/json_rpc_handler.rb#14
JsonRpcHandler::ErrorCode::InvalidParams = T.let(T.unsafe(nil), Integer)

# source://json_rpc_handler//lib/json_rpc_handler.rb#12
JsonRpcHandler::ErrorCode::InvalidRequest = T.let(T.unsafe(nil), Integer)

# source://json_rpc_handler//lib/json_rpc_handler.rb#13
JsonRpcHandler::ErrorCode::MethodNotFound = T.let(T.unsafe(nil), Integer)

# source://json_rpc_handler//lib/json_rpc_handler.rb#16
JsonRpcHandler::ErrorCode::ParseError = T.let(T.unsafe(nil), Integer)

# source://json_rpc_handler//lib/json_rpc_handler/version.rb#4
JsonRpcHandler::VERSION = T.let(T.unsafe(nil), String)

# source://json_rpc_handler//lib/json_rpc_handler.rb#6
class JsonRpcHandler::Version; end

# source://json_rpc_handler//lib/json_rpc_handler.rb#7
JsonRpcHandler::Version::V1_0 = T.let(T.unsafe(nil), String)

# source://json_rpc_handler//lib/json_rpc_handler.rb#8
JsonRpcHandler::Version::V2_0 = T.let(T.unsafe(nil), String)
